const V=Object.entries,et=Object.fromEntries,st="ENTRIES",L="KEYS",T="VALUES",_="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case T:return this.value();case L:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],nt=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const g=c[h],m=i*a,p=m-i;let l=o[m];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const v=g!==t[F],z=o[p+F]+ +v,A=o[p+F+1]+1,w=o[m+F]+1,j=o[m+F+1]=Math.min(z,A,w);j<l&&(l=j)}if(l>s)continue t}R(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,st)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return nt(this._tree,t,s)}get(t){const s=k(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=k(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new D(this,L)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,I(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=I(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},k=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return k(e.get(s),t.slice(s.length))},I=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;q(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&q(e.slice(0,-1),n,o)}},q=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],ut=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},it=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,M="or",$="and",rt="and_not",ct=(e,t)=>{e.includes(t)||e.push(t)},N=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,lt=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[M]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),N(n.terms,u)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);N(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[rt]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},dt=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},at=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},ft=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,lt),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},mt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(it),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:M,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},pt={combineWith:$,prefix:(e,t,s)=>t===s.length-1},Ft={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},_t={...Ft,...U},K=Symbol("*"),yt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},X=(e,t=M)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=ht[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},S=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],g=o.get(h);if(g==null)continue;let m=g.size;const p=e._avgFieldLength[h];for(const l of g.keys()){if(!e._documentIds.has(l)){ft(e,h,l,s),m-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=g.get(l),F=e._fieldLength.get(l)[h],v=dt(y,m,e._documentCount,F,p,r),z=n*a*f*v,A=d.get(l);if(A){A.score+=z,ct(A.terms,t);const w=G(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...J.weights,...i},h=e._index.get(t.term),g=S(e,t.term,t.term,1,h,o,u,d);let m,p;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(m)for(const[l,f]of m){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);S(e,t.term,l,F,f,o,u,d,g)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);S(e,t.term,l,F,f,o,u,d,g)}return g},Y=(e,t,s={})=>{if(t===K)return yt(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(g=>Y(e,g,a));return X(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(at(i)).map(a=>At(e,a,i));return X(c,i.combineWith)},Q=(e,t,s={})=>{const n=Y(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===K&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(P),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Q(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(P),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?_t:t.autoVacuum;this._options={...mt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...pt,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[g,m]of h._documentIds)h._idToShortId.set(m,g);for(const[g,m]of e){const p=new Map;for(const l of Object.keys(m)){let f=m[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(g,p)}return h},B=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},wt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),xt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),Z=(e,t,s={})=>{const n={};return Q(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),g=Number(a),m=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[g]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:g,index:h,display:m.map(l=>o.c.map(f=>B(f,l))).flat().filter(l=>l!==null)},r]);else{const l=m.map(f=>B(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:g,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=m.map(F=>B(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:g,...c&&{anchor:h},display:y},r])}}}),V(n).sort(([,o],[,u])=>"max"==="total"?wt(o,u):xt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=ut(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},tt=(e,t,s={})=>{const n=Ct(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},bt=et(V(JSON.parse("{\"/\":{\"documentCount\":1678,\"nextId\":1678,\"documentIds\":{\"0\":\"1\",\"1\":\"1#swagger文档空指针报错问题\",\"2\":\"1#给线程池里面线程添加名称的4种方式\",\"3\":\"1#docker-driver-failed-programming-external-connectivity-on-endpoint-xxx\",\"4\":\"1#configure-error-no-acceptable-c-compiler-found-in-path\",\"5\":\"1#当ssh连接linux系统时-出现-bash-fork无法分配问题\",\"6\":\"1#hikari的max-lifetime和mysql的wait-timeout\",\"7\":\"1#mysql出现you-can-t-specify-target-table-for-update-in-from-clause错误的解决方法\",\"8\":\"1#mqtt已连接无法订阅问题\",\"9\":\"1#类私有变量问题\",\"10\":\"1#jar启动-配置对象数组参数\",\"11\":\"1#jdk运行项目异常-module-java-base-does-not-opens-java-lang-to-unnamed-module-1ba9117e\",\"12\":\"1#grep显示附近行信息\",\"13\":\"1#查看log日志\",\"14\":\"1#mysql-date-sub函数\",\"15\":\"1#eclipse-mqtt-v5-消息id耗尽问题\",\"16\":\"1#nashorn无法直接执行invocable-invokefunction问题\",\"17\":\"1#bash-无法分配内存问题\",\"18\":\"1#hikari的idletimeout和maxlifetime的区别\",\"19\":\"1#查看进程-pid-端口号\",\"20\":\"1#springboot-多模块开发-不同模块之间的service注入的注意事项\",\"21\":\"1#jenkins-var-run-docker-sock-permission-denied\",\"22\":\"1#es启动失败\",\"23\":\"1#springboot-mysql-存入数据的时间比实际时间少一个小时\",\"24\":\"1#protected-可见性\",\"25\":\"1#springboot使用-serverendpoint无法依赖注入问题解决\",\"26\":\"1#jenkins-设置git-sshkey-凭证后-报错-no-ecdsa-host-key-is-known-for\",\"27\":\"1#关于gradle-gradlew-权限被拒绝\",\"28\":\"1#devtools热启动导致不同线程类变量被销毁\",\"29\":\"1#npm设置源\",\"30\":\"1#修改域名映射\",\"31\":\"1#解决启动类所在包组件装配失败问题\",\"32\":\"1#git-ssh-connect-to-host-github-com-port-22-connection-timed-out\",\"33\":\"1#docker拉取镜像失败-时间错误导致\",\"34\":\"1#mysql8连接失败public-key-retrieval-is-not-allowed\",\"35\":\"1#docker-compose\",\"36\":\"1#nginx请求体大小受限制\",\"37\":\"1#解决arm架构问题\",\"38\":\"1#lombook注解和-value同时使用问题\",\"39\":\"1#edge一直设置同步问题\",\"40\":\"1#spring-boot项目单元测试使用junit-使用idea运行时候发生报错-no-tests-found-for-given-includes\",\"41\":\"1#value注解设置值问题\",\"42\":\"1#网关应用报错\",\"43\":\"1#your-local-changes-to-the-following-files-would-be-overwritten-by-merge\",\"44\":\"1#pom-xml置灰\",\"45\":\"1#excel导出后打不开\",\"46\":\"1#ajax-xhr-请求、浏览器请求与重定向响应混合使用报错问题\",\"47\":\"1#maven打包报错问题\",\"48\":\"1#docker-无法解析域名问题\",\"49\":\"1#maven配置\",\"50\":\"1#docker启动报错\",\"51\":\"1#vue中参数解析问题\",\"52\":\"1#git-报错信息-openssl-ssl-read-connection-was-reset-errno-10054\",\"53\":\"1#windows中hyper-v和vm冲突问题\",\"54\":\"1#okhttp获取相应体内容报错\",\"55\":\"1#idea乱码问题\",\"56\":\"1#mysql出现unknown-collation-utf8mb4-0900-ai-ci-的解决方法\",\"57\":\"1#maven-plugin-unknown问题\",\"58\":\"1#autowired无法解决循环依赖\",\"59\":\"1#npm-install-报错问题\",\"60\":\"1@0\",\"61\":\"1@1\",\"62\":\"2\",\"63\":\"2#_20241010方向\",\"64\":\"3\",\"65\":\"3#待研究\",\"66\":\"3#go\",\"67\":\"3#web框架\",\"68\":\"3#orm框架\",\"69\":\"3#java\",\"70\":\"3#微服务\",\"71\":\"3#服务注册发现\",\"72\":\"3#消息队列\",\"73\":\"3#rpc服务调用、熔断限流\",\"74\":\"3#缓存\",\"75\":\"3#database\",\"76\":\"3#分布式事务\",\"77\":\"3#定时调度平台\",\"78\":\"3#流程引擎\",\"79\":\"3#文档\",\"80\":\"3#apm监控\",\"81\":\"3#大数据\",\"82\":\"3#开源项目\",\"83\":\"3#go-1\",\"84\":\"3#webflux\",\"85\":\"4\",\"86\":\"4#jetbrains\",\"87\":\"4#m1-vmware安装\",\"88\":\"5\",\"89\":\"5#服务器\",\"90\":\"5#mysql\",\"91\":\"5#rabbitmq\",\"92\":\"5#kafka\",\"93\":\"5#zookeeper\",\"94\":\"5#nacos\",\"95\":\"6\",\"96\":\"6#常用命令\",\"97\":\"7\",\"98\":\"7#raft\",\"99\":\"7#gossip\",\"100\":\"8\",\"101\":\"8#项目构建\",\"102\":\"8#模板使用\",\"103\":\"8#模板制作\",\"104\":\"8#asp-net项目启动\",\"105\":\"8#backgroundservice\",\"106\":\"8#配置\",\"107\":\"8#异步\",\"108\":\"8#mvc核心类\",\"109\":\"8#请求入口\",\"110\":\"8#待整理\",\"111\":\"8#过滤器\",\"112\":\"8#定时任务\",\"113\":\"8#线程通信\",\"114\":\"9\",\"115\":\"9#构建运行\",\"116\":\"9#语言结构\",\"117\":\"9#基础语法\",\"118\":\"9#数据类型\",\"119\":\"9#布尔型\",\"120\":\"9#数字类型\",\"121\":\"9#派生类型\",\"122\":\"9#变量\",\"123\":\"9#变量声明\",\"124\":\"9#多变量声明\",\"125\":\"9#值类型和引用类型\",\"126\":\"9#使用-赋值操作符\",\"127\":\"9#空白标识符在函数返回值时的使用\",\"128\":\"9#常量\",\"129\":\"9#iota\",\"130\":\"9#运算符\",\"131\":\"9#条件语句\",\"132\":\"9#循环语句\",\"133\":\"9#for循环\",\"134\":\"9#循环嵌套\",\"135\":\"9#goto\",\"136\":\"9#函数\",\"137\":\"9#go-init-函数\",\"138\":\"9#defer-和追踪\",\"139\":\"9#函数和接口\",\"140\":\"9#作用域\",\"141\":\"9#指针\",\"142\":\"9#什么是指针\",\"143\":\"9#如何使用指针\",\"144\":\"9#空指针\",\"145\":\"9#指针数组\",\"146\":\"9#指向指针的指针\",\"147\":\"9#结构体\",\"148\":\"9#定义结构体\",\"149\":\"9#访问结构体成员\",\"150\":\"9#结构体作为函数参数\",\"151\":\"9#结构体作为指针\",\"152\":\"9#切片slice\",\"153\":\"9#范围range\",\"154\":\"9#map集合\",\"155\":\"9#递归函数\",\"156\":\"9#类型转换\",\"157\":\"9#接口\",\"158\":\"9#错误处理\",\"159\":\"9#运行时异常和-panic\",\"160\":\"9#从-panic-中恢复-recover\",\"161\":\"10\",\"162\":\"10#os包\",\"163\":\"10#cobra\",\"164\":\"10#command-go\",\"165\":\"11\",\"166\":\"11#env相关\",\"167\":\"11#goroot\",\"168\":\"11#gopath\",\"169\":\"11#module模块\",\"170\":\"11#package包\",\"171\":\"11#拉取与上传module处理\",\"172\":\"11#go-mod\",\"173\":\"11#cmd\",\"174\":\"11#go-runtime-运行时\",\"175\":\"11#框架\",\"176\":\"11#gin\",\"177\":\"11#basicauth中间件\",\"178\":\"11#使用中间件\",\"179\":\"11#中间件使用goroutine\",\"180\":\"11#request-body数据绑定\",\"181\":\"11#模型及参数绑定\",\"182\":\"11#iris\",\"183\":\"11#beego\",\"184\":\"12\",\"185\":\"12#协程与通道\",\"186\":\"12#使用-gomaxprocs\",\"187\":\"12#close方法\",\"188\":\"12#select方法\",\"189\":\"12#go-关键字\",\"190\":\"12#channel\",\"191\":\"13\",\"192\":\"13#newsinglethreadscheduledexecutor方法\",\"193\":\"14\",\"194\":\"14#jvm监控\",\"195\":\"14#事务传播的具体场景\",\"196\":\"14#spring线程安全\",\"197\":\"14#递归算法题\",\"198\":\"14#hashtable与hashmap的区别\",\"199\":\"14#string、stringbuffer、stringbuilder\",\"200\":\"14#实现对象的克隆\",\"201\":\"14#gc-gc的作用\",\"202\":\"14#spring支持的事务管理类型-事务传播\",\"203\":\"14#什么是cookie-cookie和session的区别\",\"204\":\"14#什么情况下发生数据脏读\",\"205\":\"14#accesslog\",\"206\":\"14#生产环境索引失效-解决方案\",\"207\":\"14#如何按类型将数据映射到不同的类上\",\"208\":\"14#如果一个线程发生oom-线程还会运行吗-会影响其他线程吗\",\"209\":\"14#如果主线程抛异常退出了-子线程还能运行么\",\"210\":\"14#如何在springboot启动时-加载资源到内存\",\"211\":\"14#starter的意义\",\"212\":\"14#分布式事务\",\"213\":\"14#熔断降级如何处理\",\"214\":\"14#jvm参数设置\",\"215\":\"14#tomcat容器\",\"216\":\"14#如何处理缓存穿透、雪崩、击穿等问题的\",\"217\":\"14#消息的id是自动随机生成的-还是业务唯一id\",\"218\":\"14#如何将一个正在运行的容器重新制作成镜像文件\",\"219\":\"14#什么时候走行级锁或表级锁\",\"220\":\"14#如何避免索引回查\",\"221\":\"14#为什么使用分库分表\",\"222\":\"14#新增es数据-查询不到的原因\",\"223\":\"14#rocketmq的替代方案\",\"224\":\"14#异步更新库存\",\"225\":\"15\",\"226\":\"15#运算符优先级\",\"227\":\"15#知识点\",\"228\":\"15#集合\",\"229\":\"15#集合遍历删除元素\",\"230\":\"15#exception\",\"231\":\"15#thread\",\"232\":\"15#线程状态\",\"233\":\"15#线程池\",\"234\":\"15#测试样例\",\"235\":\"15#守护线程和用户线程\",\"236\":\"15#使用\",\"237\":\"15#线程间的通信\",\"238\":\"15#线程执行顺序\",\"239\":\"15#queue\",\"240\":\"16\",\"241\":\"16#样例\",\"242\":\"17\",\"243\":\"17#gc\",\"244\":\"17#类加载\",\"245\":\"18\",\"246\":\"18#lambda表达式\",\"247\":\"18#functionalinterface函数式接口注解\",\"248\":\"18#两者关系\",\"249\":\"18#function\",\"250\":\"18#consumer\",\"251\":\"18#supplier\",\"252\":\"18#lambda对象的类对象\",\"253\":\"19\",\"254\":\"19#事务一致性问题\",\"255\":\"19#继承\",\"256\":\"19#递归查询\",\"257\":\"20\",\"258\":\"20#putorderedobject\",\"259\":\"20#compareandswapobject\",\"260\":\"21\",\"261\":\"21#特征\",\"262\":\"21#类型\",\"263\":\"21#单元类型\",\"264\":\"21#gc\",\"265\":\"21#所有权和借用\",\"266\":\"21#copy特征\",\"267\":\"21#字符串\",\"268\":\"21#切片\",\"269\":\"21#string与-str的转换\",\"270\":\"21#存储\",\"271\":\"21#结构体\",\"272\":\"21#单元结构体\",\"273\":\"21#结构体数据的所有权\",\"274\":\"21#打印\",\"275\":\"21#枚举\",\"276\":\"21#option-枚举用于处理空值\",\"277\":\"21#数组\",\"278\":\"21#循环\",\"279\":\"21#for\",\"280\":\"21#loop无限循环\",\"281\":\"21#模式匹配\",\"282\":\"21#match\",\"283\":\"21#if-let-匹配\",\"284\":\"21#matches-宏\",\"285\":\"21#变量遮蔽\",\"286\":\"21#option结构匹配\",\"287\":\"21#模式适用场景\",\"288\":\"21#方法method\",\"289\":\"21#self、-self-和-mut-self\",\"290\":\"21#方法名跟结构体字段名相同\",\"291\":\"21#关联函数\",\"292\":\"21#为枚举实现方法\",\"293\":\"21#泛型和特征\",\"294\":\"21#枚举中使用泛型\",\"295\":\"21#方法中使用泛型\",\"296\":\"21#const-泛型\",\"297\":\"21#特征-1\",\"298\":\"21#特征对象\",\"299\":\"21#深入特征\",\"300\":\"21#集合\",\"301\":\"21#动态数组-vector\",\"302\":\"21#使用\",\"303\":\"21#vector-与其元素共存亡\",\"304\":\"21#从-vector-中读取元素\",\"305\":\"21#下标索引与-get-的区别\",\"306\":\"21#同时借用多个数组元素\",\"307\":\"21#排序\",\"308\":\"21#map\",\"309\":\"21#数组到map的转换\",\"310\":\"21#所有权转移\",\"311\":\"21#get-方法可以获取元素\",\"312\":\"21#更新键值\",\"313\":\"21#生命周期\",\"314\":\"21#函数式编程\",\"315\":\"21#闭包\",\"316\":\"21#结构体中的闭包\",\"317\":\"21#捕获作用域中的值\",\"318\":\"21#三种-fn-特征\",\"319\":\"21#三种-fn-的关系\",\"320\":\"21#迭代器\",\"321\":\"22\",\"322\":\"22#过滤器顺序\",\"323\":\"23\",\"324\":\"23#疑问\",\"325\":\"23#登录成功后-如何重定向到缓存的请求\",\"326\":\"23#version-feature\",\"327\":\"23#persistence\",\"328\":\"23#configuration\",\"329\":\"23#websecurityconfiguration\",\"330\":\"23#httpsecurityconfiguration\",\"331\":\"23#authenticationconfiguration\",\"332\":\"23#websecurity\",\"333\":\"23#httpsecurity\",\"334\":\"23#securityfilterchain\",\"335\":\"23#configurer\",\"336\":\"23#expressionurlauthorizationconfigurer继承abstractintercepturlconfigurer\",\"337\":\"23#exceptionhandleconfigurer\",\"338\":\"23#authorizationserverconfigurer\",\"339\":\"23#resourceserverconfigurer\",\"340\":\"23#authenticationmanager\",\"341\":\"23#authenticationmanagerbuilder\",\"342\":\"23#filter\",\"343\":\"23#oauth2-过渡版本\",\"344\":\"23#principal\",\"345\":\"23#oauth2-client\",\"346\":\"23#authorization-server\",\"347\":\"23#resource-server\",\"348\":\"23#配置\",\"349\":\"23#管理员\",\"350\":\"23#普通用户\",\"351\":\"24\",\"352\":\"24#spring-validation\",\"353\":\"24#手动进行请求参数校验-获取校验结果\",\"354\":\"24#spring-bean-中注入-httpservletrequest-成员变量的思考\",\"355\":\"24#springboot-2-7-1-配置文件加载\",\"356\":\"24#依赖注入\",\"357\":\"24#构造器、factory-method\",\"358\":\"24#bean-autowire属性-byname-bytype-no\",\"359\":\"24#注解-resource-autowired\",\"360\":\"24#springboot-设置http-响应状态码\",\"361\":\"24#deferredresult\",\"362\":\"24#webasyncutils的webasyncmanager\",\"363\":\"24#deferredresultmethodreturnvaluehandler\",\"364\":\"24#注解\",\"365\":\"24#import\",\"366\":\"24#conditional\",\"367\":\"24#conditionalonmissingbean\",\"368\":\"24#conditionalonwebapplication\",\"369\":\"24#conditionalonclass\",\"370\":\"24#enableconfigurationproperties\",\"371\":\"24#import-1\",\"372\":\"24#configurationproperties\",\"373\":\"24#conditionalonproperty\",\"374\":\"24#conditionalonsinglecandidate-datasource-class\",\"375\":\"24#controlleradvice\",\"376\":\"24#作用范围\",\"377\":\"24#modelattribute\",\"378\":\"24#exceptionhandler\",\"379\":\"24#initbinder-请求参数预处理\",\"380\":\"24#循环依赖问题\",\"381\":\"24#aop面向切面\",\"382\":\"24#使用\",\"383\":\"24#原理\",\"384\":\"24#代理\",\"385\":\"24#jdk动态代理\",\"386\":\"24#cglib动态代理\",\"387\":\"24#context\",\"388\":\"24#annotationconfigapplicationcontext\",\"389\":\"24#annotationconfigservletwebserverapplicationcontext\",\"390\":\"24#springboot容器启动\",\"391\":\"24#核心\",\"392\":\"24#接口\",\"393\":\"24#springapplication\",\"394\":\"24#run\",\"395\":\"24#prepareenvironment\",\"396\":\"24#abstractapplicationcontext\",\"397\":\"24#refresh\",\"398\":\"24#preparebeanfactory\",\"399\":\"24#invokebeanfactorypostprocessors\",\"400\":\"24#finishrefresh\",\"401\":\"24#dispatcherservlet\",\"402\":\"24#dodispatch方法\",\"403\":\"24#requestmappinghandleradapter继承abstracthandlermethodadapter\",\"404\":\"24#servletinvocablehandlermethod\",\"405\":\"24#handlermethodreturnvaluehandlercomposite\",\"406\":\"24#deferredresultmethodreturnvaluehandler-1\",\"407\":\"24#servlet接口\",\"408\":\"24#genericservlet\",\"409\":\"24#httpservlet\",\"410\":\"24#httpservletbean\",\"411\":\"24#frameworkservlet\",\"412\":\"24#spring-event-listener\",\"413\":\"24#使用-1\",\"414\":\"24#spring-session-redis\",\"415\":\"24#enableredishttpsession\",\"416\":\"24#springhttpsessionconfiguration\",\"417\":\"24#redishttpsessionconfiguration继承springhttpsessionconfiguration\",\"418\":\"24#sessionrepositoryfilter\",\"419\":\"24#redisindexedsessionrepository\",\"420\":\"24#filter\",\"421\":\"24#mvc\",\"422\":\"24#reactive\",\"423\":\"24#responsebodyresulthandler\",\"424\":\"24#transaction如何生效\",\"425\":\"24#spring-autoconfigure\",\"426\":\"24#transactionautoconfiguration\",\"427\":\"24#aopautoconfiguration\",\"428\":\"24#spring-tx\",\"429\":\"24#transactioninterceptor\",\"430\":\"24#proxytransactionmanagementconfiguration\",\"431\":\"24#spring代理对象的生成\",\"432\":\"24#annotationawareaspectjautoproxycreator-bean后置处理器\",\"433\":\"24#abstractautoproxycreator的postprocessafterinitialization\",\"434\":\"24#abstractautoproxycreator的wrapifnecessary\",\"435\":\"24#abstractautoproxycreator的createproxy\",\"436\":\"24#cglibaopproxy的getproxy\",\"437\":\"24#spring单例对象的生成\",\"438\":\"24#defaultlistablebeanfactory的preinstantiatesingletons方法\",\"439\":\"24#abstractbeanfactory的getbean、dogetbean方法\",\"440\":\"24#abstractautowirecapablebeanfactory的docreatebean\",\"441\":\"24#commonannotationbeanpostprocessor继承initdestroyannotationbeanpostprocessor\",\"442\":\"24#applicationcontextawareprocessor\",\"443\":\"24#内嵌tomcat启动\",\"444\":\"24#servletwebserverapplicationcontext\",\"445\":\"24#onrefresh\",\"446\":\"24#createwebserver\",\"447\":\"24#selfinitialize\",\"448\":\"24#preparewebapplicationcontext\",\"449\":\"24#tomcatservletwebserverfactory\",\"450\":\"24#getwebserver\",\"451\":\"24#preparecontext\",\"452\":\"24#tomcat\",\"453\":\"24#getserver\",\"454\":\"24#tomcatwebserver\",\"455\":\"24#initialize\",\"456\":\"24#start\",\"457\":\"24#lifecyclebase\",\"458\":\"24#standardcontext\",\"459\":\"24#standardservice中mapperlistener\",\"460\":\"24#standardservice中的mapper\",\"461\":\"24#tomcat处理请求过程\",\"462\":\"24#applicationcontext\",\"463\":\"24#getrequestdispatcher\",\"464\":\"24@0\",\"465\":\"25\",\"466\":\"25#使用\",\"467\":\"25#security配置\",\"468\":\"25#动态路由配置\",\"469\":\"25#获取和校验token的时机\",\"470\":\"25#在spring-securityfilterchain中处理\",\"471\":\"25#在dispatchhandler分发之后的网关过滤器中处理\",\"472\":\"25#全局和局部过滤器\",\"473\":\"25#原理\",\"474\":\"25@0\",\"475\":\"26\",\"476\":\"26#配置动态更新\",\"477\":\"27\",\"478\":\"27#bean的注入\",\"479\":\"27#spring中的xml形式\",\"480\":\"27#springboot中\",\"481\":\"27#spi机制\",\"482\":\"27#入口\",\"483\":\"27#postprocessorregistrationdelegate\",\"484\":\"27#beanfactorypostprocessor\",\"485\":\"27#beandefinitionregistrypostprocessor\",\"486\":\"27#configurationclasspostprocessor\",\"487\":\"27#configurationclassparser\",\"488\":\"27#doprocessconfigurationclass\",\"489\":\"27#processimports\",\"490\":\"27#deferredimportselectorhandler\",\"491\":\"27#deferredimportselectorgroupinghandler\",\"492\":\"27#deferredimportselectorgrouping\",\"493\":\"27#importselector\",\"494\":\"27#autoconfigurantionimportselector\",\"495\":\"27#indexed\",\"496\":\"27#autowire\",\"497\":\"27#bytype\",\"498\":\"27#byname\",\"499\":\"27@0\",\"500\":\"28\",\"501\":\"28#webhandler\",\"502\":\"28#httphandler\",\"503\":\"28#响应式项目初始化\",\"504\":\"28#webfluxautoconfiguration\",\"505\":\"28#httphandlerautoconfiguration\",\"506\":\"28#reactivewebserverapplicationcontext\",\"507\":\"28#createwebserver方法\",\"508\":\"28#nettywebserver\",\"509\":\"28#httpserver\",\"510\":\"28#核心类\",\"511\":\"28#reactorhttphandleradapter\",\"512\":\"28#httpwebhandleradapter\",\"513\":\"28#dispatcherhandler\",\"514\":\"28#方法\",\"515\":\"28#doonsubscribe\",\"516\":\"28#onsubscribe\",\"517\":\"28#dooneach\",\"518\":\"28#doonnext\",\"519\":\"28#onnext\",\"520\":\"28#doafternext\",\"521\":\"28#dooncomplete\",\"522\":\"28#oncomplete\",\"523\":\"28#then\",\"524\":\"28#flux-create\",\"525\":\"28#fluxsink\",\"526\":\"28#webflux执行流程\",\"527\":\"28#执行subscribe流程\",\"528\":\"28#interface\",\"529\":\"28#subscription\",\"530\":\"28#subscriber\",\"531\":\"28#publisher\",\"532\":\"28#corepublisher\",\"533\":\"28#optimizableoperator\",\"534\":\"28#mono\",\"535\":\"28#subscribe方法\",\"536\":\"28#flatmap方法\",\"537\":\"28#类的源码分析\",\"538\":\"28#thenmany方法\",\"539\":\"28#flux方法\",\"540\":\"28#zip方法\",\"541\":\"28#defer\",\"542\":\"28#deferwithcontext\",\"543\":\"28#subscribecontext-contextwrite\",\"544\":\"28#flux\",\"545\":\"28#flatmap方法-1\",\"546\":\"28#defer方法\",\"547\":\"28#take方法\",\"548\":\"28#concat方法\",\"549\":\"28#then方法\",\"550\":\"28#fromiterable方法\",\"551\":\"28#as方法\",\"552\":\"28#singleorempty方法\",\"553\":\"28#buffer方法\",\"554\":\"28#count\",\"555\":\"28#collectlist\",\"556\":\"28#next\",\"557\":\"28#context\",\"558\":\"28#响应式事务\",\"559\":\"28#r2dbc\",\"560\":\"28@0\",\"561\":\"29\",\"562\":\"29#ci-cd-流水线\",\"563\":\"29#自动化工具\",\"564\":\"29#jenkins\",\"565\":\"29#gitlab\",\"566\":\"29#docker-compose\",\"567\":\"29#harbor\",\"568\":\"29#groovy-script\",\"569\":\"29#jmeter压测\",\"570\":\"29#apifox\",\"571\":\"29@0\",\"572\":\"30\",\"573\":\"30#task\",\"574\":\"30#future\",\"575\":\"30#completablefuture\",\"576\":\"31\",\"577\":\"31#表\",\"578\":\"31#元数据表ge-re\",\"579\":\"31#历史表hi\",\"580\":\"31#运行表ru\",\"581\":\"31#基本使用\",\"582\":\"31#表关系\",\"583\":\"31#流程的表数据创建过程\",\"584\":\"31#modeler\",\"585\":\"31#spring-boot\",\"586\":\"31#任务的流转处理\",\"587\":\"31#监听器\",\"588\":\"31#接口方式\",\"589\":\"31#spring事件总线\",\"590\":\"31@0\",\"591\":\"32\",\"592\":\"32#获取项目目录的方式\",\"593\":\"32#properties或yaml配置文件加载优先级\",\"594\":\"32#静态资源路径配置\",\"595\":\"32#数据库及连接池配置\",\"596\":\"32#log\",\"597\":\"32@0\",\"598\":\"33\",\"599\":\"33#context\",\"600\":\"33#servletcontext\",\"601\":\"33#applicationcontext-webapplicationcontext\",\"602\":\"33#线程上下文\",\"603\":\"33@0\",\"604\":\"34\",\"605\":\"34@0\",\"606\":\"35\",\"607\":\"35#springboot\",\"608\":\"35#feign传参问题\",\"609\":\"35#get请求\",\"610\":\"36\",\"611\":\"36#jar包的读取\",\"612\":\"37\",\"613\":\"37#okhttp\",\"614\":\"37#resttemplate\",\"615\":\"37#apache-httpclient\",\"616\":\"37#retrofit\",\"617\":\"38\",\"618\":\"38#模型\",\"619\":\"38@0\",\"620\":\"39\",\"621\":\"39#引入\",\"622\":\"40\",\"623\":\"40#keytool\",\"624\":\"40#jks\",\"625\":\"40#ssl-tsl\",\"626\":\"40#certificate\",\"627\":\"40#格式\",\"628\":\"40@0\",\"629\":\"41\",\"630\":\"41@0\",\"631\":\"42\",\"632\":\"42#spring-datasource\",\"633\":\"42@0\",\"634\":\"43\",\"635\":\"43#预先优先匹配规则\",\"636\":\"43@0\",\"637\":\"44\",\"638\":\"44#grpc\",\"639\":\"44#引入\",\"640\":\"44#注解\",\"641\":\"44#proto3\",\"642\":\"44#下载\",\"643\":\"44#选项\",\"644\":\"45\",\"645\":\"45#java环境下脚本的执行\",\"646\":\"45#python\",\"647\":\"45#php\",\"648\":\"45#groovy\",\"649\":\"45#标准script函数库\",\"650\":\"46\",\"651\":\"46#jsp\",\"652\":\"46#servlet-1\",\"653\":\"46@0\",\"654\":\"47\",\"655\":\"47#实现方式\",\"656\":\"47#通配符\",\"657\":\"47#springboot方式\",\"658\":\"47#quartz\",\"659\":\"47@0\",\"660\":\"48\",\"661\":\"48#分布式事务\",\"662\":\"48#二阶段提交\",\"663\":\"48#三阶段提交\",\"664\":\"48#tcc\",\"665\":\"48#本地消息表\",\"666\":\"48#mq消息事务\",\"667\":\"48#最大努力通知\",\"668\":\"48#总结\",\"669\":\"48#saga\",\"670\":\"48#seata\",\"671\":\"49\",\"672\":\"49#样例\",\"673\":\"50\",\"674\":\"50#tomcat\",\"675\":\"50#applicationcontext与standardcontext\",\"676\":\"50#standardcontext\",\"677\":\"50#applicationcontext\",\"678\":\"50#从组件角度\",\"679\":\"50#从一个完整请求的角度来看\",\"680\":\"50#从后续深入理解的角度\",\"681\":\"50#servlet引擎-容器\",\"682\":\"50#jsp引擎\",\"683\":\"50#线程模型\",\"684\":\"50#org-apache-coyote-response\",\"685\":\"50#nioendpoint-nio2endpoint-abstractendpoint\",\"686\":\"50#nioacceptor-nioendpoint下的accept任务\",\"687\":\"50#socketprocessor-nioendpoint下的内部类\",\"688\":\"50#connector\",\"689\":\"50#http11nioprotocol-http11nio2protocol-abstracthttp11jsseprotocol-abstracthttp11protocol-abstractprotocol\",\"690\":\"50#connectionhandler-abstractprotocol下的内部类\",\"691\":\"50#http11processor-abstractprocessorlight-processor\",\"692\":\"50#coyoteadapter\",\"693\":\"50#lifecyclebase\",\"694\":\"50#container\",\"695\":\"50#servlet3-0-异步请求\",\"696\":\"50#asyncstatemachine\",\"697\":\"50#jetty\",\"698\":\"50#undertow\",\"699\":\"50@0\",\"700\":\"51\",\"701\":\"51#表\",\"702\":\"51#元数据表ge-re\",\"703\":\"51#历史表hi\",\"704\":\"51#运行表ru\",\"705\":\"51#基本使用\",\"706\":\"51#modeler\",\"707\":\"51#spring-boot\",\"708\":\"51#任务的流转处理\",\"709\":\"51#监听器\",\"710\":\"51#接口方式\",\"711\":\"51#spring事件总线\",\"712\":\"51@0\",\"713\":\"52\",\"714\":\"52#sql优化\",\"715\":\"52#explain-参数详解\",\"716\":\"52#sql层\",\"717\":\"52#硬件层\",\"718\":\"53\",\"719\":\"53#aes加密\",\"720\":\"53#rsa加密\",\"721\":\"53@0\",\"722\":\"54\",\"723\":\"54#单点登录\",\"724\":\"54#session-redis-nginx\",\"725\":\"54#跨域请求\",\"726\":\"54#jwt\",\"727\":\"54@0\",\"728\":\"55\",\"729\":\"55#概念\",\"730\":\"55#高级特性\",\"731\":\"55#原理\",\"732\":\"55#代理类生成\",\"733\":\"55#springboot方式初始化\",\"734\":\"55#model模型\",\"735\":\"55#scopemodel、framemodel、applicationmodel、modulemodel\",\"736\":\"55#extensiondirector\",\"737\":\"55#extensionloader\",\"738\":\"55#dubbospringinitializer\",\"739\":\"55#serviceannotationpostprocessor\",\"740\":\"55#dubboinfrabeanregisterpostprocessor\",\"741\":\"55#referenceannotationbeanpostprocessor\",\"742\":\"55#dubbodeployapplicationlistener\",\"743\":\"55#dubboconfigapplicationlistener\",\"744\":\"55#deploy\",\"745\":\"55#protocol\",\"746\":\"56\",\"747\":\"57\",\"748\":\"57#概念\",\"749\":\"57#字段数据类型\",\"750\":\"57#es集群\",\"751\":\"57#match、match-phrase、match-phrase-prefix的区别\",\"752\":\"57#倒排索引\",\"753\":\"57#正排索引\",\"754\":\"57#内核\",\"755\":\"57#api\",\"756\":\"57#查看节点负载\",\"757\":\"57#更新\",\"758\":\"57#update-7-14\",\"759\":\"57#update\",\"760\":\"57#update-by-query\",\"761\":\"57#搜索\",\"762\":\"57#term-terms\",\"763\":\"57#指定字段查询-match\",\"764\":\"57#搜索所有macth-all\",\"765\":\"57#分页查询-from-size\",\"766\":\"57#查询段落匹配-match-phrase\",\"767\":\"57#多条件查询-bool\",\"768\":\"57#聚合查询-aggregation\",\"769\":\"57#简单聚合\",\"770\":\"57#嵌套聚合\",\"771\":\"57#对聚合结果排序\",\"772\":\"57#索引管理\",\"773\":\"57#创建索引\",\"774\":\"57#分词结果\",\"775\":\"57#信息查看\",\"776\":\"57#查看分词结果\",\"777\":\"57#修改查询限制\",\"778\":\"57#设置结果最大窗口\",\"779\":\"57#创建索引添加配置\",\"780\":\"57#scroll查询\",\"781\":\"57#聚合\",\"782\":\"57#聚合并获取聚合列表数据\",\"783\":\"57#bool查询\",\"784\":\"57#deleterequest、deletebyqueryrequest区别\",\"785\":\"57#原生查询api\",\"786\":\"57#java-api\",\"787\":\"58\",\"788\":\"58#术语\",\"789\":\"58#sink\",\"790\":\"58#引入\",\"791\":\"58#使用\",\"792\":\"58#使用样例\",\"793\":\"59\",\"794\":\"59#原理\",\"795\":\"60\",\"796\":\"60#使用\",\"797\":\"60#注意事项\",\"798\":\"60#自动提交和手动提交\",\"799\":\"60#引入\",\"800\":\"60#配置\",\"801\":\"60#java类配置\",\"802\":\"60#配置文件配置\",\"803\":\"60#样例\",\"804\":\"60#消费者\",\"805\":\"60#常用命令\",\"806\":\"60#生产\",\"807\":\"60#消费\",\"808\":\"60#多线程消费\",\"809\":\"60#spingboot初始化分析\",\"810\":\"60#kafkabootstrapconfiguration\",\"811\":\"60#kafkalistenerannotationbeanpostprocessor\",\"812\":\"60#concurrentmessagelistenercontainer-abstractmessagelistenercontainer\",\"813\":\"60#kafkamessagelistenercontainer-listenerconsumer\",\"814\":\"60#run\",\"815\":\"60#kafkaconsumer\",\"816\":\"60#consumercoordinator\",\"817\":\"61\",\"818\":\"61#paho-mqtt5-client\",\"819\":\"61#mqttasyncclient\",\"820\":\"61#mqttasyncclient下的mqttreconnectcallback\",\"821\":\"61#mqtttoken\",\"822\":\"61#tokenstore\",\"823\":\"61#mqttpingreq\",\"824\":\"61#clientstate\",\"825\":\"61#send方法\",\"826\":\"61#connectactionlister\",\"827\":\"61#clientcomms\",\"828\":\"61#connect方法\",\"829\":\"61#internalsend方法\",\"830\":\"61#checkforactivity-检查活跃度\",\"831\":\"61#shutdownconnection方法\",\"832\":\"61#clientcomms-connectbg\",\"833\":\"61#run\",\"834\":\"61#commscallback\",\"835\":\"61#commssender\",\"836\":\"61#run-1\",\"837\":\"61#commsreceiver\",\"838\":\"61#run-2\",\"839\":\"61#mqttinputstream\",\"840\":\"61#tcpnetworkmodule实现networkmodule\",\"841\":\"61#timer\",\"842\":\"61#timer-timerthread\",\"843\":\"61#timerpingsender\",\"844\":\"61#重复订阅分析\",\"845\":\"61#设置保活时间间隔keepaliveinterval作用\",\"846\":\"61#原因\",\"847\":\"61#解决方法\",\"848\":\"61#已定位问题-解决方案\",\"849\":\"62\",\"850\":\"62#datasource\",\"851\":\"62#jar包引用方式\",\"852\":\"62#工作原理\",\"853\":\"62#拦截器\",\"854\":\"62#mapperinterface代理对象的生成\",\"855\":\"62#mapperautoconfiguration\",\"856\":\"63\",\"857\":\"63#mybatisplusautoconfiguration和mybatisautoconfiguration优先级问题\",\"858\":\"63#自定义内容\",\"859\":\"63#mapperscannerconfigurer实现beandefinitionregistrypostprocessor\",\"860\":\"63#配置加载流程\",\"861\":\"64\",\"862\":\"64#客户端侧依赖\",\"863\":\"64#configuration\",\"864\":\"64#nacosserviceautoconfiguration\",\"865\":\"64#nacosdiscoveryautoconfiguration\",\"866\":\"64#nacosdiscoveryclientconfiguration\",\"867\":\"64#nacosserviceregistryautoconfiguration\",\"868\":\"64#nacosservicemanager\",\"869\":\"64#namingservice\",\"870\":\"64#nacosfactory\",\"871\":\"64#namingfactory的createconfigservice\",\"872\":\"64#nacosnamingservice\",\"873\":\"64#nacosserviceregistry-serviceregistry\",\"874\":\"64#nacosservicediscovery\",\"875\":\"64#nacosdiscoveryclient-discoveryclient\",\"876\":\"64#读取配置中心配置\",\"877\":\"64#nacosconfigautoconfiguration\",\"878\":\"64#nacosconfigmanager\",\"879\":\"64#nacoscontextrefresher\",\"880\":\"64#clientworker\",\"881\":\"64#clientworker-longpollingrunnable\",\"882\":\"64#nacosconfigservice\",\"883\":\"64#nacosautoserviceregistration\",\"884\":\"64#nacos配置自动刷新流程\",\"885\":\"64#nacos集群\",\"886\":\"64#nacos-server\",\"887\":\"64#nacos-config\",\"888\":\"64#nacos-naming\",\"889\":\"64#healthcontroller\",\"890\":\"64#operatorcontroller\",\"891\":\"64#catalogcontroller\",\"892\":\"64#servicecontroller\",\"893\":\"64#instancecontroller\",\"894\":\"64#distribution-分布式\",\"895\":\"65\",\"896\":\"65#如何处理多数据源\",\"897\":\"65#datasource\",\"898\":\"65#jdbctemplate\",\"899\":\"65#namedparameterjdbctemplate\",\"900\":\"65#factory\",\"901\":\"65#mybatis-plus\",\"902\":\"65#更新\",\"903\":\"65#响应式orm\",\"904\":\"66\",\"905\":\"66#使用\",\"906\":\"66#相关概念\",\"907\":\"67\",\"908\":\"67#基本使用\",\"909\":\"67#hash\",\"910\":\"67#string\",\"911\":\"67#待整理\",\"912\":\"68\",\"913\":\"68#基本使用\",\"914\":\"69\",\"915\":\"69#使用\",\"916\":\"69#消费原理\",\"917\":\"69#消费者侧\",\"918\":\"69#listenercontainerconfiguration实现applicationcontextaware、smartinitializingsingleton\",\"919\":\"69#defaultrocketmqlistenercontainer\",\"920\":\"69#defaultmqpullconsumerimpl\",\"921\":\"69#broker侧\",\"922\":\"70\",\"923\":\"70#datax\",\"924\":\"70#配置文件示例\",\"925\":\"70#定时任务\",\"926\":\"71\",\"927\":\"72\",\"928\":\"72#json的类型\",\"929\":\"72#赋值\",\"930\":\"72#使用\",\"931\":\"72#string\",\"932\":\"72#类\",\"933\":\"72#jquery\",\"934\":\"72#引用方式\",\"935\":\"72#文档就绪\",\"936\":\"72#语法\",\"937\":\"72#选择器\",\"938\":\"72#事件\",\"939\":\"72#html\",\"940\":\"72#遍历\",\"941\":\"72#ajax\",\"942\":\"73\",\"943\":\"73#引入\",\"944\":\"73#加载\",\"945\":\"73#ajax\",\"946\":\"73#选择器\",\"947\":\"73#事件触发\",\"948\":\"73#样式设置\",\"949\":\"74\",\"950\":\"75\",\"951\":\"75#pm2\",\"952\":\"75#npm\",\"953\":\"75#pnpm\",\"954\":\"75#node-fetch\",\"955\":\"75#async-mutex\",\"956\":\"75#grunt\",\"957\":\"75#workbox\",\"958\":\"75#pwa\",\"959\":\"75#sw-service-worker\",\"960\":\"76\",\"961\":\"76#vite\",\"962\":\"76#webpack\",\"963\":\"77\",\"964\":\"77#应用框架\",\"965\":\"77#搭建步骤\",\"966\":\"77#状态\",\"967\":\"77#路由\",\"968\":\"77#jsx\",\"969\":\"77#babel\",\"970\":\"77#dom\",\"971\":\"77#组件\",\"972\":\"78\",\"973\":\"78#react-router\",\"974\":\"78#basic\",\"975\":\"78#目标路由中设置参数\",\"976\":\"78#路由嵌套nesting\",\"977\":\"78#路由重定向redirects-auth\",\"978\":\"78#custom-link\",\"979\":\"78#prevent-transitions-阻止转移\",\"980\":\"79\",\"981\":\"79#配置\",\"982\":\"79#基础语法\",\"983\":\"79#内联\",\"984\":\"80\",\"985\":\"80#使用\",\"986\":\"80#函数的类型\",\"987\":\"80#与或运算符\",\"988\":\"80#断言\",\"989\":\"80#声明文件\",\"990\":\"80#书写声明文件\",\"991\":\"80#全局变量\",\"992\":\"80#npm包\",\"993\":\"80#umd库\",\"994\":\"80#模块插件\",\"995\":\"80#声明文件中的依赖\",\"996\":\"80#自动生成声明文件\",\"997\":\"81\",\"998\":\"81#状态\",\"999\":\"81#通信\",\"1000\":\"81#异步\",\"1001\":\"81#问题\",\"1002\":\"81#vue父子组件传值不刷新问题\",\"1003\":\"82\",\"1004\":\"83\",\"1005\":\"83#微信内部浏览器\",\"1006\":\"83#公众号\",\"1007\":\"83#获取公众号订阅用户的的openid\",\"1008\":\"83#带参数二维码的生成\",\"1009\":\"83#向微信公众号订阅用户发送模板消息\",\"1010\":\"83#小程序\",\"1011\":\"84\",\"1012\":\"84#基于redisson实现定时任务\",\"1013\":\"84#核心\",\"1014\":\"85\",\"1015\":\"85#需求\",\"1016\":\"85#方案\",\"1017\":\"85#基于jmqtt改造\",\"1018\":\"85#基于pulsar改造\",\"1019\":\"85#基于activemq改造\",\"1020\":\"85#基于hivemq改造\",\"1021\":\"85#基于moquette改造\",\"1022\":\"85#基于qpid进行改造\",\"1023\":\"85#基于eclipse-paho-mqtt-broker改造\",\"1024\":\"85#基于rabbitmq进行改造\",\"1025\":\"85#rabbitmq配置步骤\",\"1026\":\"85#rabbitmq-conf\",\"1027\":\"86\",\"1028\":\"86#认证\",\"1029\":\"86#网关\",\"1030\":\"86#角色聚合\",\"1031\":\"86#网关集成权限认证\",\"1032\":\"86#获取所有接口url\",\"1033\":\"87\",\"1034\":\"87#菜单表\",\"1035\":\"87#删除菜单\",\"1036\":\"87#buildtree构造菜单树\",\"1037\":\"88\",\"1038\":\"88#引擎\",\"1039\":\"88#计算引擎\",\"1040\":\"89\",\"1041\":\"89#使用\",\"1042\":\"89#字段添加删除\",\"1043\":\"89#xml-特殊字符转义\",\"1044\":\"89#事务隔离级别\",\"1045\":\"89#索引\",\"1046\":\"89#锁\",\"1047\":\"89#锁的粒度\",\"1048\":\"89#锁的类别\",\"1049\":\"89#mvcc多版本并发控制-并发无锁\",\"1050\":\"89#当前读与快照读\",\"1051\":\"89#如何解决幻读\",\"1052\":\"89#redo-log\",\"1053\":\"89#undo-log\",\"1054\":\"89#bin-log\",\"1055\":\"89#数据的导入导出\",\"1056\":\"89#导出\",\"1057\":\"89#导入\",\"1058\":\"89#高级用法\",\"1059\":\"90\",\"1060\":\"91\",\"1061\":\"91#数据\",\"1062\":\"91#数据模型\",\"1063\":\"91#数据库架构\",\"1064\":\"92\",\"1065\":\"92#classpath\",\"1066\":\"92#jar包\",\"1067\":\"92#gradle\",\"1068\":\"92#版本冲突\",\"1069\":\"92#shadowjar\",\"1070\":\"92#configurations\",\"1071\":\"92#task-resolvedependencies\",\"1072\":\"92#无法打jar包问题\",\"1073\":\"92#gradlew\",\"1074\":\"92#最新用法3-x\",\"1075\":\"92#maven\",\"1076\":\"92#版本冲突-1\",\"1077\":\"92#spring-boot-maven-plugin\",\"1078\":\"92#profile的使用\",\"1079\":\"92#激活方式\",\"1080\":\"92#jenkins自动构建\",\"1081\":\"92#jenkins集群搭建\",\"1082\":\"92#全局工具自动安装\",\"1083\":\"92#流水线\",\"1084\":\"92#agent\",\"1085\":\"93\",\"1086\":\"93#使用\",\"1087\":\"93#基础命令\",\"1088\":\"93#通信\",\"1089\":\"93#不同网络间容器通信\",\"1090\":\"93#默认网络\",\"1091\":\"93#自定义网络\",\"1092\":\"93#安装docker-compose\",\"1093\":\"93#docker-buildx\",\"1094\":\"93#alpine\",\"1095\":\"93#服务启动\",\"1096\":\"93#镜像地址\",\"1097\":\"93#push\",\"1098\":\"93#v-mount-volume\",\"1099\":\"93#network\",\"1100\":\"93#查看数据卷信息\",\"1101\":\"93#dockerfile\",\"1102\":\"93#构建过程\",\"1103\":\"93#from\",\"1104\":\"93#maintainer\",\"1105\":\"93#env\",\"1106\":\"93#volume\",\"1107\":\"93#workdir\",\"1108\":\"93#run\",\"1109\":\"93#expose\",\"1110\":\"93#copy\",\"1111\":\"93#copy-from\",\"1112\":\"93#add\",\"1113\":\"93#cmd\",\"1114\":\"93#entrypoint\",\"1115\":\"93#mysql容器初始化数据\",\"1116\":\"93#baiyin\",\"1117\":\"93#docker-compose\",\"1118\":\"93#安装及配置\",\"1119\":\"93#使用-1\",\"1120\":\"93#compose配置文件示例\",\"1121\":\"93#environment\",\"1122\":\"93#network-1\",\"1123\":\"93#wms样例\",\"1124\":\"94\",\"1125\":\"94#rabbitmq\",\"1126\":\"94#kafka\",\"1127\":\"94#gitlab\",\"1128\":\"94#gitlab-runner\",\"1129\":\"94#harbor\",\"1130\":\"94#jenkins\",\"1131\":\"94#minio\",\"1132\":\"94#nacos\",\"1133\":\"94#nacos集群及配置\",\"1134\":\"94#seata\",\"1135\":\"94#redis\",\"1136\":\"94#rocketmq配置\",\"1137\":\"94#elasticsearch配置\",\"1138\":\"94#cerebro\",\"1139\":\"94#es和kibana\",\"1140\":\"94#mysql\",\"1141\":\"94#access-denied\",\"1142\":\"94#nexus\",\"1143\":\"95\",\"1144\":\"95#初始化仓库\",\"1145\":\"95#ssh\",\"1146\":\"95#git配置\",\"1147\":\"95#git的使用\",\"1148\":\"95#git分支\",\"1149\":\"95#git-rev-parse\",\"1150\":\"95#git-checkout\",\"1151\":\"95#git工作区和暂存区\",\"1152\":\"96\",\"1153\":\"96#常用命令\",\"1154\":\"96#gc分析\",\"1155\":\"96#gc是否优化\",\"1156\":\"96#java启动参数分析\",\"1157\":\"97\",\"1158\":\"97#k8s搭建\",\"1159\":\"97#常用命令\",\"1160\":\"97#命名空间\",\"1161\":\"97#pod\",\"1162\":\"97#pod工作原理\",\"1163\":\"97#pod可以理解为一个配置文件吗\",\"1164\":\"97#pod与docker-compose\",\"1165\":\"97#pod的ip与容器内部ip\",\"1166\":\"97#同一个-pod-中的所有容器-ip-地址都相同\",\"1167\":\"97#容器组和控制器\",\"1168\":\"97#pod容器\",\"1169\":\"97#网络命名空间与虚拟网络设备对veth-pair\",\"1170\":\"97#pod中容器共享pause容器的网络命名空间和虚拟网络设备veth-pair\",\"1171\":\"97#service配置\",\"1172\":\"97#kuboard\",\"1173\":\"97#kuber-operator\",\"1174\":\"97#通信\",\"1175\":\"98\",\"1176\":\"98#命令\",\"1177\":\"98#用户、组、权限\",\"1178\":\"98#编译相关命令\",\"1179\":\"98#free\",\"1180\":\"98#根据端口查看服务\",\"1181\":\"98#解压\",\"1182\":\"98#设置环境变量\",\"1183\":\"98#sed\",\"1184\":\"98#ln\",\"1185\":\"98#ip\",\"1186\":\"98#source\",\"1187\":\"98#查看日志\",\"1188\":\"98#export\",\"1189\":\"98#curl\",\"1190\":\"98#进程\",\"1191\":\"98#kill\",\"1192\":\"98#sh文件格式\",\"1193\":\"98#系统相关\",\"1194\":\"98#重启宝塔\",\"1195\":\"98#linux系统\",\"1196\":\"98#命名空间与虚拟化\",\"1197\":\"98#磁盘与分区挂载\",\"1198\":\"98#配置网络\",\"1199\":\"99\",\"1200\":\"99#docker搭建\",\"1201\":\"99#仓库说明\",\"1202\":\"99#xml\",\"1203\":\"99#发布\",\"1204\":\"100\",\"1205\":\"100#常用命令\",\"1206\":\"100#参数调优\",\"1207\":\"100#基于nginx的waf实现\",\"1208\":\"100#配置\",\"1209\":\"100#location路径配置\",\"1210\":\"100#nginx-conf\",\"1211\":\"100#conf-d-hunter-conf\",\"1212\":\"101\",\"1213\":\"102\",\"1214\":\"102#jenkins\",\"1215\":\"102#声明式\",\"1216\":\"102#脚本化流水线\",\"1217\":\"103\",\"1218\":\"103#注释\",\"1219\":\"103#变量操作\",\"1220\":\"103#参数传递\",\"1221\":\"103#函数\",\"1222\":\"103#比较\",\"1223\":\"103#布尔运算符\",\"1224\":\"103#逻辑运算符\",\"1225\":\"103#算数运算\",\"1226\":\"103#条件循环\",\"1227\":\"103#文件运算符\",\"1228\":\"104\",\"1229\":\"104#分析步骤\",\"1230\":\"104#docker-线上问题分析\",\"1231\":\"104#mysql-崩溃恢复\",\"1232\":\"105\",\"1233\":\"105#架构演进\",\"1234\":\"105#云原生架构\",\"1235\":\"105#service-mesh-服务网格\",\"1236\":\"105#架构的模式\",\"1237\":\"105#togaf架构设计工具\",\"1238\":\"105#业务架构\",\"1239\":\"105#信息架构\",\"1240\":\"105#应用架构\",\"1241\":\"105#技术架构\",\"1242\":\"106\",\"1243\":\"106#mysql\",\"1244\":\"106#framework\",\"1245\":\"106#message\",\"1246\":\"106#redis\",\"1247\":\"106#beanutils\",\"1248\":\"106#es\",\"1249\":\"106#cache\",\"1250\":\"106#日志\",\"1251\":\"106#事务一致\",\"1252\":\"106#try-catch-finally\",\"1253\":\"107\",\"1254\":\"107#概述\",\"1255\":\"107#单例设计模式-singleton-pattern\",\"1256\":\"107#使用\",\"1257\":\"107#缺点\",\"1258\":\"107#适配器模式\",\"1259\":\"107#使用-1\",\"1260\":\"107#装饰器模式\",\"1261\":\"107#责任链模式\",\"1262\":\"107#使用-2\",\"1263\":\"107#模板方法模式\",\"1264\":\"108\",\"1265\":\"108#集群\",\"1266\":\"108#订阅\",\"1267\":\"108#发布\",\"1268\":\"109\",\"1269\":\"109#概念\",\"1270\":\"109#协议\",\"1271\":\"109#mqtt\",\"1272\":\"109#订阅、主题、会话\",\"1273\":\"109#服务质量qos\",\"1274\":\"109#通信过程\",\"1275\":\"109#qos2\",\"1276\":\"109#modbus\",\"1277\":\"109#寄存器\",\"1278\":\"109#功能码\",\"1279\":\"109#串口\",\"1280\":\"109#网口\",\"1281\":\"110\",\"1282\":\"110#功能脑图\",\"1283\":\"110#容器启动命令\",\"1284\":\"110#事件驱动-消息总线\",\"1285\":\"110#spring-event\",\"1286\":\"110#brokereventbus-eventbus\",\"1287\":\"110#springmessagebroker\",\"1288\":\"110#设备接入网关\",\"1289\":\"110#设备接入协议\",\"1290\":\"110#类库\",\"1291\":\"110#r2dbc-spi\",\"1292\":\"110#easy-orm\",\"1293\":\"110#easyormconfiguration\",\"1294\":\"110#entitytablemetadataparserconfiguration\",\"1295\":\"110#reactivesqlexecutor\",\"1296\":\"110#reactiverepositoryfactorybean\",\"1297\":\"110#easyormrepositoryregistrar\",\"1298\":\"110#rdbdatabasemetadata\",\"1299\":\"110#rdbschemametadata\",\"1300\":\"110#rdbtablemetadata\",\"1301\":\"110#defaultdatabaseoperator\",\"1302\":\"110#r2dbc-driver\",\"1303\":\"110#表\",\"1304\":\"110#产品与设备\",\"1305\":\"110#网关、网络、协议及证书\",\"1306\":\"110#通道配置\",\"1307\":\"110#流媒体服务\",\"1308\":\"110#告警与规则引擎\",\"1309\":\"110#alarm-record\",\"1310\":\"110#rule-instance-规则实例\",\"1311\":\"110#rule-scene\",\"1312\":\"110#通知与订阅\",\"1313\":\"110#国际化\",\"1314\":\"110#响应式事务\",\"1315\":\"110#业务逻辑\",\"1316\":\"110#设备\",\"1317\":\"110#设备的启停\",\"1318\":\"110#项目启动\",\"1319\":\"110#devicegatewayeventhandler网关事件处理器\",\"1320\":\"110#默认网络管理器-defaultnetworkmanager\",\"1321\":\"110#persistencedevicesessionmanager-abstractdevicesessionmanager\",\"1322\":\"110#devicecategoryservice\",\"1323\":\"110#deviceproductdeployhandler\",\"1324\":\"110#lazyinitmanagementprotocolsupports\",\"1325\":\"110#sceneservice\",\"1326\":\"110#产品的部署和取消部署\",\"1327\":\"110#设备的部署和取消部署\",\"1328\":\"110#设备的上线与离线\",\"1329\":\"110#设备数据上报\",\"1330\":\"110#数据流流转\",\"1331\":\"110#下发指令到设备\",\"1332\":\"110#存储\",\"1333\":\"110#场景\",\"1334\":\"110#ruleengine规则引擎\",\"1335\":\"110#defaultruleengine实现ruleengine接口\",\"1336\":\"110#功能\",\"1337\":\"110#设备管理\",\"1338\":\"110#设备实例\",\"1339\":\"110#devicegatewayeventhandler-实现commandlinerunner-项目启动执行-启动设备网关\",\"1340\":\"110#devicemessagebusinesshandler\",\"1341\":\"110#deviceregistry-接口\",\"1342\":\"110#clusterdeviceregistry-实现deviceregistry\",\"1343\":\"110#协议管理\",\"1344\":\"110#thingscomponent\",\"1345\":\"110#authorization\",\"1346\":\"110#network-component\",\"1347\":\"110#network-core\",\"1348\":\"110#defaultnetworkmanager\",\"1349\":\"110#vertxmqttconnection实现mqttconnection\",\"1350\":\"110#mqtt-component\",\"1351\":\"110#mqttclientprovider\",\"1352\":\"110#createnetwork\",\"1353\":\"110#initmqttclient\",\"1354\":\"110#protocol-component\",\"1355\":\"110#protocolsupportmanager-接口\",\"1356\":\"110#clusterprotocolsupportmanager\",\"1357\":\"110#protocolsupportloader\",\"1358\":\"110#protocolsupporthandler\",\"1359\":\"110#gateway-component\",\"1360\":\"110#mqttserverdevicegateway\",\"1361\":\"110#devicegatewayhelper\",\"1362\":\"110#devicemessageconnector\",\"1363\":\"110#timeseriesmessagewriterconnector\",\"1364\":\"110#clustersendtodevicemessagehandler\",\"1365\":\"110#cluster\",\"1366\":\"110#clustermanager接口\",\"1367\":\"110#redisclustermanager\",\"1368\":\"110#scalecuberpcmanager实现rpcmanager接口\",\"1369\":\"110#cache\",\"1370\":\"110#redisclustercache实现clustercache\",\"1371\":\"110#事件的触发\",\"1372\":\"110#compositeeventlistener\",\"1373\":\"110#事件上报\",\"1374\":\"111\",\"1375\":\"112\",\"1376\":\"112#vertx-mqtt\",\"1377\":\"112#mqtt-server\",\"1378\":\"112#mqtt-client\",\"1379\":\"113\",\"1380\":\"113#asyncclient\",\"1381\":\"113#核心注意点\",\"1382\":\"113#pool\",\"1383\":\"113#defaultnhttpclientconnection\",\"1384\":\"113#请求\",\"1385\":\"113#响应\",\"1386\":\"114\",\"1387\":\"114#服务器实现\",\"1388\":\"114#客户端实现\",\"1389\":\"114#原理\",\"1390\":\"114#缓存区分配\",\"1391\":\"114#类或接口\",\"1392\":\"114#初始化\",\"1393\":\"114#fixedrecvbytebufallocator\",\"1394\":\"114#adaptiverecvbytebufallocator\",\"1395\":\"114#核心类维护\",\"1396\":\"114#pipeline如何维护带有channelhandler的context\",\"1397\":\"114#niounsafe-extends-unsafe-的作用\",\"1398\":\"114#connect连接事件的触发\",\"1399\":\"114#感兴趣事件分析\",\"1400\":\"114#读取事件处理流程\",\"1401\":\"114#写出事件处理流程\",\"1402\":\"114#flush分析\",\"1403\":\"114#flushconsolidationhandler\",\"1404\":\"114#客户端初始化\",\"1405\":\"114#服务端初始化\",\"1406\":\"115\",\"1407\":\"115#web客户端样例\",\"1408\":\"115#如何携带附加信息进行验证\",\"1409\":\"115#serverendpoint\",\"1410\":\"115#serverendpointexporter\",\"1411\":\"115#registerendpoint方法\",\"1412\":\"115#getservercontainer-initservletcontext\",\"1413\":\"115#wsservercontainer-servercontainer\",\"1414\":\"115#addendpoint\",\"1415\":\"115#addendpoint-serverendpointconfig-sec-boolean-fromannotatedpojo\",\"1416\":\"115#configurator\",\"1417\":\"115#serverendpointconfig\",\"1418\":\"115#nioendpoint下的socketprocessor\",\"1419\":\"115#abstractprotocol下的connecthandler的process方法\",\"1420\":\"115#wshttpupgradehandler\",\"1421\":\"115#init方法、\",\"1422\":\"115#wsfilter\",\"1423\":\"115#websockethttprequesthandler\",\"1424\":\"116\",\"1425\":\"116#websocket\",\"1426\":\"116#kerberos认证协议\",\"1427\":\"117\",\"1428\":\"117#概念\",\"1429\":\"117#网关和路由\",\"1430\":\"117#集线器、交换机\",\"1431\":\"117#vpn、手机热点\",\"1432\":\"117#windows共享网络\",\"1433\":\"117#网络通信判断连接、读取、写超时猜想\",\"1434\":\"117#长轮询\",\"1435\":\"117#网络通信\",\"1436\":\"117#io流\",\"1437\":\"117#channel通道\",\"1438\":\"117#buffer缓存区\",\"1439\":\"117#io通信模型\",\"1440\":\"117#reactor模型\",\"1441\":\"117#框架\",\"1442\":\"117#netty\",\"1443\":\"117#执行流程\",\"1444\":\"117#channel\",\"1445\":\"117#nioeventloop\",\"1446\":\"117#nioeventloopgroup\",\"1447\":\"117#channelinitializer\",\"1448\":\"117#channelpipeline\",\"1449\":\"117#任务处理机制\",\"1450\":\"117#serverbootstrap\",\"1451\":\"117#handler\",\"1452\":\"118\",\"1453\":\"119\",\"1454\":\"119#积木报表\",\"1455\":\"119#使用\",\"1456\":\"119#注意事项\",\"1457\":\"119#部署\",\"1458\":\"119#linux\",\"1459\":\"119#ajreport\",\"1460\":\"119#使用-1\",\"1461\":\"119#部署-1\",\"1462\":\"120\",\"1463\":\"120#表结构梳理\",\"1464\":\"120#软件包\",\"1465\":\"120#软件版本\",\"1466\":\"120#软件名称\",\"1467\":\"120#安装表\",\"1468\":\"120#安装历史表-左连接\",\"1469\":\"121\",\"1470\":\"121#项目负责人\",\"1471\":\"121#项目介绍\",\"1472\":\"121#技术实现方式\",\"1473\":\"121#部署\",\"1474\":\"121#步骤\",\"1475\":\"121#配置\",\"1476\":\"122\",\"1477\":\"122#方案\",\"1478\":\"123\",\"1479\":\"123#任务\",\"1480\":\"123#存储\",\"1481\":\"123#通信\",\"1482\":\"123#物模型\",\"1483\":\"123#metadata\",\"1484\":\"123#jetlinks\",\"1485\":\"123#alinks\",\"1486\":\"123#techlinks\",\"1487\":\"123#cap服务\",\"1488\":\"123#设备调试服务\",\"1489\":\"123#南向网关\",\"1490\":\"124\",\"1491\":\"124#协议\",\"1492\":\"124#需求分析\",\"1493\":\"124#租户管理\",\"1494\":\"124#平台管理\",\"1495\":\"124#管理平台\",\"1496\":\"124#个人登录平台oauth2登录页\",\"1497\":\"125\",\"1498\":\"125#项目负责人\",\"1499\":\"125#项目介绍\",\"1500\":\"125#项目背景\",\"1501\":\"125#项目技术\",\"1502\":\"125#功能概述\",\"1503\":\"125#内置功能\",\"1504\":\"125#技术实现方式\",\"1505\":\"125#登录流程\",\"1506\":\"125#用户面板\",\"1507\":\"125#前端处理\",\"1508\":\"125#授权码模式\",\"1509\":\"125#单点登录说明\",\"1510\":\"125#前端\",\"1511\":\"125#后端\",\"1512\":\"125#配置\",\"1513\":\"125#网关服务\",\"1514\":\"125#认证服务\",\"1515\":\"125#用户系统服务\",\"1516\":\"125#认证服务-1\",\"1517\":\"125#客户端认证\",\"1518\":\"125#用户认证\",\"1519\":\"125#token签发\",\"1520\":\"125#网关服务-1\",\"1521\":\"125#token校验\",\"1522\":\"125#鉴权管理器\",\"1523\":\"125#用户信息写入请求头\",\"1524\":\"125#用户系统服务-1\",\"1525\":\"125#请求头拦截器\",\"1526\":\"125#全局异常处理器\",\"1527\":\"125#后端接口\",\"1528\":\"125#auth管理\",\"1529\":\"125#接口功能\",\"1530\":\"125#接口信息\",\"1531\":\"125#_1、token获取\",\"1532\":\"125#_2、token校验\",\"1533\":\"125#_3、用户退出\",\"1534\":\"125#_4、获取用户指定平台角色信息\",\"1535\":\"125#_5、获取用户可以访问的地址\",\"1536\":\"125#租户管理\",\"1537\":\"125#接口功能-1\",\"1538\":\"125#接口信息-1\",\"1539\":\"125#_1、新增\",\"1540\":\"125#_2、修改\",\"1541\":\"125#_3、分页查询\",\"1542\":\"125#_4、删除\",\"1543\":\"125#_5、批量删除\",\"1544\":\"125#_6、修改租户默认密码\",\"1545\":\"125#用户管理\",\"1546\":\"125#接口功能-2\",\"1547\":\"125#接口信息-2\",\"1548\":\"125#_1、新增-1\",\"1549\":\"125#_2、修改用户基本信息\",\"1550\":\"125#_3、分页获取用户数据\",\"1551\":\"125#_4、删除用户\",\"1552\":\"125#_5、修改用户状态\",\"1553\":\"125#_6、修改密码\",\"1554\":\"125#_7、修改个人基本信息\",\"1555\":\"125#_8、用户角色绑定\",\"1556\":\"125#租户角色管理\",\"1557\":\"125#接口功能-3\",\"1558\":\"125#接口信息-3\",\"1559\":\"125#_1、新增-2\",\"1560\":\"125#_2、修改-1\",\"1561\":\"125#_3、分页查询租户角色\",\"1562\":\"125#_4、删除-1\",\"1563\":\"125#_5、批量删除-1\",\"1564\":\"125#_6、获取所属租户所有客户端角色数据\",\"1565\":\"125#_7、获取指定组合角色已绑定的客户端角色\",\"1566\":\"125#_8、租户端角色绑定客户端角色\",\"1567\":\"125#平台管理\",\"1568\":\"125#接口功能-4\",\"1569\":\"125#接口信息-4\",\"1570\":\"125#_1、新增-3\",\"1571\":\"125#_2、修改-2\",\"1572\":\"125#_3、分页查询-1\",\"1573\":\"125#_4、删除-2\",\"1574\":\"125#_5、获取指定用户关联平台\",\"1575\":\"125#_6、修改平台密码\",\"1576\":\"125#平台菜单管理\",\"1577\":\"125#接口功能-5\",\"1578\":\"125#接口信息-5\",\"1579\":\"125#_1、新增-4\",\"1580\":\"125#_2、修改-3\",\"1581\":\"125#_3、删除\",\"1582\":\"125#_4、通过平台标识查询菜单树\",\"1583\":\"125#_5、通过平台标识查询前端路由信息\",\"1584\":\"125#_6、获取当前用户下指定平台菜单权限编码\",\"1585\":\"125#_7、获取指定平台服务列表\",\"1586\":\"125#_8、获取接口列表\",\"1587\":\"125#平台接口管理\",\"1588\":\"125#接口功能-6\",\"1589\":\"125#接口信息-6\",\"1590\":\"125#_1、新增-5\",\"1591\":\"125#_2、修改-4\",\"1592\":\"125#_3、分页查询-2\",\"1593\":\"125#_4、删除-3\",\"1594\":\"125#_5、批量删除-2\",\"1595\":\"125#_6、获取系统服务列表\",\"1596\":\"125#_7、批量导入系统接口\",\"1597\":\"125#_8、服务名称获取系统接口列表\",\"1598\":\"125#平台角色管理\",\"1599\":\"125#接口功能-7\",\"1600\":\"125#接口信息-7\",\"1601\":\"125#_1、新增-6\",\"1602\":\"125#_2、修改-5\",\"1603\":\"125#_3、分页查询-3\",\"1604\":\"125#_4、删除-4\",\"1605\":\"125#_5、批量删除-3\",\"1606\":\"125#_6、角色绑定菜单\",\"1607\":\"125#_7、获取指定角色绑定的菜单\",\"1608\":\"125#字典管理\",\"1609\":\"125#接口功能-8\",\"1610\":\"125#接口信息-8\",\"1611\":\"125#_1、新增-7\",\"1612\":\"125#_2、修改-6\",\"1613\":\"125#_3、分页查询-4\",\"1614\":\"125#_4、删除-5\",\"1615\":\"125#_5、批量删除-4\",\"1616\":\"125#_6、通过分类获取页面label绑定信息\",\"1617\":\"125#_7、复制字典\",\"1618\":\"125#字典子项管理\",\"1619\":\"125#接口功能-9\",\"1620\":\"125#接口信息-9\",\"1621\":\"125#_1、新增或修改字典子项\",\"1622\":\"125#_2、分页查询字典子项\",\"1623\":\"125#_4、删除-6\",\"1624\":\"125#_5、批量删除-5\",\"1625\":\"125#登录日志管理\",\"1626\":\"125#接口功能-10\",\"1627\":\"125#接口信息-10\",\"1628\":\"125#_1、分页查询\",\"1629\":\"125#_4、删除-7\",\"1630\":\"125#_5、批量删除-6\",\"1631\":\"125#_5、批量删除-7\",\"1632\":\"125#操作日志管理\",\"1633\":\"125#接口功能-11\",\"1634\":\"125#接口信息-11\",\"1635\":\"125#_1、分页查询-1\",\"1636\":\"125#_4、删除-8\",\"1637\":\"125#_5、批量删除-8\",\"1638\":\"125#oss管理\",\"1639\":\"125#接口功能-12\",\"1640\":\"125#接口信息-12\",\"1641\":\"125#_1、分页查询-2\",\"1642\":\"126\",\"1643\":\"126#用户中心租户间共享问题\",\"1644\":\"126#接口问题\",\"1645\":\"127\",\"1646\":\"127#微服务用户管理\",\"1647\":\"127#mysql\",\"1648\":\"127#redis\",\"1649\":\"127#nacos\",\"1650\":\"127#minio\",\"1651\":\"127#xxl-job\",\"1652\":\"127#开发架构\",\"1653\":\"128\",\"1654\":\"129\",\"1655\":\"130\",\"1656\":\"131\",\"1657\":\"132\",\"1658\":\"133\",\"1659\":\"134\",\"1660\":\"135\",\"1661\":\"136\",\"1662\":\"137\",\"1663\":\"138\",\"1664\":\"139\",\"1665\":\"140\",\"1666\":\"141\",\"1667\":\"142\",\"1668\":\"143\",\"1669\":\"144\",\"1670\":\"145\",\"1671\":\"146\",\"1672\":\"147\",\"1673\":\"148\",\"1674\":\"149\",\"1675\":\"150\",\"1676\":\"151\",\"1677\":\"152\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1,1],\"2\":[1,1],\"3\":[9,5],\"4\":[9,1],\"5\":[4,30],\"6\":[3,12],\"7\":[11,1],\"8\":[1,7],\"9\":[1,22],\"10\":[2,11],\"11\":[11,23],\"12\":[1,14],\"13\":[1,20],\"14\":[3,1],\"15\":[4,19],\"16\":[2,10],\"17\":[2,33],\"18\":[1,6],\"19\":[3,11],\"20\":[3,11],\"21\":[7,7],\"22\":[1,9],\"23\":[4,9],\"24\":[2,7],\"25\":[2,8],\"26\":[12,16],\"27\":[3,5],\"28\":[1,1],\"29\":[1,11],\"30\":[1,11],\"31\":[1,73],\"32\":[12,24],\"33\":[2,11],\"34\":[6,23],\"35\":[2,3],\"36\":[1,37],\"37\":[1,2],\"38\":[2,2],\"39\":[1,24],\"40\":[10,5],\"41\":[2,1],\"42\":[1,2],\"43\":[12,9],\"44\":[2,2],\"45\":[1,15],\"46\":[4,5],\"47\":[1,4],\"48\":[2,10],\"49\":[1,63],\"50\":[1,5],\"51\":[1,30],\"52\":[10,11],\"53\":[2,8],\"54\":[1,3],\"55\":[1,5],\"56\":[7,16],\"57\":[3,1],\"58\":[2,2],\"59\":[3,11],\"60\":[null,null,1],\"61\":[null,null,1],\"62\":[1],\"63\":[1,4],\"64\":[1],\"65\":[1,18],\"66\":[1],\"67\":[1,6],\"68\":[1,2],\"69\":[1,2],\"70\":[1],\"71\":[1,4],\"72\":[1,4],\"73\":[2,5],\"74\":[1,4],\"75\":[1,6],\"76\":[1,2],\"77\":[1,2],\"78\":[1,3],\"79\":[1,2],\"80\":[1,2],\"81\":[1,6],\"82\":[1],\"83\":[1,5],\"84\":[1,3],\"85\":[1],\"86\":[1,29],\"87\":[2,1],\"88\":[1],\"89\":[1,6],\"90\":[1,7],\"91\":[1,9],\"92\":[1,5],\"93\":[1,5],\"94\":[1,6],\"95\":[1],\"96\":[1,22],\"97\":[1,4],\"98\":[1,9],\"99\":[1,9],\"100\":[1],\"101\":[1],\"102\":[1,20],\"103\":[1,126],\"104\":[2,12],\"105\":[1,3],\"106\":[1,26],\"107\":[1],\"108\":[1,21],\"109\":[1,1],\"110\":[1,1],\"111\":[1,8],\"112\":[1,3],\"113\":[1,10],\"114\":[1,1],\"115\":[1,7],\"116\":[1,38],\"117\":[1,56],\"118\":[1],\"119\":[1],\"120\":[1],\"121\":[2,21],\"122\":[1,24],\"123\":[1,44],\"124\":[1,45],\"125\":[1],\"126\":[3,10],\"127\":[1,22],\"128\":[1,32],\"129\":[1,52],\"130\":[1,7],\"131\":[1,61],\"132\":[1,4],\"133\":[1,57],\"134\":[1],\"135\":[1,38],\"136\":[1],\"137\":[3,19],\"138\":[2,42],\"139\":[1,103],\"140\":[1,84],\"141\":[1,21],\"142\":[1,18],\"143\":[1,32],\"144\":[1,11],\"145\":[1,27],\"146\":[1,33],\"147\":[1,6],\"148\":[1,45],\"149\":[1,6],\"150\":[1],\"151\":[1,44],\"152\":[1,106],\"153\":[1,23],\"154\":[1,63],\"155\":[1,36],\"156\":[1,21],\"157\":[1,37],\"158\":[1,59],\"159\":[2,37],\"160\":[5,38],\"161\":[1],\"162\":[1,7],\"163\":[1],\"164\":[2,38],\"165\":[1,8],\"166\":[1],\"167\":[1,1],\"168\":[1,12],\"169\":[1,9],\"170\":[1,16],\"171\":[1,4],\"172\":[2,16],\"173\":[1,84],\"174\":[3,28],\"175\":[1],\"176\":[1,10],\"177\":[1,1],\"178\":[1],\"179\":[1,50],\"180\":[2,4],\"181\":[1,26],\"182\":[1],\"183\":[1],\"184\":[1],\"185\":[1,6],\"186\":[2,30],\"187\":[1],\"188\":[1,21],\"189\":[2,28],\"190\":[1,110],\"191\":[1],\"192\":[1,35],\"193\":[1],\"194\":[1,3],\"195\":[1],\"196\":[1],\"197\":[1],\"198\":[1,17],\"199\":[3,7],\"200\":[1,16],\"201\":[2,11],\"202\":[2,42],\"203\":[2,13],\"204\":[1,3],\"205\":[1,6],\"206\":[3,23],\"207\":[2,7],\"208\":[4,9],\"209\":[3,11],\"210\":[2,36],\"211\":[1,16],\"212\":[1,71],\"213\":[2,63],\"214\":[2,17],\"215\":[1,18],\"216\":[4,16],\"217\":[3,3],\"218\":[2,55],\"219\":[1,31],\"220\":[2,3],\"221\":[2,18],\"222\":[3,4],\"223\":[2,13],\"224\":[2,22],\"225\":[1],\"226\":[1],\"227\":[1,1],\"228\":[1,26],\"229\":[1,5],\"230\":[1,15],\"231\":[1],\"232\":[1,19],\"233\":[1,11],\"234\":[1,53],\"235\":[1,10],\"236\":[1,253],\"237\":[1,7],\"238\":[1,3],\"239\":[1,8],\"240\":[1,11],\"241\":[1,121],\"242\":[1],\"243\":[1,116],\"244\":[1,16],\"245\":[1],\"246\":[1,7],\"247\":[2,1],\"248\":[1,5],\"249\":[1,74],\"250\":[1,59],\"251\":[1,11],\"252\":[1,61],\"253\":[1],\"254\":[2],\"255\":[1,40],\"256\":[1,31],\"257\":[1,2],\"258\":[1],\"259\":[1],\"260\":[1],\"261\":[1,1],\"262\":[1],\"263\":[1,1],\"264\":[1,31],\"265\":[1,12],\"266\":[1,11],\"267\":[1,15],\"268\":[1,14],\"269\":[2,17],\"270\":[1,21],\"271\":[1,50],\"272\":[1,14],\"273\":[1,17],\"274\":[1,17],\"275\":[1,43],\"276\":[2],\"277\":[1,70],\"278\":[1],\"279\":[1,36],\"280\":[1,26],\"281\":[1],\"282\":[1,111],\"283\":[3,13],\"284\":[2,19],\"285\":[1,23],\"286\":[1,26],\"287\":[1,21],\"288\":[1,27],\"289\":[3,14],\"290\":[1,56],\"291\":[1,44],\"292\":[1,24],\"293\":[1],\"294\":[1,11],\"295\":[1,39],\"296\":[2,23],\"297\":[1,85],\"298\":[1,92],\"299\":[1],\"300\":[1],\"301\":[2],\"302\":[1,17],\"303\":[2,14],\"304\":[3,25],\"305\":[3,28],\"306\":[1,15],\"307\":[1,3],\"308\":[1,15],\"309\":[1,27],\"310\":[1,9],\"311\":[2,35],\"312\":[1,59],\"313\":[1],\"314\":[1],\"315\":[1,33],\"316\":[1,11],\"317\":[1,14],\"318\":[3,60],\"319\":[3,33],\"320\":[1,10],\"321\":[1,2],\"322\":[1,5],\"323\":[2],\"324\":[1],\"325\":[2,9],\"326\":[2,30],\"327\":[1,6],\"328\":[1],\"329\":[1,116],\"330\":[1,61],\"331\":[1,37],\"332\":[1,2],\"333\":[1,35],\"334\":[1,54],\"335\":[1],\"336\":[1,5],\"337\":[1,4],\"338\":[1,12],\"339\":[1,7],\"340\":[1,2],\"341\":[1,33],\"342\":[1,2],\"343\":[3,30],\"344\":[1,8],\"345\":[2,193],\"346\":[2,149],\"347\":[2,4],\"348\":[1,93],\"349\":[1,2],\"350\":[1,1],\"351\":[1],\"352\":[2],\"353\":[2,37],\"354\":[5,44],\"355\":[5,6],\"356\":[1,1],\"357\":[3,16],\"358\":[6,32],\"359\":[3,40],\"360\":[3,47],\"361\":[1],\"362\":[1],\"363\":[1,1],\"364\":[1],\"365\":[2,1],\"366\":[2],\"367\":[2,6],\"368\":[2,6],\"369\":[2],\"370\":[2,6],\"371\":[2],\"372\":[2,6],\"373\":[2,14],\"374\":[4,1],\"375\":[2,16],\"376\":[1,26],\"377\":[2,69],\"378\":[2,38],\"379\":[3,46],\"380\":[1,8],\"381\":[1],\"382\":[1,41],\"383\":[1,81],\"384\":[1],\"385\":[1,9],\"386\":[1,77],\"387\":[1],\"388\":[1,1],\"389\":[1,3],\"390\":[1],\"391\":[1,3],\"392\":[1,2],\"393\":[1],\"394\":[1,7],\"395\":[1,3],\"396\":[1],\"397\":[1,175],\"398\":[1,17],\"399\":[1,212],\"400\":[1,4],\"401\":[1,13],\"402\":[1],\"403\":[1,27],\"404\":[1,1],\"405\":[1,4],\"406\":[1,36],\"407\":[1],\"408\":[1],\"409\":[1],\"410\":[1,62],\"411\":[1,160],\"412\":[3],\"413\":[1,68],\"414\":[3,2],\"415\":[2,3],\"416\":[1,8],\"417\":[1,2],\"418\":[1,11],\"419\":[1,6],\"420\":[1],\"421\":[1,71],\"422\":[1,54],\"423\":[1,1],\"424\":[2],\"425\":[2],\"426\":[1],\"427\":[1,2],\"428\":[2],\"429\":[1,9],\"430\":[1,44],\"431\":[1],\"432\":[3,3],\"433\":[1,19],\"434\":[1,49],\"435\":[1,104],\"436\":[1,10],\"437\":[1],\"438\":[1,111],\"439\":[2,59],\"440\":[1,15],\"441\":[1,32],\"442\":[1,5],\"443\":[1],\"444\":[1],\"445\":[1,18],\"446\":[1,57],\"447\":[1,24],\"448\":[1,2],\"449\":[1],\"450\":[1,61],\"451\":[1,27],\"452\":[1],\"453\":[1,9],\"454\":[1],\"455\":[1,9],\"456\":[1,64],\"457\":[1,12],\"458\":[1,2],\"459\":[1,1],\"460\":[1,4],\"461\":[1],\"462\":[1],\"463\":[1,1],\"464\":[null,null,1],\"465\":[1],\"466\":[1,4],\"467\":[1,74],\"468\":[1,32],\"469\":[1],\"470\":[2],\"471\":[1,88],\"472\":[1],\"473\":[1,78],\"474\":[null,null,1],\"475\":[1],\"476\":[1,64],\"477\":[1],\"478\":[1,1],\"479\":[1,108],\"480\":[1,49],\"481\":[1,49],\"482\":[1,6],\"483\":[1,8],\"484\":[1,1],\"485\":[1,1],\"486\":[1,24],\"487\":[1,7],\"488\":[1,12],\"489\":[1,5],\"490\":[1,26],\"491\":[1,50],\"492\":[1,3],\"493\":[1,4],\"494\":[1,62],\"495\":[2,10],\"496\":[1,2],\"497\":[1,3],\"498\":[1,1],\"499\":[null,null,1],\"500\":[1,21],\"501\":[1],\"502\":[1],\"503\":[1,2],\"504\":[1,3],\"505\":[1,42],\"506\":[1],\"507\":[1,1],\"508\":[1],\"509\":[1,61],\"510\":[1],\"511\":[1],\"512\":[1],\"513\":[1,41],\"514\":[1],\"515\":[1],\"516\":[1],\"517\":[1],\"518\":[1],\"519\":[1],\"520\":[1],\"521\":[1],\"522\":[1],\"523\":[1],\"524\":[2],\"525\":[1],\"526\":[1,13],\"527\":[1,16],\"528\":[1],\"529\":[1,3],\"530\":[1,18],\"531\":[1,10],\"532\":[1],\"533\":[1,2],\"534\":[1],\"535\":[1,45],\"536\":[1,2],\"537\":[1,44],\"538\":[1,2],\"539\":[1,1],\"540\":[1,1],\"541\":[1],\"542\":[1,1],\"543\":[2,1],\"544\":[1],\"545\":[1,1],\"546\":[1,2],\"547\":[1,1],\"548\":[1,8],\"549\":[1,1],\"550\":[1,1],\"551\":[1,1],\"552\":[1,3],\"553\":[1,1],\"554\":[1,2],\"555\":[1,1],\"556\":[1,62],\"557\":[1,51],\"558\":[1,3],\"559\":[1,7],\"560\":[null,null,1],\"561\":[1,8],\"562\":[3,20],\"563\":[1],\"564\":[1,6],\"565\":[1,5],\"566\":[2,4],\"567\":[1,2],\"568\":[2],\"569\":[1],\"570\":[1],\"571\":[null,null,1],\"572\":[1],\"573\":[1,3],\"574\":[1,1],\"575\":[1,4],\"576\":[1],\"577\":[1],\"578\":[2,10],\"579\":[1,11],\"580\":[1,8],\"581\":[1],\"582\":[1,10],\"583\":[1,19],\"584\":[1,16],\"585\":[2,47],\"586\":[1,6],\"587\":[1,2],\"588\":[1,4],\"589\":[1,32],\"590\":[null,null,1],\"591\":[1],\"592\":[1,23],\"593\":[1,75],\"594\":[1,42],\"595\":[1,35],\"596\":[1,148],\"597\":[null,null,1],\"598\":[1],\"599\":[1,3],\"600\":[1,9],\"601\":[2,17],\"602\":[1,86],\"603\":[null,null,1],\"604\":[1,20],\"605\":[null,null,1],\"606\":[1,1],\"607\":[1,3],\"608\":[1,1],\"609\":[1,7],\"610\":[1],\"611\":[1],\"612\":[1],\"613\":[1],\"614\":[1],\"615\":[2],\"616\":[1,16],\"617\":[1,2],\"618\":[1],\"619\":[null,null,1],\"620\":[1],\"621\":[1,32],\"622\":[1],\"623\":[1,85],\"624\":[1,1],\"625\":[2,38],\"626\":[1,6],\"627\":[1,20],\"628\":[null,null,1],\"629\":[1],\"630\":[null,null,1],\"631\":[1],\"632\":[2,92],\"633\":[null,null,1],\"634\":[1,1],\"635\":[1,24],\"636\":[null,null,1],\"637\":[1],\"638\":[1],\"639\":[1,13],\"640\":[1,5],\"641\":[1,1],\"642\":[1,26],\"643\":[1,34],\"644\":[1],\"645\":[1],\"646\":[1,47],\"647\":[1,154],\"648\":[1,104],\"649\":[1,163],\"650\":[1],\"651\":[1,23],\"652\":[1,215],\"653\":[null,null,1],\"654\":[1],\"655\":[1,4],\"656\":[1,122],\"657\":[1,50],\"658\":[1,152],\"659\":[null,null,1],\"660\":[1,1],\"661\":[1],\"662\":[1],\"663\":[1],\"664\":[1,3],\"665\":[1],\"666\":[1,2],\"667\":[1],\"668\":[1,18],\"669\":[1],\"670\":[1],\"671\":[1],\"672\":[1,86],\"673\":[1],\"674\":[1,14],\"675\":[1,8],\"676\":[1,6],\"677\":[1],\"678\":[1,54],\"679\":[1,40],\"680\":[1,7],\"681\":[3,5],\"682\":[1,2],\"683\":[1,3],\"684\":[4],\"685\":[3,3],\"686\":[2,1],\"687\":[2,1],\"688\":[1,4],\"689\":[5,3],\"690\":[2,3],\"691\":[3,3],\"692\":[1,11],\"693\":[1,4],\"694\":[1,7],\"695\":[3,7],\"696\":[1,5],\"697\":[1],\"698\":[1],\"699\":[null,null,1],\"700\":[1],\"701\":[1],\"702\":[2,10],\"703\":[1,11],\"704\":[1,8],\"705\":[1],\"706\":[1,16],\"707\":[2,47],\"708\":[1,6],\"709\":[1,2],\"710\":[1,4],\"711\":[1,32],\"712\":[null,null,1],\"713\":[1],\"714\":[1],\"715\":[2,1],\"716\":[1,78],\"717\":[1,25],\"718\":[1],\"719\":[1,48],\"720\":[1,15],\"721\":[null,null,1],\"722\":[1,25],\"723\":[1,24],\"724\":[4,4],\"725\":[1,19],\"726\":[1,13],\"727\":[null,null,1],\"728\":[1],\"729\":[1,10],\"730\":[1,93],\"731\":[1],\"732\":[1,2],\"733\":[1,4],\"734\":[1,5],\"735\":[4,7],\"736\":[1,12],\"737\":[1,9],\"738\":[1,12],\"739\":[1,4],\"740\":[1,4],\"741\":[1,5],\"742\":[1,8],\"743\":[1,5],\"744\":[1,14],\"745\":[1,3],\"746\":[2,1],\"747\":[1],\"748\":[1,51],\"749\":[1,70],\"750\":[1,1],\"751\":[3,17],\"752\":[1,2],\"753\":[1,1],\"754\":[1,3],\"755\":[1],\"756\":[1,19],\"757\":[1,2],\"758\":[4,40],\"759\":[2,31],\"760\":[4,27],\"761\":[1,4],\"762\":[2,32],\"763\":[2,18],\"764\":[2,13],\"765\":[3,15],\"766\":[3,14],\"767\":[2,30],\"768\":[2,5],\"769\":[1,18],\"770\":[1,21],\"771\":[1,6],\"772\":[1],\"773\":[1,30],\"774\":[1,17],\"775\":[1,7],\"776\":[1,8],\"777\":[1],\"778\":[1,20],\"779\":[1,7],\"780\":[1,217],\"781\":[1,1],\"782\":[1,34],\"783\":[1,22],\"784\":[2],\"785\":[1],\"786\":[2,186],\"787\":[1,1],\"788\":[1],\"789\":[1,15],\"790\":[1,25],\"791\":[1,8],\"792\":[1,189],\"793\":[1],\"794\":[1,1],\"795\":[1],\"796\":[1],\"797\":[1,6],\"798\":[1,76],\"799\":[1,15],\"800\":[1],\"801\":[1,239],\"802\":[1,132],\"803\":[1,1],\"804\":[1,90],\"805\":[1],\"806\":[1],\"807\":[1],\"808\":[1,4],\"809\":[1],\"810\":[1],\"811\":[1,9],\"812\":[2,1],\"813\":[2],\"814\":[1,4],\"815\":[1,1],\"816\":[1,5],\"817\":[1],\"818\":[3,3],\"819\":[1,7],\"820\":[1,2],\"821\":[1,1],\"822\":[1],\"823\":[1],\"824\":[1,24],\"825\":[1,3],\"826\":[1,3],\"827\":[1,5],\"828\":[1,3],\"829\":[1,1],\"830\":[2],\"831\":[1,1],\"832\":[2,2],\"833\":[1,124],\"834\":[1,10],\"835\":[1,3],\"836\":[1,3],\"837\":[1,3],\"838\":[1,3],\"839\":[1,3],\"840\":[1,5],\"841\":[1,1],\"842\":[2,5],\"843\":[1,12],\"844\":[1],\"845\":[1,4],\"846\":[1,10],\"847\":[1,2],\"848\":[2,6],\"849\":[1,7],\"850\":[1,100],\"851\":[1,37],\"852\":[1,330],\"853\":[1,52],\"854\":[1,3],\"855\":[1,2],\"856\":[2],\"857\":[1,4],\"858\":[1,36],\"859\":[1,11],\"860\":[1,23],\"861\":[1,4],\"862\":[1,24],\"863\":[1],\"864\":[1,2],\"865\":[1,5],\"866\":[1,3],\"867\":[1,3],\"868\":[1],\"869\":[1,14],\"870\":[1,6],\"871\":[1,37],\"872\":[1,43],\"873\":[2,4],\"874\":[1,3],\"875\":[2,2],\"876\":[1,1],\"877\":[1],\"878\":[1,1],\"879\":[1,4],\"880\":[1,12],\"881\":[2,1],\"882\":[1],\"883\":[1],\"884\":[1,8],\"885\":[1,1],\"886\":[2,10],\"887\":[2,1],\"888\":[2],\"889\":[1,1],\"890\":[1,1],\"891\":[1,1],\"892\":[1,1],\"893\":[1,28],\"894\":[2,2],\"895\":[1],\"896\":[2,4],\"897\":[1,3],\"898\":[1,2],\"899\":[1,12],\"900\":[1,99],\"901\":[2],\"902\":[1,82],\"903\":[1],\"904\":[1],\"905\":[1,4],\"906\":[1,7],\"907\":[1],\"908\":[1,28],\"909\":[1,32],\"910\":[1,54],\"911\":[1,213],\"912\":[1,20],\"913\":[1,1],\"914\":[1,167],\"915\":[1,46],\"916\":[1,1],\"917\":[1],\"918\":[2,2],\"919\":[1,11],\"920\":[1,17],\"921\":[1,5],\"922\":[1],\"923\":[1,4],\"924\":[1,40],\"925\":[1,11],\"926\":[1,1],\"927\":[1],\"928\":[1,11],\"929\":[1,22],\"930\":[1,6],\"931\":[1,11],\"932\":[1,29],\"933\":[1,1],\"934\":[1,23],\"935\":[1,46],\"936\":[1],\"937\":[1],\"938\":[1],\"939\":[1],\"940\":[1],\"941\":[1],\"942\":[1],\"943\":[1,22],\"944\":[1,4],\"945\":[1,15],\"946\":[1,8],\"947\":[1,7],\"948\":[1,11],\"949\":[1],\"950\":[1],\"951\":[1],\"952\":[1],\"953\":[1],\"954\":[2],\"955\":[2],\"956\":[1],\"957\":[1],\"958\":[1],\"959\":[4],\"960\":[1],\"961\":[1],\"962\":[1],\"963\":[1],\"964\":[1,3],\"965\":[1,27],\"966\":[1],\"967\":[1],\"968\":[1,6],\"969\":[1,24],\"970\":[1,57],\"971\":[1,52],\"972\":[1],\"973\":[2,23],\"974\":[1,74],\"975\":[1,60],\"976\":[1,8],\"977\":[3,38],\"978\":[2],\"979\":[3],\"980\":[1,9],\"981\":[1,24],\"982\":[1,128],\"983\":[1,54],\"984\":[1,7],\"985\":[1,43],\"986\":[1,30],\"987\":[1,4],\"988\":[1,46],\"989\":[1,48],\"990\":[1],\"991\":[1,103],\"992\":[1,115],\"993\":[1,66],\"994\":[1,37],\"995\":[1,77],\"996\":[1,40],\"997\":[1],\"998\":[1,50],\"999\":[1,2],\"1000\":[1,16],\"1001\":[1],\"1002\":[1,24],\"1003\":[1,1],\"1004\":[1],\"1005\":[1,1],\"1006\":[1,2],\"1007\":[1,9],\"1008\":[1],\"1009\":[1],\"1010\":[1],\"1011\":[1],\"1012\":[1,4],\"1013\":[1,78],\"1014\":[1],\"1015\":[1,12],\"1016\":[1],\"1017\":[1,1],\"1018\":[1,2],\"1019\":[1],\"1020\":[1],\"1021\":[1],\"1022\":[1,2],\"1023\":[4,2],\"1024\":[1,9],\"1025\":[1,42],\"1026\":[2,65],\"1027\":[1],\"1028\":[1,9],\"1029\":[1,6],\"1030\":[1,3],\"1031\":[1,65],\"1032\":[1,162],\"1033\":[1],\"1034\":[1,11],\"1035\":[1,2],\"1036\":[1,73],\"1037\":[1,1],\"1038\":[1,6],\"1039\":[1,2],\"1040\":[1],\"1041\":[1],\"1042\":[1,27],\"1043\":[2,7],\"1044\":[1,18],\"1045\":[1,2],\"1046\":[1],\"1047\":[1,4],\"1048\":[1,53],\"1049\":[3,26],\"1050\":[1,18],\"1051\":[1,7],\"1052\":[2,5],\"1053\":[2,1],\"1054\":[2,7],\"1055\":[1],\"1056\":[1,19],\"1057\":[1,8],\"1058\":[1,66],\"1059\":[1,47],\"1060\":[1],\"1061\":[1,4],\"1062\":[1,6],\"1063\":[1,1],\"1064\":[1],\"1065\":[1,31],\"1066\":[1,42],\"1067\":[1],\"1068\":[1,7],\"1069\":[1],\"1070\":[1],\"1071\":[2],\"1072\":[1,8],\"1073\":[1,15],\"1074\":[2,36],\"1075\":[1,4],\"1076\":[1,7],\"1077\":[4,3],\"1078\":[1,38],\"1079\":[1,78],\"1080\":[1],\"1081\":[1,1],\"1082\":[1,4],\"1083\":[1,3],\"1084\":[1,5],\"1085\":[1],\"1086\":[1],\"1087\":[1,37],\"1088\":[1,4],\"1089\":[1,8],\"1090\":[1,8],\"1091\":[1,3],\"1092\":[2,25],\"1093\":[2,63],\"1094\":[1,1],\"1095\":[1,16],\"1096\":[1,30],\"1097\":[1,17],\"1098\":[4,13],\"1099\":[1,9],\"1100\":[1,4],\"1101\":[1,1],\"1102\":[1,15],\"1103\":[1,12],\"1104\":[1,2],\"1105\":[1,10],\"1106\":[1,2],\"1107\":[1,2],\"1108\":[1,1],\"1109\":[1,17],\"1110\":[1,6],\"1111\":[2,14],\"1112\":[1,3],\"1113\":[1,20],\"1114\":[1,17],\"1115\":[1,44],\"1116\":[1,48],\"1117\":[2,9],\"1118\":[1,54],\"1119\":[1,9],\"1120\":[1,74],\"1121\":[1,45],\"1122\":[1,53],\"1123\":[1,41],\"1124\":[1],\"1125\":[1,19],\"1126\":[1,44],\"1127\":[1,56],\"1128\":[2,38],\"1129\":[1,42],\"1130\":[1,201],\"1131\":[1,24],\"1132\":[1,32],\"1133\":[1,36],\"1134\":[1,27],\"1135\":[1,11],\"1136\":[1,90],\"1137\":[1,100],\"1138\":[1,15],\"1139\":[1,78],\"1140\":[1,40],\"1141\":[2,76],\"1142\":[1,17],\"1143\":[1],\"1144\":[1,47],\"1145\":[1,17],\"1146\":[1,15],\"1147\":[1,37],\"1148\":[1,17],\"1149\":[3,15],\"1150\":[2,20],\"1151\":[1,61],\"1152\":[1],\"1153\":[1,38],\"1154\":[1,1],\"1155\":[1,20],\"1156\":[1,1],\"1157\":[1,4],\"1158\":[1,1],\"1159\":[1,47],\"1160\":[1,6],\"1161\":[1,53],\"1162\":[1,40],\"1163\":[2,16],\"1164\":[2,6],\"1165\":[1],\"1166\":[6],\"1167\":[1,27],\"1168\":[1,9],\"1169\":[2,3],\"1170\":[3,53],\"1171\":[1,44],\"1172\":[1],\"1173\":[2,4],\"1174\":[1,4],\"1175\":[1],\"1176\":[1,8],\"1177\":[3,45],\"1178\":[1,5],\"1179\":[1,22],\"1180\":[1,12],\"1181\":[1,4],\"1182\":[1,17],\"1183\":[1,15],\"1184\":[1,11],\"1185\":[1,14],\"1186\":[1,7],\"1187\":[1,75],\"1188\":[1,27],\"1189\":[1,8],\"1190\":[1,14],\"1191\":[1,10],\"1192\":[1,5],\"1193\":[1,10],\"1194\":[1,11],\"1195\":[1,1],\"1196\":[1],\"1197\":[1,102],\"1198\":[1,52],\"1199\":[1,1],\"1200\":[1,32],\"1201\":[1,31],\"1202\":[1,100],\"1203\":[1,25],\"1204\":[1],\"1205\":[1,11],\"1206\":[1,32],\"1207\":[1,18],\"1208\":[1],\"1209\":[1,2],\"1210\":[2,174],\"1211\":[3,75],\"1212\":[1],\"1213\":[1,2],\"1214\":[1,12],\"1215\":[1,111],\"1216\":[1,6],\"1217\":[1,4],\"1218\":[1,2],\"1219\":[1,30],\"1220\":[1,45],\"1221\":[1,28],\"1222\":[1,62],\"1223\":[1,21],\"1224\":[1,2],\"1225\":[1,4],\"1226\":[1,22],\"1227\":[1,44],\"1228\":[1,2],\"1229\":[1,13],\"1230\":[2,24],\"1231\":[2,8],\"1232\":[1],\"1233\":[1,9],\"1234\":[1,9],\"1235\":[3],\"1236\":[1,3],\"1237\":[1,4],\"1238\":[1,15],\"1239\":[1,9],\"1240\":[1,25],\"1241\":[1,13],\"1242\":[1],\"1243\":[1,40],\"1244\":[1,51],\"1245\":[1,37],\"1246\":[1,54],\"1247\":[2,11],\"1248\":[1,139],\"1249\":[1,44],\"1250\":[1,2],\"1251\":[1,31],\"1252\":[3,23],\"1253\":[2],\"1254\":[1,35],\"1255\":[4],\"1256\":[1,64],\"1257\":[1,46],\"1258\":[1],\"1259\":[1,147],\"1260\":[1],\"1261\":[1],\"1262\":[1,18],\"1263\":[1],\"1264\":[1],\"1265\":[1,7],\"1266\":[1,4],\"1267\":[1],\"1268\":[3],\"1269\":[1,23],\"1270\":[1],\"1271\":[1,28],\"1272\":[3,35],\"1273\":[1,6],\"1274\":[1],\"1275\":[1,35],\"1276\":[1,13],\"1277\":[1],\"1278\":[1,17],\"1279\":[1,10],\"1280\":[1,9],\"1281\":[1],\"1282\":[1],\"1283\":[1,28],\"1284\":[2,11],\"1285\":[2,4],\"1286\":[2,2],\"1287\":[1,3],\"1288\":[1,8],\"1289\":[1,5],\"1290\":[1,4],\"1291\":[2,4],\"1292\":[2,16],\"1293\":[1,6],\"1294\":[1,5],\"1295\":[1,12],\"1296\":[1,20],\"1297\":[1,29],\"1298\":[1],\"1299\":[1,3],\"1300\":[1,3],\"1301\":[1,20],\"1302\":[2,11],\"1303\":[1],\"1304\":[1,32],\"1305\":[3,14],\"1306\":[1],\"1307\":[1],\"1308\":[1,11],\"1309\":[2,19],\"1310\":[3],\"1311\":[2,49],\"1312\":[1,17],\"1313\":[1,3],\"1314\":[1],\"1315\":[1],\"1316\":[1],\"1317\":[1,30],\"1318\":[1,2],\"1319\":[1,37],\"1320\":[2,22],\"1321\":[2,14],\"1322\":[1,1],\"1323\":[1,1],\"1324\":[1,1],\"1325\":[1,5],\"1326\":[1,7],\"1327\":[1,15],\"1328\":[1,18],\"1329\":[1,3],\"1330\":[1,17],\"1331\":[1,40],\"1332\":[1,1],\"1333\":[1],\"1334\":[1],\"1335\":[1,37],\"1336\":[1],\"1337\":[1],\"1338\":[1,10],\"1339\":[4],\"1340\":[1],\"1341\":[2,2],\"1342\":[2,45],\"1343\":[1],\"1344\":[1,46],\"1345\":[1,138],\"1346\":[2],\"1347\":[2,10],\"1348\":[1,8],\"1349\":[1,6],\"1350\":[2,2],\"1351\":[1],\"1352\":[1,14],\"1353\":[1,49],\"1354\":[2,5],\"1355\":[2,1],\"1356\":[1],\"1357\":[1,9],\"1358\":[1,10],\"1359\":[2,18],\"1360\":[1,5],\"1361\":[1,3],\"1362\":[1,3],\"1363\":[1,2],\"1364\":[1,3],\"1365\":[1],\"1366\":[1,1],\"1367\":[1],\"1368\":[1,2],\"1369\":[1],\"1370\":[1],\"1371\":[1,4],\"1372\":[1,4],\"1373\":[1,17],\"1374\":[1,11],\"1375\":[1],\"1376\":[2,1],\"1377\":[2,4],\"1378\":[2],\"1379\":[3],\"1380\":[1],\"1381\":[1,10],\"1382\":[1,15],\"1383\":[1,63],\"1384\":[1,4],\"1385\":[1],\"1386\":[1,1],\"1387\":[1],\"1388\":[1,1],\"1389\":[1],\"1390\":[1],\"1391\":[1,11],\"1392\":[1,2],\"1393\":[1],\"1394\":[1],\"1395\":[1,5],\"1396\":[1,7],\"1397\":[4,21],\"1398\":[1,12],\"1399\":[1,15],\"1400\":[1,13],\"1401\":[1,7],\"1402\":[1,10],\"1403\":[1,4],\"1404\":[1],\"1405\":[1,1],\"1406\":[1],\"1407\":[1,105],\"1408\":[2,18],\"1409\":[2],\"1410\":[1],\"1411\":[1,15],\"1412\":[2,20],\"1413\":[2,5],\"1414\":[1,21],\"1415\":[6,30],\"1416\":[1,1],\"1417\":[1,4],\"1418\":[1,1],\"1419\":[1,35],\"1420\":[1],\"1421\":[2,45],\"1422\":[1,11],\"1423\":[1],\"1424\":[1],\"1425\":[1,78],\"1426\":[1,3],\"1427\":[1],\"1428\":[1],\"1429\":[1,7],\"1430\":[2,7],\"1431\":[2],\"1432\":[1,4],\"1433\":[3,14],\"1434\":[1,6],\"1435\":[1],\"1436\":[1],\"1437\":[1],\"1438\":[1],\"1439\":[1],\"1440\":[1,13],\"1441\":[1],\"1442\":[1],\"1443\":[1],\"1444\":[1,10],\"1445\":[1,477],\"1446\":[1,23],\"1447\":[1,8],\"1448\":[1,3],\"1449\":[1,2],\"1450\":[1,117],\"1451\":[1,48],\"1452\":[2,54],\"1453\":[1],\"1454\":[1,6],\"1455\":[1,52],\"1456\":[1,11],\"1457\":[1],\"1458\":[1,51],\"1459\":[1,12],\"1460\":[1,7],\"1461\":[1],\"1462\":[1],\"1463\":[1,14],\"1464\":[1,54],\"1465\":[1,55],\"1466\":[1,52],\"1467\":[1,73],\"1468\":[2,20],\"1469\":[1,2],\"1470\":[1,5],\"1471\":[1,1],\"1472\":[1,9],\"1473\":[1],\"1474\":[1,14],\"1475\":[1,46],\"1476\":[1],\"1477\":[1,20],\"1478\":[1,6],\"1479\":[1,32],\"1480\":[1,34],\"1481\":[1],\"1482\":[1,21],\"1483\":[1,5],\"1484\":[1,55],\"1485\":[1],\"1486\":[1,108],\"1487\":[1,2],\"1488\":[1,2],\"1489\":[1,7],\"1490\":[1],\"1491\":[1,27],\"1492\":[1],\"1493\":[1],\"1494\":[1,3],\"1495\":[1,11],\"1496\":[1,5],\"1497\":[1],\"1498\":[1,9],\"1499\":[1],\"1500\":[1,8],\"1501\":[1,37],\"1502\":[1,16],\"1503\":[1,44],\"1504\":[1],\"1505\":[1],\"1506\":[1,34],\"1507\":[1],\"1508\":[1,3],\"1509\":[1],\"1510\":[1],\"1511\":[1,5],\"1512\":[1],\"1513\":[1,91],\"1514\":[1,119],\"1515\":[1,176],\"1516\":[1,7],\"1517\":[1,22],\"1518\":[1,68],\"1519\":[1,33],\"1520\":[1,12],\"1521\":[1,47],\"1522\":[1,88],\"1523\":[1,54],\"1524\":[1,12],\"1525\":[1,38],\"1526\":[1,46],\"1527\":[1],\"1528\":[1],\"1529\":[1,5],\"1530\":[1],\"1531\":[2,86],\"1532\":[2,103],\"1533\":[2,36],\"1534\":[2,41],\"1535\":[2,46],\"1536\":[1],\"1537\":[1,4],\"1538\":[1],\"1539\":[2,52],\"1540\":[2,53],\"1541\":[2,73],\"1542\":[2,31],\"1543\":[2,37],\"1544\":[2,36],\"1545\":[1],\"1546\":[1,5],\"1547\":[1],\"1548\":[2,52],\"1549\":[2,52],\"1550\":[2,80],\"1551\":[2,32],\"1552\":[2,40],\"1553\":[2,34],\"1554\":[2,39],\"1555\":[2,35],\"1556\":[1],\"1557\":[1,4],\"1558\":[1],\"1559\":[2,37],\"1560\":[2,39],\"1561\":[2,60],\"1562\":[2,32],\"1563\":[2,39],\"1564\":[2,76],\"1565\":[2,59],\"1566\":[2,36],\"1567\":[1],\"1568\":[1,3],\"1569\":[1],\"1570\":[2,76],\"1571\":[2,69],\"1572\":[2,66],\"1573\":[2,31],\"1574\":[2,59],\"1575\":[2,36],\"1576\":[1],\"1577\":[1,6],\"1578\":[1],\"1579\":[2,66],\"1580\":[2,68],\"1581\":[2,32],\"1582\":[2,95],\"1583\":[2,72],\"1584\":[2,63],\"1585\":[2,34],\"1586\":[2,171],\"1587\":[1],\"1588\":[1,4],\"1589\":[1],\"1590\":[2,41],\"1591\":[2,44],\"1592\":[2,113],\"1593\":[2,31],\"1594\":[2,37],\"1595\":[2,25],\"1596\":[2,35],\"1597\":[2,56],\"1598\":[1],\"1599\":[1,3],\"1600\":[1],\"1601\":[2,37],\"1602\":[2,39],\"1603\":[2,58],\"1604\":[2,29],\"1605\":[2,38],\"1606\":[2,34],\"1607\":[2,50],\"1608\":[1],\"1609\":[1,3],\"1610\":[1],\"1611\":[2,35],\"1612\":[2,38],\"1613\":[2,94],\"1614\":[2,29],\"1615\":[2,38],\"1616\":[2,46],\"1617\":[2,23],\"1618\":[1],\"1619\":[1,1],\"1620\":[1],\"1621\":[2,33],\"1622\":[2,73],\"1623\":[2,30],\"1624\":[2,39],\"1625\":[1],\"1626\":[1,1],\"1627\":[1],\"1628\":[2,80],\"1629\":[2,30],\"1630\":[2,39],\"1631\":[2,39],\"1632\":[1],\"1633\":[1,1],\"1634\":[1],\"1635\":[2,88],\"1636\":[2,30],\"1637\":[2,39],\"1638\":[1],\"1639\":[1,1],\"1640\":[1],\"1641\":[2,49],\"1642\":[1],\"1643\":[1,9],\"1644\":[1,14],\"1645\":[1],\"1646\":[1,6],\"1647\":[1,8],\"1648\":[1,7],\"1649\":[1,11],\"1650\":[1,10],\"1651\":[2,10],\"1652\":[1,1],\"1653\":[1,3],\"1654\":[1],\"1655\":[1],\"1656\":[1],\"1657\":[2],\"1658\":[1],\"1659\":[1],\"1660\":[1],\"1661\":[1],\"1662\":[1],\"1663\":[1],\"1664\":[1],\"1665\":[1],\"1666\":[1],\"1667\":[1],\"1668\":[1],\"1669\":[1],\"1670\":[1],\"1671\":[1],\"1672\":[1],\"1673\":[1],\"1674\":[1],\"1675\":[1],\"1676\":[1],\"1677\":[1]},\"averageFieldLength\":[1.3339949348311855,25.59321827230999,0.06372203465674076],\"storedFields\":{\"0\":{\"h\":\"FAQ\"},\"1\":{\"h\":\"swagger文档空指针报错问题\",\"t\":[\"参考\"]},\"2\":{\"h\":\"给线程池里面线程添加名称的4种方式\",\"t\":[\"参考\"]},\"3\":{\"h\":\"Docker: driver failed programming external connectivity on endpoint xxx\",\"t\":[\"分析， 重启解决：systemctl restart docker\"]},\"4\":{\"h\":\"configure: error: no acceptable C compiler found in $PATH\",\"t\":[\"参考\"]},\"5\":{\"h\":\"当ssh连接linux系统时，出现-bash:fork无法分配问题\",\"t\":[\"free #查看内存情况 sysctl kernel.pid_max #查看系统最大pid使用数 # 查看当前使用的pid数 ps -eLf | wc -l # 修改系统最大进程数 pid_max，配置文件sysctl.conf在/etc/sysctl.conf中 # 临时 echo 1000000 > /proc/sys/kernel/pid_max # 永久 echo kernel.pid_max = 1000000 >> /etc/sysctl.conf ; sysctl -p \"]},\"6\":{\"h\":\"Hikari的max-lifetime和mysql的wait_timeout\",\"t\":[\"mysql在超过wait_timeout后，主动断开连接\",\"hikari的max-lifetime表示连接最大存活时间，若max-lifetime大于wait_timeout，连接已被关闭，导致连接不可用\",\"故要保证max-lifetime小于wait_timeout\"]},\"7\":{\"h\":\"MySQL出现You can‘t specify target table for update in FROM clause错误的解决方法\",\"t\":[\"参考\"]},\"8\":{\"h\":\"mqtt已连接无法订阅问题\",\"t\":[\"Mqttv5PahoMessageDrivenChannelAdapter内部维护了已订阅topic\",\"若网络波动导致客户端侧已订阅，服务器侧未订阅，则再次订阅会被客户端侧校验拦截,显示已订阅\",\"需先移除topic,再订阅\"]},\"9\":{\"h\":\"类私有变量问题\",\"t\":[\"类内部可以访问私有变量\",\"public class A { private String name; public void setName(String name) { this.name = name; } private static A a; public static void main(String[] args) { a = new A(); a.name = \\\"fd\\\"; a.setName(\\\"tew\\\"); System.out.println(a.name); } } \"]},\"10\":{\"h\":\"jar启动，配置对象数组参数\",\"t\":[\"java -jar your-application.jar --subscriptions[0].topic=new_topic --subscriptions[0].sub=new_sub \"]},\"11\":{\"h\":\"jdk运行项目异常 module java.base does not “opens java.lang” to unnamed module @1ba9117e\",\"t\":[\"Java9中引入了模块化功能：The State of the Module System，需将没开放的module强制对外开放\",\"这是由于 JDK 8 中有关反射相关的功能自从 JDK 9 开始就已经被限制了， 为了兼容原先的版本，需要在运行项目时添加 --add-opens java.base/java.lang=ALL-UNNAMED 选项来开启这种默认不被允许的行为\"]},\"12\":{\"h\":\"grep显示附近行信息\",\"t\":[\"要在 grep 搜索结果中显示附近的信息，可以使用 -A、-B 和 -C 参数来控制上下文行数。这些参数用于指定匹配行之前（-B）、匹配行之后（-A）或匹配行前后（-C）要显示的附加行数。\"]},\"13\":{\"h\":\"查看log日志\",\"t\":[\"#查看当前位置 show master status #查看日志 mysqlbinlog --no-defaults --start-position=522751320 --base64-output=DECODE-ROWS -v /var/lib/mysql/binlog.000026 \"]},\"14\":{\"h\":\"mysql date_sub函数\",\"t\":[\"在数据库层面做时间偏移操作\"]},\"15\":{\"h\":\"Eclipse mqtt v5 消息id耗尽问题\",\"t\":[\"当订阅或发布消息时，会携带消息id，且消息id会被标记为已使用 一般id范围为1-65535,循环重复使用\",\"订阅，需等到mqtt broker 回复确认后才会释放消息id\",\"发布，若是Qos 0级别，则直接释放消息id;Qos1级别会等到服务器发送确认后释放消息id,Oos2会等到服务端收到消息，且发送给另一客户端才会释放消息id(待补充)\"]},\"16\":{\"h\":\"Nashorn无法直接执行invocable.invokeFunction问题\",\"t\":[\"为了在Java中成功调用JavaScript函数，我们需要先执行编译后的脚本（通过compiledScript.eval()），以便Nashorn引擎了解脚本中定义的函数。\",\"然后，通过Invocable接口的invokeFunction()方法，我们可以在Java中调用该函数并传递参数。\"]},\"17\":{\"h\":\"bash 无法分配内存问题\",\"t\":[\"输入：free 查看内存使用情况 （发现内存还有很多空闲） 输入：sysctl kernel.pid_max 查看系统最大pid使用数 输入：ps -eLf | wc -l 查看当前使用的pid数 发现接近系统设置的最大pid个数 修改系统最大进程数 pid_max，配置文件sysctl.conf在/etc/sysctl.conf中 临时生效： 输入 echo 1000000 > /proc/sys/kernel/pid_max 永久生效： 输入 echo “kernel.pid_max = 1000000” >> /etc/sysctl.conf ; sysctl -p \"]},\"18\":{\"h\":\"hikari的idletimeout和maxlifeTime的区别\",\"t\":[\"一个是空闲连接，即大于最小空闲连接小于最大连接数的那部分连接，后者是所有连接(清除没在使用的连接，重新创建)\"]},\"19\":{\"h\":\"查看进程 pid 端口号\",\"t\":[\"netstat -ano | findstr 端口号 taskkill /f /t /pid pid值 \"]},\"20\":{\"h\":\"SpringBoot 多模块开发 不同模块之间的service注入的注意事项\",\"t\":[\"不同模块之间的包名需要相同 比如 com.xxx.业务名 .业务名可以不同\",\"可以在启动类注解 @SpringbootApplication(scanBasePackages={相应的包名})这样就可以扫描到了\"]},\"21\":{\"h\":\"jenkins/var/run/docker.sock permission denied\",\"t\":[\"chmod 777 /var/run/docker.sock \"]},\"22\":{\"h\":\"es启动失败\",\"t\":[\"修改jvm空间分配\",\"find / -name docker\",\"find /var/lib/docker/overlay/ -name jvm.options\"]},\"23\":{\"h\":\"springboot + mysql 存入数据的时间比实际时间少一个小时\",\"t\":[\"需要在数据库连接的时候设置时区 jdbc:mysql://IP:3306/**?useUnicode=true&characterEncoding=utf8&serverTimezone=Asia/Shanghai\"]},\"24\":{\"h\":\"protected 可见性\",\"t\":[\"protected 修饰的方法和属性只能在包内或包外子类内部可见，注在子类内部的main中只能用子类实例调用父类的protected方法和属性， 不能用父类实例或父类引用（该引用被子类实例赋值也不行）去调用protected方法和属性。\"]},\"25\":{\"h\":\"SpringBoot使用@ServerEndpoint无法依赖注入问题解决\",\"t\":[\"将要注入的 service 改成 static，然后添加一个set方法(重要:这个set方法一定不能是static的)就不会为null\"]},\"26\":{\"h\":\"jenkins 设置Git sshkey 凭证后，报错：No ECDSA host key is known for\",\"t\":[\"1、打开 Manage jenkins --> Configure Global Security ，找到 Git Host Key Verification Configuration\",\"2、取消验证\"]},\"27\":{\"h\":\"关于gradle：gradlew：权限被拒绝\",\"t\":[\"# 修改文件权限 chmod +x gradlew \"]},\"28\":{\"h\":\"devTools热启动导致不同线程类变量被销毁\",\"t\":[\"去除热启动devtools依赖包\"]},\"29\":{\"h\":\"npm设置源\",\"t\":[\"pnpm config get registry //查看源 pnpm config set registry https://registry.npmmirror.com //切换淘宝源 \"]},\"30\":{\"h\":\"修改域名映射\",\"t\":[\"cd C:\\\\Windows\\\\System32\\\\drivers\\\\etc vi hosts ipconfig /flushdns \"]},\"31\":{\"h\":\"解决启动类所在包组件装配失败问题\",\"t\":[\"版本 5.x 中新增了一个模块 spring-context-indexer，作用就是在编译时扫描 @Indexed 注解，确定 bean，生成索引文件 # maven <dependencies> <dependency> <groupId>org.springframework</groupId> <artifactId>spring-context-indexer</artifactId> <version>5.2.6.RELEASE</version> <optional>true</optional> </dependency> </dependencies> # gradle # 对于 Gradle 4.5 或更早的版本 dependencies { compileOnly \\\"org.springframework:spring-context-indexer:5.2.6.RELEASE\\\" } 对于 Gradle 4.6 或以后的版本，依赖应该被定义在 annotationProcessor 配置中 dependencies { annotationProcessor \\\"org.springframework:spring-context-indexer:{spring-version}\\\" } 编译处理过程将生成 META-INF/spring.components 文件到 jar 包中。 @Indexed 并非可以任意使用。在没有其他模块依赖或者所依赖的模块都生成了 spring.components 文件时不会存在问题， 然而如果依赖的模块只有部分模块存在 spring.components 文件，则其他模块的 bean 也不会被扫描，为避免这种问题， 需要在类路径下 spring.properties 文件中或系统属性中的 spring.index.ignore 参数设置为 true， 这样就会跳过 spring.components 文件的扫描，而转为重新扫描类路径下的 bean 。 \"]},\"32\":{\"h\":\"git ssh: connect to host github.com port 22: Connection timed out\",\"t\":[\"cd ~/.ssh vi config # 添加一下内容 Host github.com User wherywan@163.com Hostname ssh.github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa Port 443 # wq退出执行以下命令 ssh -T git@github.com \"]},\"33\":{\"h\":\"docker拉取镜像失败，时间错误导致\",\"t\":[\"# 安装ntpdate工具 yum -y install ntp ntpdate # 设置系统时间与网络时间同步 ntpdate cn.pool.ntp.org \"]},\"34\":{\"h\":\"mysql8连接失败Public Key Retrieval is not allowed\",\"t\":[\"allowPublicKeyRetrieval=true\",\"连接时添加配置\",\"url: jdbc:mysql://${MYSQL-HOST:10.142.51.150}:${MYSQL-PORT:1170}/${MYSQL-DB:baiyin}?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true \"]},\"35\":{\"h\":\"docker-compose\",\"t\":[\"docker-compose.yml对$符号敏感\"]},\"36\":{\"h\":\"nginx请求体大小受限制\",\"t\":[\"进入容器，修改、/etc/nginx下配置文件修改\",\"nginx -s reload 重启\",\" location / { root /usr/share/nginx/html; index index.html index.htm; try_files $uri $uri/ /index.html; } location /api/ { #proxy_pass http://usercenter-api:8080/; proxy_pass http://usercenter-gateway:8080/; proxy_set_header Remote_addr $remote_addr; client_max_body_size 100m; } location /token-api/ { proxy_pass http://usercenter-gateway:8080/; proxy_set_header Remote_addr $remote_addr; client_max_body_size 100m; } \"]},\"37\":{\"h\":\"解决arm架构问题\",\"t\":[\"使用docker在arm架构上重新打包\",\"使用官方在github提供的方案\"]},\"38\":{\"h\":\"lombook注解和@value同时使用问题\",\"t\":[\"使用@RequiredArgsConstructor解决\"]},\"39\":{\"h\":\"edge一直设置同步问题\",\"t\":[\"参考\",\"验证是否是dns解析问题\",\"验证你Edge浏览器同步出现问题的原因是不是域名不能连通，可以使用Microsoft Edge访问edge://sync-internals/页面，查看Server URL信息，如果为空，则问题很可能出这里！\",\"方案\",\"//hosts文件中添加以下内容 52.167.253.237 activity.windows.com 52.167.253.237 edge-enterprise.activity.windows.com 52.167.253.237 edge.activity.windows.com \"]},\"40\":{\"h\":\"spring boot项目单元测试使用junit，使用idea运行时候发生报错：No tests found for given includes，\",\"t\":[\"gradle编译脚本添加test编译器\",\"# Gradle添加以下配置 test { useJUnitPlatform() } \",\"使用idea自带的测试\"]},\"41\":{\"h\":\"@Value注解设置值问题\",\"t\":[\"静态与非静态属性的情况\"]},\"42\":{\"h\":\"网关应用报错\",\"t\":[\"优先考虑网关服务进行转发问题，目标服务可能无用\"]},\"43\":{\"h\":\"Your local changes to the following files would be overwritten by merge\",\"t\":[\"git stash #封存修改，暂时保存暂存区的修改。 git pull origin master git stash pop #把修改还原\"]},\"44\":{\"h\":\"pom.xml置灰\",\"t\":[\"打开file下的setting下的maven下的ignoreFile,取消勾选\"]},\"45\":{\"h\":\"excel导出后打不开\",\"t\":[\"点击页面顶部的“文件”-“选项”-“信任中心”-“信任中心设置”-“受保护的视图”，取消复选框前面的勾。\",\"点击“信任中心设置”-“受信任的位置”-“添加新位置”-“浏览”，选中文件所在位置，勾选“同时信任此位置的子文件夹”。\"]},\"46\":{\"h\":\"ajax(xhr)请求、浏览器请求与重定向响应混合使用报错问题\",\"t\":[\"浏览器请求可与重定向响应联合使用\",\"前后端分离的xhr请求不可联合使用，可取到路径后，由前端使用location.href方式发起新的请求\"]},\"47\":{\"h\":\"maven打包报错问题\",\"t\":[\"maven3.8后，对http开头的镜像地址做了限制，需降低版本\"]},\"48\":{\"h\":\"docker 无法解析域名问题\",\"t\":[\"启动容器时添加以下参数 --add-host=repo.maven.apache.org:146.75.92.215\"]},\"49\":{\"h\":\"maven配置\",\"t\":[\"<repositories> <repository> <id>maven-ali</id> <url>https://maven.aliyun.com/repository/public</url> </repository> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>true</enabled> <updatePolicy>always</updatePolicy> <checksumPolicy>fail</checksumPolicy> </snapshots> </repositories> <pluginRepositories> <pluginRepository> <id>maven-ali</id> <url>https://maven.aliyun.com/repository/public</url> </pluginRepository> <releases> <enabled>true</enabled> </releases> <snapshots> <enabled>true</enabled> <updatePolicy>always</updatePolicy> <checksumPolicy>fail</checksumPolicy> </snapshots> </pluginRepositories> <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-enforcer-plugin</artifactId> <version>3.1</version> <executions> <execution> <id>enforce-maven</id> <goals> <goal>enforce</goal> </goals> <configuration> <rules> <requireMavenVersion> <version>[3.5.4,)</version> </requireMavenVersion> </rules> </configuration> </execution> </executions> </plugin> \"]},\"50\":{\"h\":\"docker启动报错\",\"t\":[\"一般的容器都可以执行/bin/bash，但也有部分容器没有，那么我们可以用sh来替换/bin/bash\"]},\"51\":{\"h\":\"vue中参数解析问题\",\"t\":[\"npm install -d qs //在axios的拦截器配置参数序列化处理 service.interceptors.request.use((config) => { if (config.method === 'get') { // 如果是get请求，且params是数组类型如arr=[1,2]，则转换成arr=1&arr=2 config.paramsSerializer = function(params) { return qs.stringify(params, { arrayFormat: 'repeat' }) } } }) \"]},\"52\":{\"h\":\"git 报错信息：OpenSSL SSL_read: Connection was reset, errno 10054\",\"t\":[\"git config --global http.sslVerify \\\"false\\\" 解除认证\",\"git config http.postBuffer 5242880003 文件过大\",\"更新git\"]},\"53\":{\"h\":\"windows中Hyper-v和vm冲突问题\",\"t\":[\"解决方式\",\"启用或关闭\",\"bcdedit /set hypervisorlaunchtype off bcdedit / set hypervisorlaunchtype auto \"]},\"54\":{\"h\":\"okhttp获取相应体内容报错\",\"t\":[\"在调用方法时，会自动关闭流，导致无法二次打印\"]},\"55\":{\"h\":\"idea乱码问题\",\"t\":[\"在vmOptions文件中加 -Dfile.encoding= UTF-8\"]},\"56\":{\"h\":\"mysql出现Unknown collation: ‘utf8mb4_0900_ai_ci‘的解决方法\",\"t\":[\"分析\",\"出现这样的问题是原sql文件是mysql（8.0版本），高级往低级（5.6版本）导入时出现版本不兼容的情况。\",\"解决\",\"把文件中的所有的utf8mb4_0900_ai_ci替换为utf8_general_ci\",\"以及utf8mb4替换为utf8\"]},\"57\":{\"h\":\"maven-plugin unknown问题\",\"t\":[\"指定具体的版本号\"]},\"58\":{\"h\":\"@autowired无法解决循环依赖\",\"t\":[\"默认不解决循环依赖，解决需手动开启允许循环依赖\"]},\"59\":{\"h\":\"npm install 报错问题\",\"t\":[\"npm版本太高，使用下述方法解决\",\" npx -p npm@6 npm i --legacy-peer-deps \"]},\"60\":{\"c\":[\"FAQ\"]},\"61\":{\"c\":[\"FAQ\"]},\"62\":{\"h\":\"职业发展\"},\"63\":{\"h\":\"20241010方向\",\"t\":[\"web3.0\",\"鸿蒙原生开发\",\"生成式ai应用\"]},\"64\":{\"h\":\"技术栈\"},\"65\":{\"h\":\"待研究\",\"t\":[\"springboot 3.0\",\"springbootAdmin\",\"arthas-bin\",\"memoryAnalyser\",\"芋道源码xxljob\",\"若依框架\",\"pigx\",\"nest.js\",\"express.js\",\"flink cdc\",\"sharding sphere\",\"liquibase\"]},\"66\":{\"h\":\"go\"},\"67\":{\"h\":\"web框架\",\"t\":[\" gin\",\" beego\",\" iris\",\" go fiber\"]},\"68\":{\"h\":\"orm框架\",\"t\":[\" gorm\"]},\"69\":{\"h\":\"java\",\"t\":[\" GraalVM\"]},\"70\":{\"h\":\"微服务\"},\"71\":{\"h\":\"服务注册发现\",\"t\":[\" NACOS\",\" ereka\",\" zk\"]},\"72\":{\"h\":\"消息队列\",\"t\":[\" Rocketmq\",\" kafak\",\" rabitmq\"]},\"73\":{\"h\":\"rpc服务调用、熔断限流\",\"t\":[\" openfeign\",\" Dubbo\",\" sentinel\",\" hystrix\"]},\"74\":{\"h\":\"缓存\",\"t\":[\" redis\",\" mongodb\",\" memcached\"]},\"75\":{\"h\":\"database\",\"t\":[\" 多数据源\",\" mysql\",\" es\",\" oracle\",\" sqlServer\"]},\"76\":{\"h\":\"分布式事务\",\"t\":[\" seata\"]},\"77\":{\"h\":\"定时调度平台\",\"t\":[\" xxl\"]},\"78\":{\"h\":\"流程引擎\",\"t\":[\" camunda\",\" activity\"]},\"79\":{\"h\":\"文档\",\"t\":[\" swagger\"]},\"80\":{\"h\":\"APM监控\",\"t\":[\" pingPoint\"]},\"81\":{\"h\":\"大数据\",\"t\":[\" DataX\",\" Canal\",\" handoop\",\" hive\",\" spark\"]},\"82\":{\"h\":\"开源项目\"},\"83\":{\"h\":\"go\",\"t\":[\" goAdmin\",\" gin_vue_admin\"]},\"84\":{\"h\":\"webflux\",\"t\":[\" 物联网平台jetLinks\\njetLinks\"]},\"85\":{\"h\":\"破解\"},\"86\":{\"h\":\"jetbrains\",\"t\":[\"参考\",\"修改配置\",\"--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED --add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED -javaagent:/Applications/GoLand.app/Contents/ja-netfilter.v3/ja-netfilter.jar \",\"下载获取激活码\",\"https://www.jiweichengzhu.com/idea/code\"]},\"87\":{\"h\":\"m1 vmware安装\",\"t\":[\"参考\"]},\"88\":{\"h\":\"项目信息\"},\"89\":{\"h\":\"服务器\",\"t\":[\"192.168.3.90 123456 \"]},\"90\":{\"h\":\"mysql\",\"t\":[\"192.168.3.90 3306 root/123456\"]},\"91\":{\"h\":\"rabbitmq\",\"t\":[\"192.168.3.90 5672/15672(控制台) admin/123456\"]},\"92\":{\"h\":\"Kafka\",\"t\":[\"192.168.3.90 9092\"]},\"93\":{\"h\":\"zookeeper\",\"t\":[\"192.168.3.90 2181\"]},\"94\":{\"h\":\"nacos\",\"t\":[\"192.168.3.90   8848    nacos/nacos\"]},\"95\":{\"h\":\"conda\"},\"96\":{\"h\":\"常用命令\",\"t\":[\"# 切换环境 conda activate 环境名称 conda deactivate 环境名称 # 查看conda信息 conda info # 列出所有创建的环境 conda env list # 移除环境 conda env remove # 创建一个新的环境，并在该环境中安装所需的软件包 conda create # 克隆一个现有的环境到一个新的名称下 conda clone conda config conda update conda install conda remove conda search \"]},\"97\":{\"h\":\"共识算法\",\"t\":[\"Paxos\",\"Zab\",\"raft\",\"gossip\"]},\"98\":{\"h\":\"raft\",\"t\":[\"参考\",\"follower\",\"candidate\",\"leader\",\"任期\",\"奇数个节点，防止出现平票的情况\",\"log replication\"]},\"99\":{\"h\":\"gossip\",\"t\":[\"参考\",\"反熵 传播全量数据\",\"传谣 传播增量数据\\n当前节点收到最新信息后，先传播给当前节点已知节点的部分节点，部分节点再传播给已知节点的部分节点，最终使多个节点的数据达到一致性\"]},\"100\":{\"h\":\"cSharp\"},\"101\":{\"h\":\"项目构建\"},\"102\":{\"h\":\"模板使用\",\"t\":[\"# 安装 dotnet new install QinHan.Api.Template.1.0.0.nupkg # 卸载 dotnet new uninstall QinHan.Api.Template # dotnet new [模板名称] -n 项目名称 dotnet new qinhanapi -n IoT.Platform.Admin \"]},\"103\":{\"h\":\"模板制作\",\"t\":[\"当前路径下 新建.template.config文件夹 新建 template.json配置文件\",\"{ \\\"$schema\\\": \\\"http://json.schemastore.org/template\\\", \\\"author\\\": \\\"Walnut\\\", //必填！模板创建者 \\\"classifications\\\": [ //必填，这个对应模板的Tags，其他的比如 [ \\\"Common\\\", \\\"Console\\\" ] \\\"WebApi\\\" ], \\\"name\\\": \\\"TangSong.Api Dotnet\\\", //必填，这个是模板名，比如ASP.NET Core Web API \\\"identity\\\": \\\"TangSong.Api.Template\\\", //可选，模板的唯一名称 \\\"shortName\\\": \\\"tangsongapi\\\", //必填，这个对应模板的短名称，比如webapi \\\"tags\\\": { \\\"language\\\": \\\"C#\\\", \\\"type\\\": \\\"project\\\" }, \\\"sourceName\\\": \\\"IoT.Platform.Admin\\\", // 可选，要替换的名字，这个就是模板的项目名，以后新建的时候，会把这个名字替换成其他，比如HelloBlog（警告！这里不要写一些专用词汇，比如app呀，net呀，core之类的） \\\"preferNameDirectory\\\": true } \",\"使用文件系统分发\",\"dotnet new install [当前路径] \",\"使用NuGet分发\",\"新增 TangSong.Template.nuspec.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?> <package xmlns=\\\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\\\"> <metadata> <id>TangSong.Api.Template</id> // nuget包标识，在 nuget.org 或包驻留的任意库中必须是唯一的 <version>1.0.0</version> <description> Create a TangSong webapi app. </description> <authors>Walnut</authors> <packageTypes> <packageType name=\\\"Template\\\" /> </packageTypes> </metadata> </package> \",\"使用 NuGet Package Explorer工具 Miscrosoft Store可以下载\",\"打开文件 Open a local package(Ctrl + O)\",\"保存即可得到 .nupkg 文件\"]},\"104\":{\"h\":\"asp.net项目启动\",\"t\":[\"预先注册Service到ServiceCollection \",\"host\",\"controller相关\",\"sql相关\",\"webApplicationBuilder构建应用 \",\"构建容器\",\"构建ServiceProvider\",\"构建host\",\"application应用初始化 \",\"映射路径到ControllerEndpoints\",\"配置Authorization\",\"application运行\"]},\"105\":{\"h\":\"BackGroundService\",\"t\":[\"继承BackGroundService，项目启动时，异步执行后台任务\"]},\"106\":{\"h\":\"配置\",\"t\":[\"配置读取\",\"配置实例注入\",\"配置使用\",\" //configuration在项目启动时已注册到容器中 //注册指定配置实例到容器 builder.Services.Configure<ConfigTest>(builder.Configuration.GetSection(\\\"ConfigTest\\\")); //使用 public ControllerTest(IConfiguration configuration,IOptions<ConfigTest> config) { _configuration = configuration; ConfigTest configTest = new ConfigTest(); var sd = configuration.GetSection(\\\"ConfigTest\\\"); sd.Bind(configTest); _config = config.Value; } \"]},\"107\":{\"h\":\"异步\"},\"108\":{\"h\":\"Mvc核心类\",\"t\":[\"LazyInitializer\",\"BoundConstructor\",\"ControllerActionInvoker \",\"执行相关过滤器\",\"处理请求\",\"ControllerActionInvokerCache \",\"GetCachedResult获取ControllerActionInvokerCacheEntry\",\"ControllerRequestDelegateFactory \",\"CreateRequestDelegate创建控制器请求委托实例\",\"ControllerFactoryProvider \",\"CreateControllerFactory创建控制器工厂\",\"ControllerActionEndpointDataSource \",\"createEndpoints构建Endpoint端点\",\"ActionEndpointDataSourceBase基类 \",\"initialize()\",\"updateEndpoints()\",\"ChangeToken\",\"CompositeEndpointDatasource \",\"对内部datasource初始化\",\"DataSourceDependentCache\",\"DataSourceDependentMatcher\"]},\"109\":{\"h\":\"请求入口\",\"t\":[\"HttpsRedirectionMiddleware的invoke方法\"]},\"110\":{\"h\":\"待整理\",\"t\":[\"管道实例化过程\"]},\"111\":{\"h\":\"过滤器\",\"t\":[\"IAuthorizationFilter\",\"IActionFilter\",\"IResultFilter\",\"IExceptionFilter\",\"Type Filters（类型过滤器）类似于注解方式\"]},\"112\":{\"h\":\"定时任务\",\"t\":[\"System.Timers.Timer类\"]},\"113\":{\"h\":\"线程通信\",\"t\":[\"简单信号通知\",\"lock语句\",\"Monitor类 enter exit wait pause\",\"并发集合 concurrentDictionary 、concurrentQueue\"]},\"114\":{\"h\":\"go\",\"t\":[\"参考\",\"参考\"]},\"115\":{\"h\":\"构建运行\",\"t\":[\"# 编译运行 go build hello.go # 编译为可执行文件 go build hello.go # 运行 ./ hello \"]},\"116\":{\"h\":\"语言结构\",\"t\":[\"包声明\",\"引入包\",\"函数\",\"变量\",\"语句 & 表达式\",\"注释\",\"注意 \",\"当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）； 标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected ）\",\"{ 不能单独放在一行，所以以下代码在运行时会产生错误：\",\"package main import \\\"fmt\\\" func main() { // 错误，{ 不能在单独的行上 fmt.Println(\\\"Hello, World!\\\") } \"]},\"117\":{\"h\":\"基础语法\",\"t\":[\"包\",\"文件名与包名没有直接关系，不一定要将文件名与包名定成同一个。\",\"文件夹名与包名没有直接关系，并非需要一致。\",\"同一个文件夹下的文件只能有一个包名，否则编译报错\",\"关键字 格式化字符串\",\"Go 语言中使用 fmt.Sprintf 格式化字符串并赋值给新串：\",\"package main import ( \\\"fmt\\\" ) func main() { // %d 表示整型数字，%s 表示字符串 var stockcode=123 var enddate=\\\"2020-12-31\\\" var url=\\\"Code=%d&endDate=%s\\\" var target_url=fmt.Sprintf(url,stockcode,enddate) fmt.Println(target_url) } \",\"分隔符\",\"在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾\",\"标识符\",\"标识符用来命名变量、类型等程序实体。一个标识符实际上就是一个或是多个字母(A~Z和a~z)数字(0~9)、下划线_组成的序列，但是第一个字符必须是字母或下划线而不能是数字。\"]},\"118\":{\"h\":\"数据类型\"},\"119\":{\"h\":\"布尔型\"},\"120\":{\"h\":\"数字类型\"},\"121\":{\"h\":\"派生类型:\",\"t\":[\"(a) 指针类型（Pointer）\",\"(b) 数组类型\",\"(c) 结构化类型(struct)\",\"(d) Channel 类型\",\"(e) 函数类型\",\"(f) 切片类型\",\"(g) 接口类型（interface）\",\"(h) Map 类型\"]},\"122\":{\"h\":\"变量\",\"t\":[\"Go 语言变量名由字母、数字、下划线组成，其中首个字符不能为数字。\",\"声明变量的一般形式是使用 var 关键字：\",\"package main import \\\"fmt\\\" func main() { var a string = \\\"Runoob\\\" fmt.Println(a) var b, c int = 1, 2 fmt.Println(b, c) } \"]},\"123\":{\"h\":\"变量声明\",\"t\":[\"第一种，指定变量类型，如果没有初始化，则变量默认为零值。\",\"数值类型（包括complex64/128）为 0\",\"布尔类型为 false\",\"字符串为 \\\"\\\"（空字符串）\",\"以下几种类型为 nil：\",\" var a *int var a []int var a map[string] int var a chan int var a func(string) int var a error // error 是接口 \",\"第二种，根据值自行判定变量类型。 第三种，如果变量已经使用 var 声明过了，再使用 := 声明变量，就产生编译错误\",\"var intVal int intVal :=1 // 这时候会产生编译错误，因为 intVal 已经声明，不需要重新声明 intVal := 1 // 此时不会产生编译错误，因为有声明新的变量，因为 := 是一个声明语句 \"]},\"124\":{\"h\":\"多变量声明\",\"t\":[\" //类型相同多个变量, 非全局变量 var vname1, vname2, vname3 type vname1, vname2, vname3 = v1, v2, v3 var vname1, vname2, vname3 = v1, v2, v3 // 和 python 很像,不需要显示声明类型，自动推断 vname1, vname2, vname3 := v1, v2, v3 // 出现在 := 左侧的变量不应该是已经被声明过的，否则会导致编译错误 // 这种因式分解关键字的写法一般用于声明全局变量 var ( vname1 v_type1 vname2 v_type2 ) \",\"package main var x, y int var ( // 这种因式分解关键字的写法一般用于声明全局变量 a int b bool ) var c, d int = 1, 2 var e, f = 123, \\\"hello\\\" //这种不带声明格式的只能在函数体中出现 //g, h := 123, \\\"hello\\\" func main(){ g, h := 123, \\\"hello\\\" println(x, y, a, b, c, d, e, f, g, h) } \"]},\"125\":{\"h\":\"值类型和引用类型\"},\"126\":{\"h\":\"使用 := 赋值操作符\",\"t\":[\"只能被用在函数体内，而不可以用于全局变量的声明与赋值。使用操作符 := 可以高效地创建一个新的变量，称之为初始化声明。\",\"如果你声明了一个局部变量却没有在相同的代码块中使用它，同样会得到编译错误\",\"全局变量是允许声明但不使用的。 同一类型的多个变量可以声明在同一行\"]},\"127\":{\"h\":\"空白标识符在函数返回值时的使用\",\"t\":[\"package main import \\\"fmt\\\" func main() { _,numb,strs := numbers() //只获取函数返回值的后两个 fmt.Println(numb,strs) } //一个可以返回多个值的函数 func numbers()(int,int,string){ a , b , c := 1 , 2 , \\\"str\\\" return a,b,c } \"]},\"128\":{\"h\":\"常量\",\"t\":[\"常量定义格式\",\"const identifier [type] = value \",\"常量用作枚举\",\"const ( Unknown = 0 Female = 1 Male = 2 ) \",\"常量可以用len(), cap(), unsafe.Sizeof()函数计算表达式的值。常量表达式中，函数必须是内置函数，否则编译不过：\",\"package main import \\\"unsafe\\\" const ( a = \\\"abc\\\" b = len(a) c = unsafe.Sizeof(a) ) func main(){ println(a, b, c) } \"]},\"129\":{\"h\":\"iota\",\"t\":[\"ota，特殊常量，可以认为是一个可以被编译器修改的常量。\",\"iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。\",\"iota 可以被用作枚举值：\",\"const ( a = iota b = iota c = iota ) \",\"第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：\",\"const ( a = iota b c ) \",\"用法\",\"package main import \\\"fmt\\\" func main() { const ( a = iota //0 b //1 c //2 d = \\\"ha\\\" //独立值，iota += 1 e //\\\"ha\\\" iota += 1 f = 100 //iota +=1 g //100 iota +=1 h = iota //7,恢复计数 i //8 ) fmt.Println(a,b,c,d,e,f,g,h,i) } // 0 1 2 ha ha 100 100 7 8 \"]},\"130\":{\"h\":\"运算符\",\"t\":[\"go特殊运算符\",\"& 返回变量存储地址 &a 将给出变量的实际地址。 * 指针变量。 *a 是一个指针变量 \"]},\"131\":{\"h\":\"条件语句\",\"t\":[\"Go 没有三目运算符，所以不支持 ?: 形式的条件判断。\",\"if\",\"package main import \\\"fmt\\\" func main() { /* 定义局部变量 */ var a int = 10 /* 使用 if 语句判断布尔表达式 */ if a < 20 { /* 如果条件为 true 则执行以下语句 */ fmt.Printf(\\\"a 小于 20\\\\n\\\" ) } fmt.Printf(\\\"a 的值为 : %d\\\\n\\\", a) } \",\"select\",\"每个 case 都必须是一个通信\",\"所有 channel 表达式都会被求值\",\"所有被发送的表达式都会被求值\",\"如果任意某个通信可以进行，它就执行，其他被忽略。\",\"如果有多个 case 都可以运行，Select 会随机公平地选出一个执行。其他不会执行。 \",\"否则： \",\"如果有 default 子句，则执行该语句。\",\"如果没有 default 子句，select 将阻塞，直到某个通信可以运行；Go 不会重新对 channel 或值进行求值。\",\"select { case communication clause : statement(s); case communication clause : statement(s); /* 你可以定义任意数量的 case */ default : /* 可选 */ statement(s); } \"]},\"132\":{\"h\":\"循环语句\",\"t\":[\"for\",\"break\",\"continue\",\"goto\"]},\"133\":{\"h\":\"for循环\",\"t\":[\"Go 语言的 For 循环有 3 种形式，只有其中的一种使用分号。\",\"for init; condition; post { }\",\"for condition { }\",\"for { }\",\"init： 一般为赋值表达式，给控制变量赋初值；\",\"condition： 关系表达式或逻辑表达式，循环控制条件；\",\"post： 一般为赋值表达式，给控制变量增量或减量。\",\"for 循环的 range 格式可以对 slice、map、数组、字符串等进行迭代循环。格式如下：\",\"for key, value := range oldMap { newMap[key] = value } // 如果只想读取 value，格式如下： for _, value := range oldMap //使用 package main import \\\"fmt\\\" func main() { strings := []string{\\\"google\\\", \\\"runoob\\\"} for i, s := range strings { fmt.Println(i, s) } numbers := [6]int{1, 2, 3, 5} for i,x:= range numbers { fmt.Printf(\\\"第 %d 位 x 的值 = %d\\\\n\\\", i,x) } } \"]},\"134\":{\"h\":\"循环嵌套\"},\"135\":{\"h\":\"goto\",\"t\":[\"package main import \\\"fmt\\\" func main() { /* 定义局部变量 */ var a int = 10 /* 循环 */ LOOP: for a < 20 { if a == 15 { /* 跳过迭代 */ a = a + 1 goto LOOP } fmt.Printf(\\\"a的值为 : %d\\\\n\\\", a) a++ } } 以上实例执行结果为： a的值为 : 10 a的值为 : 11 a的值为 : 12 a的值为 : 13 a的值为 : 14 a的值为 : 16 a的值为 : 17 a的值为 : 18 a的值为 : 19 \"]},\"136\":{\"h\":\"函数\"},\"137\":{\"h\":\"go init 函数\",\"t\":[\"go 内置的函数，在main函数之前执行，常用于数据的初始化\",\"不能被其他函数调用，而是在main函数执行之前，自动被调用\",\"init函数不能作为参数传入\",\"不能有传入参数和返回值\",\"每个源文件能包含多个init函数：\",\"导包顺序决定init函数执行顺序：最内层的先执行，若main包 引入test1包 test1包引入test2包 则test2包中的init函数先执行\",\"func init () { } \"]},\"138\":{\"h\":\"defer 和追踪\",\"t\":[\"关键字 defer 允许我们推迟到函数返回之前（或任意位置执行 return 语句之后）一刻才执行某个语句或函数（为什么要在返回之后才执行这些语句？因为 return 语句同样可以包含一些操作，而不是单纯地返回某个值）。\",\"关键字 defer 的用法类似于面向对象编程语言 Java 和 C# 的 finally 语句块，它一般用于释放某些已分配的资源。\",\"当有多个 defer 行为被注册时，它们会以逆序执行（类似栈，即后进先出）：\",\"func f() { for i := 0; i < 5; i++ { defer fmt.Printf(\\\"%d \\\", i) } } // 上面的代码将会输出：4 3 2 1 0。 \"]},\"139\":{\"h\":\"函数和接口\",\"t\":[\"函数可以显示声明，隐式实现接口方法，函数式的多态,接口引用指向函数对象\",\"HandlerFunc()强制将函数转为HandlerFunc类型\",\" type Handler interface { ServeHTTP(ResponseWriter, *Request) } type HandlerFunc func(ResponseWriter, *Request) // ServeHTTP calls f(w, r). func (f HandlerFunc) ServeHTTP(w ResponseWriter, r *Request) { f(w, r) } \",\"/* 函数返回两个数的最大值 */ func max(num1, num2 int) int { /* 声明局部变量 */ var result int if (num1 > num2) { result = num1 } else { result = num2 } return result } \",\"函数返回多个值\",\"package main import \\\"fmt\\\" func swap(x, y string) (string, string) { return y, x } func main() { a, b := swap(\\\"Google\\\", \\\"Runoob\\\") fmt.Println(a, b) } \",\"函数参数\",\"值传递\",\"引用传递\",\"默认值传递\",\"用法\",\"作为参数\",\"闭包，匿名函数\",\"以下实例中，我们创建了函数 getSequence() ，返回另外一个函数。该函数的目的是在闭包中递增 i 变量，代码如下： package main import \\\"fmt\\\" func getSequence() func() int { i:=0 return func() int { i+=1 return i } } func main(){ /* nextNumber 为一个函数，函数 i 为 0 */ nextNumber := getSequence() /* 调用 nextNumber 函数，i 变量自增 1 并返回 */ fmt.Println(nextNumber()) fmt.Println(nextNumber()) fmt.Println(nextNumber()) /* 创建新的函数 nextNumber1，并查看结果 */ nextNumber1 := getSequence() fmt.Println(nextNumber1()) fmt.Println(nextNumber1()) } \",\"函数方法\",\"Go 语言中同时有函数和方法。一个方法就是一个包含了接受者的函数，接受者可以是命名类型或者结构体类型的一个值或者是一个指针。所有给定类型的方法属于该类型的方法集。语法格式如下： package main import ( \\\"fmt\\\" ) /* 定义结构体 */ type Circle struct { radius float64 } func main() { var c1 Circle c1.radius = 10.00 fmt.Println(\\\"圆的面积 = \\\", c1.getArea()) } //该 method 属于 Circle 类型对象中的方法 func (c Circle) getArea() float64 { //c.radius 即为 Circle 类型对象中的属性 return 3.14 * c.radius * c.radius } 执行结果为： 圆的面积 = 314 \"]},\"140\":{\"h\":\"作用域\",\"t\":[\"作用域为已声明标识符所表示的常量、类型、变量、函数或包在源代码中的作用范围。\",\"Go 语言中变量可以在三个地方声明：\",\"函数内定义的变量称为局部变量\",\"函数外定义的变量称为全局变量\",\"函数定义中的变量称为形式参数\",\"package main import \\\"fmt\\\" /* 声明全局变量 */ var a int = 20; func main() { /* main 函数中声明局部变量 */ var a int = 10 var b int = 20 var c int = 0 fmt.Printf(\\\"main()函数中 a = %d\\\\n\\\", a); c = sum( a, b); fmt.Printf(\\\"main()函数中 c = %d\\\\n\\\", c); } /* 函数定义-两数相加 */ func sum(a, b int) int { fmt.Printf(\\\"sum() 函数中 a = %d\\\\n\\\", a); fmt.Printf(\\\"sum() 函数中 b = %d\\\\n\\\", b); return a + b; } \",\"声明数组\",\"Go 语言数组声明需要指定元素类型及元素个数，语法格式如下： var variable_name [SIZE] variable_type 以上为一维数组的定义方式。例如以下定义了数组 balance 长度为 10 类型为 float32： var balance [10] float32 \",\"初始化\",\"以下演示了数组初始化： var balance = [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 我们也可以通过字面量在声明数组的同时快速初始化数组： balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果数组长度不确定，可以使用 ... 代替数组的长度，编译器会根据元素个数自行推断数组的长度： var balance = [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 或 balance := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} 如果设置了数组的长度，我们还可以通过指定下标来初始化元素： // 将索引为 1 和 3 的元素初始化 balance := [5]float32{1:2.0,3:7.0} \",\"样例\",\"package main import \\\"fmt\\\" func main() { var i,j,k int // 声明数组的同时快速初始化数组 balance := [5]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出数组元素 */ ... for i = 0; i < 5; i++ { fmt.Printf(\\\"balance[%d] = %f\\\\n\\\", i, balance[i] ) } balance2 := [...]float32{1000.0, 2.0, 3.4, 7.0, 50.0} /* 输出每个数组元素的值 */ for j = 0; j < 5; j++ { fmt.Printf(\\\"balance2[%d] = %f\\\\n\\\", j, balance2[j] ) } // 将索引为 1 和 3 的元素初始化 balance3 := [5]float32{1:2.0,3:7.0} for k = 0; k < 5; k++ { fmt.Printf(\\\"balance3[%d] = %f\\\\n\\\", k, balance3[k] ) } } \"]},\"141\":{\"h\":\"指针\",\"t\":[\"我们都知道，变量是一种使用方便的占位符，用于引用计算机内存地址。\",\"Go 语言的取地址符是 &，放到一个变量前使用就会返回相应变量的内存地址。\",\"package main import \\\"fmt\\\" func main() { var a int = 10 fmt.Printf(\\\"变量的地址: %x\\\\n\\\", &a ) } \"]},\"142\":{\"h\":\"什么是指针\",\"t\":[\"一个指针变量指向了一个值的内存地址。\",\"类似于变量和常量，在使用指针前你需要声明指针。指针声明格式如下：\",\"var var_name *var-type var-type 为指针类型，var_name 为指针变量名，* 号用于指定变量是作为一个指针。以下是有效的指针声明： var ip *int /* 指向整型*/ var fp *float32 /* 指向浮点型 */ \"]},\"143\":{\"h\":\"如何使用指针\",\"t\":[\"指针使用流程：\",\"定义指针变量。\",\"为指针变量赋值。\",\"访问指针变量中指向地址的值。\",\"在指针类型前面加上 * 号（前缀）来获取指针所指向的内容。\",\"package main import \\\"fmt\\\" func main() { var a int= 20 /* 声明实际变量 */ var ip *int /* 声明指针变量 */ ip = &a /* 指针变量的存储地址 */ fmt.Printf(\\\"a 变量的地址是: %x\\\\n\\\", &a ) /* 指针变量的存储地址 */ fmt.Printf(\\\"ip 变量储存的指针地址: %x\\\\n\\\", ip ) /* 使用指针访问值 */ fmt.Printf(\\\"*ip 变量的值: %d\\\\n\\\", *ip ) } \"]},\"144\":{\"h\":\"空指针\",\"t\":[\"当一个指针被定义后没有分配到任何变量时，它的值为 nil。\",\"nil 指针也称为空指针。\",\"nil在概念上和其它语言的null、None、nil、NULL一样，都指代零值或空值。\",\"一个指针变量通常缩写为 ptr。\"]},\"145\":{\"h\":\"指针数组\",\"t\":[\"即存放地址的数组\",\"package main import \\\"fmt\\\" const MAX int = 3 func main() { a := []int{10,100,200} var i int var ptr [MAX]*int; for i = 0; i < MAX; i++ { ptr[i] = &a[i] /* 整数地址赋值给指针数组 */ } for i = 0; i < MAX; i++ { fmt.Printf(\\\"a[%d] = %d\\\\n\\\", i,*ptr[i] ) } } \"]},\"146\":{\"h\":\"指向指针的指针\",\"t\":[\"如果一个指针变量存放的又是另一个指针变量的地址，则称这个指针变量为指向指针的指针变量。\",\"当定义一个指向指针的指针变量时，第一个指针存放第二个指针的地址，第二个指针存放变量的地址：\",\"指向指针的指针变量声明格式如下：\",\"var ptr **int;\",\"访问指向指针的指针变量值需要使用两个 * 号，如下所示：\",\"package main import \\\"fmt\\\" func main() { var a int var ptr *int var pptr **int a = 3000 /* 指针 ptr 地址 */ ptr = &a /* 指向指针 ptr 地址 */ pptr = &ptr /* 获取 pptr 的值 */ fmt.Printf(\\\"变量 a = %d\\\\n\\\", a ) fmt.Printf(\\\"指针变量 *ptr = %d\\\\n\\\", *ptr ) fmt.Printf(\\\"指向指针的指针变量 **pptr = %d\\\\n\\\", **pptr) } \"]},\"147\":{\"h\":\"结构体\",\"t\":[\"可类比Java中的类概念\",\"Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型。\",\"结构体是由一系列具有相同类型或不同类型的数据构成的数据集合。\"]},\"148\":{\"h\":\"定义结构体\",\"t\":[\"结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：\",\"type struct_variable_type struct { member definition member definition ... member definition } \",\"样例\",\"package main import \\\"fmt\\\" type Books struct { title string author string subject string book_id int } func main() { // 创建一个新的结构体 fmt.Println(Books{\\\"Go 语言\\\", \\\"www.runoob.com\\\", \\\"Go 语言教程\\\", 6495407}) // 也可以使用 key => value 格式 fmt.Println(Books{title: \\\"Go 语言\\\", author: \\\"www.runoob.com\\\", subject: \\\"Go 语言教程\\\", book_id: 6495407}) // 忽略的字段为 0 或 空 fmt.Println(Books{title: \\\"Go 语言\\\", author: \\\"www.runoob.com\\\"}) } \"]},\"149\":{\"h\":\"访问结构体成员\",\"t\":[\"如果要访问结构体成员，需要使用点号 . 操作符，格式为：\",\"结构体.成员名\"]},\"150\":{\"h\":\"结构体作为函数参数\"},\"151\":{\"h\":\"结构体作为指针\",\"t\":[\"package main import \\\"fmt\\\" type Books struct { title string author string subject string book_id int } func main() { var Book1 Books /* 声明 Book1 为 Books 类型 */ var Book2 Books /* 声明 Book2 为 Books 类型 */ /* book 1 描述 */ Book1.title = \\\"Go 语言\\\" Book1.author = \\\"www.runoob.com\\\" Book1.subject = \\\"Go 语言教程\\\" Book1.book_id = 6495407 /* book 2 描述 */ Book2.title = \\\"Python 教程\\\" Book2.author = \\\"www.runoob.com\\\" Book2.subject = \\\"Python 语言教程\\\" Book2.book_id = 6495700 /* 打印 Book1 信息 */ printBook(&Book1) /* 打印 Book2 信息 */ printBook(&Book2) } func printBook( book *Books ) { fmt.Printf( \\\"Book title : %s\\\\n\\\", book.title) fmt.Printf( \\\"Book author : %s\\\\n\\\", book.author) fmt.Printf( \\\"Book subject : %s\\\\n\\\", book.subject) fmt.Printf( \\\"Book book_id : %d\\\\n\\\", book.book_id) } \"]},\"152\":{\"h\":\"切片slice\",\"t\":[\"定义切片\",\"你可以声明一个未指定大小的数组来定义切片： var identifier []type 切片不需要说明长度。 或使用 make() 函数来创建切片: var slice1 []type = make([]type, len) 也可以简写为 slice1 := make([]type, len) 也可以指定容量，其中 capacity 为可选参数。 make([]T, length, capacity) 这里 len 是数组的长度并且也是切片的初始长度。 \",\"初始化\",\"s :=[] int {1,2,3 } 直接初始化切片，[] 表示是切片类型，{1,2,3} 初始化值依次是 1,2,3，其 cap=len=3。 s := arr[:] 初始化切片 s，是数组 arr 的引用。 s := arr[startIndex:endIndex] 将 arr 中从下标 startIndex 到 endIndex-1 下的元素创建为一个新的切片。 s := arr[startIndex:] 默认 endIndex 时将表示一直到arr的最后一个元素。 s := arr[:endIndex] 默认 startIndex 时将表示从 arr 的第一个元素开始。 s1 := s[startIndex:endIndex] 通过切片 s 初始化切片 s1。 s :=make([]int,len,cap) 通过内置函数 make() 初始化切片s，[]int 标识为其元素类型为 int 的切片。 \",\"len() 和 cap() 函数\",\"切片是可索引的，并且可以由 len() 方法获取长度。\",\"切片提供了计算容量的方法 cap() 可以测量切片最长可以达到多少。\",\"空(nil)切片\",\"一个切片在未初始化之前默认为 nil，长度为 0\",\"package main import \\\"fmt\\\" func main() { var numbers []int printSlice(numbers) if(numbers == nil){ fmt.Printf(\\\"切片是空的\\\") } } func printSlice(x []int){ fmt.Printf(\\\"len=%d cap=%d slice=%v\\\\n\\\",len(x),cap(x),x) } 以上实例运行输出结果为: len=0 cap=0 slice=[] 切片是空的 \",\"切片截取 append() 和 copy() 函数\",\"如果想增加切片的容量，我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来。\",\"下面的代码描述了从拷贝切片的 copy 方法和向切片追加新元素的 append 方法。\",\"package main import \\\"fmt\\\" func main() { var numbers []int printSlice(numbers) /* 允许追加空切片 */ numbers = append(numbers, 0) printSlice(numbers) /* 向切片添加一个元素 */ numbers = append(numbers, 1) printSlice(numbers) /* 同时添加多个元素 */ numbers = append(numbers, 2,3,4) printSlice(numbers) /* 创建切片 numbers1 是之前切片的两倍容量*/ numbers1 := make([]int, len(numbers), (cap(numbers))*2) /* 拷贝 numbers 的内容到 numbers1 */ copy(numbers1,numbers) printSlice(numbers1) } func printSlice(x []int){ fmt.Printf(\\\"len=%d cap=%d slice=%v\\\\n\\\",len(x),cap(x),x) } \"]},\"153\":{\"h\":\"范围range\",\"t\":[\"Go 语言中 range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。 在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。\",\"for key, value := range oldMap { newMap[key] = value } \"]},\"154\":{\"h\":\"Map集合\",\"t\":[\"定义map\",\"可以使用内建函数 make 也可以使用 map 关键字来定义 Map: /* 声明变量，默认 map 是 nil */ var map_variable map[key_data_type]value_data_type /* 使用 make 函数 */ map_variable := make(map[key_data_type]value_data_type) 如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对 \",\"package main import \\\"fmt\\\" func main() { var countryCapitalMap map[string]string /*创建集合 */ countryCapitalMap = make(map[string]string) /* map插入key - value对,各个国家对应的首都 */ countryCapitalMap [ \\\"France\\\" ] = \\\"巴黎\\\" countryCapitalMap [ \\\"Italy\\\" ] = \\\"罗马\\\" countryCapitalMap [ \\\"Japan\\\" ] = \\\"东京\\\" countryCapitalMap [ \\\"India \\\" ] = \\\"新德里\\\" /*使用键输出地图值 */ for country := range countryCapitalMap { fmt.Println(country, \\\"首都是\\\", countryCapitalMap [country]) } /*查看元素在集合中是否存在 */ capital, ok := countryCapitalMap [ \\\"American\\\" ] /*如果确定是真实的,则存在,否则不存在 */ /*fmt.Println(capital) */ /*fmt.Println(ok) */ if (ok) { fmt.Println(\\\"American 的首都是\\\", capital) } else { fmt.Println(\\\"American 的首都不存在\\\") } } \",\"delete() 函数\",\"delete() 函数用于删除集合的元素, 参数为 map 和其对应的 key\"]},\"155\":{\"h\":\"递归函数\",\"t\":[\"递归，就是在运行的过程中调用自己。\",\"Go 语言支持递归。但我们在使用递归时，开发者需要设置退出条件，否则递归将陷入无限循环中。\",\"斐波那契数列\",\"以下实例通过 Go 语言的递归函数实现斐波那契数列：\",\"实例 package main import \\\"fmt\\\" func fibonacci(n int) int { if n < 2 { return n } return fibonacci(n-2) + fibonacci(n-1) } func main() { var i int for i = 0; i < 10; i++ { fmt.Printf(\\\"%d\\\\t\\\", fibonacci(i)) } } \"]},\"156\":{\"h\":\"类型转换\",\"t\":[\"go 不支持隐式转换类型\",\"package main import \\\"fmt\\\" func main() { var sum int = 17 var count int = 5 var mean float32 mean = float32(sum)/float32(count) fmt.Printf(\\\"mean 的值为: %f\\\\n\\\",mean) } \"]},\"157\":{\"h\":\"接口\",\"t\":[\"Go 语言提供了另外一种数据类型即接口，它把所有的具有共性的方法定义在一起，任何其他类型只要实现了这些方法就是实现了这个接口\",\"package main import ( \\\"fmt\\\" ) type Phone interface { call() } type NokiaPhone struct { } func (nokiaPhone NokiaPhone) call() { fmt.Println(\\\"I am Nokia, I can call you!\\\") } type IPhone struct { } func (iPhone IPhone) call() { fmt.Println(\\\"I am iPhone, I can call you!\\\") } func main() { var phone Phone phone = new(NokiaPhone) phone.call() phone = new(IPhone) phone.call() } 在上面的例子中，我们定义了一个接口Phone，接口里面有一个方法call()。然后我们在main函数里面定义了一个Phone类型变量，并分别为之赋值为NokiaPhone和IPhone。然后调用call()方法，输出结果如下： I am Nokia, I can call you! I am iPhone, I can call you! \"]},\"158\":{\"h\":\"错误处理\",\"t\":[\"Go 语言通过内置的错误接口提供了非常简单的错误处理机制。\",\"error类型是一个接口类型，这是它的定义：\",\"type error interface { Error() string } \",\"我们可以在编码中通过实现 error 接口类型来生成错误信息。\",\"package main import ( \\\"fmt\\\" ) // 定义一个 DivideError 结构 type DivideError struct { dividee int divider int } // 实现 `error` 接口 func (de *DivideError) Error() string { strFormat := ` Cannot proceed, the divider is zero. dividee: %d divider: 0 ` return fmt.Sprintf(strFormat, de.dividee) } // 定义 `int` 类型除法运算的函数 func Divide(varDividee int, varDivider int) (result int, errorMsg string) { if varDivider == 0 { dData := DivideError{ dividee: varDividee, divider: varDivider, } errorMsg = dData.Error() return } else { return varDividee / varDivider, \\\"\\\" } } func main() { // 正常情况 if result, errorMsg := Divide(100, 10); errorMsg == \\\"\\\" { fmt.Println(\\\"100/10 = \\\", result) } // 当除数为零的时候会返回错误信息 if _, errorMsg := Divide(100, 0); errorMsg != \\\"\\\" { fmt.Println(\\\"errorMsg is: \\\", errorMsg) } } 执行以上程序，输出结果为： 100/10 = 10 errorMsg is: Cannot proceed, the divider is zero. dividee: 100 divider: 0 \"]},\"159\":{\"h\":\"运行时异常和 panic\",\"t\":[\"当发生像数组下标越界或类型断言失败这样的运行错误时，Go 运行时会触发运行时 panic，伴随着程序的崩溃抛出一个 runtime.Error 接口类型的值。这个错误值有个 RuntimeError() 方法用于区别普通错误。\",\"panic 可以直接从代码初始化：当错误条件（我们所测试的代码）很严苛且不可恢复，程序不能继续运行时，可以使用 panic 函数产生一个中止程序的运行时错误。panic 接收一个做任意类型的参数，通常是字符串，在程序死亡时被打印出来。Go 运行时负责中止程序并给出调试信息。\",\"Go panicking：\",\"在多层嵌套的函数调用中调用 panic，可以马上中止当前函数的执行，所有的 defer 语句都会保证执行并把控制权交还给接收到 panic 的函数调用者。这样向上冒泡直到最顶层，并执行（每层的） defer，在栈顶处程序崩溃，并在命令行中用传给 panic 的值报告错误情况：这个终止过程就是 panicking。\"]},\"160\":{\"h\":\"从 panic 中恢复（Recover）\",\"t\":[\"正如名字一样，这个（recover）内建函数被用于从 panic 或 错误场景中恢复：让程序可以从 panicking 重新获得控制权，停止终止过程进而恢复正常执行。\",\"recover 只能在 defer 修饰的函数（参见 6.4 节）中使用：用于取得 panic 调用中传递过来的错误值，如果是正常执行，调用 recover 会返回 nil，且没有其它效果。\",\"总结：panic 会导致栈被展开直到 defer 修饰的 recover () 被调用或者程序中止。\",\"这跟 Java 和 .NET 这样的语言中的 catch 块类似。\"]},\"161\":{\"h\":\"pkg\"},\"162\":{\"h\":\"os包\",\"t\":[\"获取命令参数\",\"args = os.Args[1:] \"]},\"163\":{\"h\":\"cobra\"},\"164\":{\"h\":\"command.go\",\"t\":[\"用于自定义一些命令，去初始化或配置数据或启动项目 例如：go-admin server -c 参数 去启动项目\",\"var ( configYml string apiCheck bool StartCmd = &cobra.Command{ Use: \\\"server\\\", Short: \\\"Start API server\\\", Example: \\\"go-admin server -c config/settings.yml\\\", SilenceUsage: true, PreRun: func(cmd *cobra.Command, args []string) { setup() }, RunE: func(cmd *cobra.Command, args []string) error { return run() }, } ) \"]},\"165\":{\"h\":\"web\",\"t\":[\"gin\",\"gorm\",\"beego\",\"bee\",\"微服务go-micro\",\"grpc\",\"consul\"]},\"166\":{\"h\":\"env相关\"},\"167\":{\"h\":\"GOROOT\",\"t\":[\"go程序运行所需的文件及公共依赖\"]},\"168\":{\"h\":\"GOPATH\",\"t\":[\"参考\",\"go目录1\",\"类似于一个工作目录，一般包含bin、pkg、src目录\",\"在src目录下加入项目1、项目2、项目3\",\"go目录2\",\"直接将项目目录作为一个添加到GOPATH中\",\"包含bin、pkg、src目录\"]},\"169\":{\"h\":\"module模块\",\"t\":[\"文件夹下需添加go.mod文件来定义\",\"跨模块引包，需在模块go.md文件中添加引入的模块路径\",\"若本地包没有上传至公共仓库，则无法直接导入使用，需在mod文件中，使用replace更改引用本地包\"]},\"170\":{\"h\":\"package包\",\"t\":[\"同一目录下，不能有多个package,go文件的package名无须与文件夹名相同(但一般取相同)\",\"同一包下的文件可以放在不同目录下,但一般不建议这么做，引入的时候需要起别名\",\"引入时使用文件的路径下，需带有模块文件夹名\",\"引入后，用包名引入方法使用\",\"引入包以module为单位\",\"原则上package应和文件夹名相同，按照文件夹名引入模块和包，若包名和文件夹名不同，import引入需起别名\"]},\"171\":{\"h\":\"拉取与上传module处理\",\"t\":[\"上传按照go.mod中定义的module路径存在远程仓库\",\"require下载按照module路径下载依赖\",\"import导入按照module导入\"]},\"172\":{\"h\":\"go.mod\",\"t\":[\"模块\",\"require\",\"拉取远程仓库代码\",\"replace\",\"module hello go 1.14 // 官方文档 // replace example.com/greetings => ../greetings // 本文章 replace greetings => ../greetings \"]},\"173\":{\"h\":\"cmd\",\"t\":[\"go version 查看 go 当前的版本\",\"go env 查看当前 go 的环境变量\",\"go list 列出当前全部安装的 package\",\"go run 编译并运行 Go 程序\",\"go mod tidy 整理依赖\",\"删除不需要的依赖包\",\"下载新的依赖包\",\"更新go.sum\",\"修改依赖包地址,使用新版本包管理器\",\"go env -w GOPROXY=https://goproxy.cn go env -w GO111MODULE=on \",\"go build 构建包为可执行文件\",\"如果是普通包，就像我们在 1.2 节中编写的 mymath 包那样，当你执行 go build 之后，它不会产生任何文件。如果你需要在 $GOPATH/pkg 下生成相应的文件，那就得执行 go install。\",\"如果是 main 包，当你执行 go build 之后，它就会在当前目录下生成一个可执行文件。如果你需要在 $GOPATH/bin 下生成相应的文件，需要执行 go install，或者使用 go build -o 路径/a.exe。\",\"go build [-o output] [build flags] [packages] go build -o ./test main.go 选项： -o 输出目录 build flag 构建标记 args 构建包文件参数 \",\"go get 下载包到gopath的pkg中\",\"动态获取远程代码包\",\"内部实际上分成了两步操作：第一步是下载源码包，第二步是执行 go install\",\"go get github.com/astaxie/beego \",\"go install\",\"如果包含main包，则会在bin下生成可执行文件\",\"如果不是main包，则会在pkg下生成.a文件\",\"go clean\",\"来移除当前源码包和关联源码包里面编译生成的文件\"]},\"174\":{\"h\":\"go runtime 运行时\",\"t\":[\"这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 11.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。\",\"Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。\"]},\"175\":{\"h\":\"框架\"},\"176\":{\"h\":\"gin\",\"t\":[\"默认 使用 Logger 和 Recovery 中间件,可使用gin.New 代替gin.Default\"]},\"177\":{\"h\":\"BasicAuth中间件\",\"t\":[\"借用中间件对用户进行鉴权\"]},\"178\":{\"h\":\"使用中间件\"},\"179\":{\"h\":\"中间件使用goroutine\",\"t\":[\"当在中间件或 handler 中启动新的 Goroutine 时，不能使用原始的上下文，必须使用只读副本\",\"func main() { r := gin.Default() r.GET(\\\"/long_async\\\", func(c *gin.Context) { // 创建在 goroutine 中使用的副本 cCp := c.Copy() go func() { // 用 time.Sleep() 模拟一个长任务。 time.Sleep(5 * time.Second) // 请注意您使用的是复制的上下文 \\\"cCp\\\"，这一点很重要 log.Println(\\\"Done! in path \\\" + cCp.Request.URL.Path) }() }) r.GET(\\\"/long_sync\\\", func(c *gin.Context) { // 用 time.Sleep() 模拟一个长任务。 time.Sleep(5 * time.Second) // 因为没有使用 goroutine，不需要拷贝上下文 log.Println(\\\"Done! in path \\\" + c.Request.URL.Path) }) // 监听并在 0.0.0.0:8080 上启动服务 r.Run(\\\":8080\\\") } \"]},\"180\":{\"h\":\"request-body数据绑定\",\"t\":[\"ShouldBind 对于json格式数据不能多次绑定到实体中，影响性能\",\"ShouldBindBodyWith\"]},\"181\":{\"h\":\"模型及参数绑定\",\"t\":[\"需在结构体中字段加标签，允许json form xml等绑定,可以自动推断，也可使用具体绑定的方法\",\"shouldBindJSON\",\"shouldBindXML\",\"ShouldBindUri 绑定路径中参数\",\"结构体样例\",\"type Login struct { User string `form:\\\"user\\\" json:\\\"user\\\" xml:\\\"user\\\" binding:\\\"required\\\"` Password string `form:\\\"password\\\" json:\\\"password\\\" xml:\\\"password\\\" binding:\\\"required\\\"` } \"]},\"182\":{\"h\":\"iris\"},\"183\":{\"h\":\"beego\"},\"184\":{\"h\":\"并发\"},\"185\":{\"h\":\"协程与通道\",\"t\":[\"main协程结束，其他协程也会结束\",\"协程与系统线程并不是一一对应关系，协程在线程基础上执行，一般单核CPU，使用一个线程执行多个协程\"]},\"186\":{\"h\":\"使用 GOMAXPROCS\",\"t\":[\"1、在 gc 编译器下（6g 或者 8g）你必须设置 GOMAXPROCS 为一个大于默认值 1 的数值来允许运行时支持使用多于 1 个的操作系统线程，否则所有的协程都会共享同一个线程\",\"2、GOMAXPROCS 等同于（并发的）线程数量，在一台核心数多于 1 个的机器上，会尽可能有等同于核心数的线程在并行运行。\",\"3、当 GOMAXPROCS 大于 1 时，会有一个线程池管理众多线程。gccgo 编译器 会使 GOMAXPROCS 与运行中的协程数量相等。\"]},\"187\":{\"h\":\"close方法\"},\"188\":{\"h\":\"select方法\",\"t\":[\"select 语句实现了一种监听模式，通常用在（无限）循环中；在某种情况下，通过 break 语句使循环退出。\",\"如果都阻塞了，会等待直到其中一个可以处理\",\"如果多个可以处理，随机选择一个\",\"如果没有通道操作可以处理并且写了 default 语句，它就会执行：default 永远是可运行的（这就是准备好了，可以执行）\"]},\"189\":{\"h\":\"go 关键字\",\"t\":[\"用于开启轻量级的routine协程，同一个程序中的所有 goroutine 共享同一个地址空间。\",\"package main import ( \\\"fmt\\\" \\\"time\\\" ) func say(s string) { for i := 0; i < 5; i++ { time.Sleep(100 * time.Millisecond) fmt.Println(s) } } func main() { go say(\\\"world\\\") say(\\\"hello\\\") } \"]},\"190\":{\"h\":\"channel\",\"t\":[\"用于线程间通信，且默认情况下，通道是不带缓冲区的，即发送方发送数据，接收方需要接受数据\",\"通道（channel）是用来传递数据的一个数据结构。\",\"通道可用于两个 goroutine 之间通过传递一个指定类型的值来同步运行和通讯。操作符 <- 用于指定通道的方向，发送或接收。如果未指定方向，则为双向通道。\",\"ch <- v // 把 v 发送到通道 ch v := <-ch // 从 ch 接收数据 // 并把值赋给 v \",\"声明\",\"使用chan关键字，通道在使用前必须先创建\",\"ch := make(chan int) \",\"通道缓冲区\",\"通道可以设置缓冲区，通过 make 的第二个参数指定缓冲区大小：\",\"带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，\",\"就是说发送端发送的数据可以放在缓冲区里面，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据。\",\"不过由于缓冲区的大小是有限的，所以还是必须有接收端来接收数据的，否则缓冲区一满，数据发送端就无法再发送数据了。\",\"注意：如果通道不带缓冲，发送方会阻塞直到接收方从通道中接收了值。如果通道带缓冲，发送方则会阻塞直到发送的值被拷贝到缓冲区内；如果缓冲区已满， 则意味着需要等待直到某个接收方获取到一个值。接收方在有值可以接收之前会一直阻塞。\",\"ch := make(chan int, 100) \",\"package main import \\\"fmt\\\" func main() { // 这里我们定义了一个可以存储整数类型的带缓冲通道 // 缓冲区大小为2 ch := make(chan int, 2) // 因为 ch 是带缓冲的通道，我们可以同时发送两个数据 // 而不用立刻需要去同步读取数据 ch <- 1 ch <- 2 // 获取这两个数据 fmt.Println(<-ch) fmt.Println(<-ch) } \",\"Go 遍历通道与关闭通道\",\"Go 通过 range 关键字来实现遍历读取到的数据，类似于与数组或切片。格式如下：\",\"v, ok := <-ch \",\"如果通道接收不到数据后 ok 就为 false，这时通道就可以使用 close() 函数来关闭。\",\"package main import ( \\\"fmt\\\" ) func fibonacci(n int, c chan int) { x, y := 0, 1 for i := 0; i < n; i++ { c <- x x, y = y, x+y } close(c) } func main() { c := make(chan int, 10) go fibonacci(cap(c), c) // range 函数遍历每个从通道接收到的数据，因为 c 在发送完 10 个 // 数据之后就关闭了通道，所以这里我们 range 函数在接收到 10 个数据 // 之后就结束了。如果上面的 c 通道不关闭，那么 range 函数就不 // 会结束，从而在接收第 11 个数据的时候就阻塞了。 for i := range c { fmt.Println(i) } } \"]},\"191\":{\"h\":\"Executors\"},\"192\":{\"h\":\"newSingleThreadScheduledExecutor方法\",\"t\":[\"创建单线程调度器\",\"private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(r -> { Thread t = new Thread(r); t.setName(\\\"timer-\\\" + t.getId()); return t; }); \",\"固定延时调度\",\"每次执行结束到开始的间隔固定不变\",\"假设执行时间1秒，延时5秒执行一次，第3秒开始执行，第4秒执行完毕，下一次9秒开始执行\",\" scheduledExecutorService.scheduleWithFixedDelay(this::removeTimeoutFuture, timeoutSec, timeoutSec, TimeUnit.MILLISECONDS); \",\"固定频率调度\",\"每隔一定频率执行一次\",\"假设执行时间1秒，频率5秒执行一次，第3秒开始执行，下一次8秒开始执行\"]},\"193\":{\"h\":\"interview\"},\"194\":{\"h\":\"jvm监控\",\"t\":[\"实际场景，设参，垃圾回收触发时机及条件\"]},\"195\":{\"h\":\"事务传播的具体场景\"},\"196\":{\"h\":\"spring线程安全\"},\"197\":{\"h\":\"递归算法题\"},\"198\":{\"h\":\"hashtable与hashmap的区别\",\"t\":[\"hashtable是一个线程安全的类，用于存放键值对。内部的方法都被synchronized修饰 hashmap与之相反，键和值可以为null, hashtable不可以用null作为键 HashMap的初始容量为16，Hashtable初始容量为11，两者的填充因子默认都是0.75。 hashmap的扩容是2的n次方，hashtable是2倍加1 使用2的n次方便于使用与运算得到对应的数组散列值或索引 在多线程环境下若使用HashMap需要使用Collections.synchronizedMap()方法来获取一个线程安全的集合 \"]},\"199\":{\"h\":\"string、stringbuffer、stringbuilder\",\"t\":[\"三者都是用于描述和操作字符串的类 stirng是不可变的、其余是可变的 stringbuffer和stringbuilder通过append方法在原有内存中的字符串上，改变字符串。 stringbuffer是线程安全的 \"]},\"200\":{\"h\":\"实现对象的克隆\",\"t\":[\"可分为浅克隆和深克隆 浅克隆通过对象的引用(地址)的传递，辅助的地址，指向同一个对象 深克隆 1、序列化和反序列化 2、实现cloneable接口，表示可克隆，调用object的clone方法，若包含引用对象需调用引用对象的clone方法，赋值。 \"]},\"201\":{\"h\":\"gc？gc的作用\",\"t\":[\"gc即垃圾回收 gc可以帮助程序员实现自动内存管理，而不用程序员手动释放内存，提高开发效率。 判断对象是否存活的算法： 1、可达性分析算法 2、引用计数法 python等语言使用进行内存管理 \"]},\"202\":{\"h\":\"Spring支持的事务管理类型, 事务传播\",\"t\":[\"编程式事务管理，手动提交回滚事务，如下 PlatformTransactionManager txmanager TransactionStatus status = txManager.getTransaction(new DefaultTransactionDefinition()); txmanager.commit(status) txmanager.rollback(status) 声明式事务管理， @Transactional 或xml配置方式 \",\"事务的传播 7种 1、默认required ,如果当前没有事务，就创建一个新事务，如果当前存在事务，就加入该事务。 @Transactional(propagation = Propagation.REQUIRED) public void methodA() { methodB(); // do something } @Transactional(propagation = Propagation.REQUIRED) public void methodB() { // do something } 单独调用methodB方法时，因为当前上下文不存在事务，所以会开启一个新的事务。 调用methodA方法时，因为当前上下文不存在事务，所以会开启一个新的事务。当执行到methodB时，methodB发现当前上下文有事务，因此就加入到当前事务中来。 \"]},\"203\":{\"h\":\"什么是cookie ，cookie和session的区别\",\"t\":[\"cookie是客户端会话技术，用于在客户端存放一些信息，通常用于下次请求，服务端辨别客户身份的方式，如token, 支持跨域,子域名 session是服务端会话技术，存放用户信息，返回sessionId存放在cookie中，对用户进行验证 cookie存放信息<=4kB \"]},\"204\":{\"h\":\"什么情况下发生数据脏读\",\"t\":[\"事务隔离级别是读未提交 线程B读到了线程A未提交的数据 \"]},\"205\":{\"h\":\"accesslog\",\"t\":[\"用户每访问一次会在accesslog中记录一次访问记录，找出10次以上的用户\",\"根据host进行分组 count（*）>10 \"]},\"206\":{\"h\":\"生产环境索引失效，解决方案？\",\"t\":[\"explain/analyse分析sql执行计划，看是否用上索引 强制使用索引，force index(索引名称) 索引失效： 模糊查询首部使用了% or 隐式类型转换 联合索引未遵循最左原则 条件中使用了数学计算或函数，如test/2 \",\"查看慢查询日志是否开启 SHOW VARIABLES LIKE '%slow_query_log%'; \"]},\"207\":{\"h\":\"如何按类型将数据映射到不同的类上？\",\"t\":[\"有待学习 可以采用数据字典的方式，在数据库中，类型字段使用整型数据值来标识不同类型 在接口中定义枚举类型，定义code和zh含义 \"]},\"208\":{\"h\":\"如果一个线程发生OOM，线程还会运行吗？会影响其他线程吗？\",\"t\":[\"不影响，当一个线程抛出OOM异常后，它所占据的内存资源会全部被释放掉，从而不会影响其他线程的运行！ 但如果共享变量被其他线程使用，则不会gc，内存释放不了，导致其余线程死亡 \"]},\"209\":{\"h\":\"如果主线程抛异常退出了，子线程还能运行么?\",\"t\":[\"线程不像进程，一个进程中的线程之间是没有父子之分的，都是平级关系。即线程都是一样的, 退出了一个不会影响另外一个。 如果主线程抛异常退出了，子线程还能运行。 但是有一个例外情况，如果这些子线程都是守护线程，那么子线程会随着主线程结束而结束。 \"]},\"210\":{\"h\":\"如何在springboot启动时，加载资源到内存\",\"t\":[\"@postConstruct\",\"CommandLineRunner接口\",\"static代码块\",\"ApplicationListener监听器\",\"public class ApplicationEventListener implements ApplicationListener<ApplicationEvent> { @Override public void onApplicationEvent(ApplicationEvent event) { } } \",\"启动类显式调用\",\"public class StartIiApplication{ public static void main(String[] args) { ApplicationContext applicationContext = SpringApplication.run(StartIiApplication.class, args); BeanUtil.setApplicationContext(applicationContext); //从启动的容器中获取Bean，并调用初始化方法 TestUtils util=(TestUtils) applicationContext.getBean(\\\"testUtils\\\"); util.Init(); } } \"]},\"211\":{\"h\":\"starter的意义\",\"t\":[\"主要用于简化spring的繁琐配置，通过构建starter，将组件相关jar包引入，以及通过@configuration注解的配置类，spring.factories文件，在容器启动时，通过自动装配，将相关配置信息注入到spring容器中。 spring-boot-starter-data-redis构建redis环境 spring-boot-starter-web构建web环境 \"]},\"212\":{\"h\":\"分布式事务\",\"t\":[\"锁和事务的共存的解决方案\",\"自动提交事务后释放锁 try { tryLock()获取锁 业务处理方法加@Tranctional注解 } catch { } finally { 释放锁 } 手动提交事务释放锁 try { tryLock()获取锁 业务处理 commit } catch { rollback } finally { 释放锁 } \",\"事务特性\",\"本地事务\",\"原子性\",\"一致性\",\"在事务执行前后，数据保持一致 \",\"隔离性\",\"持久性\",\"分布式事务\",\"一致性\",\"某项业务操作跨多个服务，要保证多个服务本地事务操作前后数据一致， 如一个下单操作，订单服务和库存服务： 订单服务创建订单，库存服务扣减库存，在分布式事务执行前后，各服务上的数据要保持一致 可分为强一致性和弱一致性 \",\"弱一致性：发货单保存到es数据库 在事务执行完毕,发送消息，异步更新库存，保证更新库存操作是可靠的，但数据在经过一段时间后才能保持一致 \",\"可用性\",\"兼容性\",\"分布式事务解决方案\",\"Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用 的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事 务模式，为用户打造一站式的分布式解决方案(AT模式是阿里首推的模式, 阿里云上有商用版本的GTS[Global Transaction service 全局事务服务] ) 。\",\"1、二阶段提交回滚\",\"一阶段，即保存了各服务本地事务提交前后的undolog日志，并将本地事务的执行结果告知事务协调者TC 二阶段提交，即删除undolog 二阶段回滚，根据undolog再次开启本地事务执行回滚操作 \"]},\"213\":{\"h\":\"熔断降级如何处理?\",\"t\":[\"hystrix是一个容错组件，实现了超时机制和断路器模式。 hystrix提供了熔断和降级。 # feign 关闭httpclient feign.httpclient.enabled=false # feign 启用okhttp feign.okhttp.enabled=true 可以配置拦截器向请求头添加信息 # 单位ms,请求处理的超时时间 ribbon.ReadTimeout=15000 # 单位ms,请求连接超时时间 ribbon.ConnectTimeout=5000 # 对当前实例的重试次数 ribbon.MaxAutoRetries=0 # 切换实例的重试次数 ribbon.MaxAutoRetriesNextServer=1 # 对所有操作请求都进行重试 ribbon.OkToRetryOnAllOperations=false # 刷新服务列表的间隔时间 ribbon.ServerListRefreshInterval=5000 获取服务注册列表 #feign开启hystrix feign.hystrix.enabled=true \",\"降级\",\"降级其实就相当于，当我们向一个服务发起请求，当请求超时了，就会把这次请求记录到服务中，然后就会尝试向其他服务发请求，如果还没成功，就对这次请求进行处理（怎么处理取决于业务需求如）就相当于try catch一样的逻辑，当然hystrix底层使用aop来实现的。 \",\"隔离和限流\",\"每当向服务发起一个请求时，就是会发起一个http请求,每一个http请求就要开启一个线程，然后等待服务返回信息，这容易导致线程的堆积，所以就可以用http的URI作为一个标识，然后相同的URI可以开启一个线程池，然后线程池中限定线程数，这样就可以设置拒绝策略，当线程池满了，就可以快速的抛出异常或者拒绝请求，用线程池做到线程隔离来达到限流。 \",\"熔断\",\"当达到一定次数不再向服务发起请求，默认20次，且失败率达到50以上，设置服务为关闭， 每5秒通过一次请求，看服务是否可用，服务状态更新为启用 feign被hystrix包裹 \"]},\"214\":{\"h\":\"jvm参数设置？\",\"t\":[\"设置堆内存大小 -Xmx1G 设置最大堆内存 -Xms1G 设置最小堆内存 -Xmn1200m 设置年轻代大小 -Xss 设置线程的堆栈大小 -XX:MaxTenuringThreshold=15 设置进入老年代的阈值 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution \"]},\"215\":{\"h\":\"tomcat容器\",\"t\":[\"tomcat如何接受请求？ acceptCount 操作系统层面判断 MaxConnection 在accept之前进行判断 acceptor线程，创建socket套接字对象 两个poller线程，从队列中取socket套接字加入到select选择器中，调用选择器的select方法获取就绪socket套接字集，进行遍历处理读取解析数据 请求数过多会导致？ acceptCount connectionrefused MaxConnection 阻塞 使用了线程池？ 如果未设置超时时间，会一直等待 \"]},\"216\":{\"h\":\"如何处理缓存穿透、雪崩、击穿等问题的？\",\"t\":[\"缓存击穿 热点key过期失效，使用锁，双重检查，第一次查询，从数据库查询数据，设置缓存 缓存穿透 大量请求查询不存在的key，第一次查询，设置空值 缓存雪崩 key大面积失效 设置不同的过期时间 其他缓存方案，创建定时缓存 \"]},\"217\":{\"h\":\"消息的id是自动随机生成的？还是业务唯一Id?\",\"t\":[\"业务唯一id,通过业务标记bizTag生成业务唯一id \"]},\"218\":{\"h\":\"如何将一个正在运行的容器重新制作成镜像文件？\",\"t\":[\"根据已有容器创建镜像文件\",\"执行docker ps获取需要构建镜像的容器 ID 08cd43c7e50d。\",\"执行docker pause 08cd43c7e50d暂停08cd43c7e50d容器的运行。\",\"执行docker commit 08cd43c7e50d redis:test，基于容器 ID 08cd43c7e50d构建 Docker 镜像。\",\"执行docker images redis:test，查看镜像是否成功构建。\",\"dockerFile创建镜像文件\",\"dockerFile: FROM livingobjects/jre8 VOLUME /tmp ENV TZ \\\"Asia/Shanghai\\\" ADD ./build/libs/saascloud-opms-idg.jar app.jar RUN bash -c 'touch /app.jar' CMD exec java $JVM_OPTS -Djava.security.egd=file:/dev/./urandom -jar /app.jar $JAVA_OPTS docker build -f Dockerfile -t redis:test \"]},\"219\":{\"h\":\"什么时候走行级锁或表级锁\",\"t\":[\"行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。 InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。\",\"如果字段加了索引，会对索引记录加锁，同时对应的行记录加锁\",\"myisam引擎是对表加锁\",\"默认情况下，InnoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。\",\"针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁。\",\"InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么InnoDB将对表中的所有记录加锁，此时 就会升级为表锁。\"]},\"220\":{\"h\":\"如何避免索引回查？\",\"t\":[\"覆盖索引，要查询的信息就是对应索引以及id \"]},\"221\":{\"h\":\"为什么使用分库分表?\",\"t\":[\"水平分库和水平分表\",\"为了解决单库单表的数量量太大，导致的查询效率问题，通过水平分库和分表将数据按照一定规则分散存储到不同库和不同表中，减少单表数据量，提高查询效率\",\"一般单表达到500万进行分库分表\",\"缺点\",\"分布式事务问题，即事务一致性问题\",\"联表和嵌套查询问题\",\"需要保证主键id全局唯一\",\"运维量增加\",\"主要通过分库分表中间件，sql支持不足，跨库join时可能需将数据查询到中间件再join,导致效率问题 \"]},\"222\":{\"h\":\"新增es数据，查询不到的原因？\",\"t\":[\"索引是否是环境自建\",\"传参问题，构建索引名称出错\",\"是否对索引进行刷新\"]},\"223\":{\"h\":\"rocketMq的替代方案？\",\"t\":[\"使用线程池的方式\",\"同步处理方式\",\"使用其它消息队列如kafka\",\"分布式事务消息 严格保证消息有序 定时消息 消息失败重试 数据可靠性： RocketMQ新增了同步刷盘机制，保证了可靠性；一个RocketMQ实例只有一个partition, 在replication时性能更好。 \"]},\"224\":{\"h\":\"异步更新库存？\",\"t\":[\"起到解耦、异步、削峰的作用\",\"如果批量处理大量订单，使用同步更新方式，导致处理时间太长，对前端用户展示不友好\",\"同时通过使用消息队列方式，实现解耦\",\"如何保证异步库存扣减数量不会出问题\",\"发送库存扣减消息时，会将同一仓库且同货主的库存变动任务发送到同一消息队列，并采用顺序消费的方式，保证库存更新的可靠性。\",\"租户，仓库和货主的关系\",\"前端vue中维护组件共享的变量，当切换仓库时，会重新刷新页面展示，每一个请求都会带有tenantId、warehouseId或customerId信息。\"]},\"225\":{\"h\":\"java\"},\"226\":{\"h\":\"运算符优先级\"},\"227\":{\"h\":\"知识点\",\"t\":[\"文件写入不到build的resource目录下\"]},\"228\":{\"h\":\"集合\",\"t\":[\"最上层的Collections和Map接口\",\"其中List和Set接口继承Collections\",\"常用的是ArrayList和HashMap和HashSet\",\"List\",\"ArrayList和LinkedList是其实现类，元素顺序是有序的，容量10 ArrayList底层实现是Object[]数组，LinkedList是双向链表。 \",\"Set\",\"HashSet是其实现类，元素是无序的 HashSet底层是基于hashMap结构 TreeSet是其实现类，元素是有序的 \",\"Map\",\"HashMap是其实现类，存放键值对元素，容量是16 底层是基于数组加链表和红黑树，链表长度大于8会转化为红黑树，如果数组元素小于64，会先进行扩容 TreeMap \"]},\"229\":{\"h\":\"集合遍历删除元素\",\"t\":[\"for:遍历 本质上是转换为迭代器操作\",\"只能在迭代器中遍历做删除操作，且只能用迭代器的remove方法\"]},\"230\":{\"h\":\"Exception\",\"t\":[\"自上而下的类结构\",\"Throwable\",\"Error\",\"Exception\",\"检查时异常，必须进行处理,直接继承Exception,需显式处理,在方法上声明throws\",\"非受检异常，即RunException\",\"数组越界，空指针，类型转换等异常 \"]},\"231\":{\"h\":\"Thread\"},\"232\":{\"h\":\"线程状态\",\"t\":[\"NEW：线程对象已经被创建，但是还没有调用start()方法启动。\",\"RUNNABLE：线程正在执行或者等待CPU时间片，处于可运行状态。\",\"BLOCKED：线程在等待锁的释放，无法继续执行，处于阻塞状态。\",\"WAITING：线程正在等待另一个线程的通知或者等待IO操作完成。\",\"TIMED_WAITING：线程正在等待另一个线程的通知或者等待IO操作完成，但是可以设置等待时间。\",\"TERMINATED：线程已经执行完毕或者因为异常而终止，处于终止状态。\"]},\"233\":{\"h\":\"线程池\",\"t\":[\"若线程池在执行任务过程中，抛出运行时异常，线程池会进行处理，标记线程已完成，同时创建新的线程替代它执行其他任务 注意线程池的工作线程是循环执行的，调用消息队列的take方法获取任务，当任务队列为空，线程就会等待状态，等待被唤醒，释放cpu资源和锁资源\"]},\"234\":{\"h\":\"测试样例\",\"t\":[\"public class TestService { public static void main(String[] args) { ExecutorService executor1 = Executors.newSingleThreadExecutor(); ExecutorService executor2 = Executors.newSingleThreadExecutor(); for (int i = 1; i < 11; i++) { AtomicInteger finalI = new AtomicInteger(i); if (finalI.get() > 5) { executor2.execute(() ->{ if (7 == finalI.get()) { executor1.shutdown(); try { Thread.sleep(5000); } catch (InterruptedException e) { throw new RuntimeException(e); } } System.out.println(\\\"++\\\"); System.out.println(executor1.isShutdown()); System.out.println(\\\"任务\\\" + finalI.get()); System.out.println(\\\"--\\\"); } ); } else { executor1.execute(() ->{ if (3 == finalI.get()) { throw new RuntimeException(); //try { // Thread.sleep(5000); //} catch (InterruptedException e) { // throw new RuntimeException(e); //} } System.out.println(Thread.currentThread().getName()); System.out.println(\\\"任务\\\" + finalI.get()); } ); } } } } \"]},\"235\":{\"h\":\"守护线程和用户线程\",\"t\":[\"参考 线程不像进程，一个进程中的线程之间是没有父子之分的，都是平级关系。即线程都是一样的, 退出了一个不会影响另外一个。\",\"但是有一个例外情况，如果这些子线程都是守护线程，那么子线程会随着主线程结束而结束。\"]},\"236\":{\"h\":\"使用\",\"t\":[\"Runable接口，继承Thread\",\"重写run方法，构建线程任务 start方法启用线程 jion方法将子线程加入当前主线程，控制线程执行顺序 \",\"线程池的方式，ThreadPoolExecutor\",\"核心线程数，最大线程数，阻塞队列，线程工厂，超时时间（即线程最大的空闲时间，若超出时间，则销毁线程），拒绝策略 核心时getTask，线程获取等待队列中的任务 \",\"ExecutorService executorService = new ThreadPoolExecutor(10,15,60, TimeUnit.SECONDS,new LinkedBlockingDeque<>(20), Executors.defaultThreadFactory(),new ThreadPoolExecutor.CallerRunsPolicy()); List<List<Inventory>> splitStocks = CollectionUtil.split(list.getData().getRows(),25); CountDownLatch count = new CountDownLatch(splitStocks.size()); Long startTime = new Date().getTime(); for(List list1: splitStocks) { executorService.execute(new ThreadTask(count,customerItemStockVOS,list1,itemStockBiz,receiptRecordBiz,receiptBiz)); } try { count.await(120,TimeUnit.SECONDS); } catch (InterruptedException e) { e.printStackTrace(); } Long endTime = new Date().getTime(); log.info(\\\"耗时\\\"+(endTime-startTime)); static class ThreadTask implements Runnable { private CountDownLatch c; private List<CustomerItemStockVO> customerItemStockVOS; private List<Inventory> list; private ItemStockBiz itemStockBiz; private ReceiptRecordBiz receiptRecordBiz; private ReceiptBiz receiptBiz; public ThreadTask(CountDownLatch c,List<CustomerItemStockVO> customerItemStockVOS,List<Inventory> list,ItemStockBiz itemStockBiz, ReceiptRecordBiz receiptRecordBiz, ReceiptBiz receiptBiz) { this.customerItemStockVOS = customerItemStockVOS; this.c = c; this.list = list; this.receiptBiz = receiptBiz; this.receiptRecordBiz = receiptRecordBiz; this.itemStockBiz = itemStockBiz; } @Override public void run(){ try { list.forEach(item -> { CustomerItemStockVO customerItemStockVO = new CustomerItemStockVO(); Map<String,Object> requestParams = new HashMap<>(); requestParams.put(\\\"tenantId\\\",item.getTenantId()); requestParams.put(\\\"warehouseId\\\",item.getWarehouseId()); requestParams.put(\\\"customerId\\\",item.getCustomerId()); requestParams.put(\\\"itemId\\\",item.getItemId()); requestParams.put(\\\"normalFlag\\\",item.getNormalFlag()); List<ItemStock> itemStockList = itemStockBiz.selectForItemCache(requestParams); List<ItemStockVo> itemStockVoList = itemStockBiz.assembleDate1(itemStockList); BigDecimal quantity = BigDecimal.ZERO; BigDecimal usableQty = BigDecimal.ZERO; BigDecimal lockQty = BigDecimal.ZERO; BigDecimal frozenQuantity = BigDecimal.ZERO; BigDecimal diffQty = BigDecimal.ZERO; BigDecimal outGoingCache = BigDecimal.ZERO; BigDecimal storageCache = BigDecimal.ZERO; BigDecimal returnQty = BigDecimal.ZERO; BigDecimal replLockQty = BigDecimal.ZERO; BigDecimal pieceNum = BigDecimal.ZERO; BigDecimal oddQuantity = BigDecimal.ZERO; for (ItemStockVo itemStockVo : itemStockVoList) { BeanUtil.copyProperties(itemStockVo, customerItemStockVO); // 可用库存、锁定库存（越库缓存+补货缓存+拣货库位+存储库位） if (itemStockVo.getLocationType() .equals(WmsConstant.Location.LocationType.REPOSITORY_LOCATION.getCode()) || itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.PICKING_LOCATION.getCode()) || itemStockVo.getLocationType() .equals(WmsConstant.Location.LocationType.REPLENISHMENT_CACHE.getCode()) || itemStockVo.getLocationType() .equals(WmsConstant.Location.LocationType.CROSS_DATABASE_CACHE.getCode())) { usableQty = itemStockVo.getUsableQuantity().add(usableQty); lockQty = itemStockVo.getLockQuantity().add(lockQty); } // 冻结数量（拣货库位+存储库位） if (itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.PICKING_LOCATION.getCode()) || itemStockVo.getLocationType() .equals(WmsConstant.Location.LocationType.REPOSITORY_LOCATION.getCode())) { frozenQuantity = itemStockVo.getFrozenQuantity().add(frozenQuantity); } // 差异数量（差异库位） if (itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.ABNORMAL_LOCATION.getCode())) { diffQty = itemStockVo.getUsableQuantity().add(diffQty); } // 出库缓存（出库缓存的可用库存总量） if (itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.OUTGOING_CACHE.getCode())) { outGoingCache = itemStockVo.getUsableQuantity().add(outGoingCache); } // 入库缓存（入库缓存的可用库存总量） if (itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.STORAGE_CACHE.getCode())) { storageCache = itemStockVo.getUsableQuantity().add(storageCache); } // 返库数量（发货异常的库存总量） if (itemStockVo.getLocationType().equals(WmsConstant.Location.LocationType.DELIVERY_ABNORMAL.getCode())) { returnQty = itemStockVo.getQuantity().add(returnQty); } // 补货锁定库存、整件数量、 散件数量 （直接累加） replLockQty = itemStockVo.getReplLockQuantity().add(replLockQty); pieceNum = itemStockVo.getPieceNum().add(pieceNum); oddQuantity = itemStockVo.getOddQuantity().add(oddQuantity); } // 总库存数 = 可用库存+锁定库存+差异数量+冻结数量+入库缓存+出库缓存+返库数量+补货锁定数量 quantity = usableQty.add(lockQty).add(diffQty) .add(frozenQuantity) .add(storageCache).add(outGoingCache).add(returnQty).add(replLockQty); if (itemStockVoList.isEmpty()) { BeanUtil.copyProperties(item, customerItemStockVO); } customerItemStockVO.setGoodsCode(item.getGoodsCode()); customerItemStockVO.setQuantity(quantity); customerItemStockVO.setUsableQty(usableQty); customerItemStockVO.setLockQty(lockQty); customerItemStockVO.setFrozenQuantity(frozenQuantity); customerItemStockVO.setDiffQty(diffQty); customerItemStockVO.setOutGoingCache(outGoingCache); customerItemStockVO.setStorageCache(storageCache); customerItemStockVO.setReturnQty(returnQty); customerItemStockVO.setReplLockQty(replLockQty); customerItemStockVO.setPieceNum(pieceNum); customerItemStockVO.setOddQuantity(oddQuantity); // 下单锁定（已下单未发运数量）orderQty; customerItemStockVO.setOrderQty(item.getOrderQty()); ReceiptRecord receiptRecord = new ReceiptRecord(); receiptRecord.setTenantId(item.getTenantId()); receiptRecord.setWarehouseId(item.getWarehouseId()); receiptRecord.setCustomerId(item.getCustomerId()); receiptRecord.setItemId(item.getItemId()); receiptRecord.setNormalFlag(item.getNormalFlag()); receiptRecord.setQcStatus(WmsConstant.Receipt.QcStatus.WAIT_QC.getCode()); // 收货在途（新纪录+收货中的待收货数） Receipt receipt =new Receipt(); receipt.setTenantId(item.getTenantId()); receipt.setWarehouseId(item.getWarehouseId()); receipt.setCustomerId(item.getCustomerId()); receipt.setReceiptStatus(WmsConstant.Receipt.ReceiptStatus.NEW.getCode()); List<Receipt> receipts=receiptBiz.selectList(receipt); receipt.setReceiptStatus(WmsConstant.Receipt.ReceiptStatus.RECEIVING.getCode()); receipts.addAll(receiptBiz.selectList(receipt)); if(receipts.size()>0){ BigDecimal expectQty = BigDecimal.valueOf(receipts.stream().mapToDouble(i -> i.getExpectedQuantity().doubleValue()).sum()); BigDecimal receivedQty = BigDecimal.valueOf(receipts.stream().mapToDouble(i -> i.getReceivedQuantity().doubleValue()).sum()); customerItemStockVO.setIntransitQuantity(expectQty.subtract(receivedQty)); }else{ customerItemStockVO.setIntransitQuantity(BigDecimal.ZERO); } List<ReceiptRecord> receiptRecords = receiptRecordBiz.selectList(receiptRecord); // 待质检量（待质检的收货记录的实际收货数量） if (receiptRecords.size() > 0) { customerItemStockVO.setQrQty(BigDecimal.valueOf(receiptRecords.stream().mapToInt(record -> record.getReceivedQuantity().intValue()).sum())); } else { customerItemStockVO.setQrQty(BigDecimal.ZERO); } // 汇总的数据塞值 customerItemStockVOS.add(customerItemStockVO); }); c.countDown(); // System.out.println(Thread.currentThread().getName()+\\\" task\\\" + i); } catch (Exception e) { e.printStackTrace(); } } } \"]},\"237\":{\"h\":\"线程间的通信\",\"t\":[\"wait、notify、notifyAll\",\"condition、aWait、signal、signalAll\"]},\"238\":{\"h\":\"线程执行顺序\",\"t\":[\"countDownLatch\",\"join\",\"Future类获取异步线程结果\"]},\"239\":{\"h\":\"Queue\",\"t\":[\"offer和add区别\",\"都是向队列添加元素，offer方法若队列已满，则返回false，不会报错\",\"remove和poll区别\",\"向队列移除元素，poll方法若队列已空，则返回false，不会报错\"]},\"240\":{\"h\":\"javaassist\",\"t\":[\"开放源代码JBoss 应用服务器项目，一个开源的分析、编辑和创建Java字节码的类库\",\"简单，而且快速；\",\"直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类；\"]},\"241\":{\"h\":\"样例\",\"t\":[\"package com.an.bytecode.javaassist; import javassist.*; import java.io.File; import java.io.FileOutputStream; /** * @description: * @author: anpeiyong * @date: Created in 2020/4/7 11:25 * @since: */ public class JavaAssistTest { public static void main(String[] args) throws Exception { //CtClass对象容器 ClassPool classPool=ClassPool.getDefault(); //CtClass对象容器中创建一个public的JATest类 CtClass jATestClazz=classPool.makeClass(\\\"com.an.bytecode.javaassist.JATest\\\"); //***属性操作 //JATest类中添加private int id CtField ctIdField=new CtField(classPool.getCtClass(\\\"int\\\"),\\\"id\\\",jATestClazz); ctIdField.setModifiers(Modifier.PRIVATE); jATestClazz.addField(ctIdField); //JATest类中添加private String username CtField ctUserNameField=new CtField(classPool.getCtClass(\\\"java.lang.String\\\"),\\\"username\\\",jATestClazz); ctUserNameField.setModifiers(Modifier.PRIVATE); jATestClazz.addField(ctUserNameField); //添加getter,setter方法 jATestClazz.addMethod(CtNewMethod.getter(\\\"getId\\\",ctIdField)); jATestClazz.addMethod(CtNewMethod.getter(\\\"setId\\\",ctIdField)); jATestClazz.addMethod(CtNewMethod.getter(\\\"getUsername\\\",ctUserNameField)); jATestClazz.addMethod(CtNewMethod.getter(\\\"setUsername\\\",ctUserNameField)); //添加构造函数 CtConstructor ctConstructor=new CtConstructor(new CtClass[]{},jATestClazz); //添加构造函数方法体 StringBuffer sb = new StringBuffer(); sb.append(\\\"{\\\\n\\\").append(\\\"this.id = 27;\\\\n\\\").append(\\\"this.username=\\\\\\\"carl\\\\\\\";\\\\n}\\\"); ctConstructor.setBody(sb.toString()); jATestClazz.addConstructor(ctConstructor); // 添加自定义方法 CtMethod method = new CtMethod(CtClass.voidType, \\\"say\\\", new CtClass[]{}, jATestClazz); method.setModifiers(Modifier.PUBLIC); StringBuffer printSb = new StringBuffer(); printSb.append(\\\"{\\\\nSystem.out.println(\\\\\\\"begin!\\\\\\\");\\\\n\\\") .append(\\\"System.out.println(id);\\\\n\\\") .append(\\\"System.out.println(username);\\\\n\\\") .append(\\\"System.out.println(\\\\\\\"end!\\\\\\\");\\\\n\\\") .append(\\\"}\\\"); method.setBody(printSb.toString()); jATestClazz.addMethod(method); //生成一个Class对象 Class<?> clazz=jATestClazz.toClass(); Object object=clazz.newInstance(); //反射执行方法 clazz.getMethod(\\\"say\\\",new Class[]{}).invoke(object,new Object[]{}); //将生成的class写入文件中 FileOutputStream fileOutputStream=new FileOutputStream(new File(\\\"JATest.class\\\")); fileOutputStream.write(jATestClazz.toBytecode()); fileOutputStream.close(); } } \"]},\"242\":{\"h\":\"jvm\"},\"243\":{\"h\":\"GC\",\"t\":[\" gc即垃圾回收 gc可以帮助程序员实现自动内存管理，而不用程序员手动释放内存，提高开发效率。 判断对象是否存活的算法： 1、可达性分析算法 2、引用计数法 python等语言使用进行内存管理 \",\"引用计数法\",\"引用计数法，对象中维护一个引用计数器，如果对象被引用则数量加1， 对象的相互引用导致内存无法回收泄露，如: ObjectA a = new ObjectA(); ObjectB b = new ObjectB(); a.instance = b; b.instance = a; a = null; b = null; \",\"可达性分析算法\",\"1、通过一系列被称为GCRoot的根对象作为起始结点集来判段对象是否存活。 2、根据引用关系从根节点向下搜索，若某个对象不可达，则对象不再被使用 3、可作为GC root的有： - 虚拟机栈帧的局部变量表引用的对象 - 方法区的类变量，即静态变量 - 方法区的常量 - synchronized持有的监视器对象 4、引用可分为强引用(不会回收)、软引用(对软引用回收、若内存还是不足，报内存溢出异常)、弱引用(在第一次垃圾回收时，全部回收)、虚引用 5、不可达并不是真正死亡，它会被标记，随后进行筛选，判断是否有必要执行finalize方法，若已执行或未覆盖上述方法，则没有必要执行。若有必要执行则会加入到F-Queue队列,由低优先级的Finalizer线程执行finalize()方法，finalize()是对象避免死亡的最后机会，重新与引用链或路径连接 \",\"堆的分代划分：新生代（eden区、两个survive区）老年代 垃圾收集的区域划分：minorGc,majorGc,fullGc 垃圾收集算法如下： 1、标记-复制 用于新生代 - 通过对新生代内存划分为eden区、两个survive区，优先分配eden和一个survive区 2、标记-清除 -会产生大量内存碎片，导致无法分配内存，提前触发Gc 3、标记整理 用于老年代 -将存活的对象移到内存的一端，清除边界以外的内存 根节点枚举，无法避免stop the world 暂停所有用户线程 使用oopMap数据结构存放对象的位置信息，保存在安全点，即方法调用，循环跳转、异常跳转 安全区域，即sleep的线程如何到安全点，安全点的延申 如何让所有线程都跑到安全点的方案： 1、抢先式中断 2、主动式中断 常用的方案 - 线程在执行过程中，执行到安全点时，若发现垃圾回收标志为真，则主动跑到安全点 \",\"垃圾收集器： 1、新生代 serial 单线程 parnew 多线程 parallel scavenge 多线程 2、老年代 serial old parallel old cms 并发停顿收集器 G1 全功能垃圾收集器 \"]},\"244\":{\"h\":\"类加载\",\"t\":[\"类加载过程\",\"加载\",\"连接-验证\",\"连接-准备\",\"连接-解析\",\"初始化\",\"双亲委派机制\",\"启动类加载器\",\"lang包下的class对象 \",\"扩展类加载器\",\"应用类加载器\",\"自定义类的加载器 加载自定义类的相关类对象，局部性和空间性 \"]},\"245\":{\"h\":\"lambda\"},\"246\":{\"h\":\"Lambda表达式\",\"t\":[\"可以当作参数传递的函数,这是重点和核心\",\"形式:\",\"(参数) -> {函数体} \"]},\"247\":{\"h\":\"@FunctionalInterface函数式接口注解\",\"t\":[\"注解的接口中的方法必须唯一\"]},\"248\":{\"h\":\"两者关系\",\"t\":[\"lambda表达式是函数式接口的实例\",\"函数式接口是lambda表达式的类型\",\"本质上是对函数式接口中的方法的重写，即调用函数式接口的方法，就是执行lambda表达式\"]},\"249\":{\"h\":\"Function\",\"t\":[\"自定义函数式接口使用Function\",\"@FunctionalInterface public interface Function<T, R> { /** * Applies this function to the given argument. * * @param t the function argument * @return the function result */ R apply(T t); /** * Returns a composed function that first applies the {@code before} * function to its input, and then applies this function to the result. * If evaluation of either function throws an exception, it is relayed to * the caller of the composed function. * * @param <V> the type of input to the {@code before} function, and to the * composed function * @param before the function to apply before this function is applied * @return a composed function that first applies the {@code before} * function and then applies this function * @throws NullPointerException if before is null * * @see #andThen(Function) */ default <V> Function<V, R> compose(Function<? super V, ? extends T> before) { Objects.requireNonNull(before); return (V v) -> apply(before.apply(v)); } /** * Returns a composed function that first applies this function to * its input, and then applies the {@code after} function to the result. * If evaluation of either function throws an exception, it is relayed to * the caller of the composed function. * * @param <V> the type of output of the {@code after} function, and of the * composed function * @param after the function to apply after this function is applied * @return a composed function that first applies this function and then * applies the {@code after} function * @throws NullPointerException if after is null * * @see #compose(Function) */ default <V> Function<T, V> andThen(Function<? super R, ? extends V> after) { Objects.requireNonNull(after); return (T t) -> after.apply(apply(t)); } /** * Returns a function that always returns its input argument. * * @param <T> the type of the input and output objects to the function * @return a function that always returns its input argument */ static <T> Function<T, T> identity() { return t -> t; } } \"]},\"250\":{\"h\":\"Consumer\",\"t\":[\"@FunctionalInterface public interface Consumer<T> { /** * Performs this operation on the given argument. * * @param t the input argument */ void accept(T t); /** * Returns a composed {@code Consumer} that performs, in sequence, this * operation followed by the {@code after} operation. If performing either * operation throws an exception, it is relayed to the caller of the * composed operation. If performing this operation throws an exception, * the {@code after} operation will not be performed. * * @param after the operation to perform after this operation * @return a composed {@code Consumer} that performs in sequence this * operation followed by the {@code after} operation * @throws NullPointerException if {@code after} is null */ default Consumer<T> andThen(Consumer<? super T> after) { Objects.requireNonNull(after); return (T t) -> { accept(t); after.accept(t); }; } } \"]},\"251\":{\"h\":\"supplier\",\"t\":[\"@FunctionalInterface public interface Supplier<T> { /** * Gets a result. * * @return a result */ T get(); } \"]},\"252\":{\"h\":\"lambda对象的类对象\",\"t\":[\" @FunctionalInterface interface MyFunctionInterface<T,R> extends Serializable { R execute(T t); } public class MyClass implements Serializable { // 获取 SerializedLambda 并打印实现的方法名 public void printLambdaMethodName() throws Exception { MyFunctionInterface<Student, String> func = t-> StringUtils.split(\\\"FD,FD\\\",\\\",\\\")[0]; Method method = func.getClass().getDeclaredMethod(\\\"writeReplace\\\"); method.setAccessible(true); Object writeReplaceMethodResult = method.invoke(func); if (writeReplaceMethodResult instanceof SerializedLambda) { SerializedLambda serializedLambda = (SerializedLambda) writeReplaceMethodResult; String implMethodName = serializedLambda.getImplMethodName(); System.out.println(\\\"Lambda 实现的方法名称: \\\" + implMethodName); } } public static void main(String[] args) throws Exception { MyClass myClass = new MyClass(); myClass.printLambdaMethodName(); // 这将打印出 lambda 实现的方法名 } } \"]},\"253\":{\"h\":\"question\"},\"254\":{\"h\":\"事务一致性问题？\"},\"255\":{\"h\":\"继承\",\"t\":[\"/** * 查询参数 */ public class Query extends LinkedHashMap<String, Object> { private static final long serialVersionUID = 1L; //当前页码 private int page = 1; //每页条数 private int limit = 10; public Query(Map<String, Object> params){ this.putAll(params); //分页参数 if(params.get(\\\"page\\\")!=null) { this.page = Integer.parseInt(params.get(\\\"page\\\").toString()); } if(params.get(\\\"limit\\\")!=null) { this.limit = Integer.parseInt(params.get(\\\"limit\\\").toString()); } this.remove(\\\"page\\\"); this.remove(\\\"limit\\\"); } public int getPage() { return page; } public void setPage(int page) { this.page = page; } public int getLimit() { return limit; } public void setLimit(int limit) { this.limit = limit; } } \"]},\"256\":{\"h\":\"递归查询\",\"t\":[\"public List<String> getChild(List<String> pList, List<String> rList) { //根据当前部门id查询所有子部门的id List<String> list = mapper.selectDepartListByParentIds(pList); //根据parent_id 集合查询子部门 if (list.size() > 0) { rList.addAll(list); getChild(list, rList);//递归查询 } return rList; } \",\"注意流的自动关闭，读取不到数据 mysql存时间会损失精度 日期如果是date类型，传标准字符串比较 多线程 容器安全 操作数据库 idea测试类运行失败，将模式gradle改为idea \"]},\"257\":{\"h\":\"unsafe\",\"t\":[\"参考1\",\"参考2\"]},\"258\":{\"h\":\"putOrderedObject\"},\"259\":{\"h\":\"compareAndSwapObject\"},\"260\":{\"h\":\"rust\"},\"261\":{\"h\":\"特征\",\"t\":[\"Display特征\"]},\"262\":{\"h\":\"类型\"},\"263\":{\"h\":\"单元类型\",\"t\":[\"（）\"]},\"264\":{\"h\":\"gc\",\"t\":[\"变量在离开作用域后，就自动释放其占用的内存：\",\"{ let s = String::from(\\\"hello\\\"); // 从此处起，s 是有效的 // 使用 s } // 此作用域已结束， // s 不再有效，内存被释放 \",\"与其它系统编程语言的 free 函数相同，Rust 也提供了一个释放内存的函数： drop，但是不同的是，其它语言要手动调用 free 来释放每一个变量占用的内存，\",\"而 Rust 则在变量离开作用域时，自动调用 drop 函数: 上面代码中，Rust 在结尾的 } 处自动调用 drop。\"]},\"265\":{\"h\":\"所有权和借用\",\"t\":[\"mut关键字，标识是否可变\",\"&、mut符号的使用 借用不可变所有权、可变所有权\",\"let 声明变量不可变\",\"栈和堆\",\"同一时刻，你只能拥有要么一个可变引用, 要么任意多个不可变引用\",\"引用必须总是有效的\"]},\"266\":{\"h\":\"copy特征\",\"t\":[\"实现了 Copy 特征的类型无需所有权转移，可以直接在赋值时进行 数据拷贝，其中 bool 和 u64 类型就实现了 Copy 特征\"]},\"267\":{\"h\":\"字符串\",\"t\":[\"底层是字节数组\",\"字符串字面量返回的是字符串的地址\",\"字符串的一些操作是基于原有字符串操作，不同于其他语言\",\"//创建的字符串对象 String::from(\\\"hello,world\\\") let s = \\\"Hello, world!\\\"; let s: &str = \\\"Hello, world!\\\"; \"]},\"268\":{\"h\":\"切片\",\"t\":[\"在Rust中，切片类型&str是一个对字符串数据的引用，它包含了指向字符串数据的指针和长度信息。当调用.as_str()方法将String转换为&str时，实际上是创建了一个指向原有字符串数据的切片。\",\"切片操作并不会创建新的字符串对象。它只是创建了一个引用，让我们可以对原始字符串进行部分访问。\"]},\"269\":{\"h\":\"string与&str的转换\",\"t\":[\"&str -> string\",\"String::from(\\\"hello,world\\\") \\\"hello,world\\\".to_string() \",\"fn main() { let s = String::from(\\\"hello,world!\\\"); say_hello(&s); say_hello(&s[..]); say_hello(s.as_str()); } fn say_hello(s: &str) { println!(\\\"{}\\\",s); } \"]},\"270\":{\"h\":\"存储\",\"t\":[\"let original_string = String::from(\\\"Hello, world!\\\"); let str_reference: &str = original_string.as_str(); \",\"如何理解original_string和str_reference存放的内容都是指向堆上字符串的地址吗？\",\"original_string和str_reference都存放的是指向堆上字符串数据的地址。不过需要注意的是，original_string拥有该字符串数据的所有权， 而str_reference只是一个引用，它不拥有字符串数据的所有权。\"]},\"271\":{\"h\":\"结构体\",\"t\":[\"把结构体中具有所有权的字段转移出去后，将无法再访问该字段，但是可以正常访问其它的字段。\",\"定义\",\"struct User { active: bool, username: String, email: String, sign_in_count: u64, } \",\"一个结构体由几部分组成：\",\"通过关键字 struct 定义\",\"一个清晰明确的结构体 名称\",\"几个有名字的结构体 字段\",\"创建\",\"初始化实例时，每个字段都需要进行初始化\",\"初始化时的字段顺序不需要和结构体定义时的顺序一致\",\" let user1 = User { email: String::from(\\\"someone@example.com\\\"), username: String::from(\\\"someusername123\\\"), active: true, sign_in_count: 1, }; \",\"简写\",\"//若变量同名可以省略 fn build_user(email: String, username: String) -> User { User { email, username, active: true, sign_in_count: 1, } } \",\"更新\",\".. 语法表明凡是我们没有显式声明的字段，全部从 user1 中自动获取。需要注意的是 ..user1 必须在结构体的尾部使用。\",\" let user2 = User { active: user1.active, username: user1.username, email: String::from(\\\"another@example.com\\\"), sign_in_count: user1.sign_in_count, }; let user2 = User { email: String::from(\\\"another@example.com\\\"), ..user1 }; \"]},\"272\":{\"h\":\"单元结构体\",\"t\":[\"struct AlwaysEqual; let subject = AlwaysEqual; // 我们不关心 AlwaysEqual 的字段数据，只关心它的行为，因此将它声明为单元结构体，然后再为它实现某个特征 impl SomeTrait for AlwaysEqual { } \"]},\"273\":{\"h\":\"结构体数据的所有权\",\"t\":[\"在之前的 User 结构体的定义中,我们使用了自身拥有所有权的 String 类型而不是基于引用的 &str 字符串切片类型。这是一个有意而为之的选择：\",\"因为我们想要这个结构体拥有它所有的数据，而不是从其它地方借用数据。\",\"你也可以让 User 结构体从其它对象借用数据，不过这么做，就需要引入生命周期(lifetimes)这个新概念\"]},\"274\":{\"h\":\"打印\",\"t\":[\"#[derive(Debug)] struct Rectangle { width: u32, height: u32, } fn main() { let rect1 = Rectangle { width: 30, height: 50, }; println!(\\\"rect1 is {:?}\\\", rect1); } \"]},\"275\":{\"h\":\"枚举\",\"t\":[\"枚举类型是一个类型，它会包含所有可能的枚举成员, 而枚举值是该类型中的具体某个成员的实例。\",\"fn main() { let heart = PokerSuit::Hearts; let diamond = PokerSuit::Diamonds; print_suit(heart); print_suit(diamond); } fn print_suit(card: PokerSuit) { println!(\\\"{:?}\\\",card); } enum PokerCard { Clubs(u8), Spades(u8), Diamonds(char), Hearts(char), } fn main() { let c1 = PokerCard::Spades(5); let c2 = PokerCard::Diamonds('A'); } \",\"任何类型的数据都可以放入枚举成员中\",\"enum Message { Quit, Move { x: i32, y: i32 }, Write(String), ChangeColor(i32, i32, i32), } fn main() { let m1 = Message::Quit; let m2 = Message::Move{x:1,y:1}; let m3 = Message::ChangeColor(255,255,0); } \"]},\"276\":{\"h\":\"Option 枚举用于处理空值\"},\"277\":{\"h\":\"数组\",\"t\":[\"array 固定长度数组\",\"vector 动态数组\",\"声明\",\"fn main() { let a = [1, 2, 3, 4, 5]; } let a: [i32; 5] = [1, 2, 3, 4, 5]; \",\"非基础类型\",\"let array: [String; 8] = std::array::from_fn(|_i| String::from(\\\"rust is good!\\\")); println!(\\\"{:#?}\\\", array); \",\"数组切片\",\"let a: [i32; 5] = [1, 2, 3, 4, 5]; let slice: &[i32] = &a[1..3]; assert_eq!(slice, &[2, 3]); \",\"使用\",\"fn main() { // 编译器自动推导出one的类型 let one = [1, 2, 3]; // 显式类型标注 let two: [u8; 3] = [1, 2, 3]; let blank1 = [0; 3]; let blank2: [u8; 3] = [0; 3]; // arrays是一个二维数组，其中每一个元素都是一个数组，元素类型是[u8; 3] let arrays: [[u8; 3]; 4] = [one, two, blank1, blank2]; // 借用arrays的元素用作循环中 for a in &arrays { print!(\\\"{:?}: \\\", a); // 将a变成一个迭代器，用于循环 // 你也可以直接用for n in a {}来进行循环 for n in a.iter() { print!(\\\"\\\\t{} + 10 = {}\\\", n, n+10); } let mut sum = 0; // 0..a.len,是一个 Rust 的语法糖，其实就等于一个数组，元素是从0,1,2一直增加到到a.len-1 for i in 0..a.len() { sum += a[i]; } println!(\\\"\\\\t({:?} = {})\\\", a, sum); } } \"]},\"278\":{\"h\":\"循环\"},\"279\":{\"h\":\"for\",\"t\":[\"使用方法 等价使用方式 所有权 for item in collection for item in IntoIterator::into_iter(collection) 转移所有权 for item in &collection for item in collection.iter() 不可变借用 for item in &mut collection for item in collection.iter_mut() 可变借用\",\"获取元素索引\",\"fn main() { let a = [4, 3, 2, 1]; // `.iter()` 方法把 `a` 数组变成一个迭代器 for (i, v) in a.iter().enumerate() { println!(\\\"第{}个元素是{}\\\", i + 1, v); } } \"]},\"280\":{\"h\":\"loop无限循环\",\"t\":[\"break 可以单独使用，也可以带一个返回值，有些类似 return\",\"loop 是一个表达式，因此可以返回一个值\",\"fn main() { let mut counter = 0; let result = loop { counter += 1; if counter == 10 { break counter * 2; } }; println!(\\\"The result is {}\\\", result); } \"]},\"281\":{\"h\":\"模式匹配\"},\"282\":{\"h\":\"match\",\"t\":[\"match 的匹配必须要穷举出所有可能，因此这里用 _ 来代表未列出的所有可能性\",\"match 的每一个分支都必须是一个表达式，且所有分支的表达式最终返回值的类型必须相同\",\"X | Y，类似逻辑运算符 或，代表该分支可以匹配 X 也可以匹配 Y，只要满足一个即可\",\"enum Direction { East, West, North, South, } fn main() { let dire = Direction::South; match dire { Direction::East => println!(\\\"East\\\"), Direction::North | Direction::South => { println!(\\\"South or North\\\"); }, _ => println!(\\\"West\\\"), }; } \",\"使用 match 表达式赋值\",\"enum IpAddr { Ipv4, Ipv6 } fn main() { let ip1 = IpAddr::Ipv6; let ip_str = match ip1 { IpAddr::Ipv4 => \\\"127.0.0.1\\\", _ => \\\"::1\\\", }; println!(\\\"{}\\\", ip_str); } \",\"模式绑定\",\"从模式中取出绑定的值\",\"enum Action { Say(String), MoveTo(i32, i32), ChangeColorRGB(u16, u16, u16), } fn main() { let actions = [ Action::Say(\\\"Hello Rust\\\".to_string()), Action::MoveTo(1,2), Action::ChangeColorRGB(255,255,0), ]; for action in actions { match action { Action::Say(s) => { println!(\\\"{}\\\", s); }, Action::MoveTo(x, y) => { println!(\\\"point from (0, 0) move to ({}, {})\\\", x, y); }, Action::ChangeColorRGB(r, g, _) => { println!(\\\"change color into '(r:{}, g:{}, b:0)', 'b' has been ignored\\\", r, g, ); } } } } \",\"穷尽匹配\",\"enum Direction { East, West, North, South, } fn main() { let dire = Direction::South; match dire { Direction::East => println!(\\\"East\\\"), Direction::North | Direction::South => { println!(\\\"South or North\\\"); }, }; } \",\"没有处理 Direction::West 的情况，因此会报错\",\"通配符_\",\"当我们不想在匹配时列出所有值的时候，可以使用 Rust 提供的一个特殊模式，例如，u8 可以拥有 0 到 255 的有效的值， 但是我们只关心 1、3、5 和 7 这几个值，不想列出其它的 0、2、4、6、8、9 一直到 255 的值。 那么, 我们不必一个一个列出所有值, 因为可以使用特殊的模式 _ 替代\",\"let some_u8_value = 0u8; match some_u8_value { 1 => println!(\\\"one\\\"), 3 => println!(\\\"three\\\"), 5 => println!(\\\"five\\\"), 7 => println!(\\\"seven\\\"), _ => (), } \"]},\"283\":{\"h\":\"if let 匹配\",\"t\":[\"当你只要匹配一个条件，且忽略其他条件时就用 if let ，否则都用 match。\",\"if let Some(3) = v { println!(\\\"three\\\"); } \"]},\"284\":{\"h\":\"matches!宏\",\"t\":[\"let foo = 'f'; assert!(matches!(foo, 'A'..='Z' | 'a'..='z')); let bar = Some(4); assert!(matches!(bar, Some(x) if x > 2)); \"]},\"285\":{\"h\":\"变量遮蔽\",\"t\":[\"无论是 match 还是 if let，这里都是一个新的代码块，而且这里的绑定相当于新变量，如果你使用同名变量，会发生变量遮蔽:\",\"fn main() { let age = Some(30); println!(\\\"在匹配前，age是{:?}\\\", age); match age { Some(x) => println!(\\\"匹配出来的age是{}\\\", x), _ => () } println!(\\\"在匹配后，age是{:?}\\\", age); } \"]},\"286\":{\"h\":\"option结构匹配\",\"t\":[\"Option 枚举，它用来解决 Rust 中变量是否有值的问题\",\"一个变量要么有值：Some(T), 要么为空：None。\",\"因为 Option，Some，None 都包含在 prelude 中，因此你可以直接通过名称来使用它们，而无需以 Option::Some 这种形式去使用， 总之，千万不要因为调用路径变短了，就忘记 Some 和 None 也是 Option 底下的枚举成员！\",\"enum Option<T> { Some(T), None, } \"]},\"287\":{\"h\":\"模式适用场景\",\"t\":[\"while let\",\"pop 方法取出动态数组的最后一个元素并返回 Some(value)\",\"// Vec是动态数组 let mut stack = Vec::new(); // 向数组尾部插入元素 stack.push(1); stack.push(2); stack.push(3); // stack.pop从数组尾部弹出元素 while let Some(top) = stack.pop() { println!(\\\"{}\\\", top); } \"]},\"288\":{\"h\":\"方法Method\",\"t\":[\"#[derive(Debug)] struct Rectangle { width: u32, height: u32, } impl Rectangle { fn area(&self) -> u32 { self.width * self.height } } fn main() { let rect1 = Rectangle { width: 30, height: 50 }; println!( \\\"The area of the rectangle is {} square pixels.\\\", rect1.area() ); } \"]},\"289\":{\"h\":\"self、&self 和 &mut self\",\"t\":[\"&self 其实是 self: &Self 的简写（注意大小写）\",\"self 表示 Rectangle 的所有权转移到该方法中，这种形式用的较少\",\"&self 表示该方法对 Rectangle 的不可变借用\",\"&mut self 表示可变借用\"]},\"290\":{\"h\":\"方法名跟结构体字段名相同\",\"t\":[\"方法跟字段同名，往往适用于实现 getter 访问器\",\"pub struct Rectangle { width: u32, height: u32, } impl Rectangle { pub fn new(width: u32, height: u32) -> Self { Rectangle { width, height } } pub fn width(&self) -> u32 { return self.width; } } fn main() { let rect1 = Rectangle::new(30, 50); println!(\\\"{}\\\", rect1.width()); } \",\"运算符-> 到哪去了？\",\"在 C/C++ 语言中，有两个不同的运算符来调用方法：. 直接在对象上调用方法，而 -> 在一个对象的指针上调用方法，这时需要先解引用指针。\",\"换句话说，如果 object 是一个指针，那么 object->something() 和 (*object).something() 是一样的。\",\"Rust 有一个叫 自动引用和解引用的功能。方法调用是 Rust 中少数几个拥有这种行为的地方。\",\"Rust 会自动为 object 添加 &、&mut 或 * 以便使 object 与方法签名匹配。\"]},\"291\":{\"h\":\"关联函数\",\"t\":[\"定义在 impl 中且没有 self 的函数被称之为关联函数： 因为它没有 self，不能用 f.read() 的形式调用，\",\"因此它是一个函数而不是方法，它又在 impl 中，与结构体紧密关联，因此称为关联函数。\",\"impl Rectangle { fn new(w: u32, h: u32) -> Rectangle { Rectangle { width: w, height: h } } } \",\"Rust 中有一个约定俗成的规则，使用 new 来作为构造器的名称，出于设计上的考虑，Rust 特地没有用 new 作为关键字。\",\"因为是函数，所以不能用 . 的方式来调用，我们需要用 :: 来调用，例如 let sq = Rectangle::new(3, 3);。\",\"这个方法位于结构体的命名空间中：:: 语法用于关联函数和模块创建的命名空间。\"]},\"292\":{\"h\":\"为枚举实现方法\",\"t\":[\"#![allow(unused)] enum Message { Quit, Move { x: i32, y: i32 }, Write(String), ChangeColor(i32, i32, i32), } impl Message { fn call(&self) { // 在这里定义方法体 } } fn main() { let m = Message::Write(String::from(\\\"hello\\\")); m.call(); } \"]},\"293\":{\"h\":\"泛型和特征\"},\"294\":{\"h\":\"枚举中使用泛型\",\"t\":[\"enum Option<T> { Some(T), None, } enum Result<T, E> { Ok(T), Err(E), } \"]},\"295\":{\"h\":\"方法中使用泛型\",\"t\":[\"struct Point<T> { x: T, y: T, } impl<T> Point<T> { fn x(&self) -> &T { &self.x } } fn main() { let p = Point { x: 5, y: 10 }; println!(\\\"p.x = {}\\\", p.x()); } \",\"为具体的泛型类型实现方法\",\"//这段代码意味着 Point<f32> 类型会有一个方法 distance_from_origin，而其他 T 不是 f32 类型的 Point<T> 实例则没有定义此方法。 //这个方法计算点实例与坐标(0.0, 0.0) 之间的距离，并使用了只能用于浮点型的数学运算符。 impl Point<f32> { fn distance_from_origin(&self) -> f32 { (self.x.powi(2) + self.y.powi(2)).sqrt() } } \"]},\"296\":{\"h\":\"const 泛型\",\"t\":[\"[i32; 2] 和 [i32; 3] 是不同的数组类型\",\"fn display_array(arr: &[i32]) { println!(\\\"{:?}\\\", arr); } fn main() { let arr: [i32; 3] = [1, 2, 3]; display_array(&arr); let arr: [i32;2] = [1,2]; display_array(&arr); } fn display_array<T: std::fmt::Debug, const N: usize>(arr: [T; N]) { println!(\\\"{:?}\\\", arr); } fn main() { let arr: [i32; 3] = [1, 2, 3]; display_array(arr); let arr: [i32; 2] = [1, 2]; display_array(arr); } \"]},\"297\":{\"h\":\"特征\",\"t\":[\"和接口类似\",\"默认实现\",\"你可以在特征中定义具有默认实现的方法，这样其它类型无需再实现该方法，或者也可以选择重载该方法：\",\"pub trait Summary { fn summarize(&self) -> String { String::from(\\\"(Read more...)\\\") } } impl Summary for Post {} impl Summary for Weibo { fn summarize(&self) -> String { format!(\\\"{}发表了微博{}\\\", self.username, self.content) } } \",\"使用特征作为函数参数\",\"pub fn notify(item: &impl Summary) { println!(\\\"Breaking news! {}\\\", item.summarize()); } \",\"特征约束\",\"pub fn notify<T: Summary>(item: &T) { println!(\\\"Breaking news! {}\\\", item.summarize()); } \",\"多重约束\",\"pub fn notify(item: &(impl Summary + Display)) {} pub fn notify<T: Summary + Display>(item: &T) {} \",\"where约束\",\"fn some_function<T, U>(t: &T, u: &U) -> i32 where T: Display + Clone, U: Clone + Debug {} \",\"函数返回中的 impl Trait\",\"fn returns_summarizable() -> impl Summary { Weibo { username: String::from(\\\"sunface\\\"), content: String::from( \\\"m1 max太厉害了，电脑再也不会卡\\\", ) } } \",\"通过 derive 派生特征 调用方法需要引入特征\",\"use std::convert::TryInto; fn main() { let a: i32 = 10; let b: u16 = 100; let b_ = b.try_into() .unwrap(); if a < b_ { println!(\\\"Ten is less than one hundred.\\\"); } } \"]},\"298\":{\"h\":\"特征对象\",\"t\":[\"//draw1 函数的参数是 Box<dyn Draw> 形式的特征对象，该特征对象是通过 Box::new(x) 的方式创建的 //draw2 函数的参数是 &dyn Draw 形式的特征对象，该特征对象是通过 &x 的方式创建的 //dyn 关键字只用在特征对象的类型声明上，在创建时无需使用 dyn trait Draw { fn draw(&self) -> String; } impl Draw for u8 { fn draw(&self) -> String { format!(\\\"u8: {}\\\", *self) } } impl Draw for f64 { fn draw(&self) -> String { format!(\\\"f64: {}\\\", *self) } } // 若 T 实现了 Draw 特征， 则调用该函数时传入的 Box<T> 可以被隐式转换成函数参数签名中的 Box<dyn Draw> fn draw1(x: Box<dyn Draw>) { // 由于实现了 Deref 特征，Box 智能指针会自动解引用为它所包裹的值，然后调用该值对应的类型上定义的 `draw` 方法 x.draw(); } fn draw2(x: &dyn Draw) { x.draw(); } fn main() { let x = 1.1f64; // do_something(&x); let y = 8u8; // x 和 y 的类型 T 都实现了 `Draw` 特征，因为 Box<T> 可以在函数调用时隐式地被转换为特征对象 Box<dyn Draw> // 基于 x 的值创建一个 Box<f64> 类型的智能指针，指针指向的数据被放置在了堆上 draw1(Box::new(x)); // 基于 y 的值创建一个 Box<u8> 类型的智能指针 draw1(Box::new(y)); draw2(&x); draw2(&y); } \",\"特征对象的动态分发 Self 与 self\",\"在 Rust 中，有两个self，一个指代当前的实例对象，一个指代实现特征或者方法类型：\",\"trait Draw { fn draw(&self) -> Self; } #[derive(Clone)] struct Button; impl Draw for Button { fn draw(&self) -> Self { return self.clone() } } fn main() { let button = Button; let newb = button.draw(); } \",\"上述代码中，self指代的就是当前的实例对象，也就是 button.draw() 中的 button 实例，Self 则指代的是 Button 类型。\",\"特征对象的限制\",\"不是所有特征都能拥有特征对象，只有对象安全的特征才行。当一个特征的所有方法都有如下属性时，它的对象才是安全的：\",\"方法的返回类型不能是 Self\",\"方法没有任何泛型参数\"]},\"299\":{\"h\":\"深入特征\"},\"300\":{\"h\":\"集合\"},\"301\":{\"h\":\"动态数组 vector\"},\"302\":{\"h\":\"使用\",\"t\":[\"let v: Vec<i32> = Vec::new(); let mut v = Vec::new(); v.push(1); //创建固定长度的数组 Vec::with_capacity(capacity) //vec![]创建 let v = vec![1, 2, 3]; \"]},\"303\":{\"h\":\"Vector 与其元素共存亡\",\"t\":[\"跟结构体一样，Vector 类型在超出作用域范围后，会被自动删除：\",\"{ let v = vec![1, 2, 3]; // ... } // <- v超出作用域并在此处被删除 \"]},\"304\":{\"h\":\"从 Vector 中读取元素\",\"t\":[\"读取指定位置的元素有两种方式可选：\",\"通过下标索引访问。\",\"使用 get 方法。\",\"let v = vec![1, 2, 3, 4, 5]; let third: &i32 = &v[2]; println!(\\\"第三个元素是 {}\\\", third); match v.get(2) { Some(third) => println!(\\\"第三个元素是 {third}\\\"), None => println!(\\\"去你的第三个元素，根本没有！\\\"), } \"]},\"305\":{\"h\":\"下标索引与 .get 的区别\",\"t\":[\"let v = vec![1, 2, 3, 4, 5]; let does_not_exist = &v[100]; let does_not_exist = v.get(100); \",\"运行以上代码，&v[100] 的访问方式会导致程序无情报错退出，因为发生了数组越界访问。 但是 v.get 就不会，它在内部做了处理，有值的时候返回 Some(T)，无值的时候返回 None，因此 v.get 的使用方式非常安全。\"]},\"306\":{\"h\":\"同时借用多个数组元素\",\"t\":[\"let v = vec![1, 2, 3]; for i in &v { println!(\\\"{i}\\\"); } let mut v = vec![1, 2, 3]; for i in &mut v { *i += 10 } \"]},\"307\":{\"h\":\"排序\",\"t\":[\"稳定排序\",\"不稳定排序，即相等元素的顺序是否改变\"]},\"308\":{\"h\":\"map\",\"t\":[\"可以使用 new 方法来创建 HashMap，然后通过 insert 方法插入键值对。\",\"HashMap 并没有包含在 Rust 的 prelude 中（Rust 为了简化用户使用，提前将最常用的类型自动引入到作用域中）。\"]},\"309\":{\"h\":\"数组到map的转换\",\"t\":[\"fn main() { use std::collections::HashMap; let teams_list = vec![ (\\\"中国队\\\".to_string(), 100), (\\\"美国队\\\".to_string(), 10), (\\\"日本队\\\".to_string(), 50), ]; let teams_map: HashMap<_,_> = teams_list.into_iter().collect(); println!(\\\"{:?}\\\",teams_map) } \"]},\"310\":{\"h\":\"所有权转移\",\"t\":[\"若类型实现 Copy 特征，该类型会被复制进 HashMap，因此无所谓所有权\",\"若没实现 Copy 特征，所有权将被转移给 HashMap 中\"]},\"311\":{\"h\":\"get 方法可以获取元素\",\"t\":[\"use std::collections::HashMap; let mut scores = HashMap::new(); scores.insert(String::from(\\\"Blue\\\"), 10); scores.insert(String::from(\\\"Yellow\\\"), 50); let team_name = String::from(\\\"Blue\\\"); let score: Option<&i32> = scores.get(&team_name); // get 方法返回一个 Option<&i32> 类型：当查询不到时，会返回一个 None，查询到时返回 Some(&i32) // &i32 是对 HashMap 中值的借用，如果不使用借用，可能会发生所有权的转移 \"]},\"312\":{\"h\":\"更新键值\",\"t\":[\"fn main() { use std::collections::HashMap; let mut scores = HashMap::new(); scores.insert(\\\"Blue\\\", 10); // 覆盖已有的值 let old = scores.insert(\\\"Blue\\\", 20); assert_eq!(old, Some(10)); // 查询新插入的值 let new = scores.get(\\\"Blue\\\"); assert_eq!(new, Some(&20)); // 查询Yellow对应的值，若不存在则插入新值 let v = scores.entry(\\\"Yellow\\\").or_insert(5); assert_eq!(*v, 5); // 不存在，插入5 // 查询Yellow对应的值，若不存在则插入新值 let v = scores.entry(\\\"Yellow\\\").or_insert(50); assert_eq!(*v, 5); // 已经存在，因此50没有插入 } \",\"use std::collections::HashMap; let text = \\\"hello world wonderful world\\\"; let mut map = HashMap::new(); // 根据空格来切分字符串(英文单词都是通过空格切分) for word in text.split_whitespace() { let count = map.entry(word).or_insert(0); *count += 1; } println!(\\\"{:?}\\\", map); \",\"or_insert 返回了 &mut v 引用，因此可以通过该可变引用直接修改 map 中对应的值\",\"使用 count 引用时，需要先进行解引用 *count，否则会出现类型不匹配\"]},\"313\":{\"h\":\"生命周期\"},\"314\":{\"h\":\"函数式编程\"},\"315\":{\"h\":\"闭包\",\"t\":[\"闭包是一种匿名函数，它可以赋值给变量也可以作为参数传递给其它函数，不同于函数的是，它允许捕获调用者作用域中的值\",\"fn main() { let x = 1; let sum = |y| x + y; assert_eq!(3, sum(2)); } \",\"形式\",\"闭包中最后一行表达式返回的值，就是闭包执行后的返回值\",\"闭包赋值给变量，并不是把闭包执行后的结果赋值\",\"|param1, param2,...| { 语句1; 语句2; 返回表达式 } |param1| 返回表达式 \",\"类型推导\",\"当编译器推导出一种类型后，它就会一直使用该类型\"]},\"316\":{\"h\":\"结构体中的闭包\",\"t\":[\"struct Cacher<T> where T: Fn(u32) -> u32, { query: T, value: Option<u32>, } \"]},\"317\":{\"h\":\"捕获作用域中的值\",\"t\":[\"fn main() { let x = 4; let equal_to_x = |z| z == x; let y = 4; assert!(equal_to_x(y)); } \"]},\"318\":{\"h\":\"三种 Fn 特征\",\"t\":[\"闭包捕获变量有三种途径，恰好对应函数参数的三种传入方式：转移所有权、可变借用、不可变借用\",\"FnOnce，该类型的闭包会拿走被捕获变量的所有权。\",\"fn fn_once<F>(func: F) where F: FnOnce(usize) -> bool, { println!(\\\"{}\\\", func(3)); println!(\\\"{}\\\", func(4)); } fn main() { let x = vec![1, 2, 3]; fn_once(|z|{z == x.len()}) } # 因为 F 没有实现 Copy 特征，所以会报错，那么我们添加一个约束，试试实现了 Copy 的闭包： fn fn_once<F>(func: F) where F: FnOnce(usize) -> bool + Copy,// 改动在这里 { println!(\\\"{}\\\", func(3)); println!(\\\"{}\\\", func(4)); } fn main() { let x = vec![1, 2, 3]; fn_once(|z|{z == x.len()}) } \",\"FnMut，它以可变借用的方式捕获了环境中的值，因此可以修改该值\",\"fn main() { let mut s = String::new(); let update_string = |str| s.push_str(str); update_string(\\\"hello\\\"); println!(\\\"{:?}\\\",s); } # 想要在闭包内部捕获可变借用，需要把该闭包声明为可变类型，也就是 update_string 要修改为 mut update_string： fn main() { let mut s = String::new(); let mut update_string = |str| s.push_str(str); update_string(\\\"hello\\\"); println!(\\\"{:?}\\\",s); } \",\"Fn 特征，它以不可变借用的方式捕获环境中的值\",\" \"]},\"319\":{\"h\":\"三种 Fn 的关系\",\"t\":[\"实际上，一个闭包并不仅仅实现某一种 Fn 特征，规则如下\",\"所有的闭包都自动实现了 FnOnce 特征，因此任何一个闭包都至少可以被调用一次\",\"没有移出所捕获变量的所有权的闭包自动实现了 FnMut 特征\",\"不需要对捕获变量进行改变的闭包自动实现了 Fn 特征\",\"fn main() { let s = String::new(); let update_string = || println!(\\\"{}\\\",s); exec(update_string); exec1(update_string); exec2(update_string); } fn exec<F: FnOnce()>(f: F) { f() } fn exec1<F: FnMut()>(mut f: F) { f() } fn exec2<F: Fn()>(f: F) { f() } \"]},\"320\":{\"h\":\"迭代器\",\"t\":[\"数组不是迭代器，数组实现了 IntoIterator 特征，Rust 通过 for 语法糖，自动把实现了该特征的数组类型转换为迭代器\",\"迭代器实现了Iterator 特征\"]},\"321\":{\"h\":\"ServerHttpSecurity\",\"t\":[\"与httpSecurity相似，适用于webflux\"]},\"322\":{\"h\":\"过滤器顺序\",\"t\":[\"AuthenticationWebFilter\",\"由资源服务器配置\",\"SecurityContextServerWebExchangeWebFilter\",\"ExceptionTransactionWebFilter\",\"AuthorizationWebFilter\"]},\"323\":{\"h\":\"spring security\"},\"324\":{\"h\":\"疑问\"},\"325\":{\"h\":\"登录成功后，如何重定向到缓存的请求\",\"t\":[\"经验证，一定是响应到前端，让浏览器再次发送授权请求，auth再进行处理\",\"重定向并不是，从后端直接发起，而是后端返回响应数据，前端取到重定向url,发起重定向\"]},\"326\":{\"h\":\"version feature\",\"t\":[\"security 5.7版本\",\"Use a org.springframework.security.web.SecurityFilterChain Bean to configure HttpSecurity\",\"or a WebSecurityCustomizer Bean to configure WebSecurity\",\" @Bean SecurityFilterChain webSecurityFilterChain(HttpSecurity http) throws Exception { return http.build(); } @Bean public WebSecurityCustomizer ignoringCustomizer() { return (web) -> web.ignoring().antMatchers(\\\"/ignore1\\\", \\\"/ignore2\\\"); } \"]},\"327\":{\"h\":\"persistence\",\"t\":[\"可使用redis,也可使用session\",\"securityContextRepository\",\"HttpSessionSecurityContextRepository\",\"RequestCache\",\"HttpSessionRequestCache\"]},\"328\":{\"h\":\"configuration\"},\"329\":{\"h\":\"WebSecurityConfiguration\",\"t\":[\"配置WebSecurity\",\"@Configuration(proxyBeanMethods = false) public class WebSecurityConfiguration implements ImportAware, BeanClassLoaderAware { @Bean(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME) public Filter springSecurityFilterChain() throws Exception { boolean hasConfigurers = this.webSecurityConfigurers != null && !this.webSecurityConfigurers.isEmpty(); boolean hasFilterChain = !this.securityFilterChains.isEmpty(); // 适配器和安全过滤器链配置方式不能同时使用 Assert.state(!(hasConfigurers && hasFilterChain), \\\"Found WebSecurityConfigurerAdapter as well as SecurityFilterChain. Please select just one.\\\"); if (!hasConfigurers && !hasFilterChain) { WebSecurityConfigurerAdapter adapter = this.objectObjectPostProcessor .postProcess(new WebSecurityConfigurerAdapter() { }); this.webSecurity.apply(adapter); } for (SecurityFilterChain securityFilterChain : this.securityFilterChains) { this.webSecurity.addSecurityFilterChainBuilder(() -> securityFilterChain); for (Filter filter : securityFilterChain.getFilters()) { if (filter instanceof FilterSecurityInterceptor) { this.webSecurity.securityInterceptor((FilterSecurityInterceptor) filter); break; } } } for (WebSecurityCustomizer customizer : this.webSecurityCustomizers) { customizer.customize(this.webSecurity); } return this.webSecurity.build(); } @Autowired(required = false) //set注入 public void setFilterChainProxySecurityConfigurer(ObjectPostProcessor<Object> objectPostProcessor, ConfigurableListableBeanFactory beanFactory) throws Exception { //objectPostProcessor 对对象进行初始化initializeBean this.webSecurity = objectPostProcessor.postProcess(new WebSecurity(objectPostProcessor)); if (this.debugEnabled != null) { this.webSecurity.debug(this.debugEnabled); } //获取webSecurityConfigurer列表 即webSecurityConfigurerAdapter List<SecurityConfigurer<Filter, WebSecurity>> webSecurityConfigurers = new AutowiredWebSecurityConfigurersIgnoreParents( beanFactory).getWebSecurityConfigurers(); webSecurityConfigurers.sort(AnnotationAwareOrderComparator.INSTANCE); Integer previousOrder = null; Object previousConfig = null; for (SecurityConfigurer<Filter, WebSecurity> config : webSecurityConfigurers) { Integer order = AnnotationAwareOrderComparator.lookupOrder(config); if (previousOrder != null && previousOrder.equals(order)) { throw new IllegalStateException(\\\"@Order on WebSecurityConfigurers must be unique. Order of \\\" + order + \\\" was already used on \\\" + previousConfig + \\\", so it cannot be used on \\\" + config + \\\" too.\\\"); } previousOrder = order; previousConfig = config; } for (SecurityConfigurer<Filter, WebSecurity> webSecurityConfigurer : webSecurityConfigurers) { //加入到webSecurity中留待build时做初始化 this.webSecurity.apply(webSecurityConfigurer); } this.webSecurityConfigurers = webSecurityConfigurers; } } \"]},\"330\":{\"h\":\"HttpSecurityConfiguration\",\"t\":[\"配置HttpSecurity,在构造httpSecurity时，会初始化子认证管理器构造器(初始化父认证管理器(包含DaoAuthenticationProvider))\",\"@Configuration(proxyBeanMethods = false) class HttpSecurityConfiguration { @Bean(HTTPSECURITY_BEAN_NAME) @Scope(\\\"prototype\\\") HttpSecurity httpSecurity() throws Exception { WebSecurityConfigurerAdapter.LazyPasswordEncoder passwordEncoder = new WebSecurityConfigurerAdapter.LazyPasswordEncoder( this.context); //httpSecurity的认证管理器构造器 AuthenticationManagerBuilder authenticationBuilder = new WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder( this.objectPostProcessor, passwordEncoder); //authenticationManager()方法，获取初始化父(全局)认证管理器,被多个httpSecurity中的子认证管理构造器共享。 authenticationBuilder.parentAuthenticationManager(authenticationManager()); HttpSecurity http = new HttpSecurity(this.objectPostProcessor, authenticationBuilder, createSharedObjects()); // @formatter:off http .csrf(withDefaults()) .addFilter(new WebAsyncManagerIntegrationFilter()) .exceptionHandling(withDefaults()) .headers(withDefaults()) .sessionManagement(withDefaults()) .securityContext(withDefaults()) .requestCache(withDefaults()) .anonymous(withDefaults()) .servletApi(withDefaults()) .apply(new DefaultLoginPageConfigurer<>()); http.logout(withDefaults()); // @formatter:on applyDefaultConfigurers(http); return http; } } \"]},\"331\":{\"h\":\"AuthenticationConfiguration\",\"t\":[\"配置authentication\",\"使用GlobalAuthenticationConfigurerAdapter配置器，配置全局AuthenticationManagerBuilder，进而生成全局认证管理器，被多个httpSecurity中的子认证管理构造器共享。\",\"public class AuthenticationConfiguration { public AuthenticationManager getAuthenticationManager() throws Exception { if (this.authenticationManagerInitialized) { return this.authenticationManager; } AuthenticationManagerBuilder authBuilder = this.applicationContext.getBean(AuthenticationManagerBuilder.class); if (this.buildingAuthenticationManager.getAndSet(true)) { return new AuthenticationManagerDelegator(authBuilder); } for (GlobalAuthenticationConfigurerAdapter config : this.globalAuthConfigurers) { authBuilder.apply(config); } this.authenticationManager = authBuilder.build(); if (this.authenticationManager == null) { this.authenticationManager = getAuthenticationManagerBean(); } this.authenticationManagerInitialized = true; return this.authenticationManager; } } \"]},\"332\":{\"h\":\"webSecurity\",\"t\":[\"创建FilterChainProxy过滤器，包含安全过滤器链\"]},\"333\":{\"h\":\"httpSecurity\",\"t\":[\"它的scope是protoType,每次创建新的httpSecurity，使用sharedObject初始化 performBuild方法构造安全过滤器链\",\"创建默认authenticationManager(有父认证管理器)、passwordEncoder\",\"传入对象后置处理器ObjectPostProcessor(对对象处理执行aware、afterProperties方法)\",\"进行默认安全配置，securityContext和requestCache等\",\"添加过滤器，在配置时添加配置器，内部调用apply添加配置器（同时设置对象后置处理器）\",\"AbstractConfiguredSecurityBuilder 继承 AbstractSecurityBuilder\",\"httpSecurity webSecurity authenticationManagerBuilder实现上述构造器类，是security三大建造器\",\"包含sharedObjects(建造器上下文) configurers配置器 configurersAddedInInitializing(初始化时增加的构造器)\",\"创建httpSecurity时会传入authenticationManagerBuilder\",\"authenticationManagerBuilder\",\"providerManager\",\"performBuild方法构造认证管理器authenticationManager及内部的provider\",\"用于过滤器中对主体进行认证\",\"在4.1时认证管理器使用委托器AuthenticationManagerDelegator防止无限递归\"]},\"334\":{\"h\":\"SecurityFilterChain\",\"t\":[\"创建安全过滤器链\",\"httpSecurity.build方法的doBuild方法 \",\"调用init方法初始化，配置器初始化\",\"调用configure方法进行配置,生成对应过滤器(认证时，请求路径需和过滤器相匹配)\",\"performBuild方法进行构建\",\"httpSecurity的init方法 \",\"获取httpSecurity所有配置器Configurers\",\"调用配置器的init方法\",\"public abstract class AbstractConfiguredSecurityBuilder { protected final O doBuild() throws Exception { synchronized (this.configurers) { this.buildState = BuildState.INITIALIZING; beforeInit(); init(); this.buildState = BuildState.CONFIGURING; beforeConfigure(); configure(); this.buildState = BuildState.BUILDING; O result = performBuild(); this.buildState = BuildState.BUILT; return result; } } private void init() throws Exception { Collection<SecurityConfigurer<O, B>> configurers = getConfigurers(); for (SecurityConfigurer<O, B> configurer : configurers) { configurer.init((B) this); } for (SecurityConfigurer<O, B> configurer : this.configurersAddedInInitializing) { configurer.init((B) this); } } @SuppressWarnings(\\\"unchecked\\\") private void configure() throws Exception { Collection<SecurityConfigurer<O, B>> configurers = getConfigurers(); for (SecurityConfigurer<O, B> configurer : configurers) { configurer.configure((B) this); } } } \"]},\"335\":{\"h\":\"configurer\"},\"336\":{\"h\":\"ExpressionUrlAuthorizationConfigurer继承AbstractInterceptUrlConfigurer\",\"t\":[\"配置FilterSecurityInterceptor的FilterInvocationSecurityMetadataSource\",\"FilterInvocationSecurityMetadataSource包含需校验的路径以及判别逻辑(authenticated、permitAll等)\",\"使用authenticated判别时不包括匿名认证对象AnnoymousAuthentcation\"]},\"337\":{\"h\":\"ExceptionHandleConfigurer\",\"t\":[\"可以设置认证入口点即认证失败时的处理逻辑，默认入口点LoginUrlAuthenticationEntryPoint （重定向到登录页面）\"]},\"338\":{\"h\":\"authorizationServerConfigurer\",\"t\":[\"包含多个授权、获取token相关的配置器(在创建对象时已初始化)\",\"OAuth2ClientAuthenticationConfigurer\",\"OAuth2AuthorizationEndpointConfigurer\",\"OAuth2TokenEndpointConfigurer\",\"init方法\",\"providerSettings是容器管理的单例对象，用于创建授权和获取token相关的过滤器\",\"初始化端点或路径匹配器\",\"对子配置器OAuth2ClientAuthenticationConfigurer等初始化，生成过滤器\"]},\"339\":{\"h\":\"resourceServerConfigurer\",\"t\":[\"负责处理客户端的请求，对token进行校验,token解析失败到认证入口点处理\",\"认证成功，重新设置SecurityContext和其中的authentication,从而跳过后面的校验\",\"JwtAuthenticationProvider对以Bear开头的token解析\"]},\"340\":{\"h\":\"AuthenticationManager\",\"t\":[\"包含多个AuthenticationProvider,根据要要认证的主体选取合适的provider认证\"]},\"341\":{\"h\":\"AuthenticationManagerBuilder\",\"t\":[\"构造上述AuthenticationManager\",\"构造生成的providerManager包含父providerManager，在认证时，父一般不用，在子不成功时启用父\",\"有三个全局初始化配置器配置，在构造全局认证管理器时，初始DaoAuthenticationProvider(在父认证管理器中)\",\"AuthenticationManagerBuilder（DefaultPasswordEncoderAuthenticationManagerBuilder容器管理） 9736 AuthenticationConfiguration（容器管理） 9702 9702 AuthenticationManager 11262 11262 默认DaoAuthenticationProvider buildingAuthenticationManager false true authenticationManagerInitialized fasle true WebSecurityConfigurerAdapter.DefaultPasswordEncoderAuthenticationManagerBuilder 11271 11786 13286 httpsecurity 11285 11803 13500 \"]},\"342\":{\"h\":\"Filter\",\"t\":[\"ExceptionTranslationFilter\",\"FilterSecurityInterceptor\"]},\"343\":{\"h\":\"oauth2(过渡版本)\",\"t\":[\"这里使用了适配器模式Adapter\",\"WebSecurityConfigurerAdapter实现WebSecurityConfigurer对webSecurity进行配置，安全过滤器链等,本身是一个配置器，构造安全过滤器链\",\"AuthorizationServerConfigurerAdapter实现了AuthorizationServerConfigurer接口,配置授权服务器\",\"public interface AuthorizationServerConfigurer { void configure(AuthorizationServerSecurityConfigurer security) throws Exception; void configure(ClientDetailsServiceConfigurer clients) throws Exception; void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception; } \",\"AuthorizationServerEndpointsConfiguration内部配置类,配置授权\",\"AuthorizationServerSecurityConfiguration配置客户端或授权安全\",\"ClientDetailsServiceConfiguration 配置客户端clientDetailService,可以配置使用jdbc方式\",\"tokenEndpoint 获取tokenGranter，用户名密码认证后，获取token\"]},\"344\":{\"h\":\"principal\",\"t\":[\"user\",\"client\",\"registeredClient\",\"authorization/consent\",\"security\",\"oauth2\",\"authorization_server\"]},\"345\":{\"h\":\"oauth2-client\",\"t\":[\"配置客户端信息 负责发起授权获取token及资源，如用户信息\",\"http向授权服务器发起请求\",\"@RegisteredOAuth2AuthorizedClient 用在请求参数中\",\"dispatchServlet在执行handler-method时会对参数进行解析\",\"OAuth2AuthorizedClientArgumentResolver对@RegisteredOAuth2AuthorizedClient注解的请求参数解析\",\"解析后若客户端已授权\",\"public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer, NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) { String clientRegistrationId = this.resolveClientRegistrationId(parameter); if (StringUtils.isEmpty(clientRegistrationId)) { throw new IllegalArgumentException(\\\"Unable to resolve the Client Registration Identifier. \\\" + \\\"It must be provided via @RegisteredOAuth2AuthorizedClient(\\\\\\\"client1\\\\\\\") or \\\" + \\\"@RegisteredOAuth2AuthorizedClient(registrationId = \\\\\\\"client1\\\\\\\").\\\"); } Authentication principal = SecurityContextHolder.getContext().getAuthentication(); if (principal == null) { principal = ANONYMOUS_AUTHENTICATION; } HttpServletRequest servletRequest = webRequest.getNativeRequest(HttpServletRequest.class); HttpServletResponse servletResponse = webRequest.getNativeResponse(HttpServletResponse.class); // @formatter:off OAuth2AuthorizeRequest authorizeRequest = OAuth2AuthorizeRequest .withClientRegistrationId(clientRegistrationId) .principal(principal) .attribute(HttpServletRequest.class.getName(), servletRequest) .attribute(HttpServletResponse.class.getName(), servletResponse) .build(); // @formatter:on return this.authorizedClientManager.authorize(authorizeRequest); } \",\"DefaultOAuth2AuthorizedClientManager\",\"public OAuth2AuthorizedClient authorize(OAuth2AuthorizeRequest authorizeRequest) { Assert.notNull(authorizeRequest, \\\"authorizeRequest cannot be null\\\"); String clientRegistrationId = authorizeRequest.getClientRegistrationId(); OAuth2AuthorizedClient authorizedClient = authorizeRequest.getAuthorizedClient(); Authentication principal = authorizeRequest.getPrincipal(); HttpServletRequest servletRequest = getHttpServletRequestOrDefault(authorizeRequest.getAttributes()); Assert.notNull(servletRequest, \\\"servletRequest cannot be null\\\"); HttpServletResponse servletResponse = getHttpServletResponseOrDefault(authorizeRequest.getAttributes()); Assert.notNull(servletResponse, \\\"servletResponse cannot be null\\\"); OAuth2AuthorizationContext.Builder contextBuilder; if (authorizedClient != null) { contextBuilder = OAuth2AuthorizationContext.withAuthorizedClient(authorizedClient); } else { //获取认证成功得到授权客户端信息，包含token等信息 authorizedClient = this.authorizedClientRepository.loadAuthorizedClient(clientRegistrationId, principal, servletRequest); if (authorizedClient != null) { contextBuilder = OAuth2AuthorizationContext.withAuthorizedClient(authorizedClient); } else { //获取已在服务器端注册的客户端信息，存放在内存 ClientRegistration clientRegistration = this.clientRegistrationRepository .findByRegistrationId(clientRegistrationId); Assert.notNull(clientRegistration, \\\"Could not find ClientRegistration with id '\\\" + clientRegistrationId + \\\"'\\\"); contextBuilder = OAuth2AuthorizationContext.withClientRegistration(clientRegistration); } } // @formatter:off OAuth2AuthorizationContext authorizationContext = contextBuilder.principal(principal) .attributes((attributes) -> { Map<String, Object> contextAttributes = this.contextAttributesMapper.apply(authorizeRequest); if (!CollectionUtils.isEmpty(contextAttributes)) { attributes.putAll(contextAttributes); } }) .build(); // @formatter:on try { authorizedClient = this.authorizedClientProvider.authorize(authorizationContext); } catch (OAuth2AuthorizationException ex) { this.authorizationFailureHandler.onAuthorizationFailure(ex, principal, createAttributes(servletRequest, servletResponse)); throw ex; } if (authorizedClient != null) { this.authorizationSuccessHandler.onAuthorizationSuccess(authorizedClient, principal, createAttributes(servletRequest, servletResponse)); } else { // In the case of re-authorization, the returned `authorizedClient` may be // null if re-authorization is not supported. // For these cases, return the provided // `authorizationContext.authorizedClient`. if (authorizationContext.getAuthorizedClient() != null) { return authorizationContext.getAuthorizedClient(); } } return authorizedClient; } \",\"在获取已授权信息时，获取不到会报ClientAuthorizationRequiredException,\",\"过滤器OAuth2AuthorizationRequestRedirectFilter会进行捕获处理\",\"向授权服务器发起授权请求，获取登录授权页面\",\"protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException { try { OAuth2AuthorizationRequest authorizationRequest = this.authorizationRequestResolver.resolve(request); if (authorizationRequest != null) { this.sendRedirectForAuthorization(request, response, authorizationRequest); return; } } catch (Exception ex) { this.unsuccessfulRedirectForAuthorization(request, response, ex); return; } try { filterChain.doFilter(request, response); } catch (IOException ex) { throw ex; } catch (Exception ex) { // Check to see if we need to handle ClientAuthorizationRequiredException Throwable[] causeChain = this.throwableAnalyzer.determineCauseChain(ex); ClientAuthorizationRequiredException authzEx = (ClientAuthorizationRequiredException) this.throwableAnalyzer .getFirstThrowableOfType(ClientAuthorizationRequiredException.class, causeChain); if (authzEx != null) { try { OAuth2AuthorizationRequest authorizationRequest = this.authorizationRequestResolver.resolve(request, authzEx.getClientRegistrationId()); if (authorizationRequest == null) { throw authzEx; } this.sendRedirectForAuthorization(request, response, authorizationRequest); this.requestCache.saveRequest(request, response); } catch (Exception failed) { this.unsuccessfulRedirectForAuthorization(request, response, failed); } return; } if (ex instanceof ServletException) { throw (ServletException) ex; } if (ex instanceof RuntimeException) { throw (RuntimeException) ex; } throw new RuntimeException(ex); } } \",\"客户端配置的客户端信息存放在clientRegistrationRepository 在授权服务器根据重定向url,携带code到客户端时，会被过滤器拦截获取token等信息存放在authorizedClientRepository\",\"OAuth2AuthorizationCodeGrantFilter\",\"负责处理授权服务器的授权码重定向请求,即对授权码拦截，向授权服务器获取token请求\"]},\"346\":{\"h\":\"authorization-server\",\"t\":[\"管理已注册客户端信息 授权，签发token\",\"使用HttpSessionRequestCache请求缓存存取客户端的授权请求，和sessionId关联,重定向到登录页面，登录请求成功后，重新根据session缓存重定向授权请求,返回授权页面服务器收到同意授权的许可consent后,构造授权码，重定向到客户端\",\"SecurityContextPersistenceFilter\",\"配置安全上下文的安全上下文仓库securityContextRepository,用于SecurityContextPersistenceFilter获取已被认证主体\",\"public class SecurityContextPersistenceFilter{ private void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { // ensure that filter is only applied once per request if (request.getAttribute(FILTER_APPLIED) != null) { chain.doFilter(request, response); return; } request.setAttribute(FILTER_APPLIED, Boolean.TRUE); if (this.forceEagerSessionCreation) { HttpSession session = request.getSession(); if (this.logger.isDebugEnabled() && session.isNew()) { this.logger.debug(LogMessage.format(\\\"Created session %s eagerly\\\", session.getId())); } } HttpRequestResponseHolder holder = new HttpRequestResponseHolder(request, response); //从仓库获取上下文，包含已认证主体 SecurityContext contextBeforeChainExecution = this.repo.loadContext(holder); try { SecurityContextHolder.setContext(contextBeforeChainExecution); if (contextBeforeChainExecution.getAuthentication() == null) { logger.debug(\\\"Set SecurityContextHolder to empty SecurityContext\\\"); } else { if (this.logger.isDebugEnabled()) { this.logger .debug(LogMessage.format(\\\"Set SecurityContextHolder to %s\\\", contextBeforeChainExecution)); } } chain.doFilter(holder.getRequest(), holder.getResponse()); } finally { SecurityContext contextAfterChainExecution = SecurityContextHolder.getContext(); // Crucial removal of SecurityContextHolder contents before anything else. SecurityContextHolder.clearContext(); this.repo.saveContext(contextAfterChainExecution, holder.getRequest(), holder.getResponse()); request.removeAttribute(FILTER_APPLIED); this.logger.debug(\\\"Cleared SecurityContextHolder to complete request\\\"); } } } \",\"NimbusJwkSetEndpointFilter\",\"处理/oauth2/jwks请求\",\"OAuth2AuthorizationEndpointFilter http接受客户端的授权请求\",\"通过安全过滤器来处理\",\"OAuth2AuthorizationEndpointFilter\",\"providerManager找到合适的provider对authentication处理\",\"OAuth2AuthorizationCodeRequestAuthenticationProvider查询请求客户端是否存在，若存在跳转到授权页面或登录授权页面 \",\"authenticateAuthorizationConsent处理同意授权的请求,将许可信息存表,构造授权码,若授权权限为空，删除授权信息\",\"authenticateAuthorizationRequest处理授权请求，并将授权信息存表\",\"OAuth2ClientAuthenticationFilter 的ClientSecretAuthenticationProvider\\\\ JwtClientAssertionAuthenticationProvider\",\"匹配获取token的客户端请求 路径 /oauth/token\",\"负责处理客户端获取token的请求\",\"OAuth2TokenEndpointFilter\",\"OAuth2AuthorizationCodeAuthenticationProvider对授权码认证，获取token,刷新token 保存到授权信息表中\",\"UsernamePasswordAuthenticationFilter\",\"匹配登录请求 路径 /login\",\"在认证成功后，认证主体放入安全上下文，改变sessionId,防止session攻击\",\"AnonymousAuthenticationFilter\",\"创建匿名用户作为认证主体，创建上下文\",\"LogoutFilter\",\"登出过滤器\",\"DefaultLoginPageGeneratingFilter\",\"默认登录页跳转过滤器\",\"SecurityContextHolderAwareRequestFilter\",\"请求包装过滤器\",\"ExceptionTranslationFilter\",\"在请求缓存HttpSessionRequestCache中保存被拒绝的请求，以便认证成功后再次获取，重定向请求\",\"处理FilterSecurityInterceptor产生的访问被拒绝异常，发送token到认证入口点LoginUrlAuthenticationEntryPoint，重定向到登录页面\",\"FilterSecurityInterceptor\",\"投票发起，是否授权\"]},\"347\":{\"h\":\"resource-server\",\"t\":[\"配置客户端信息 管理资源，提供资源给客户端，验证token\"]},\"348\":{\"h\":\"配置\",\"t\":[\"三大安全过滤器链\",\"授权过滤器链\",\"system\",\"普通用户\",\"路径配置\",\"jwt配置\",\"自定义tokenGenerator,委托器模式包含多个generator,customizer 自定义用户认证userDetails\",\"登录配置\",\"loginProcessingUrl()配置用户名密码认证过滤器的pattern,决定请求是否走过滤\",\"loginPage()配置登录页面\",\"permitAll配置上述url是否允许访问\",\"登录成功后的重定向！！！！！！！\",\"在安全过滤器链中配置userDetailService\",\"配置安全上下文的安全上下文仓库securityContextRepository,用于SecurityContextPersistenceFilter获取已被认证主体\",\"请求缓存配置 用于保存上一次被拒绝的请求，在用户名和密码校验成功后，即主体已被认证,再一次请求\",\"认证成功和失败的处理逻辑即认证入口点AuthenticationEntrypoint，表单登录成功或失败的处理逻辑\",\"认证失败入口点，转发到登录页面\",\"登录成功处理\",\"登录失败处理\",\"认证失败处理\",\"SecurityFilterChain systemSecurityFilterChain(HttpSecurity http, UserInfoService userInfoService) throws Exception { SimpleAuthenticationEntryPoint authenticationEntryPoint = new SimpleAuthenticationEntryPoint(); AuthenticationEntryPointFailureHandler authenticationFailureHandler = new AuthenticationEntryPointFailureHandler(authenticationEntryPoint); HttpSessionSecurityContextRepository securityContextRepository = new HttpSessionSecurityContextRepository(); securityContextRepository.setSpringSecurityContextKey(ID_SERVER_SYSTEM_SECURITY_CONTEXT_KEY); HttpSessionRequestCache requestCache = new HttpSessionRequestCache(); requestCache.setSessionAttrName(ID_SERVER_SYSTEM_SAVED_REQUEST_KEY); http.antMatcher(SYSTEM_ANT_PATH).csrf().disable() .headers().frameOptions().sameOrigin() .and() .requestCache().requestCache(requestCache) .and() .securityContext().securityContextRepository(securityContextRepository) .and() .authorizeRequests().anyRequest().authenticated() /* .and() .exceptionHandling() .authenticationEntryPoint(authenticationEntryPoint)*/ .and() //.userDetailsService(userInfoService::findByUsername) //用lambda表达式配置userDetailService .userDetailsService(userInfoService::findByUsername) //配置表单登录页面及登录url和允许访问权限 .formLogin().loginPage(\\\"/system/login\\\").loginProcessingUrl(\\\"/system/login\\\") .successHandler(new RedirectLoginAuthenticationSuccessHandler(\\\"/system\\\", requestCache)) .failureHandler(authenticationFailureHandler).permitAll(); return http.build(); } \",\"自定义service实现RegisteredClientRepository获取客户端信息\",\"自定义service实现OAuth2AuthorizationService接口获取授权信息\",\"根据state和state_token_type获取授权对象\",\"自定义service实现OAuth2AuthorizationConsentService接口获取授权许可信息\"]},\"349\":{\"h\":\"管理员\",\"t\":[\"可以自定义userInfoService接口和实现JpaUserInfoService 获取管理平台用户信息\"]},\"350\":{\"h\":\"普通用户\",\"t\":[\"自定义OAuth2UserDetailsService函数接口及InMemoryOAuth2UserDetailsService实现\"]},\"351\":{\"h\":\"spring\"},\"352\":{\"h\":\"spring validation\"},\"353\":{\"h\":\"手动进行请求参数校验，获取校验结果\",\"t\":[\"注入mvcValidator的Validator\",\"使用mvcValidator进行校验，获取校验结果\",\"public class Test { private final Validator mvcValidator; public SpResult<Integer> update(@RequestBody AlarmConfigUpdateDTO request) { BindingResult bindingResult = new BeanPropertyBindingResult(request,AlarmConfigUpdateDTO.class.getSimpleName()); mvcValidator.validate(request,bindingResult); if (bindingResult.hasErrors()) { String errorMsg = bindingResult.getFieldError().getDefaultMessage(); System.out.println(errorMsg); } //mvcValidator.validate(); //return alarmConfigService.updateAlarmConfig(request); return SpResult.succeed(); } } \"]},\"354\":{\"h\":\"spring bean 中注入 HttpServletRequest 成员变量的思考\",\"t\":[\"在 bean 中注入作为成员变量的 HttpServletRequest 时，实际注入的是 spring 框架生成的代理对象，是ObjectFactoryDelegatingInvocationHandler的实例。在我们调用这个成员变量的方法时，最终是调用了 objectFactory 的 getObject() 对象的对应方法，在这里 objectFactory 是RequestObjectFactory这个类的对象。\",\"RequestObjectFactory 的 getObject 方法是从RequestContextHolder的threadlocal中去取值的。\",\"请求刚进入 springmvc 的dispatcherServlet的时候会把 request 相关对象设置到 RequestContextHolder 的 threadlocal 中去.\",\"@Controller public class SomeController { @RequestMapping(\\\"/test1\\\") public String test1(HttpServletRequest request) { System.out.println(request.getQueryString()); return \\\"\\\"; } @RequestMapping(\\\"/test2\\\") public String test2(HttpServletRequest request) { System.out.println(request.getQueryString()); return \\\"\\\"; } @RequestMapping(\\\"/test3\\\") public String test3(HttpServletRequest request) { System.out.println(request.getQueryString()); return \\\"\\\"; } } @Controller public class SomeController { @Resource private HttpServletRequest request; @RequestMapping(\\\"/test1\\\") public String test1() { System.out.println(request.getQueryString()); return \\\"\\\"; } @RequestMapping(\\\"/test2\\\") public String test2() { System.out.println(request.getQueryString()); return \\\"\\\"; } @RequestMapping(\\\"/test3\\\") public String test3() { System.out.println(request.getQueryString()); return \\\"\\\"; } } \"]},\"355\":{\"h\":\"springboot 2.7.1 配置文件加载\",\"t\":[\"EnvironmentPostProcessorApplicationListener\",\"ConfigDataEnvironmentPostProcessor\",\"ConfigDataEnvironment\",\"StandardConfigDataLocationResolver\",\"ConfigDataEnvironmentContributors\",\"ConfigDataEnvironmentContributor\"]},\"356\":{\"h\":\"依赖注入\",\"t\":[\"参考\",\"参考\",\"参考\"]},\"357\":{\"h\":\"构造器、factory-method\",\"t\":[\"createBean中createBeanInstance方法会判断是否构造器注入\",\"if (mbd.getFactoryMethodName() != null) { return instantiateUsingFactoryMethod(beanName, mbd, args); } if (resolved) { if (autowireNecessary) { return autowireConstructor(beanName, mbd, null, null); } else { return instantiateBean(beanName, mbd); } } \"]},\"358\":{\"h\":\"@Bean Autowire属性 byName,byType,no\",\"t\":[\"createBean中populateBean方法\",\"int resolvedAutowireMode = mbd.getResolvedAutowireMode(); if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) { MutablePropertyValues newPvs = new MutablePropertyValues(pvs); // Add property values based on autowire by name if applicable. if (resolvedAutowireMode == AUTOWIRE_BY_NAME) { autowireByName(beanName, mbd, bw, newPvs); } // Add property values based on autowire by type if applicable. if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) { autowireByType(beanName, mbd, bw, newPvs); } pvs = newPvs; } \"]},\"359\":{\"h\":\"注解 @Resource,@Autowired\",\"t\":[\"AutowiredAnnotationBeanPostProcessor处理@Autowired\",\"CommonAnnotationBeanPostProcessor处理@Resource\",\"createBean中populateBean方法\",\"boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors(); boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE); PropertyDescriptor[] filteredPds = null; if (hasInstAwareBpps) { if (pvs == null) { pvs = mbd.getPropertyValues(); } //AutowireAnnotationBeanPostProcessor for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) { PropertyValues pvsToUse = bp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName); if (pvsToUse == null) { if (filteredPds == null) { filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching); } pvsToUse = bp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName); if (pvsToUse == null) { return; } } pvs = pvsToUse; } } \"]},\"360\":{\"h\":\"SpringBoot 设置HTTP 响应状态码\",\"t\":[\"参考\",\"ResponseEntity\",\"示例\",\"@Log(title = \\\"HTTP Status Code 测试\\\", businessType = BusinessType.OTHER) @PostMapping(\\\"/test\\\") public ResponseEntity<AjaxResult> auth(@RequestParam String username, @RequestParam String password) { switch (username){ case \\\"200\\\": return ResponseEntity.ok().body(AjaxResult.success()); case \\\"400\\\": return ResponseEntity.badRequest().body(AjaxResult.error(400,\\\"Bad Request\\\")); case \\\"404\\\": return ResponseEntity.notFound().build(); case \\\"500\\\": return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(AjaxResult.error()); default: return ResponseEntity.status(203).body(AjaxResult.success()); } } \"]},\"361\":{\"h\":\"DeferredResult\"},\"362\":{\"h\":\"WebAsyncUtils的WebAsyncManager\"},\"363\":{\"h\":\"DeferredResultMethodReturnValueHandler\",\"t\":[\"handleReturnValue\"]},\"364\":{\"h\":\"注解\"},\"365\":{\"h\":\"@import\",\"t\":[\"将bean注册到spring容器当中\"]},\"366\":{\"h\":\"@Conditional\"},\"367\":{\"h\":\"@ConditionalOnMissingBean\",\"t\":[\"如果bean的实例已注册到spring容器中,则跳过\",\"@ConditionalOnMissingBean失效问题？\",\"bean加载顺序问题，导致注解失效。\"]},\"368\":{\"h\":\"@ConditionalOnWebApplication\",\"t\":[\"@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\"]},\"369\":{\"h\":\"@ConditionalOnClass\"},\"370\":{\"h\":\"@EnableConfigurationProperties\",\"t\":[\"启用加了@ConfigurationProperties注解的类，@EnableConfigurationProperties(LogFileWebEndpointProperties.class)\"]},\"371\":{\"h\":\"@Import\"},\"372\":{\"h\":\"@ConfigurationProperties\",\"t\":[\"可用在方法上，和类上\",\"用在类上需启用才能注册到容器中\",\"用在方法上，配合@Bean注解使用\"]},\"373\":{\"h\":\"@ConditionalOnProperty\",\"t\":[\"使用条件判断是否有值(name = \\\"spring.datasource.type\\\", havingValue = \\\"com.zaxxer.hikari.HikariDataSource\\\", matchIfMissing = true)\"]},\"374\":{\"h\":\"@ConditionalOnSingleCandidate(DataSource.class)\",\"t\":[\"Datasource的实例是否是单个\"]},\"375\":{\"h\":\"@ControllerAdvice\",\"t\":[\"控制器建议器，一般用于全局异常处理，数据绑定， 自定义参数解析\",\"@ExceptionHandler注解标注的方法：用于捕获Controller中抛出的不同类型的异常，从而达到异常全局处理的目的；\",\"@InitBinder注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；\",\"@ModelAttribute注解标注的方法：表示此方法会在执行目标Controller方法之前执行 !!!这三个注解都可以在普通的Controller类上使用,ControllerAdvice只是作用范围可以自定义(默认全部)\"]},\"376\":{\"h\":\"作用范围\",\"t\":[\"ControllerAdvice 提供了多种指定Advice规则的定义方式，默认什么都不写，则是Advice所有Controller，当然你也可以通过下列的方式指定规则\",\"指定包\",\"匹配org.my.pkg包及其子包下的所有Controller @ControllerAdvice(basePackages=\\\"org.my.pkg\\\") 当然也可以用数组的形式指定，如： @ControllerAdvice(basePackages={\\\"org.my.pkg\\\", \\\"org.my.other.pkg\\\"}), \",\"指定注解\",\" 也可以通过指定注解来匹配，比如我自定了一个 @CustomAnnotation 注解，我想匹配所有被这个注解修饰的 Controller, 可以这么写：@ControllerAdvice（annotations={CustomAnnotation.class}) \"]},\"377\":{\"h\":\"@ModelAttribute\",\"t\":[\" // 1.无返回值方法,放入Model,自定义 key ,value @ModelAttribute() public void presetParam(Model model) { model.addAttribute(\\\"globalAttr\\\", \\\"我是全局参数\\\"); } // 2.不有指定name,返回值方法,返回值是map,int等,key就是map,int等,,value是返回值 @ModelAttribute() public Map<String, String> presetParam2() { Map<String, String> map1 = new HashMap<String, String>(); map1.put(\\\"key1\\\", \\\"value1\\\"); return map1; } // 3.指定name,返回值方法,key就是name,value是返回值 @ModelAttribute(name = \\\"map2\\\") public Map<String, String> presetParam3() { Map<String, String> map = new HashMap<String, String>(); map.put(\\\"key2\\\", \\\"value2\\\"); return map; } // 4.可以接受请求参数 @ModelAttribute() public void presetParam4(@RequestParam(\\\"name\\\") String name,Model model) { model.addAttribute(\\\"name\\\", name); } \",\"使用\",\" //1.使用Model取出 @GetMapping(\\\"model\\\") public String methodOne(Model model) { Map<String, Object> modelMap = model.asMap(); System.out.println(modelMap.get(\\\"name\\\").toString()); // 传入name的值 return modelMap.get(\\\"globalAttr\\\").toString(); } //2.使用ModelMap取出 @GetMapping(\\\"modelMap\\\") public String methodThree(ModelMap modelMap) { return modelMap.get(\\\"map\\\").toString(); } //3.@ModelAttribute()指定key,直接取出 @GetMapping(\\\"modelAttribute\\\") public String methodTwo(@ModelAttribute(\\\"map2\\\") Map map2) { return map2.toString(); } \"]},\"378\":{\"h\":\"@ExceptionHandler\",\"t\":[\" // @Validated参数校验 ,解析BindingResult的错误信息并返回 @ExceptionHandler(BindException.class) @ResponseBody public JsonResult exceptionHandler(BindException e, BindingResult result) { List<FieldError> fieldErrors = result.getFieldErrors(); String collect = fieldErrors.stream().map(f -> f.getField()+\\\":\\\"+f.getDefaultMessage()).collect(Collectors.joining(\\\",\\\")); return new JsonResult(JsonResult.Validated_ERROR, collect); } //这里就是通用的异常处理器了,所有预料之外的Exception异常都由这里处理 @ExceptionHandler(Exception.class) @ResponseBody public JsonResult exceptionHandler(Exception e) { return new JsonResult(JsonResult.SYSTEM_ERROR, e.getMessage()); } \"]},\"379\":{\"h\":\"@InitBinder 请求参数预处理\",\"t\":[\" @InitBinder public void initBinder(WebDataBinder dataBinder){ /* * 创建一个字符串微调编辑器 * 参数{boolean emptyAsNull}: 是否把空字符串(\\\"\\\")视为 null */ StringTrimmerEditor trimmerEditor = new StringTrimmerEditor(true); /* * 注册自定义编辑器 * 接受两个参数{Class<?> requiredType, PropertyEditor propertyEditor} * requiredType：所需处理的类型 * propertyEditor：属性编辑器，StringTrimmerEditor就是 propertyEditor的一个子类 */ dataBinder.registerCustomEditor(String.class, trimmerEditor); //日期格式的字符串转换成Date对象 dataBinder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat(\\\"yyyy-MM-dd HH:mm:ss\\\"), false)); dataBinder.addValidators(paramVOValidator); } \"]},\"380\":{\"h\":\"循环依赖问题\",\"t\":[\"spring中使用三级缓存，来解决循环依赖问题\",\"核心类DefaultSingletonbeanRegistry中，维护了三个缓存，延迟生命周期的破坏\",\"singletonObjects\",\"earlySingletonObjects\",\"singletonFactories\"]},\"381\":{\"h\":\"AOP面向切面\"},\"382\":{\"h\":\"使用\",\"t\":[\"为什么使用Aop\",\"面向切面编程，主要是解决代码冗余，降低代码耦合性的方案，它将业务拆分为核心业务和非核心业务(如日志功能，或统计sql执行时长)，在使用时将非核心功能织入到业务功能上\",\"相关概念\",\"@Aspect用于类上，标注类为切面，切入点 + 通知,在什么时机，什么地方，做什么\",\"@pointcut用于方法上，表示要织入通用功能的方法和类的位置，即切点\",\"@pointcut(execution(\\\"切点位置\\\")) @pointcut(@annotation(注解的位置)) \",\"通知类型Advice,在方法前、方法后，方法前后做什么\",\"@Around\",\"参数为@pointcut注解的方法，即切点方法 @Around(\\\"aspect()&&@annotation(anno)\\\") @Around(\\\"pointCutMethod()\\\") \",\"​\",\"@before\",\"@after\",\"@afterReturning\",\"@afterThrowing\"]},\"383\":{\"h\":\"原理\",\"t\":[\"Aop代理对象\",\"在bean对象初始化，执行postproceedAfterInitialization方法时生成代理对象\",\"aop生成代理对象的时机\",\"执行postproceedAfterInitialization方法时生成代理对象\",\"提前生成代理对象getEarlyReference方法\",\"A和B，两个对象，其中A最终产生代理对象，A，B相互依赖，需提前生成A代理对象 \",\"在bean对象初始化前 \",\"aop代理对象的生成\",\"核心类：AopProxy接口、CglibAopProxy、JdkDynamicAopProxy、ObjenesisCglibAopProxy\",\"CglibAopProxy实现AopProxy JdkDynamicAopProxy实现AopProxy ObjenesisCglibAopProxy继承CglibAopProxy DefaultAopProxyFactory创建调用处理器对象，代理工具类 调用public Object getProxy(@Nullable ClassLoader classLoader)获取代理对象 \",\"ProxyCreatorSupport、AdvisedSupport、AspectJProxyFactory AspectJProxyFactory实现ProxyCreatorSupport实现AdvisedSupport 保存要被代理的接口或对象信息 \",\"wrapIfNecessary是aop代理对象创建的入口 protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) { if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) { return bean; } if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) { return bean; } if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) { this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; } // Create proxy if we have advice. //获取aop通知拦截器 Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null); if (specificInterceptors != DO_NOT_PROXY) { this.advisedBeans.put(cacheKey, Boolean.TRUE); Object proxy = createProxy( bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean)); this.proxyTypes.put(cacheKey, proxy.getClass()); return proxy; } this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; } createProxy创建代理工厂proxyFactory，调用getproxy方法获取代理对象, ProxyFactory继承ProxyCreatorSupport包含要被代理的对象信息 \"]},\"384\":{\"h\":\"代理\"},\"385\":{\"h\":\"jdk动态代理\",\"t\":[\"调用处理器需实现InvocationHandler接口，重写invoke方法\",\"被代理对象需实现接口\",\"Proxy.newProxyInstance（类加载器，接口对象数组，调用处理器）\"]},\"386\":{\"h\":\"cglib动态代理\",\"t\":[\"调用处理器需实现MethodInterceptor 接口，重写intercept方法\",\"创建Enhancer实例；\",\"通过setSuperclass方法来设置目标类；\",\"通过setCallback方法来设置拦截对象，即调用处理器；\",\"create方法生成Target的代理类，并返回代理类的实例。\",\"aop中使用的代理样例\",\" // Configure CGLIB Enhancer... Enhancer enhancer = createEnhancer(); if (classLoader != null) { enhancer.setClassLoader(classLoader); if (classLoader instanceof SmartClassLoader && ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) { enhancer.setUseCache(false); } } enhancer.setSuperclass(proxySuperClass); enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised)); enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE); enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(classLoader)); Callback[] callbacks = getCallbacks(rootClass); Class<?>[] types = new Class<?>[callbacks.length]; for (int x = 0; x < types.length; x++) { types[x] = callbacks[x].getClass(); } // fixedInterceptorMap only populated at this point, after getCallbacks call above enhancer.setCallbackFilter(new ProxyCallbackFilter( this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset)); enhancer.setCallbackTypes(types); // Generate the proxy class and create a proxy instance. return createProxyClassAndInstance(enhancer, callbacks); \"]},\"387\":{\"h\":\"context\"},\"388\":{\"h\":\"AnnotationConfigApplicationContext\",\"t\":[\"生成spring核心相关的单例对象为下述上下文AnnotationConfigServletWebServerApplicationContext初始化做准备\"]},\"389\":{\"h\":\"AnnotationConfigServletWebServerApplicationContext\",\"t\":[\"父上下文为AnnotationConfigApplicationContext\",\"ParentContextApplicationContextInitializer父上下文初始化器暂存父上下文\",\"在prepareContext的applyInitializers时设置上下文\"]},\"390\":{\"h\":\"springboot容器启动\"},\"391\":{\"h\":\"核心\",\"t\":[\"event\",\"初始化器\",\"server的启动\"]},\"392\":{\"h\":\"接口\",\"t\":[\"ApplicationContextWare接口\",\"InitializeBean\"]},\"393\":{\"h\":\"springApplication\"},\"394\":{\"h\":\"run\",\"t\":[\"prepareEnvironment\",\"printBanner\",\"createApplicationContext\",\"prepareContext\",\"refreshContext \",\"调用上下文AbstractApplicationContext的refresh方法\",\"afterRefresh\"]},\"395\":{\"h\":\"prepareEnvironment\",\"t\":[\"这里会进入递归调用SpringApplication中的run方法产生父上下文初始化器(暂存父上下文)\"]},\"396\":{\"h\":\"AbstractApplicationContext\"},\"397\":{\"h\":\"refresh\",\"t\":[\"prepareRefresh\",\"obtainFreshBeanFactory\",\"prepareBeanFactory\",\"postProcessBeanFactory\",\"invokeBeanFactoryPostProcessors\",\"registerBeanPostProcessors\",\"initMessageSource\",\"initApplicationEventMulticaster\",\"onRefresh() \",\"创建web服务器，并启动\",\"registerListeners\",\"finishBeanFactoryInitialization\",\"finishRefresh\",\"public abstract class AbstractApplicationContext extends DefaultResourceLoader implements ConfigurableApplicationContext { @Override public void refresh() throws BeansException, IllegalStateException { synchronized (this.startupShutdownMonitor) { StartupStep contextRefresh = this.applicationStartup.start(\\\"spring.context.refresh\\\"); // Prepare this context for refreshing. prepareRefresh(); // Tell the subclass to refresh the internal bean factory. ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); // Prepare the bean factory for use in this context. prepareBeanFactory(beanFactory); try { // Allows post-processing of the bean factory in context subclasses. postProcessBeanFactory(beanFactory); StartupStep beanPostProcess = this.applicationStartup.start(\\\"spring.context.beans.post-process\\\"); // Invoke factory processors registered as beans in the context. invokeBeanFactoryPostProcessors(beanFactory); // Register bean processors that intercept bean creation. registerBeanPostProcessors(beanFactory); beanPostProcess.end(); // Initialize message source for this context. initMessageSource(); // Initialize event multicaster for this context. initApplicationEventMulticaster(); // Initialize other special beans in specific context subclasses. onRefresh(); // Check for listener beans and register them. registerListeners(); // Instantiate all remaining (non-lazy-init) singletons. finishBeanFactoryInitialization(beanFactory); // Last step: publish corresponding event. finishRefresh(); } catch (BeansException ex) { if (logger.isWarnEnabled()) { logger.warn(\\\"Exception encountered during context initialization - \\\" + \\\"cancelling refresh attempt: \\\" + ex); } // Destroy already created singletons to avoid dangling resources. destroyBeans(); // Reset 'active' flag. cancelRefresh(ex); // Propagate exception to caller. throw ex; } finally { // Reset common introspection caches in Spring's core, since we // might not ever need metadata for singleton beans anymore... resetCommonCaches(); contextRefresh.end(); } } } protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) { PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors()); // Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime // (e.g. through an @Bean method registered by ConfigurationClassPostProcessor) if (!NativeDetector.inNativeImage() && beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) { beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory)); beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader())); } } } \"]},\"398\":{\"h\":\"prepareBeanFactory\",\"t\":[\"配置上下文类加载器、后置处理器\",\"添加Bean后置处理器ApplicationContextAwareProcessor\",\"添加EnvironmentAware、ResourceLoaderAware等要忽略依赖注入的接口,让bean后置处理器ApplicationContextAwareProcessor处理\",\"registerResolvableDependency指定要注入的依赖值，和@Primary类似 \",\"beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);\",\"beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);\",\"beanFactory.registerResolvableDependency(ApplicationContext.class, this);\",\"注册environment单例bean\"]},\"399\":{\"h\":\"invokeBeanFactoryPostProcessors\",\"t\":[\"调用委托器的静态方法PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\",\"执行BeanFactoryPostProcessor的postProcessBeanFactory和BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry的方法\",\"postProcessBeanDefinitionRegistry是一个拓展，在后置处理BeanFactory之前，重新添加新的工厂后置处理器的beanDefinition\",\"对处理器进行排序后执行处理方法\",\"final class PostProcessorRegistrationDelegate { private PostProcessorRegistrationDelegate() { } public static void invokeBeanFactoryPostProcessors( ConfigurableListableBeanFactory beanFactory, List<BeanFactoryPostProcessor> beanFactoryPostProcessors) { // WARNING: Although it may appear that the body of this method can be easily // refactored to avoid the use of multiple loops and multiple lists, the use // of multiple lists and multiple passes over the names of processors is // intentional. We must ensure that we honor the contracts for PriorityOrdered // and Ordered processors. Specifically, we must NOT cause processors to be // instantiated (via getBean() invocations) or registered in the ApplicationContext // in the wrong order. // // Before submitting a pull request (PR) to change this method, please review the // list of all declined PRs involving changes to PostProcessorRegistrationDelegate // to ensure that your proposal does not result in a breaking change: // https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22 // Invoke BeanDefinitionRegistryPostProcessors first, if any. Set<String> processedBeans = new HashSet<>(); if (beanFactory instanceof BeanDefinitionRegistry) { BeanDefinitionRegistry registry = (BeanDefinitionRegistry) beanFactory; List<BeanFactoryPostProcessor> regularPostProcessors = new ArrayList<>(); List<BeanDefinitionRegistryPostProcessor> registryProcessors = new ArrayList<>(); for (BeanFactoryPostProcessor postProcessor : beanFactoryPostProcessors) { if (postProcessor instanceof BeanDefinitionRegistryPostProcessor) { BeanDefinitionRegistryPostProcessor registryProcessor = (BeanDefinitionRegistryPostProcessor) postProcessor; registryProcessor.postProcessBeanDefinitionRegistry(registry); registryProcessors.add(registryProcessor); } else { regularPostProcessors.add(postProcessor); } } // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let the bean factory post-processors apply to them! // Separate between BeanDefinitionRegistryPostProcessors that implement // PriorityOrdered, Ordered, and the rest. List<BeanDefinitionRegistryPostProcessor> currentRegistryProcessors = new ArrayList<>(); // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered. String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup()); currentRegistryProcessors.clear(); // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered. postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (!processedBeans.contains(ppName) && beanFactory.isTypeMatch(ppName, Ordered.class)) { currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup()); currentRegistryProcessors.clear(); // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear. boolean reiterate = true; while (reiterate) { reiterate = false; postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false); for (String ppName : postProcessorNames) { if (!processedBeans.contains(ppName)) { currentRegistryProcessors.add(beanFactory.getBean(ppName, BeanDefinitionRegistryPostProcessor.class)); processedBeans.add(ppName); reiterate = true; } } sortPostProcessors(currentRegistryProcessors, beanFactory); registryProcessors.addAll(currentRegistryProcessors); invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup()); currentRegistryProcessors.clear(); } // Now, invoke the postProcessBeanFactory callback of all processors handled so far. invokeBeanFactoryPostProcessors(registryProcessors, beanFactory); invokeBeanFactoryPostProcessors(regularPostProcessors, beanFactory); } else { // Invoke factory processors registered with the context instance. invokeBeanFactoryPostProcessors(beanFactoryPostProcessors, beanFactory); } // Do not initialize FactoryBeans here: We need to leave all regular beans // uninitialized to let the bean factory post-processors apply to them! String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false); // Separate between BeanFactoryPostProcessors that implement PriorityOrdered, // Ordered, and the rest. List<BeanFactoryPostProcessor> priorityOrderedPostProcessors = new ArrayList<>(); List<String> orderedPostProcessorNames = new ArrayList<>(); List<String> nonOrderedPostProcessorNames = new ArrayList<>(); for (String ppName : postProcessorNames) { if (processedBeans.contains(ppName)) { // skip - already processed in first phase above } else if (beanFactory.isTypeMatch(ppName, PriorityOrdered.class)) { priorityOrderedPostProcessors.add(beanFactory.getBean(ppName, BeanFactoryPostProcessor.class)); } else if (beanFactory.isTypeMatch(ppName, Ordered.class)) { orderedPostProcessorNames.add(ppName); } else { nonOrderedPostProcessorNames.add(ppName); } } // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered. sortPostProcessors(priorityOrderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(priorityOrderedPostProcessors, beanFactory); // Next, invoke the BeanFactoryPostProcessors that implement Ordered. List<BeanFactoryPostProcessor> orderedPostProcessors = new ArrayList<>(orderedPostProcessorNames.size()); for (String postProcessorName : orderedPostProcessorNames) { orderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); } sortPostProcessors(orderedPostProcessors, beanFactory); invokeBeanFactoryPostProcessors(orderedPostProcessors, beanFactory); // Finally, invoke all other BeanFactoryPostProcessors. List<BeanFactoryPostProcessor> nonOrderedPostProcessors = new ArrayList<>(nonOrderedPostProcessorNames.size()); for (String postProcessorName : nonOrderedPostProcessorNames) { nonOrderedPostProcessors.add(beanFactory.getBean(postProcessorName, BeanFactoryPostProcessor.class)); } invokeBeanFactoryPostProcessors(nonOrderedPostProcessors, beanFactory); // Clear cached merged bean definitions since the post-processors might have // modified the original metadata, e.g. replacing placeholders in values... beanFactory.clearMetadataCache(); } } \"]},\"400\":{\"h\":\"finishRefresh\",\"t\":[\"执行生命周期处理器DefaultLifecycleProcessor的onRefresh方法、发布上下文已刷新事件\",\"WebServerStartStopLifecycle 发出服务器已被初始化事件ServletWebServerInitializedEvent\"]},\"401\":{\"h\":\"dispatcherServlet\",\"t\":[\"在第一次处理请求，为请求request分配servlet时，对servlet进行初始化\",\"在servlet引擎创建servlet实例时，调用其init方法实现servlet初始化\",\"在调用初始化init方法时会传入servletConfig接口的实例servletConfigImpl包含对servletContext的引用\",\"请求进来到继承httpServlet的FrameServlet的service方法去处理，processRequest-> doService->doDispatch\",\"继承frameworkServlet抽象类，使用initWebApplicationContext初始化servlet的上下文\"]},\"402\":{\"h\":\"doDispatch方法\"},\"403\":{\"h\":\"RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter\",\"t\":[\"handle方法\",\"handleInternal方法\",\"invokeHandlerMethod\",\"构造web请求，处理异步结果，将StandardServletAsyncWebRequest放入AsyncManager异步管理器,放在request的属性中\",\"创建web请求 ServletWebRequest webRequest = new ServletWebRequest(request, response); ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod); if (this.argumentResolvers != null) { invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers); } //设置返回值 if (this.returnValueHandlers != null) { invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers); } \"]},\"404\":{\"h\":\"ServletInvocableHandlerMethod\",\"t\":[\"invokeAndHandle\"]},\"405\":{\"h\":\"HandlerMethodReturnValueHandlerComposite\",\"t\":[\"handleReturnValue查找返回值处理器\",\"DeferredResultMethodReturnValueHandler\",\"CallableMethodReturnValueHandler\",\"RequestResponseBodyMethodProcessor\"]},\"406\":{\"h\":\"DeferredResultMethodReturnValueHandler\",\"t\":[\"handleReturnValue\",\"获取web请求中的异步管理器，开启异步处理\",\"startDeferredResultProcessing\",\"startAsyncProcessing\",\"启动servletRequest的异步处理，获取异步上下文\",\"WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer); \",\"startAsyncProcessing\",\"private void startAsyncProcessing(Object[] processingContext) { synchronized (WebAsyncManager.this) { this.concurrentResult = RESULT_NONE; this.concurrentResultContext = processingContext; this.errorHandlingInProgress = false; } this.asyncWebRequest.startAsync(); if (logger.isDebugEnabled()) { logger.debug(\\\"Started async request\\\"); } } \"]},\"407\":{\"h\":\"servlet接口\"},\"408\":{\"h\":\"GenericServlet\"},\"409\":{\"h\":\"HttpServlet\"},\"410\":{\"h\":\"HttpServletBean\",\"t\":[\"public class HttpServletBean { public final void init() throws ServletException { // Set bean properties from init parameters. PropertyValues pvs = new ServletConfigPropertyValues(getServletConfig(), this.requiredProperties); if (!pvs.isEmpty()) { try { BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this); ResourceLoader resourceLoader = new ServletContextResourceLoader(getServletContext()); bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, getEnvironment())); initBeanWrapper(bw); bw.setPropertyValues(pvs, true); } catch (BeansException ex) { if (logger.isErrorEnabled()) { logger.error(\\\"Failed to set bean properties on servlet '\\\" + getServletName() + \\\"'\\\", ex); } throw ex; } } // Let subclasses do whatever initialization they like. initServletBean(); } } \"]},\"411\":{\"h\":\"FrameworkServlet\",\"t\":[\" public abstract class FrameworkServlet{ protected final void initServletBean() throws ServletException { getServletContext().log(\\\"Initializing Spring \\\" + getClass().getSimpleName() + \\\" '\\\" + getServletName() + \\\"'\\\"); if (logger.isInfoEnabled()) { logger.info(\\\"Initializing Servlet '\\\" + getServletName() + \\\"'\\\"); } long startTime = System.currentTimeMillis(); try { this.webApplicationContext = initWebApplicationContext(); initFrameworkServlet(); } catch (ServletException | RuntimeException ex) { logger.error(\\\"Context initialization failed\\\", ex); throw ex; } if (logger.isDebugEnabled()) { String value = this.enableLoggingRequestDetails ? \\\"shown which may lead to unsafe logging of potentially sensitive data\\\" : \\\"masked to prevent unsafe logging of potentially sensitive data\\\"; logger.debug(\\\"enableLoggingRequestDetails='\\\" + this.enableLoggingRequestDetails + \\\"': request parameters and headers will be \\\" + value); } if (logger.isInfoEnabled()) { logger.info(\\\"Completed initialization in \\\" + (System.currentTimeMillis() - startTime) + \\\" ms\\\"); } } protected WebApplicationContext initWebApplicationContext() { WebApplicationContext rootContext = WebApplicationContextUtils.getWebApplicationContext(getServletContext()); WebApplicationContext wac = null; if (this.webApplicationContext != null) { // A context instance was injected at construction time -> use it wac = this.webApplicationContext; if (wac instanceof ConfigurableWebApplicationContext) { ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext) wac; if (!cwac.isActive()) { // The context has not yet been refreshed -> provide services such as // setting the parent context, setting the application context id, etc if (cwac.getParent() == null) { // The context instance was injected without an explicit parent -> set // the root application context (if any; may be null) as the parent cwac.setParent(rootContext); } configureAndRefreshWebApplicationContext(cwac); } } } if (wac == null) { // No context instance was injected at construction time -> see if one // has been registered in the servlet context. If one exists, it is assumed // that the parent context (if any) has already been set and that the // user has performed any initialization such as setting the context id wac = findWebApplicationContext(); } if (wac == null) { // No context instance is defined for this servlet -> create a local one wac = createWebApplicationContext(rootContext); } if (!this.refreshEventReceived) { // Either the context is not a ConfigurableApplicationContext with refresh // support or the context injected at construction time had already been // refreshed -> trigger initial onRefresh manually here. synchronized (this.onRefreshMonitor) { onRefresh(wac); } } if (this.publishContext) { // Publish the context as a servlet context attribute. String attrName = getServletContextAttributeName(); getServletContext().setAttribute(attrName, wac); } return wac; } } \"]},\"412\":{\"h\":\"spring event listener\"},\"413\":{\"h\":\"使用\",\"t\":[\"@EventListener(要处理的事件)标注在方法上,监听器对象注入到容器中\",\"定义自定义事件\",\"上下文方法发布事件\",\"//自定义对象获取上下文 public class SpringContextHolder implements ApplicationContextAware, DisposableBean { private static ApplicationContext applicationContext = null; public static ApplicationContext getApplicationContext() { return applicationContext; } @Override public void destroy() throws Exception { if (log.isDebugEnabled()) { log.debug(\\\"清除ApplicationContext:{}\\\" , applicationContext); } applicationContext = null; } @Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { SpringContextHolder.applicationContext = applicationContext; } public static <T> T getBean(Class<T> requiredType) { return applicationContext.getBean(requiredType); } /** * 发布事件 * @param event */ public static void publishEvent(ApplicationEvent event) { if (applicationContext == null) { return; } applicationContext.publishEvent(event); } } public class LogEvent extends ApplicationEvent { public LogEvent(Object source) { super(source); } } public class LogListener { private final LogClient logClient; @EventListener(LogEvent.class) public void saveLog(LogEvent logEvent){ log.info(\\\"监听器触发：{}\\\",logEvent.getSource()); Object object = logEvent.getSource(); if(object instanceof SysLoginLog){ logClient.saveLoginLog((SysLoginLog) object, SecurityConstants.INNER); }else if(object instanceof SysOperationLog){ logClient.saveOperationLog((SysOperationLog)object,SecurityConstants.INNER); } } } \"]},\"414\":{\"h\":\"Spring session redis\",\"t\":[\"它对servlet中的session进行了覆盖，创建和销毁使用redis实现\"]},\"415\":{\"h\":\"@EnableRedisHttpSession\",\"t\":[\"该注解已废弃，不用显式开启spring session\"]},\"416\":{\"h\":\"SpringHttpSessionConfiguration\",\"t\":[\"SpringHttpSessionConfiguration 会将自定义的所有SessionListener 封装为一个SessionEventHttpSessionListenerAdapter;\",\"SpringHttpSessionConfiguration 会初始化一个最核心的组件SessionRepositoryFilter, 该过滤器会拦截所有的http 请求, 解析并处理session。\"]},\"417\":{\"h\":\"RedisHttpSessionConfiguration继承SpringHttpSessionConfiguration\",\"t\":[\"注册RedisIndexedSessionRepository到容器中\",\"注册SessionRepositoryFilter到容器\"]},\"418\":{\"h\":\"SessionRepositoryFilter\",\"t\":[\"在springSecurityFilterChain之前，即多个安全过滤器(构成的filterProxy)之前 SessionRepositoryFilter 继承了OncePerRequestFilter，实现了doFilterInternal()，这个方法一个封装一个wrappedRequest，\",\"通过执行commitSession()保存session信息到redis。\"]},\"419\":{\"h\":\"RedisIndexedSessionRepository\",\"t\":[\"对FindByIndexNameSessionRepository仓库接口的实现，内部有RedisSession内部类，这里集成了security一些特性，对principle和session 做了处理。\"]},\"420\":{\"h\":\"Filter\"},\"421\":{\"h\":\"mvc\",\"t\":[\"1、使用spring boot提供的FilterRegistrationBean注册Filter\",\"public class MyFilter implements Filter{ @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"您已经进入过滤器\\\"); // 打印请求信息 HttpServletRequest request = (HttpServletRequest) servletRequest; System.out.println (\\\"------------- LogFilter 开始 -------------\\\"); System.out.println (\\\"请求地址: {} {}\\\", request.getRequestURL().toString(), request.getMethod()); System.out.println (\\\"远程地址: {}\\\", request.getRemoteAddr()); long startTime = System.currentTimeMillis(); System.out.println (\\\"------------- LogFilter 结束 耗时：{} ms -------------\\\", System.currentTimeMillis() - startTime); filterChain.doFilter(servletRequest,servletResponse); } @Override public void destroy() { } } @Configuration //定义此类为配置类,必须增加 public class FilterConfig { @Bean public FilterRegistrationBean myFilterRegistrationBean(){ FilterRegistrationBean filterRegistrationBean=new FilterRegistrationBean(new MyFilter()); //添加过滤器路径 filterRegistrationBean.addUrlPatterns(\\\"/user/*\\\"); filterRegistrationBean.addUrlPatterns(\\\"/login/*\\\"); return filterRegistrationBean; } } \",\"2、使用原生servlet注解定义Filter\",\"在启动类上面增加注解@ServletComponentScan\",\"在类的上方使用 @WebFilter 注解来创建Filter即可\",\"@WebFilter(urlPatterns = \\\"/myfilter\\\") @Component public class MyFilter implements Filter { @Override public void init(FilterConfig filterConfig) throws ServletException { } @Override public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException { System.out.println(\\\"您已经进入过滤器\\\"); filterChain.doFilter(servletRequest,servletResponse); } @Override public void destroy() { } } } \"]},\"422\":{\"h\":\"reactive\",\"t\":[\"@Component public class WhiteListAuthorizationFilter implements WebFilter { private final IgnoreUrlProperties ignoreUrlProperties; @Override public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) { ServerHttpRequest request = exchange.getRequest(); ServerHttpRequest.Builder mutate = request.mutate(); String path = request.getURI().getPath(); PathMatcher pathMatcher = new AntPathMatcher(); //白名单路径移除请求头认证信息 List<String> urls = ignoreUrlProperties.getWhites(); for (String url : urls) { if (pathMatcher.match(url, path)) { String token = request.getHeaders().getFirst(HttpHeaders.AUTHORIZATION); if(StringUtils.hasText(token) && !token.startsWith(\\\"Basic\\\")){ mutate.header(HttpHeaders.AUTHORIZATION+\\\"wt\\\", token); mutate.header(HttpHeaders.AUTHORIZATION, \\\"\\\"); } return chain.filter(exchange.mutate().request(mutate.build()).build()); } } return chain.filter(exchange); } } \"]},\"423\":{\"h\":\"ResponseBodyResultHandler\",\"t\":[\"可以自定义是否装饰响应结果\"]},\"424\":{\"h\":\"@Transaction如何生效\"},\"425\":{\"h\":\"spring-autoConfigure\"},\"426\":{\"h\":\"TransactionAutoConfiguration\"},\"427\":{\"h\":\"AopAutoConfiguration\",\"t\":[\"继承AspectJAutoProxyingConfiguration\",\"@EnableAspectJAutoProxy注册AnnotationAwareAspectJAutoProxyCreator代理后置处理器到容器中\"]},\"428\":{\"h\":\"spring-tx\"},\"429\":{\"h\":\"TransactionInterceptor\",\"t\":[\"继承TransactionAspectSupport，用于事务的开启和提交\",\"核心方法\",\"TransactionInterceptor的invoke\",\"TransactionInterceptor 的invokeWithinTransaction\",\"TransactionAspectSupport的invokeWithinTransaction，开启事务，提交事务\"]},\"430\":{\"h\":\"ProxyTransactionManagementConfiguration\",\"t\":[\"@Configuration(proxyBeanMethods = false) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public class ProxyTransactionManagementConfiguration extends AbstractTransactionManagementConfiguration { @Bean(name = TransactionManagementConfigUtils.TRANSACTION_ADVISOR_BEAN_NAME) @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public BeanFactoryTransactionAttributeSourceAdvisor transactionAdvisor( TransactionAttributeSource transactionAttributeSource, TransactionInterceptor transactionInterceptor) { BeanFactoryTransactionAttributeSourceAdvisor advisor = new BeanFactoryTransactionAttributeSourceAdvisor(); advisor.setTransactionAttributeSource(transactionAttributeSource); //设置要执行的advise拦截器 advisor.setAdvice(transactionInterceptor); if (this.enableTx != null) { advisor.setOrder(this.enableTx.<Integer>getNumber(\\\"order\\\")); } return advisor; } @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionAttributeSource transactionAttributeSource() { return new AnnotationTransactionAttributeSource(); } @Bean @Role(BeanDefinition.ROLE_INFRASTRUCTURE) public TransactionInterceptor transactionInterceptor(TransactionAttributeSource transactionAttributeSource) { TransactionInterceptor interceptor = new TransactionInterceptor(); interceptor.setTransactionAttributeSource(transactionAttributeSource); if (this.txManager != null) { interceptor.setTransactionManager(this.txManager); } return interceptor; } } \",\"BeanFactoryTransactionAttributeSourceAdvisor\"]},\"431\":{\"h\":\"spring代理对象的生成\"},\"432\":{\"h\":\"AnnotationAwareAspectJAutoProxyCreator(bean后置处理器)\",\"t\":[\"该类继承AbstractAutoProxyCreator,核心方法postProcessAfterInitialization，wrapIfNecessary\"]},\"433\":{\"h\":\"AbstractAutoProxyCreator的postProcessAfterInitialization\",\"t\":[\"public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) { if (bean != null) { Object cacheKey = getCacheKey(bean.getClass(), beanName); if (this.earlyProxyReferences.remove(cacheKey) != bean) { return wrapIfNecessary(bean, beanName, cacheKey); } } return bean; } \"]},\"434\":{\"h\":\"AbstractAutoProxyCreator的wrapIfNecessary\",\"t\":[\"判断bean是否有对应的建议器advisors，即是否为该类生成代理对象\",\"若类中方法上使用了@transactional注解，则会找到BeanFactoryTransactionAttributeSourceAdvisor，内部有对应的事务拦截器transactionInterceptor， 用于开启和提交事务\",\"protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) { if (StringUtils.hasLength(beanName) && this.targetSourcedBeans.contains(beanName)) { return bean; } if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) { return bean; } if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) { this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; } // Create proxy if we have advice. Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null); if (specificInterceptors != DO_NOT_PROXY) { this.advisedBeans.put(cacheKey, Boolean.TRUE); Object proxy = createProxy( bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean)); this.proxyTypes.put(cacheKey, proxy.getClass()); return proxy; } this.advisedBeans.put(cacheKey, Boolean.FALSE); return bean; } \"]},\"435\":{\"h\":\"AbstractAutoProxyCreator的createProxy\",\"t\":[\"创建代理工厂ProxyFactory，代理工厂的createAopProxy()会创建cglibAopProxy对象，调用cglibAopProxy的getProxy方法获取代理实例\",\"protected Object createProxy(Class<?> beanClass, @Nullable String beanName, @Nullable Object[] specificInterceptors, TargetSource targetSource) { if (this.beanFactory instanceof ConfigurableListableBeanFactory) { AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass); } ProxyFactory proxyFactory = new ProxyFactory(); proxyFactory.copyFrom(this); if (proxyFactory.isProxyTargetClass()) { // Explicit handling of JDK proxy targets and lambdas (for introduction advice scenarios) if (Proxy.isProxyClass(beanClass) || ClassUtils.isLambdaClass(beanClass)) { // Must allow for introductions; can't just set interfaces to the proxy's interfaces only. for (Class<?> ifc : beanClass.getInterfaces()) { proxyFactory.addInterface(ifc); } } } else { // No proxyTargetClass flag enforced, let's apply our default checks... if (shouldProxyTargetClass(beanClass, beanName)) { proxyFactory.setProxyTargetClass(true); } else { evaluateProxyInterfaces(beanClass, proxyFactory); } } Advisor[] advisors = buildAdvisors(beanName, specificInterceptors); proxyFactory.addAdvisors(advisors); proxyFactory.setTargetSource(targetSource); customizeProxyFactory(proxyFactory); proxyFactory.setFrozen(this.freezeProxy); if (advisorsPreFiltered()) { proxyFactory.setPreFiltered(true); } // Use original ClassLoader if bean class not locally loaded in overriding class loader ClassLoader classLoader = getProxyClassLoader(); if (classLoader instanceof SmartClassLoader && classLoader != beanClass.getClassLoader()) { classLoader = ((SmartClassLoader) classLoader).getOriginalClassLoader(); } return proxyFactory.getProxy(classLoader); \"]},\"436\":{\"h\":\"CglibAopProxy的getProxy\",\"t\":[\"创建enhancer,callbacks(即代理调用处理器集)\",\"createProxyClassAndInstance创建代理实例\",\"在执行代理实例对象的方法时会调用处理器的intercept方法进行处理\",\"若带有拦截器，会创建CglibMethodInvocation（继承ReflectiveMethodInvocation）递归调用处理\",\"最终执行切点方法invokeJoinpoint\"]},\"437\":{\"h\":\"spring单例对象的生成\"},\"438\":{\"h\":\"DefaultListableBeanFactory的preInstantiateSingletons方法\",\"t\":[\"根据beanDefinitionNames生成工厂bean还是普通bean,以及是否需提前生成实际单例对象，否则在依赖注入时根据工厂bean生成\",\"对生成的实现SmartInitializingSingleton接口的单例对象调用afterSingletonsInstantiated进行一些自定义处理\",\"public void preInstantiateSingletons() throws BeansException { if (logger.isTraceEnabled()) { logger.trace(\\\"Pre-instantiating singletons in \\\" + this); } // Iterate over a copy to allow for init methods which in turn register new bean definitions. // While this may not be part of the regular factory bootstrap, it does otherwise work fine. List<String> beanNames = new ArrayList<>(this.beanDefinitionNames); // Trigger initialization of all non-lazy singleton beans... for (String beanName : beanNames) { RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName); if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) { if (isFactoryBean(beanName)) { Object bean = getBean(FACTORY_BEAN_PREFIX + beanName); if (bean instanceof FactoryBean) { FactoryBean<?> factory = (FactoryBean<?>) bean; boolean isEagerInit; if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) { isEagerInit = AccessController.doPrivileged( (PrivilegedAction<Boolean>) ((SmartFactoryBean<?>) factory)::isEagerInit, getAccessControlContext()); } else { isEagerInit = (factory instanceof SmartFactoryBean && ((SmartFactoryBean<?>) factory).isEagerInit()); } if (isEagerInit) { getBean(beanName); } } } else { getBean(beanName); } } } // Trigger post-initialization callback for all applicable beans... for (String beanName : beanNames) { Object singletonInstance = getSingleton(beanName); if (singletonInstance instanceof SmartInitializingSingleton) { StartupStep smartInitialize = this.getApplicationStartup().start(\\\"spring.beans.smart-initialize\\\") .tag(\\\"beanName\\\", beanName); SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance; if (System.getSecurityManager() != null) { AccessController.doPrivileged((PrivilegedAction<Object>) () -> { smartSingleton.afterSingletonsInstantiated(); return null; }, getAccessControlContext()); } else { smartSingleton.afterSingletonsInstantiated(); } smartInitialize.end(); } } } \"]},\"439\":{\"h\":\"abstractBeanFactory的getBean、doGetBean方法\",\"t\":[\"优先从单例对象集singletonObjects、earlySingletonObjects、singletonFactories中取\",\"判断是否是单例，还是原型，还是其他，创建单例对象\",\"if (mbd.isSingleton()) { sharedInstance = getSingleton(beanName, () -> { try { return createBean(beanName, mbd, args); } catch (BeansException ex) { // Explicitly remove instance from singleton cache: It might have been put there // eagerly by the creation process, to allow for circular reference resolution. // Also remove any beans that received a temporary reference to the bean. destroySingleton(beanName); throw ex; } }); beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd); } \"]},\"440\":{\"h\":\"AbstractAutowireCapableBeanFactory的doCreateBean\",\"t\":[\"createBeanInstance\",\"populateBean 属性注入\",\"initializeBean 初始化 \",\"invokeAwareMethods \",\"BeanNameAware\",\"BeanClassLoaderAware\",\"BeanFactoryAware\",\"applyBeanPostProcessorsBeforeInitialization \",\"CommonAnnotationBeanPostProcessor的InitDestroyAnnotationBeanPostProcessor的postProcessBeforeInitialization方法\",\"invokeInitMethods \",\"afterPropertiesSet()\",\"initMethod\",\"applyBeanPostProcessorsAfterInitialization\"]},\"441\":{\"h\":\"CommonAnnotationBeanPostProcessor继承InitDestroyAnnotationBeanPostProcessor\",\"t\":[\"PostConstruct\",\"PreDestroy\",\"public CommonAnnotationBeanPostProcessor() { setOrder(Ordered.LOWEST_PRECEDENCE - 3); setInitAnnotationType(PostConstruct.class); setDestroyAnnotationType(PreDestroy.class); ignoreResourceType(\\\"javax.xml.ws.WebServiceContext\\\"); // java.naming module present on JDK 9+? if (jndiPresent) { this.jndiFactory = new SimpleJndiBeanFactory(); } } \"]},\"442\":{\"h\":\"ApplicationContextAwareProcessor\",\"t\":[\"用于在初始化注入相关信息environment,applicationContext到bean,在@AfterProperties之前执行\",\"在onRefresh的prepareBeanFactory方法中注册到bean工厂\"]},\"443\":{\"h\":\"内嵌tomcat启动\"},\"444\":{\"h\":\"ServletWebServerApplicationContext\"},\"445\":{\"h\":\"onRefresh\",\"t\":[\"protected void onRefresh() { super.onRefresh(); try { createWebServer(); } catch (Throwable ex) { throw new ApplicationContextException(\\\"Unable to start web server\\\", ex); } } \"]},\"446\":{\"h\":\"createWebServer\",\"t\":[\"获取web server 工厂 ServletWebServerFactory\",\"factory.getWebServer工厂生产webServer\",\"注册启停，优雅启停单例对象\",\"初始化属性资源initPropertySources\",\"private void createWebServer() { WebServer webServer = this.webServer; ServletContext servletContext = getServletContext(); if (webServer == null && servletContext == null) { StartupStep createWebServer = this.getApplicationStartup().start(\\\"spring.boot.webserver.create\\\"); ServletWebServerFactory factory = getWebServerFactory(); createWebServer.tag(\\\"factory\\\", factory.getClass().toString()); this.webServer = factory.getWebServer(getSelfInitializer()); createWebServer.end(); getBeanFactory().registerSingleton(\\\"webServerGracefulShutdown\\\", new WebServerGracefulShutdownLifecycle(this.webServer)); getBeanFactory().registerSingleton(\\\"webServerStartStop\\\", new WebServerStartStopLifecycle(this, this.webServer)); } else if (servletContext != null) { try { getSelfInitializer().onStartup(servletContext); } catch (ServletException ex) { throw new ApplicationContextException(\\\"Cannot initialize servlet context\\\", ex); } } initPropertySources(); } \"]},\"447\":{\"h\":\"selfInitialize\",\"t\":[\"初始化servletContext\",\"应用上下文、servletContext相互配置\",\"配置DispatcherServlet、过滤器filter,注册servlet和filter到容器上下文StandardContext中\",\"private void selfInitialize(ServletContext servletContext) throws ServletException { prepareWebApplicationContext(servletContext); registerApplicationScope(servletContext); WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(), servletContext); for (ServletContextInitializer beans : getServletContextInitializerBeans()) { beans.onStartup(servletContext); } } \"]},\"448\":{\"h\":\"prepareWebApplicationContext\",\"t\":[\"设置应用上下文到servletContext的属性中\",\"设置servletContext到应用上下文中\"]},\"449\":{\"h\":\"TomcatServletWebServerFactory\"},\"450\":{\"h\":\"getWebServer\",\"t\":[\"创建tomcat实例\",\"配置server service engine connector host\",\"service添加连接器connector\",\"连接器自定义\",\"添加引擎engine到service，添加host到engine\",\"配置engine\",\"添加额外的连接器\",\"准备上下文prepareContext\",\"getTomcatWebServer \",\"实例化TomcatWebServer\",\"构造器中调用初始化方法initialize\",\"public WebServer getWebServer(ServletContextInitializer... initializers) { if (this.disableMBeanRegistry) { Registry.disableRegistry(); } Tomcat tomcat = new Tomcat(); File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir(\\\"tomcat\\\"); tomcat.setBaseDir(baseDir.getAbsolutePath()); for (LifecycleListener listener : this.serverLifecycleListeners) { tomcat.getServer().addLifecycleListener(listener); } Connector connector = new Connector(this.protocol); connector.setThrowOnFailure(true); tomcat.getService().addConnector(connector); customizeConnector(connector); tomcat.setConnector(connector); tomcat.getHost().setAutoDeploy(false); configureEngine(tomcat.getEngine()); for (Connector additionalConnector : this.additionalTomcatConnectors) { tomcat.getService().addConnector(additionalConnector); } prepareContext(tomcat.getHost(), initializers); return getTomcatWebServer(tomcat); } \"]},\"451\":{\"h\":\"prepareContext\",\"t\":[\"在host下添加TomcatEmbeddedContext（实现StandardContext）上下文容器\",\"设置名称、路径、父类加载器、生命周期监听器、加载器WebappLoader（TomcatEmbeddedWebappClassLoader.class）\",\"添加生命周期监听器 FixContextListener StaticResourceConfigurer\",\"mergeInitializers合并上下文初始化器，session、参数相关\",\"使用上述初始化器配置上下文configureContext \",\"构造 TomcatStarter，\",\"addServletContainerInitializer添加servlet容器初始化器\",\"向pipeline添加value\",\"配置session、cookie处理器\",\"使用tomcatContextCustomizers（WebServerFactoryCustomizerBeanPostProcessor处理）对上下文进行自定义处理\",\"后置处理上下文postProcessContext\"]},\"452\":{\"h\":\"Tomcat\"},\"453\":{\"h\":\"getServer\",\"t\":[\"创建服务器实例\",\"初始化基础目录initBaseDir \",\"向服务器设置CatalinaBase、CatalinaHome\",\"添加一些系统属性catalina.base,catalina.base\",\"设置服务器端口\",\"向服务器添加service\"]},\"454\":{\"h\":\"TomcatWebServer\"},\"455\":{\"h\":\"initialize\",\"t\":[\"设置引擎engine实例ID\",\"获取容器上下文，添加生命周期监听器\",\"this.tomcat.start() 启动服务器，触发初始化监听器\",\"根据服务器状态做出相应操作\"]},\"456\":{\"h\":\"start\",\"t\":[\"由生命周期处理器，触发tomcat服务器延迟操作\",\"performDeferredLoadOnStartup 配置servlet、也可能在首次处理请求时，对servlet进行初始化\",\"public void start() throws WebServerException { synchronized (this.monitor) { if (this.started) { return; } try { addPreviouslyRemovedConnectors(); Connector connector = this.tomcat.getConnector(); if (connector != null && this.autoStart) { performDeferredLoadOnStartup(); } checkThatConnectorsHaveStarted(); this.started = true; logger.info(\\\"Tomcat started on port(s): \\\" + getPortsDescription(true) + \\\" with context path '\\\" + getContextPath() + \\\"'\\\"); } catch (ConnectorStartFailedException ex) { stopSilently(); throw ex; } catch (Exception ex) { PortInUseException.throwIfPortBindingException(ex, () -> this.tomcat.getConnector().getPort()); throw new WebServerException(\\\"Unable to start embedded Tomcat server\\\", ex); } finally { Context context = findContext(); ContextBindings.unbindClassLoader(context, context.getNamingToken(), getClass().getClassLoader()); } } } \"]},\"457\":{\"h\":\"LifecycleBase\",\"t\":[\"生命周期基类，子类继承该类，设置子类的状态\",\"主要用于StandardServer、StandardEngine、StandardHost StandardContext StandardWrapper等实例的启动及初始化\",\"start \",\"init \",\"initInternal\",\"startInternal\"]},\"458\":{\"h\":\"StandardContext\",\"t\":[\"startInternal内部启动，初始化servletContext\"]},\"459\":{\"h\":\"StandardService中MapperListener\",\"t\":[\"用于将host等容器信息注册到Mapper中\"]},\"460\":{\"h\":\"StandardService中的Mapper\",\"t\":[\"用于解析请求路径，转换为request中的mappingData\",\"mappingData包含该请求匹配的host、context等容器对象\"]},\"461\":{\"h\":\"tomcat处理请求过程\"},\"462\":{\"h\":\"ApplicationContext\"},\"463\":{\"h\":\"getRequestDispatcher\",\"t\":[\"根据路径或名称获取servlet以及构造请求分发器ApplicationDispatcher\"]},\"464\":{\"c\":[\"spring\"]},\"465\":{\"h\":\"gateway\"},\"466\":{\"h\":\"使用\",\"t\":[\"网关作为资源服务器对token进行校验，获取认证对象，对权限等进行校验。\"]},\"467\":{\"h\":\"security配置\",\"t\":[\"public class CenterResourceServerConfig { private final CenterTokenExtractor centerTokenExtractor; private final CenterOpaqueTokenIntrospector centerOpaqueTokenIntrospector; private final AuthorizationManager authorizationManager; private final CenterAccessDeniedHandler centerAccessDeniedHandler; private final CenterAuthenticationEntryPoint authenticationEntryPoint; private final IgnoreUrlProperties ignoreUrlProperties; private final WhiteListAuthorizationFilter whiteListAuthorizationFilter; private final static String SYS_API_SAVE_URI = \\\"/admin/sysApi/*/batch\\\"; private final static String SCOPE_SYS_API_SAVE = \\\"api-save\\\"; @Bean SecurityWebFilterChain securityFilterChain(ServerHttpSecurity httpSecurity) throws Exception{ httpSecurity.authorizeExchange() //构造一个路径及授权判断的映射的Entry对象 .pathMatchers(ArrayUtil.toArray(ignoreUrlProperties.getWhites(),String.class)).permitAll() .pathMatchers(SYS_API_SAVE_URI).hasAnyAuthority(SCOPE_SYS_API_SAVE) .anyExchange().access(authorizationManager) .and().exceptionHandling() //处理未授权 .accessDeniedHandler(centerAccessDeniedHandler) //未认证 .authenticationEntryPoint(authenticationEntryPoint) .and().csrf().disable(); httpSecurity.addFilterBefore(whiteListAuthorizationFilter, SecurityWebFiltersOrder.AUTHENTICATION); //资源服务器配置，获取token，校验token，及封装被认证的对象 httpSecurity.oauth2ResourceServer(oauth2 -> oauth2.opaqueToken(token->token.introspector(centerOpaqueTokenIntrospector)) .bearerTokenConverter(centerTokenExtractor) .authenticationEntryPoint(authenticationEntryPoint) .accessDeniedHandler(centerAccessDeniedHandler)); return httpSecurity.build(); } } \"]},\"468\":{\"h\":\"动态路由配置\",\"t\":[\"核心@Configuration的配置类gateConfig类，过滤器注册器bean注册过滤器（xssFilter跨站脚本攻击过滤器）,注册路由配置类到spring的ioc容器中\",\"路由配置类：\",\"1、注入redisTemplate（使用spring-boot-starter-data-redis操作redis数据库,核心redisTemplate的opsForValue()获取操作对象），从redis中获取网关路由配置信息的json格式，将其转为内部类集合List<ZuulRouteVO>遍历 2、实现RouteDefinitionRepository接口，重写getRouteDefinitions()，对路由进行java代码形式自定义配置，组成RouteDefinition（predicateDefinition（路由匹配）,filterDefinition（配置使用的过滤器如StripPrefix路径截取））集合，Flux.fromIterable(routeDefinitions)方法返回Flux<RouteDefinition>对象 \"]},\"469\":{\"h\":\"获取和校验token的时机\"},\"470\":{\"h\":\"在spring securityFilterChain中处理\"},\"471\":{\"h\":\"在dispatchHandler分发之后的网关过滤器中处理\",\"t\":[\"网关token验证：使用adminAccessFilter全局过滤器，登录token检查,每个服务在容器启动初始化时就做了如下操作:\",\"1、通过实现CommandLineRunner的AuthClientRunner开启定时任务获取服务公钥和用户公钥存放在UserAuthConfig和ServiceAuthConfig中,使用密钥对token解密 2、服务调用和网关调用时要先获取请求服务端token放在请求头中，被调用服务端对服务端token验证，获取被允许客户端 \",\"认证服务使用AuthServerRunner implements CommandLineRunner初始化用户和服务的公私密钥，放在KeyConfiguration\",\"adminAccessFilter全局过滤器:\",\"1. 实现globalFilter接口，配置忽略鉴权的路径@value注解的startWith 2. 核心serverWebChange(要过滤的数据),gatewayFilterChain（包含了过滤器集，以及下一个过滤器的索引） \",\"样例\",\" LinkedHashSet requiredAttribute = serverWebExchange.getRequiredAttribute(ServerWebExchangeUtils.GATEWAY_ORIGINAL_REQUEST_URL_ATTR); ServerHttpRequest request = serverWebExchange.getRequest(); String requestUri = request.getPath().pathWithinApplication().value(); log.info(\\\"check token and user permission url:{},{}\\\", requestUri,request.getMethod()); if (requiredAttribute != null) { Iterator<URI> iterator = requiredAttribute.iterator(); while (iterator.hasNext()) { URI next = iterator.next(); if (next.getPath().startsWith(zuulPrefix)) { requestUri = next.getPath().substring(zuulPrefix.length()); } } } \",\"从serverWebChange获取路径信息进行判断是否需鉴权，若不需要则转到下一个过滤器gatewayFilterChain.filter（），根据索引找到过滤器，创建下一个过滤器链对象，执行过滤器方法（传入要过滤的数据，下一个过滤器链）\",\" 要有建造者模式的思想 ServerHttpRequest.Builder mutate = request.mutate();//获取ServerHttpRequest的建造器 // 不进行拦截的地址 if (isStartWith(requestUri)) { ServerHttpRequest build = mutate.build();//使用request建造器构建ServerHttpRequest return gatewayFilterChain.filter(serverWebExchange.mutate().request(build).build()); } \",\"判断请求头中的token是否合法，公钥加密，私钥解密，私钥加密则用于身份认证\",\"最后gatewayFilterChain的filter()返回Mono\"]},\"472\":{\"h\":\"全局和局部过滤器\"},\"473\":{\"h\":\"原理\",\"t\":[\"核心serverWebchange是springgateway中的上下文,过滤器适配器，过滤器链，过滤器web处理器(gateway)，过滤器处理器适配器 派发处理器 默认web过滤器链 过滤器web处理器(server) webhander装饰器(ExceptionHandlingWebHandler异常处理) httpwebhandlerAdapter webserverManager\",\"FilteringWebHandler是过滤器的核心,它实现了webhandler接口，重写了handle方法\",\"它在实例化时会传入全局过滤器集初始化，loadFilters(globalFilters);使用过滤器适配器GatewayFilterAdapter进行过滤器包装，若实现了ordered接口使用OrderedGatewayFilter包装\",\"它内部有一个DefaultGatewayFilterChain静态内部类用于构建过滤器链对象\",\"重要的是handle方法，它传入ServerWebExchange，局部过滤器和全局过滤器加入到List集合排序，构建过滤器链过滤\",\"全局和局部过滤器按排序后的顺序执行\",\"样例\",\" @Override public Mono<Void> handle(ServerWebExchange exchange) { Route route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR); List<GatewayFilter> gatewayFilters = route.getFilters(); List<GatewayFilter> combined = new ArrayList<>(this.globalFilters); combined.addAll(gatewayFilters); // TODO: needed or cached? AnnotationAwareOrderComparator.sort(combined); if (logger.isDebugEnabled()) { logger.debug(\\\"Sorted gatewayFilterFactories: \\\" + combined); } return new DefaultGatewayFilterChain(combined).filter(exchange); } \",\"WebHttpHandlerBuilder构造httpWebHandlerAdapter \",\"httpWebHandlerAdapter是FilteringWebHandler上层类\",\"webhttpHandlerBuilder的build构建httpWebHandlerAdapter(包含filterWebhandler(dispatchhandler)(server),Exceptionwebhandler包装filterWebhandler)\",\"dispatchhandler找到RoutePredicateHandlerMapping，调用getHandlerInternal------>lookuproute，filterWebhandler(gateway)\",\"网关的入口ReactorHttpHandlerAdapter的apply方法：\",\"调用httpWebHandlerAdapter的handle方法：\",\"创建serverWebchange上下文\"]},\"474\":{\"c\":[\"spring\"]},\"475\":{\"h\":\"springCloud\"},\"476\":{\"h\":\"配置动态更新\",\"t\":[\"Spring提供了一种机制来自动更新被@ConfigurationProperties注解的Bean对象的属性值。 这个机制称为Spring Cloud Config，并且需要使用Spring Cloud Config Server和Spring Cloud Config Client来实现。\",\"Spring Cloud Config还提供了一种机制来自动刷新依赖该对象的其他Bean对象。这个机制称为Spring Cloud Config Client的Refresh Scope。\",\"引入spring-cloud相关依赖\",\"<dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-context</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-config</artifactId> </dependency> \",\"使用\",\"@ConfigurationProperties,只是更新了属性值，还是原来的单例对象\",\"@Value\",\"@RefreshScope 代理对象不变，消除缓存，重新创建原始对象\",\"@Service @RefreshScope public class AsyncHandleService { private final Executor executor; public AsyncHandleService(KafkaAsyncProperties kafkaAsyncProperties) { this.executor = new ThreadPoolExecutor(kafkaAsyncProperties.getCorePoolSize(), kafkaAsyncProperties.getMaxPoolSize(), kafkaAsyncProperties.getKeepAliveTime(), TimeUnit.MILLISECONDS,new ArrayBlockingQueue<>(kafkaAsyncProperties.getBlockQueueSize()), new ThreadPoolExecutor.CallerRunsPolicy()); } /** * 执行任务 */ public void execute(Runnable command) { executor.execute(command); } } \"]},\"477\":{\"h\":\"spring自动装配\"},\"478\":{\"h\":\"bean的注入\",\"t\":[\"参考\"]},\"479\":{\"h\":\"spring中的xml形式\",\"t\":[\"factory-bean、factory-method形式,\",\"分为静态和动态\",\"只有在spring中才有,它们是标签的属性，用于创建bean对象，需要参数的话使用constructor-arg元素来指定它的参数。\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <beans xmlns=\\\"http://www.springframework.org/schema/beans\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\\\"> <!--静态获取对象--> <bean id=\\\"staticStu\\\" class=\\\"yudaosourcecode.factorymethod.StuFactory\\\" factory-method=\\\"getStaticStu\\\"> <!--传入getStaticStu方法的参数--> <constructor-arg value=\\\"1\\\"/> </bean> <!--生成对象的工厂--> <bean id=\\\"stuFactory\\\" class=\\\"yudaosourcecode.factorymethod.StuFactory\\\"/> <!--动态获取对象--> <bean id=\\\"dynamicStu\\\" factory-bean=\\\"stuFactory\\\" factory-method=\\\"getDynamicStu\\\"> <!--传入getDynamicStu方法的参数--> <constructor-arg value=\\\"11\\\"/> </bean> </beans> \",\"set注入、构造器注入\",\"<beans> <bean id=\\\"myStudent\\\" class=\\\"com.bjpowernode.ba04.Student\\\"> <property name=\\\"name\\\" value=\\\"张三\\\"/> <property name=\\\"age\\\" value=\\\"20\\\"/> </bean> </beans> <bean id=\\\"cd_1\\\" class=\\\"com.zwq.ZiDongZhuangPei.BlankDisc\\\"> <constructor-arg value=\\\"告白气球\\\"/> <constructor-arg value=\\\"周杰伦\\\"/> <constructor-arg> <list> <value>黑色幽默</value> <value>可爱女人</value> <value>龙卷风</value> <value>反方向的钟</value> <value>星晴</value> </list> </constructor-arg> <constructor-arg> <list> <ref bean=\\\"Bd1\\\"/> <ref bean=\\\"Bd2\\\"/> </list> </constructor-arg> </bean> \",\"autowire属性byName,byType,no\",\"引用类型在赋值时需要\",\"<bean id=\\\"myStudent\\\" class=\\\"com.bjpowernode.ba04.Student\\\" autowire=\\\"byName\\\"> <property name=\\\"name\\\" value=\\\"张三\\\"/> <property name=\\\"age\\\" value=\\\"20\\\"/> <!-- <property name=\\\"school\\\" ref=\\\"mySchool\\\"/>--> </bean> <!--声明school对象--> <bean id=\\\"school\\\" class=\\\"com.bjpowernode.ba04.School\\\"> <property name=\\\"name\\\" value=\\\"南昌大学\\\"/> <property name=\\\"address\\\" value=\\\"北京海淀区\\\"/> </bean> \"]},\"480\":{\"h\":\"springboot中\",\"t\":[\"@Bean\",\"与上述XML注入类似，只不过使用注解方式\",\"FactoryBean\",\"使用FactoryBean的getObject获取对象\",\"public interface FactoryBean<T> { T getObject() throws Exception; //返回由FactoryBean创建的Bean实例 Class<T> getObjectType(); boolean isSingleton(); } \",\"<bean id=\\\"car\\\" class=\\\"com.baobaotao.factorybean.CarFactoryBean\\\"> <property name=\\\"carInfo\\\" value=\\\"法拉利,400,2000000\\\"/> </bean> \",\"@Component、@service等 @import ImportBeanDefinitionRegistrar\",\"public interface ImportBeanDefinitionRegistrar { default void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry, BeanNameGenerator importBeanNameGenerator) { registerBeanDefinitions(importingClassMetadata, registry); } } \"]},\"481\":{\"h\":\"spi机制\",\"t\":[\"SPI的全名为Service Provider Interface.\",\"java spi机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。\",\"面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，\",\"如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。\",\"java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，\",\"在模块化设计中这个机制尤其重要。\",\"java spi spring factories\",\"META-INF/spring.factories\",\"META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports\",\"两者都是spi机制的入口文件\",\"区别就是下面这个只是autoconfigurtion，而原本我们知道那个spring.factories则更强大，还可以把init初始化和监听器什么的加进去。\",\"案例\",\"JDBC驱动加载案例：利用Java的SPI机制，我们可以根据不同的数据库厂商来引入不同的JDBC驱动包；\",\"SpringBoot的SPI机制：我们可以在spring.factories中加上我们自定义的自动配置类，事件监听器或初始化器等；\"]},\"482\":{\"h\":\"入口\",\"t\":[\"以applicationContext为装配单位\",\"AbstractApplicationContext.class\",\"refresh方法 \",\"invokeBeanFactoryPostProcessors \",\"PostProcessorRegistrationDelegate\"]},\"483\":{\"h\":\"PostProcessorRegistrationDelegate\",\"t\":[\"bean工厂后置处理器委托器\",\"invokeBeanFactoryPostProcessors\",\"首先按优先级执行BeanDefinitionRegistryPostProcessor实现类中的postProcessBeanDefinitionRegistry方法 \",\"上下文中会优先注册默认ConfigurationClassPostProcessor到上下文的bean工厂的单例对象集中\",\"使用ConfigurationClassPostProcessor获取配置类的beandefinition，用于bean工厂初始化单例对象集\",\"再执行BeanDefinitionRegistryPostProcessor实现类中postProcessBeanFactory方法\",\"最后按优先级执行BeanFactoryPostProcessor实现类中的postProcessBeanFactory方法\"]},\"484\":{\"h\":\"BeanFactoryPostProcessor\",\"t\":[\"bean工厂后置处理器顶层接口\"]},\"485\":{\"h\":\"BeanDefinitionRegistryPostProcessor\",\"t\":[\"beandeinition注册的后置处理器接口\"]},\"486\":{\"h\":\"ConfigurationClassPostProcessor\",\"t\":[\"它是BeanFactoryPostProcessor，实现上述接口，用于项目启动处理配置类\",\"postProcessBeanDefinitionRegistry\",\"Derive further bean definitions from the configuration classes in the registry\",\"用于从配置类推导出更多的beandefinition\",\"配置类解析的入口是启动类,即来源类\",\"parser.parse(candidates);会将@component等注解的类识别为配置类ConfigurationClass\",\"ConfigurationClassBeanDefinitionReader配置类beandefinition读取器，从配置类中读取beandefinition\"]},\"487\":{\"h\":\"ConfigurationClassParser\",\"t\":[\"以下是一个递归操作方法调用流程，用于构建ConfigurationClass，它包含beanMethod等信息,以便使用ConfigurationClass集合构建BeanDefinition对象\",\"parse\",\"processConfigurationClass\",\"doProcessConfigurationClass\"]},\"488\":{\"h\":\"doProcessConfigurationClass\",\"t\":[\"处理来源/启动类，是否有@componentScan,@Import,@ImportResource,@Bean注解\",\"@componentScan\",\"从启动类包开始扫描组件BeanDefinition,并递归构造BeanDefinition的confiiguratonClass,递归处理@import，@componentScan，@Bean\",\"@Import\"]},\"489\":{\"h\":\"processImports\",\"t\":[\"ImportBeanDefinitionRegistrar\",\"ImportSelector\",\"如果导入的类不是上述两种类型，会当作@ConfigurationClass处理\"]},\"490\":{\"h\":\"DeferredImportSelectorHandler\",\"t\":[\"它是ConfigurationClassParser内部类，导入选择器处理器\",\"public void process() { List<DeferredImportSelectorHolder> deferredImports = this.deferredImportSelectors; this.deferredImportSelectors = null; try { if (deferredImports != null) { DeferredImportSelectorGroupingHandler handler = new DeferredImportSelectorGroupingHandler(); deferredImports.sort(DEFERRED_IMPORT_COMPARATOR); deferredImports.forEach(handler::register); handler.processGroupImports(); } } finally { this.deferredImportSelectors = new ArrayList<>(); } } \"]},\"491\":{\"h\":\"DeferredImportSelectorGroupingHandler\",\"t\":[\"对导入选择器分组，对导入选择器组进行处理，这里有递归导入处理\",\"grouping.getImports()\",\"获取factories和imports文件中的配置类\",\"public void processGroupImports() { for (DeferredImportSelectorGrouping grouping : this.groupings.values()) { Predicate<String> exclusionFilter = grouping.getCandidateFilter(); grouping.getImports().forEach(entry -> { ConfigurationClass configurationClass = this.configurationClasses.get(entry.getMetadata()); try { //递归构建配置类 processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter), Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)), exclusionFilter, false); } catch (BeanDefinitionStoreException ex) { throw ex; } catch (Throwable ex) { throw new BeanDefinitionStoreException( \\\"Failed to process import candidates for configuration class [\\\" + configurationClass.getMetadata().getClassName() + \\\"]\\\", ex); } }); } } \"]},\"492\":{\"h\":\"DeferredImportSelectorGrouping\",\"t\":[\"导入选择器组对象，存放导入选择器DeferredImportSelector，及组处理器AutoConfigurantionImportSelector中的AutoConfigurationGroup\"]},\"493\":{\"h\":\"ImportSelector\",\"t\":[\"顶层导入选择器接口,用于自动装配bean到容器中\",\"AutoConfigurantionImportSelector\",\"ImportAutoConfigurantionImportSelector\"]},\"494\":{\"h\":\"AutoConfigurantionImportSelector\",\"t\":[\"内部类AutoConfigurationGroup\",\"DeferredImportSelectorGrouping中的组处理器\",\"导入选择器组处理器，处理组中的导入选择器\",\"getCandidateConfigurations\",\"获取候选自动配置autoConfiguration\",\"获取factories文件和import文件中配置类名称\",\"//加载factories和imports文件中的自动配置类 protected List<String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List<String> configurations = new ArrayList<>( SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader())); ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add); Assert.notEmpty(configurations, \\\"No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you \\\" + \\\"are using a custom packaging, make sure that file is correct.\\\"); return configurations; } \"]},\"495\":{\"h\":\"@Indexed\",\"t\":[\"META-INF/spring.components ClassPathBeanDefinitionScanner doScan CandidateComponentsIndexLoader doLoadIndex ClassPathScanningCandidateComponentProvider findCandidateComponents\"]},\"496\":{\"h\":\"autowire\",\"t\":[\"获取非简单属性，即除了String的所有引用类型\"]},\"497\":{\"h\":\"byType\",\"t\":[\"属性名称\",\"属性描述,即设置属性的方法\"]},\"498\":{\"h\":\"byName\",\"t\":[\"属性名称\"]},\"499\":{\"c\":[\"spring\"]},\"500\":{\"h\":\"Webflux\",\"t\":[\"Reactor stream api 规范\",\"reactor框架\",\"webflux基于reactor的响应式web框架，基于事件驱动通知的web框架\",\"核心\",\"充分利用CPU，提高单位时间内的吞吐量。当一个请求发出，不用一直等待数据的返回，而是处理其他任务，等数据准备好，再通过事件通知方式处理。\",\"发布和订阅的思想，不能有阻塞操作\",\"构造存放多个回调方法,当得到元素，再执行回调方法处理，而不是以往的按顺序同步执行方法\"]},\"501\":{\"h\":\"webHandler\"},\"502\":{\"h\":\"HttpHandler\"},\"503\":{\"h\":\"响应式项目初始化\",\"t\":[\"内嵌web服务器 netty\"]},\"504\":{\"h\":\"WebFluxAutoConfiguration\",\"t\":[\"DelegatingWebFluxConfiguration 、WebFluxConfigurationSupport\",\"注册DispatcherHandler到容器中\"]},\"505\":{\"h\":\"HttpHandlerAutoConfiguration\",\"t\":[\"注册httpHandler接口的实现类HttpWebHandlerAdapter到容器中,内部包含webHandler接口的实现类DispatcherHandler(web处理器)，以及相应web过滤器\",\"public class HttpHandlerAutoConfiguration { @Configuration(proxyBeanMethods = false) public static class AnnotationConfig { private final ApplicationContext applicationContext; public AnnotationConfig(ApplicationContext applicationContext) { this.applicationContext = applicationContext; } @Bean public HttpHandler httpHandler(ObjectProvider<WebFluxProperties> propsProvider) { HttpHandler httpHandler = WebHttpHandlerBuilder.applicationContext(this.applicationContext).build(); WebFluxProperties properties = propsProvider.getIfAvailable(); if (properties != null && StringUtils.hasText(properties.getBasePath())) { Map<String, HttpHandler> handlersMap = Collections.singletonMap(properties.getBasePath(), httpHandler); return new ContextPathCompositeHandler(handlersMap); } return httpHandler; } } } \"]},\"506\":{\"h\":\"ReactiveWebServerApplicationContext\"},\"507\":{\"h\":\"createWebServer方法\",\"t\":[\"使用webServerManager创建web服务器\"]},\"508\":{\"h\":\"NettyWebServer\"},\"509\":{\"h\":\"HttpServer\",\"t\":[\"onStateChange方法，是处理connection请求的入口\",\"static final class HttpServerHandle implements ConnectionObserver { public void onStateChange(Connection connection, State newState) { if (newState == HttpServerState.REQUEST_RECEIVED) { try { if (log.isDebugEnabled()) { log.debug(format(connection.channel(), \\\"Handler is being applied: {}\\\"), handler); } HttpServerOperations ops = (HttpServerOperations) connection; Publisher<Void> publisher = handler.apply(ops, ops); Mono<Void> mono = Mono.deferContextual(ctx -> { ops.currentContext = Context.of(ctx); return Mono.fromDirect(publisher); }); if (ops.mapHandle != null) { mono = ops.mapHandle.apply(mono, connection); } mono.subscribe(ops.disposeSubscriber()); } catch (Throwable t) { log.error(format(connection.channel(), \\\"\\\"), t); //\\\"FutureReturnValueIgnored\\\" this is deliberate connection.channel() .close(); } } } } \"]},\"510\":{\"h\":\"核心类\"},\"511\":{\"h\":\"ReactorHttpHandlerAdapter\"},\"512\":{\"h\":\"HttpWebHandlerAdapter\"},\"513\":{\"h\":\"DispatcherHandler\",\"t\":[\"web处理器，类似于servlet的dispatcherServlet,实现了WebHandler接口\",\"public class DispatcherHandler implements WebHandler, PreFlightRequestHandler, ApplicationContextAware { @Override public Mono<Void> handle(ServerWebExchange exchange) { //资源路径和资源处理器接口映射 if (this.handlerMappings == null) { return createNotFoundError(); } if (CorsUtils.isPreFlightRequest(exchange.getRequest())) { return handlePreFlight(exchange); } return Flux.fromIterable(this.handlerMappings) .concatMap(mapping -> mapping.getHandler(exchange)) .next() .switchIfEmpty(createNotFoundError()) .flatMap(handler -> invokeHandler(exchange, handler)) .flatMap(result -> handleResult(exchange, result)); } } \"]},\"514\":{\"h\":\"方法\"},\"515\":{\"h\":\"doOnSubscribe\"},\"516\":{\"h\":\"onSubscribe\"},\"517\":{\"h\":\"doOnEach\"},\"518\":{\"h\":\"doOnNext\"},\"519\":{\"h\":\"OnNext\"},\"520\":{\"h\":\"doAfterNext\"},\"521\":{\"h\":\"doOnComplete\"},\"522\":{\"h\":\"OnComplete\"},\"523\":{\"h\":\"then\"},\"524\":{\"h\":\"Flux.create\"},\"525\":{\"h\":\"FluxSink\"},\"526\":{\"h\":\"webflux执行流程\",\"t\":[\"管道与管道之间的交互关系事先建立完成，在订阅时处理\",\"在执行创建Flux对象及链式调用方法返回最终flux对象时，每一个新的flux对象都记录旧的flux对象\",\"在执行订阅方法后，向上反馈订阅信息，在每一个flux对象中记录订阅者信息，最终反馈到数据发出的起点处，\",\"对当前最上级发出元素，执行订阅者的处理方法，最终返回对象\",\"在订阅处理方法中又可以创建一系列管道，即上述流程\"]},\"527\":{\"h\":\"执行subscribe流程\",\"t\":[\"递归将订阅对象subscriber信息一级一级节点向上传递，一直传递到最上面，每一级节点创建当级订阅对象，\",\"若节点有上级节点，则将当前节点的订阅对象传递构造上一级的订阅对象\",\"subscribe\",\"调用subscribeOrReturn方法，返回订阅信息，若存在父节点资源，递归构建订阅信息subscriber\",\"subscribeOrReturn方法\",\"返回订阅信息\",\"onSubscribe\",\"订阅完成触发每一级的onSubscribe方法，一级一级节点往下传递订阅信息subscription。\",\"构造每一级的已订阅的队列信息\",\"subscribeNext\"]},\"528\":{\"h\":\"Interface\"},\"529\":{\"h\":\"Subscription\",\"t\":[\"request\",\"用于订阅者向发布者请求元素\",\"cancel\"]},\"530\":{\"h\":\"Subscriber\",\"t\":[\"public interface Subscriber<T> { //已订阅，也可通过request发起可处理需求 public void onSubscribe(Subscription s); //对订阅信息处理 public void onNext(T t); public void onError(Throwable t); //表示订阅已处理完成 public void onComplete(); } \"]},\"531\":{\"h\":\"Publisher\",\"t\":[\"public interface Publisher<T> { public void subscribe(Subscriber<? super T> s); } \"]},\"532\":{\"h\":\"CorePublisher\"},\"533\":{\"h\":\"OptimizableOperator\",\"t\":[\"继承CorePublisher接口，将递归订阅转化为循环订阅\"]},\"534\":{\"h\":\"Mono\"},\"535\":{\"h\":\"subscribe方法\",\"t\":[\"public final void subscribe(Subscriber<? super T> actual) { ////核心订阅者和发布者，先将订阅转为核心，执行subscribeReturn方法 CorePublisher publisher = Operators.onLastAssembly(this); CoreSubscriber subscriber = Operators.toCoreSubscriber(actual); try { if (publisher instanceof OptimizableOperator) { OptimizableOperator operator = (OptimizableOperator) publisher; while (true) { subscriber = operator.subscribeOrReturn(subscriber); if (subscriber == null) { // null means \\\"I will subscribe myself\\\", returning... return; } OptimizableOperator newSource = operator.nextOptimizableSource(); if (newSource == null) { publisher = operator.source(); break; } operator = newSource; } } publisher.subscribe(subscriber); } catch (Throwable e) { Operators.reportThrowInSubscribe(subscriber, e); return; } } \"]},\"536\":{\"h\":\"FlatMap方法\",\"t\":[\"对上个节点发出的元素，做处理后再发出\"]},\"537\":{\"h\":\"类的源码分析\",\"t\":[\"创建新的Mono对象\",\"MonoFlatMap.FlatMapMain\",\"FlatMapMain订阅者对象\",\"订阅完成后，触发执行FlatMapMain的onSubscribe方法，通过上级给的Subscription的request方法向上级请求信息，上级订阅者传递信息到下游节点\",\"MonoFlatMap.FlatMapInner\",\"FlatMapInner内部消费者，在创建FlatMapMain订阅者对象时创建内部对象\",\"主要用于在执行onNext方法，执行lambda处理方法返回新的Mono对象，对新的对象重新订阅\",\"//FlatMapMain FlatMapMain(CoreSubscriber<? super R> subscriber, Function<? super T, ? extends Mono<? extends R>> mapper) { super(subscriber); this.mapper = mapper; //主要用于在执行onNext方法，执行lambda处理方法返回新的Mono对象，对新的对象重新订阅 this.second = new FlatMapInner<>(this); } //FlatMapInner public void onNext(R t) { if (done) { Operators.onNextDropped(t, parent.currentContext()); return; } done = true; this.parent.complete(t); } \"]},\"538\":{\"h\":\"thenMany方法\",\"t\":[\"返回表示在Mono完成后，新的Flux发布者对象\"]},\"539\":{\"h\":\"flux方法\",\"t\":[\"转换Mono到Flux\"]},\"540\":{\"h\":\"zip方法\",\"t\":[\"将三个Mono转为一个Mono\"]},\"541\":{\"h\":\"defer\"},\"542\":{\"h\":\"deferWithContext\",\"t\":[\"从下游订阅者获取上下文\"]},\"543\":{\"h\":\"subscribeContext ContextWrite\",\"t\":[\"产生上下文在订阅的时候传递给上游\"]},\"544\":{\"h\":\"Flux\"},\"545\":{\"h\":\"FlatMap方法\",\"t\":[\"与上述Mono逻辑类似\"]},\"546\":{\"h\":\"defer方法\",\"t\":[\"延迟创建publisher，在subscribe时创建\"]},\"547\":{\"h\":\"take方法\",\"t\":[\"从Flux获取指定数量的元素\"]},\"548\":{\"h\":\"concat方法\",\"t\":[\"连接发布器列表，即通过顺序订阅第一个源，然后等待它完成，然后再订阅下一个源，以此类推， 直到最后一个源完成。任何错误都将立即中断序列并向下转发。\"]},\"549\":{\"h\":\"then方法\",\"t\":[\"返回表示Flux终止的新的Mono对象\"]},\"550\":{\"h\":\"fromIterable方法\",\"t\":[\"将列表元素转为flux流管道\"]},\"551\":{\"h\":\"as方法\",\"t\":[\"将flux转为另一类型\"]},\"552\":{\"h\":\"singleOrEmpty方法\",\"t\":[\"若Flux为空或单个元素，则成功返回Mono对象，否则报错\"]},\"553\":{\"h\":\"buffer方法\",\"t\":[\"将收到的元素转为list发出\"]},\"554\":{\"h\":\"count\",\"t\":[\"统计数量，当处理完成后发出\"]},\"555\":{\"h\":\"collectList\",\"t\":[\"将flux转为list类型Mono\"]},\"556\":{\"h\":\"next\",\"t\":[\"获取flux中第一个元素，返回Mono对象\",\"Mono\",\"public final void subscribe(Subscriber<? super T> actual) { CorePublisher publisher = Operators.onLastAssembly(this); //获取订阅者 CoreSubscriber subscriber = Operators.toCoreSubscriber(actual); try { if (publisher instanceof OptimizableOperator) { OptimizableOperator operator = (OptimizableOperator) publisher; while (true) { subscriber = operator.subscribeOrReturn(subscriber); if (subscriber == null) { // null means \\\"I will subscribe myself\\\", returning... return; } OptimizableOperator newSource = operator.nextOptimizableSource(); if (newSource == null) { publisher = operator.source(); break; } operator = newSource; } } //FluxJust buffer publisher.subscribe(subscriber); } catch (Throwable e) { Operators.reportThrowInSubscribe(subscriber, e); return; } } \",\"FluxJust\",\"@Override public void subscribe(final CoreSubscriber<? super T> actual) { actual.onSubscribe(Operators.scalarSubscription(actual, value, \\\"just\\\")); } \",\"FluxBuffer\",\"public void onSubscribe(Subscription s) { if (Operators.validate(this.s, s)) { this.s = s; actual.onSubscribe(this); } } \",\"FluxMapMain核心订阅者信息\",\"public void onSubscribe(Subscription s) { if (Operators.validate(this.s, s)) { this.s = s; actual.onSubscribe(this); s.request(Operators.unboundedOrPrefetch(maxConcurrency)); } } \"]},\"557\":{\"h\":\"Context\",\"t\":[\"响应式编程无法在线程局部变量中存放用户信息，需要构建订阅的上下文Context的内容(键值对的形式)传递到上游发布者\",\"public class WebFluxLocaleFilter implements WebFilter { @Override @NonNull public Mono<Void> filter(@NonNull ServerWebExchange exchange, WebFilterChain chain) { return chain .filter(exchange) .as(LocaleUtils::transform) .subscriberContext(LocaleUtils.useLocale(getLocaleContext(exchange))); } public Locale getLocaleContext(ServerWebExchange exchange) { String lang = exchange.getRequest() .getQueryParams() .getFirst(\\\":lang\\\"); if (StringUtils.hasText(lang)) { return Locale.forLanguageTag(lang); } Locale locale = exchange.getLocaleContext().getLocale(); if (locale == null) { return Locale.getDefault(); } return locale; } public static Mono<Locale> currentReactive() { return Mono .subscriberContext() .map(ctx -> ctx.getOrDefault(Locale.class, DEFAULT_LOCALE)); } } \"]},\"558\":{\"h\":\"响应式事务\",\"t\":[\"事务配置 r2dbc配置 aop配置\"]},\"559\":{\"h\":\"r2dbc\",\"t\":[\"ConnectionFactoryConfigurations\",\"R2dbcTransactionManagerAutoConfiguration\",\"ConnectionPool 包含ConnectionFactory、ConnectionPoolConfiguration\",\"ConnectionFactory\",\"R2dbcTransactionManager\"]},\"560\":{\"c\":[\"spring\"]},\"561\":{\"h\":\"devops\",\"t\":[\"DevOps 强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理， 从而更快、更频繁地交付更稳定的软件。\",\"development\",\"operation\",\"quality assurance\"]},\"562\":{\"h\":\"ci/cd 流水线\",\"t\":[\"核心: 自动化\",\"持续集成\",\"自动编译、构建打包、部署、测试。 根据测试结果，我们可以确定新代码和原有代码能否正确地集成在⼀起。\",\"持续交付\",\"频繁地将软件的新版本，交付给质量团队或者⽤户，以供评审。如果评审通过，代码就进⼊⽣产阶段。\",\"持续部署\",\"代码在任何时刻都是可部署的，可以进⼊⽣产阶段。 评审结束后，部署到生产环境\"]},\"563\":{\"h\":\"自动化工具\"},\"564\":{\"h\":\"jenkins\",\"t\":[\"拉取代码构建，打成jar包，构建镜像，推送到远程仓库(jenkinsFile实现持续集成)\",\"svn拉取代码构建打jar包推送到gitlab仓库\"]},\"565\":{\"h\":\"gitlab\",\"t\":[\"根据提交记录自动触发 使用其内部集成的持续集成工具，构建镜像、部署、推送远程仓库\"]},\"566\":{\"h\":\"docker-compose\",\"t\":[\"管理应用的多个容器，即应用容器化部署 启动，停止容器\"]},\"567\":{\"h\":\"harbor\",\"t\":[\"远程镜像服务器 以项目形式管理镜像\"]},\"568\":{\"h\":\"groovy script\"},\"569\":{\"h\":\"jmeter压测\"},\"570\":{\"h\":\"apiFox\"},\"571\":{\"c\":[\"web\"]},\"572\":{\"h\":\"async\"},\"573\":{\"h\":\"task\",\"t\":[\"Callable\",\"Runnable\",\"FutureTask\"]},\"574\":{\"h\":\"Future\",\"t\":[\"CompletableFuture\"]},\"575\":{\"h\":\"CompletableFuture\",\"t\":[\"method\",\"complete\",\"completeExceptionally\",\"get\"]},\"576\":{\"h\":\"camunda\"},\"577\":{\"h\":\"表\"},\"578\":{\"h\":\"元数据表GE RE\",\"t\":[\"ACT_RE_DEPLOYMENT\",\"部署记录表\",\"ACT_GE_BYTEARRAY\",\"流程元数据表，包含XML信息\",\"ACT_RE_PROCDEF\",\"流程定义表\"]},\"579\":{\"h\":\"历史表HI\",\"t\":[\"ACT_HI_PROCINST\",\"存放流程实例记录\",\"ACT_HI_TASKINST\",\"存放流程实例的任务记录\",\"ACT_HI_ACTINST\",\"流程实例所有节点记录，开始、结束、任务节点\"]},\"580\":{\"h\":\"运行表RU\",\"t\":[\"ACT_RU_EXECUTION\",\"流程实例表\",\"ACT_RU_IDENTITYLINK\",\"负责处理任务的审批人或候选人\",\"ACT_RU_TASK\",\"当前待执行的任务表\"]},\"581\":{\"h\":\"基本使用\"},\"582\":{\"h\":\"表关系\",\"t\":[\"act_re_procdef\",\"act_hi_procinst\",\"act_hi_actinst\",\"act_hi_taskinst\",\"act_ru_task\",\"act_ru_identitylink\"]},\"583\":{\"h\":\"流程的表数据创建过程\",\"t\":[\"部署流程，act_re_procdef中创建流程定义\",\"启动流程，act_hi_procinst中创建流程实例\",\"创建代办任务，在act_ru_task、act_hi_actinst、act_hi_taskinst创建节点实例\",\"完成代办任务，删除当前代办任务，更新历史活动表和任务表的任务状态和结束时间，创建下一个代办任务\",\"流程结束，更新历史流程实例表状态或结束时间\"]},\"584\":{\"h\":\"Modeler\",\"t\":[\"model创建审批流程图\",\"配置用户任务节点\",\"给任务节点配置审批人及处理监听器\",\"给节点任务配置创建或完成任务监听器\",\"使用${变量}或${表达式}的形式配置候选人，如${initial}、${userService.getRole(\\\"role\\\")}\"]},\"585\":{\"h\":\"spring boot\",\"t\":[\"引入jar包\",\"// gradle project(':learning-research') { dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.15.0' implementation 'mysql:mysql-connector-java' implementation 'org.springframework.boot:spring-boot-starter-jdbc' implementation 'junit:junit:4.13.2' implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.2' } } \",\"流程部署\",\"resource文件夹中创建processes文件夹存放bpmn流程XML\",\"repositoryservice加载XML文件部署流程\",\"启动流程\",\"runtimeService创建流程实例，配置流程变量\",\"创建第一个代办任务\",\"执行流程实例中的节点任务\",\"通过代理人及候选代理人查询代办任务\",\"设置任务处理人\",\"处理任务，触发任务监听器，执行具体任务操作\"]},\"586\":{\"h\":\"任务的流转处理\",\"t\":[\"前一个任务节点处理完成，同时创建第二个代办任务\",\"任务处理时要设置处理意见，同意还是驳回，从而决定任务的流向\",\"任务流向上的表达式\"]},\"587\":{\"h\":\"监听器\",\"t\":[\"任务监听器\",\"执行监听器\"]},\"588\":{\"h\":\"接口方式\",\"t\":[\"TaskListener\",\"ExecutionListener\",\"实现上述接口,实现notify方法\"]},\"589\":{\"h\":\"spring事件总线\",\"t\":[\"使用spring事件机制，即@EventListener注解，使用条件表达式表示处理某一任务的create或complete事件\",\"示例\",\"@Component class MyTaskListener { @EventListener(condition=\\\"#taskDelegate.eventName=='create' && #taskDelegate.taskDefinitionKey=='task_confirm'\\\") public void onTaskEvent(DelegateTask taskDelegate) { // 处理被task_confirm任务触发的任务事件 } } \",\"开启spring事件配置\",\"camunda.bpm.eventing.execution=true camunda.bpm.eventing.history=true camunda.bpm.eventing.task=true \",\"这些属性分别控制执行、历史事件和任务的三个事件流。\"]},\"590\":{\"c\":[\"web\"]},\"591\":{\"h\":\"配置\"},\"592\":{\"h\":\"获取项目目录的方式\",\"t\":[\"//获取项目路径 System.getProperty(\\\"user.dir\\\") //获取Jar包路径 String path4 = Main.class.getProtectionDomain().getCodeSource().getLocation().getFile(); String path4_1 = Main.class.getProtectionDomain().getCodeSource().getLocation().getPath() //获取Jar包中指定资源的路径 Main.class.getClassLoader().getResource(\\\"hello.text\\\").getFile(); \"]},\"593\":{\"h\":\"properties或yaml配置文件加载优先级\",\"t\":[\"第一种是在jar包的同一目录下建一个config文件夹，然后把配置文件放到这个文件夹下； 第二种是直接把配置文件放到jar包的同级目录； 第三种在classpath下建一个config文件夹，然后把配置文件放进去； 第四种是在classpath下直接放配置文件\",\"注意点\",\"spring.config.location配置配置文件扫描路径,否则使用默认\",\"spring.config.name配置扫描的文件名，否则使用默认application\",\"默认查询位置DEFAULT_SEARCH_LOCATIONS = \\\"classpath:/,classpath:/config/,file:./,file:./config/*/,file:./config/\",\"类路径下和类路径config下同名配置文件，config下的生效\",\"按优先级顺序排列属性配置对象，按顺序查找,存在则直接返回属性值，否则在下一个配置对象查找\",\"非活动profile\",\"当同一个配置属性在bootstrap.properties和bootstrap.yml文件中都存在时，那么properties中的配置会被加载，而忽略yml文件中的配置（即优先级高的配置覆盖优先级低的配置），不同配置相互互补。此处application(.properties/yml)同理。\",\"但当同一配置在bootstrap.properties和application.properties中都存在时，那么虽然优先加载bootstrap.properties但是会被applicatioin.properties中的配置覆盖，此时则变成了低优先级覆盖高优先的配置，所以网上很多文章所说的高优先级覆盖低优先级其实是不严谨的。\",\"不同的配置会进行互补操作，即SpringBoot会读取全部的配置文件，加载所有不同的配置项，汇成一个总的配置。\",\"活动profile\",\"综上此时的加载优先级变为了bootstrap-dev.yml -> bootstrap.properties -> application-dev.yml ->application.properties。且同属性配置的覆盖问题和之前一样，在同为bootstrap或同为application的情况下，优先级高的覆盖优先级低的。但当同时存在bootstrap和application时后者仍会覆盖前者中的配置。\",\"举例1：假如此时只有bootstrap-dev.yml 和bootstrap.properties且存在相同配置，则使用bootstrap-dev.yml中的配置，此时遵循高优先级覆盖低优先级。\",\"举例2：假如此时有bootstrap-dev.yml 、bootstrap.properties及application.properties且存在相同配置，则使用application.properties中的配置，遵循application覆盖bootstrap原则，同样此时变成了低优先级覆盖高优先级。\"]},\"594\":{\"h\":\"静态资源路径配置\",\"t\":[\"默认路径 /**\",\"classpath:/public\",\"classpath:/static\",\"classpath:/resources\",\"classpath:/META-INF/resources\",\"全局配置,覆盖springboot默认配置\",\"spring: # 配置静态资源访问前缀 mvc: static-path-pattern: /res/** # 配置静态资源路径 web: resources: static-locations: classpath:/123/ \",\"追加资源路径配置\",\"public class WebConfig implements WebMvcConfigurer{ public void addResourceHandlers(ResourceHandlerRegistry registry) { registry.addResourceHandler(new String[]{\\\"/jmreport/desreport_/**\\\"}).addResourceLocations(new String[]{\\\"classpath:/static/jmreport/desreport_/\\\"}); registry.addResourceHandler(new String[]{\\\"/jmreport/img/**\\\"}).addResourceLocations(new String[]{\\\"file:\\\" + this.jmReportUploadConfig.getPath().getUpload() + \\\"//\\\"}); } } \"]},\"595\":{\"h\":\"数据库及连接池配置\",\"t\":[\"spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://${MYSQL-HOST:10.142.51.150}:${MYSQL-PORT:1170}/${MYSQL-DB:baiyin}?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai&allowPublicKeyRetrieval=true username: root password: ${MYSQL-PASSWORD:mysql_Techsel2o19} \"]},\"596\":{\"h\":\"log\",\"t\":[\"# 日志配置 debug<info<warn<Error<Fatal logging: level: org.springframework: warn com.alibaba.nacos: warn com.alibaba.druid.pool: warn com.techsel: DEBUG org.springframework.security: DEBUG config: classpath:logback.xml \",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <configuration scan=\\\"true\\\" scanPeriod=\\\"60 seconds\\\" debug=\\\"false\\\"> <!-- 日志存放路径 --> <property name=\\\"log.path\\\" value=\\\"./logs\\\" /> <!-- 日志输出格式 --> <property name=\\\"console.log.pattern\\\" value=\\\"%red(%d{yyyy-MM-dd HH:mm:ss}) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger{36}%n) - %msg%n\\\"/> <property name=\\\"log.pattern\\\" value=\\\"%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n\\\"/> <!-- 控制台输出 --> <appender name=\\\"console\\\" class=\\\"ch.qos.logback.core.ConsoleAppender\\\"> <encoder> <pattern>${console.log.pattern}</pattern> <charset>utf-8</charset> </encoder> </appender> <!-- 控制台输出 --> <appender name=\\\"file_console\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${log.path}/console.log</file> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 日志文件名格式 --> <fileNamePattern>${log.path}/console.%d{yyyy-MM-dd}.log</fileNamePattern> <!-- 日志最大 1天 --> <maxHistory>1</maxHistory> </rollingPolicy> <encoder> <pattern>${log.pattern}</pattern> <charset>utf-8</charset> </encoder> <filter class=\\\"ch.qos.logback.classic.filter.ThresholdFilter\\\"> <!-- 过滤的级别 --> <level>INFO</level> </filter> </appender> <!-- 系统日志输出 --> <appender name=\\\"file_info\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${log.path}/info.log</file> <!-- 循环政策：基于时间创建日志文件 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 日志文件名格式 --> <fileNamePattern>${log.path}/info.%d{yyyy-MM-dd}.log</fileNamePattern> <!-- 日志最大的历史 60天 --> <maxHistory>60</maxHistory> </rollingPolicy> <encoder> <pattern>${log.pattern}</pattern> </encoder> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <!-- 过滤的级别 --> <level>INFO</level> <!-- 匹配时的操作：接收（记录） --> <onMatch>ACCEPT</onMatch> <!-- 不匹配时的操作：拒绝（不记录） --> <onMismatch>DENY</onMismatch> </filter> </appender> <appender name=\\\"file_error\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <file>${log.path}/error.log</file> <!-- 循环政策：基于时间创建日志文件 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 日志文件名格式 --> <fileNamePattern>${log.path}/error.%d{yyyy-MM-dd}.log</fileNamePattern> <!-- 日志最大的历史 60天 --> <maxHistory>60</maxHistory> </rollingPolicy> <encoder> <pattern>${log.pattern}</pattern> </encoder> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <!-- 过滤的级别 --> <level>ERROR</level> <!-- 匹配时的操作：接收（记录） --> <onMatch>ACCEPT</onMatch> <!-- 不匹配时的操作：拒绝（不记录） --> <onMismatch>DENY</onMismatch> </filter> </appender> <!-- info异步输出 --> <appender name=\\\"async_info\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --> <discardingThreshold>0</discardingThreshold> <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --> <queueSize>512</queueSize> <!-- 添加附加的appender,最多只能添加一个 --> <appender-ref ref=\\\"file_info\\\"/> </appender> <!-- error异步输出 --> <appender name=\\\"async_error\\\" class=\\\"ch.qos.logback.classic.AsyncAppender\\\"> <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 --> <discardingThreshold>0</discardingThreshold> <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 --> <queueSize>512</queueSize> <!-- 添加附加的appender,最多只能添加一个 --> <appender-ref ref=\\\"file_error\\\"/> </appender> <!--系统操作日志--> <root level=\\\"info\\\"> <appender-ref ref=\\\"console\\\" /> <appender-ref ref=\\\"async_info\\\"/> <appender-ref ref=\\\"async_error\\\"/> <appender-ref ref=\\\"file_console\\\" /> </root> </configuration> \"]},\"597\":{\"c\":[\"web\"]},\"598\":{\"h\":\"上下文\"},\"599\":{\"h\":\"context\",\"t\":[\"context上下文在web开发中是一个重要的概念,存放共享变量，在代码中使用\"]},\"600\":{\"h\":\"servletContext\",\"t\":[\"containerContext是容器上下文，servletContext是servlet运行上下文，所有servlet共享 对应spring中的 root applicationContext servletConfig是servlet特有，对应spring的 servlet applicationContext\"]},\"601\":{\"h\":\"applicationContext /webApplicationContext\",\"t\":[\"undertow\",\" 实现servletContext接口的servletContextImpl的attributes中存放spring的rootContext,如AnnotationConfigServletWebServerApplicationContext\",\"org.springframework.web.context.WebApplicationContext.ROOT : rootContext上下文\",\"org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet : servlet特有context引用rootContext\",\"rootContext的servletContext存放servletContext接口的实例\",\"tomcat\"]},\"602\":{\"h\":\"线程上下文\",\"t\":[\"使用线程局部变量定义上下文，作为http请求的上下文，存放用户信息，线程间隔离\",\"创建上下文类\",\"定义线程局部变量,并确定局部变量类型为Map\",\"静态set get方法\",\"public class BaseContextHandler { public static ThreadLocal<Map<String, Object>> threadLocal = new ThreadLocal<Map<String, Object>>(); public static void set(String key, Object value) { Map<String, Object> map = threadLocal.get(); if (map == null) { map = new HashMap<String, Object>(); threadLocal.set(map); } map.put(key, value); } public static Object get(String key) { Map<String, Object> map = threadLocal.get(); if (map == null) { map = new HashMap<String, Object>(); threadLocal.set(map); } return map.get(key); } public static Map<String,Object> getAll() { return threadLocal.get(); } public static void setLocal(Map<String,Object> context) { threadLocal.set(context); } public static void removeKey(String key) { Map<String, Object> threadLocalMap = threadLocal.get(); Iterator<String> iterator = threadLocalMap.keySet().iterator(); while (iterator.hasNext()) { String k = iterator.next(); if (k.equals(key)) { iterator.remove(); } } } //移除线程局部变量 public static void remove() { threadLocal.remove(); } public static void setClientId(String clientId) { set(CommonConstants.CONTEXT_KEY_CLIENT_ID, clientId); } public static String getClientId() { Object value = get(CommonConstants.CONTEXT_KEY_CLIENT_ID); return returnObjectValue(value); } public static String getTenantID() { Object value = get(CommonConstants.CONTEXT_KEY_TENANT_ID); return returnObjectValue(value); } public static void setTenantID(String tenantID) { set(CommonConstants.CONTEXT_KEY_TENANT_ID, tenantID); } public static String getUserID() { Object value = get(CommonConstants.CONTEXT_KEY_USER_ID); return returnObjectValue(value); } /** * 获取登录名 * * @return */ public static String getUsername() { Object value = get(CommonConstants.CONTEXT_KEY_USERNAME); return returnObjectValue(value); } /** * 获取姓名 * * @return 姓名 */ public static String getName() { Object value = get(CommonConstants.CONTEXT_KEY_USER_NAME); return getObjectValue(value); } public static String getToken() { Object value = get(CommonConstants.CONTEXT_KEY_USER_TOKEN); return getObjectValue(value); } public static void setToken(String token) { set(CommonConstants.CONTEXT_KEY_USER_TOKEN, token); } public static void setName(String name) { set(CommonConstants.CONTEXT_KEY_USER_NAME, name); } public static void setUserID(String userID) { set(CommonConstants.CONTEXT_KEY_USER_ID, userID); } public static void setUsername(String username) { set(CommonConstants.CONTEXT_KEY_USERNAME, username); } private static String returnObjectValue(Object value) { return value == null ? null : value.toString(); } private static String getObjectValue(Object obj) { return obj == null ? \\\"\\\" : obj.toString(); } } \"]},\"603\":{\"c\":[\"web\"]},\"604\":{\"h\":\"DSL\",\"t\":[\"Domain-specific language: 一种专注于某一领域，仅针对部分表达方式的计算机编程语言。\",\"特点:\",\"方法链 Method Chaining\",\"功能序列 Functional Sequence\",\"嵌套函数 Nested Functions 嵌套函数\",\"Lambda表达式/闭包 Lambda Expressions/Closures\"]},\"605\":{\"c\":[\"web\"]},\"606\":{\"h\":\"feign\",\"t\":[\"服务调用\"]},\"607\":{\"h\":\"springboot\",\"t\":[\"@FeignClient\",\"FeignClientsRegistrar\"]},\"608\":{\"h\":\"feign传参问题\",\"t\":[\"参考\",\"参考\"]},\"609\":{\"h\":\"get请求\",\"t\":[\"传多个参数问题\",\"转为post\",\"在请求拦截器，将实体参数转为路径参数\",\"@requestParam\",\"@SpringQueryMap\",\"Map形式\"]},\"610\":{\"h\":\"文件相关\"},\"611\":{\"h\":\"jar包的读取\"},\"612\":{\"h\":\"http\"},\"613\":{\"h\":\"okhttp\"},\"614\":{\"h\":\"restTemplate\"},\"615\":{\"h\":\"apache httpClient\"},\"616\":{\"h\":\"retrofit\",\"t\":[\"Retrofit2 是一个由 Square 开发的用于构建 RESTful 客户端的 Java 库，主要用于 Android 和 Java 应用程序。\\n它允许你以一种非常简洁且类型安全的方式来定义网络请求，并且能够自动将服务器响应的数据转换成 Java 对象。\"]},\"617\":{\"h\":\"javaSE\",\"t\":[\"java标准版本，它是开发一个java应用要使用的模型\"]},\"618\":{\"h\":\"模型\"},\"619\":{\"c\":[\"web\"]},\"620\":{\"h\":\"JSQLParser\"},\"621\":{\"h\":\"引入\",\"t\":[\"<repositories> <repository> <id>jsqlparser-snapshots</id> <snapshots> <enabled>true</enabled> </snapshots> <url>https://oss.sonatype.org/content/groups/public/</url> </repository> </repositories> <dependency> <groupId>com.github.jsqlparser</groupId> <artifactId>jsqlparser</artifactId> <version>4.4</version> </dependency> \"]},\"622\":{\"h\":\"key和证书\"},\"623\":{\"h\":\"keytool\",\"t\":[\"java自带工具用于生成密钥库keystore文件\",\"-certreq 生成证书请求\",\"-changealias 更改条目的别名\",\"-delete 删除条目\",\"-exportcert 导出证书\",\"-genkeypair 生成密钥对\",\"-genseckey 生成密钥\",\"-gencert 根据证书请求生成证书\",\"-importcert 导入证书或证书链\",\"-importpass 导入口令\",\"-importkeystore 从其他密钥库导入一个或所有条目\",\"-keypasswd 更改条目的密钥口令\",\"-list 列出密钥库中的条目\",\"-printcert 打印证书内容\",\"-printcertreq 打印证书请求的内容\",\"-printcrl 打印 CRL 文件的内容\",\"-storepasswd 更改密钥库的存储口令\",\"生成包含密钥对的密钥库文件\",\"# 交互式 # -keystore 密钥库文件名路径 默认在user.name目录下 # -storetype 密钥库类型 默认jks pkcs12(行业标准格式) keytool -genkeypair -keystore \\\"test.jks\\\" -alias techease -keyalg RSA -validity 365 -keysize 2048 -storetype pkcs12 # 命令 keytool -genkeypair -dname \\\"CN=HOSTNAME.MYAZURE.BIZ,OU=SD DC,O=OP Compliance,L=LO,S=TO,C=VO,EMAILADDRESS=Myemail@163.com\\\" -keystore \\\"test.jks\\\" -alias techease -keyalg RSA -validity 365 -keysize 2048 -storetype pkcs12 \",\"密钥库格式转换\",\"#参考 keytool -v -importkeystore -srckeystore keystore.jks -srcstoretype jks -srcstorepass 123 -destkeystore keystore.pfx -deststoretype pkcs12 -deststorepass 1234 keytool -importkeystore -srckeystore test.jks -destkeystore test.jks -deststoretype pkcs12 \"]},\"624\":{\"h\":\"jks\",\"t\":[\"参考\"]},\"625\":{\"h\":\"ssl /tsl\",\"t\":[\"参考1\",\"参考2\",\"参考3\",\"参考4\",\"参考5\",\"传输层安全协议\",\"x.509 规定了证书要包含的信息 签名等\",\"SSL证书格式主要有公钥证书格式标准X.509中定义的PEM和DER、公钥加密标准PKCS中定义的PKCS#7和PKCS#12、Java环境专用的JKS。\",\"PEM是基于Base64编码的证书格式，扩展名包括PEM、CRT和CER。Linux系统使用CRT，Windows系统使用CER。\",\"PEM证书通常将根证书、中间证书和用户证书分开存放，主要用于Apache和Nginx。\",\"crt、cer是标准证书格式，一般采用der(二进制) pem(base64)格式编码，扩展名可为pem、der、crt、cer\",\"key 证书私钥格式，一般采用pem格式加密，扩展名可为key、pem\"]},\"626\":{\"h\":\"certificate\",\"t\":[\"证书可分为根证书、中间证书、用户证书\",\"如何对获取的证书校验，通过预装在计算机中的权威机构根证书对证书的身份进行校验。\",\"非对称加密只是用于商定采用哪种对称加密方式来加密传输内容\"]},\"627\":{\"h\":\"格式\",\"t\":[\"cer windows下pem或der存储格式的证书格式\",\"crt linux下pem或der存储格式的证书格式\",\"pem 可包含pem格式的证书或私钥或完整信息\",\"der der格式的公钥\",\"csr 证书请求格式\",\"x.509 证书标准包含哪些信息\",\"pks 包含公钥和私钥\",\"jks 包含公钥和私钥 keytool\",\"key 私钥格式，一般采用pem格式加密\"]},\"628\":{\"c\":[\"web\"]},\"629\":{\"h\":\"mock语法\"},\"630\":{\"c\":[\"web\"]},\"631\":{\"h\":\"multipleDatasource\"},\"632\":{\"h\":\"spring datasource\",\"t\":[\"这里要想默认数据源生效，要在启动类排除默认数据源配置@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})\",\"spring datasource提供AbstractRoutingDataSource在获取connection之前切换数据源\",\"DataSourceAutoConfiguration\",\"配置数据源，默认使用spring自带的Hikari数据库连接池\",\"AbstractRoutingDataSource\",\"定义DynamicDataSource类继承抽象类AbstractRoutingDataSource，并实现了determineCurrentLookupKey()方法。\",\"把配置的多个数据源会放在AbstractRoutingDataSource的 targetDataSources和defaultTargetDataSource中，然后通过afterPropertiesSet()方法将数据源分别进行复制到resolvedDataSources和resolvedDefaultDataSource中。\",\"调用AbstractRoutingDataSource的getConnection()的方法的时候，先调用determineTargetDataSource()方法返回DataSource在进行getConnection()。\",\"事务\",\"AbstractRoutingDataSource 只支持单库事务，也就是说切换数据源要在开启事务之前执行。 spring DataSourceTransactionManager进行事务管理， 开启事务，会将数据源缓存到DataSourceTransactionObject对象中进行后续的commit rollback等事务操作。\",\"出现多数据源动态切换失败的原因是因为在事务开启后，数据源就不能再进行随意切换了，也就是说，一个事务对应一个数据源。\",\"传统的Spring管理事务是放在Service业务层操作的，所以更换数据源的操作要放在这个操作之前进行。也就是切换数据源操作放在Controller层，可是这样操作会造成Controller层代码混乱的结果。\",\"故而想到的解决方案是将事务管理在数据持久 (Dao层) 开启，切换数据源的操作放在业务层进行操作，就可在事务开启之前顺利进行数据源切换，不会再出现切换失败了。\",\"//数据源上下文，在做具体查询操作前切换数据源 public class DataSourceContextHolder { private static final ThreadLocal<DataSourceType> contextHolder = new ThreadLocal<DataSourceType>(); public static void clearDataSourceType() { contextHolder.remove(); } public static DataSourceType getDataSourceType() { return (DataSourceType) contextHolder.get(); } public static void setDataSourceType(DataSourceType dataSourceType) { contextHolder.set(dataSourceType); } } public enum DataSourceType { dataSource_jeecg, dataSource_enter, dataSource4, mapdataSource } public class DynamicDataSource extends AbstractRoutingDataSource { /* * 该方法必须要重写 方法是为了根据数据库标示符取得当前的数据库 * 决定使用哪个数据源 */ @Override protected Object determineCurrentLookupKey() { DataSourceType dataSourceType = DataSourceContextHolder .getDataSourceType(); return dataSourceType; } @Override public void setDataSourceLookup(DataSourceLookup dataSourceLookup) { super.setDataSourceLookup(dataSourceLookup); } //默认数据源 @Override public void setDefaultTargetDataSource(Object defaultTargetDataSource) { super.setDefaultTargetDataSource(defaultTargetDataSource); } //数据源名称和数据源的映射 @Override public void setTargetDataSources(Map<Object, Object> targetDataSources) { super.setTargetDataSources(targetDataSources); } } \"]},\"633\":{\"c\":[\"web\"]},\"634\":{\"h\":\"regex\",\"t\":[\"参考\"]},\"635\":{\"h\":\"预先优先匹配规则\",\"t\":[\"正向预测先行搜索的子表达式\",\"预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后\",\" ?=pattern ?!是一个预先或先行匹配 例： /^(?![0-9]+$)(?![a-zA-Z]+$)[a-zA-Z0-9]{6,12}$/ 先匹配不是全部数字，在匹配不是全部英文字符，再匹配是数字中英文结合 wh344566 \"]},\"636\":{\"c\":[\"web\"]},\"637\":{\"h\":\"rpc\"},\"638\":{\"h\":\"grpc\"},\"639\":{\"h\":\"引入\",\"t\":[\" <dependency> <groupId>net.devh</groupId> <artifactId>grpc-server-spring-boot-starter</artifactId> </dependency> \"]},\"640\":{\"h\":\"注解\",\"t\":[\"@GrpcService\",\"AnnotationGrpcServiceDiscoverer\",\"ShadedNettyGrpcServerFactory\",\"GrpcServerLifecycle\"]},\"641\":{\"h\":\"proto3\",\"t\":[\"参考\"]},\"642\":{\"h\":\"下载\",\"t\":[\"下载protoc.exe 工具 ， 选择 win64.zip 下载地址：https://github.com/protocolbuffers/protobuf/releases\",\"下载protoc-gen-grpc.exe 插件 ，选择搞版本下载 , 下载地址: https://repo.maven.apache.org/maven2/io/grpc/protoc-gen-grpc-java/\"]},\"643\":{\"h\":\"选项\",\"t\":[\"--java_out：生成之后输出java文件目录\",\"--proto_path：proto文件依赖地址，可以写多个\",\"--plugin：插件地址\",\"exhook.proto：需要生成代码的proto协议文件\",\"# 生成proto代码 protoc --java_out=E:/data --proto_path=. exhook.proto # 生成grpc代码 protoc --plugin=protoc-gen-grpc-java=D:\\\\software\\\\protoc-24.3-win64\\\\plugin\\\\protoc-gen-grpc-java-1.42.2-windows-x86_64.exe --grpc-java_out=.\\\\ exhook.proto \"]},\"644\":{\"h\":\"script\"},\"645\":{\"h\":\"java环境下脚本的执行\"},\"646\":{\"h\":\"python\",\"t\":[\"使用参考\",\"jython参考\",\"参考\",\"引入jython包\",\"使用hutool脚本工具\",\"Jython2.7.3仅支持Python2.7\",\"java runtime直接调用python命令执行脚本，并获取执行结果参考\",\"<dependencies> <dependency> <groupId>org.python</groupId> <artifactId>jython-standalone</artifactId> <version>2.7.3</version> </dependency> </dependencies> \",\"import org.python.util.PythonInterpreter; public class HelloPython { public static void main(String[] args) { PythonInterpreter interpreter = new PythonInterpreter(); interpreter.execfile(\\\"D:\\\\\\\\Jython\\\\\\\\test.py\\\"); } } \"]},\"647\":{\"h\":\"php\",\"t\":[\"参考\",\"参考\",\"php下载链接\",\"php-java-bridge\",\"implementation 'io.soluble.pjb:php-java-bridge:7.1.3' \",\"import java.io.ByteArrayOutputStream; import java.io.Closeable; import java.io.StringReader; import javax.script.Invocable; import javax.script.ScriptEngine; import javax.script.ScriptEngineManager; /** * Create and run THREAD_COUNT PHP threads, concurrently accessing a * shared resource. * * Create 5 script engines, passing each a shared resource allocated * from Java. Each script engine has to implement Runnable. * * Java accesses the Runnable script engine using * scriptEngine.getInterface() and calls thread.start() to invoke each * PHP Runnable implementations concurrently. */ public class PhpThreads { public static final String runnable = new String(\\\"<?php\\\\n\\\" + \\\"function run() {\\\\n\\\" + \\\" $out = java_context()->getAttribute('sharedResource', 100);\\\\n\\\" + \\\" $nr = (string)java_context()->getAttribute('nr', 100);\\\\n\\\" + \\\" echo \\\\\\\"started thread: $nr\\\\n\\\\\\\";\\\\n\\\" + \\\" for($i=0; $i<100; $i++) {\\\\n\\\" + \\\" $out->write(ord($nr));\\\\n\\\" + \\\" java('java.lang.Thread')->sleep(1);\\\\n\\\" + \\\" }\\\\n\\\" + \\\"}\\\\n\\\" + \\\"?>\\\\n\\\"); static final int THREAD_COUNT = 5; public static void main(String[] args) throws Exception { ScriptEngineManager manager = new ScriptEngineManager(); Thread threads[] = new Thread[THREAD_COUNT]; ScriptEngine engines[] = new ScriptEngine[THREAD_COUNT]; ByteArrayOutputStream sharedResource = new ByteArrayOutputStream(); StringReader runnableReader = new StringReader(runnable); // create THREAD_COUNT PHP threads for (int i=0; i<THREAD_COUNT; i++) { engines[i] = manager.getEngineByName(\\\"php-invocable\\\"); if (engines[i] == null) throw new NullPointerException (\\\"php script engine not found\\\"); engines[i].put(\\\"nr\\\", new Integer(i+1)); engines[i].put(\\\"sharedResource\\\", sharedResource); engines[i].eval(runnableReader); runnableReader.reset(); // cast the whole script to Runnable; note also getInterface(specificClosure, type) Runnable r = (Runnable) ((Invocable)engines[i]).getInterface(Runnable.class); threads[i] = new Thread(r); } // run the THREAD_COUNT PHP threads for (int i=0; i<THREAD_COUNT; i++) { threads[i].start(); } // wait for the THREAD_COUNT PHP threads to finish for (int i=0; i<THREAD_COUNT; i++) { threads[i].join(); ((Closeable)engines[i]).close(); } // print the output generated by the THREAD_COUNT concurrent threads String result = sharedResource.toString(); System.out.println(result); // Check result Object res=manager.getEngineByName(\\\"php\\\").eval( \\\"<?php \\\" + \\\"exit((int)('10011002100310041005'!=\\\" + \\\"@system(\\\\\\\"echo -n \\\"+result+\\\"|sed 's/./&\\\\\\\\\\\\n/g'|sort|uniq -c|tr -d ' \\\\\\\\\\\\n'\\\\\\\")));\\\" + \\\"?>\\\"); System.exit(((Number)res).intValue()); } } \"]},\"648\":{\"h\":\"groovy\",\"t\":[\"引入groovy\",\"ScriptEngine提供的eval(String)方法执行脚本内容\",\"对json操作需使用 import groovy.json.JsonSlurper\",\"implementation 'org.codehaus.groovy:groovy-all:3.0.16' \",\"package com.dandelion.test; import com.dandelion.groovy.TestGroovy; import javax.script.*; import java.util.Date; /** * ================================ * 测试groovy脚本的执行方式 * @Author Him * @Date 2021-04-21 * @Time 01:12 * ================================ */ public class TestScriptEngine { // 查找并创建指定脚本引擎 private ScriptEngine engine = new ScriptEngineManager().getEngineByName(\\\"groovy\\\"); public void testByFunction(){ // 初始化Bindings Bindings bindings = engine.createBindings(); // 绑定参数 bindings.put(\\\"date\\\", new Date()); // 定义groovy脚本中执行方法的名称 final String scriptName = \\\"execute\\\"; // 定义groovy脚本内容 final String scriptContent = \\\"def \\\" + scriptName +\\\"(){\\\" + \\\" println(\\\\\\\"now dateTime is: ${date.getTime()}\\\\\\\");\\\" + \\\" return date.getTime() > 0;\\\" + \\\"}\\\"; try { // 执行脚本 engine.eval(scriptContent, bindings); // 获取执行结果 Invocable invocable = (Invocable) engine; Boolean flag = (Boolean) invocable.invokeFunction(scriptName); System.out.println(\\\"---------------------------------------\\\"); System.out.println(\\\"result is: \\\" + flag); } catch (ScriptException | NoSuchMethodException e) { e.printStackTrace(); } } public void testByMethod(){ try { // 初始化groovy脚本对象 final TestGroovy testGroovy = new TestGroovy(); // 定义groovy脚本中执行方法的名称 final String scriptName = \\\"execute\\\"; // 定义参数 final Date arg_1 = new Date(); final String arg_2 = \\\"groovy\\\"; // 执行脚本并获取结果 Invocable invocable = (Invocable) engine; Boolean flag = (Boolean) invocable.invokeMethod(testGroovy, scriptName, arg_1, arg_2); System.out.println(\\\"---------------------------------------\\\"); System.out.println(\\\"result is: \\\" + flag); } catch (ScriptException |NoSuchMethodException e) { e.printStackTrace(); } } public static void main(String[] args) { TestScriptEngine engine = new TestScriptEngine(); engine.testByFunction(); } } \"]},\"649\":{\"h\":\"标准script函数库\",\"t\":[\"var deviceIdG; var deviceNameG; var productIdG; var topicG; var payloadG; var resultG = {} /** * 类型转换 */ // 转为boolean function toBoolean(value){ var result; if(value === null){ result = false; } if (typeof value === 'number' || typeof value === 'string') { result = Boolean(value); } return result; } // 转为number function toNumber(value){ var result; if(value === null){ result = 0; } try { if (typeof value === 'number') { result = value; } if (typeof value === 'string') { result = parseFloat(value); } if (typeof value === 'boolean') { result = value ? 1 : 0; } } catch (error) { result = 0; } return result; } // 转为string function toString(value) { if (value === null) { return \\\"\\\"; } if (typeof value === 'string') { return value; } else if (typeof value === 'object') { return JSON.stringify(value); } else { return String(value); } } /** * 日期转换 */ // 根据指定格式将时间戳格式化为日期字符串 function format_date(timestamp, pattern, timeZone) { if (timeZone === undefined) { timeZone = 'GMT+8'; // 默认为北京时间（GMT+8） } var date = new Date(timestamp); var utcOffset = getUTCOffset(timeZone); // 获取时区的UTC偏移量 date.setUTCMilliseconds(date.getUTCMilliseconds() + utcOffset); // 调整时间为指定时区 var year = date.getUTCFullYear(); var month = padZero(date.getUTCMonth() + 1); var day = padZero(date.getUTCDate()); var hours = padZero(date.getUTCHours()); var minutes = padZero(date.getUTCMinutes()); var seconds = padZero(date.getUTCSeconds()); var formattedDate = pattern .replace('yyyy', year) .replace('MM', month) .replace('dd', day) .replace('HH', hours) .replace('mm', minutes) .replace('ss', seconds); return formattedDate; } // 获取时区的UTC偏移量 function getUTCOffset(timeZone) { var offset = 0; if (timeZone === 'GMT' || timeZone === 'UTC') { return offset; } var timeZoneOffset = timeZone.substring(3); // 去除前缀，获取时区偏移量 var sign = timeZoneOffset.charAt(0); var hours = parseInt(timeZoneOffset.substring(1, 3)); // var minutes = parseInt(timeZoneOffset.substring(4)); offset = (hours * 60) * 60 * 1000; // 转换为毫秒 if (sign === '-') { offset = -offset; // 处理负时区偏移 } return offset; } // 补零函数 function padZero(value) { return value < 10 ? '0' + value : value; } /** * 业务相关 */ // 根据级联key获取指定对象中的value值 function getOrNull(obj, keys) { if (keys instanceof Array) { for (var i = 0; i < keys.length; i++) { if (obj === null || typeof obj !== 'object' || !(keys[i] in obj)) { return null; } obj = obj[keys[i]]; } } else { obj = null; } return obj; } // 获取时间戳 function timestamp(format){ var result = Date.now(); if (format != null) { result = format_date(result, format); } return result; } //设备信息 function deviceId(){ return deviceIdG; } //获取设备名称 function deviceName(){ return deviceNameG; } //产品id function productId(){ return productIdG; } //获取topic 可顺序获取对应元素 function topic(index){ var result = topicG; if ( typeof result === 'string' && index !== undefined && index !== null) { if (result.charAt(0) !== '/') { result = \\\"/\\\" + result; } result = result.split(\\\"/\\\")[index]; } return result; } //获取标准物模型属性值 function things_property(name) { var data = payload(\\\"json\\\"); print(data.params['Temperature'].value); return getOrNull(data.params, [name,\\\"value\\\"]); } //获取标准物模型属性Map function things_propertyMap() { var result = {}; var data = payload(\\\"json\\\"); var params = data.params; for (var key in params) { result[key] = params[key].value; } return result; } //获取上报javascript对象 function payload(type){ var result = {}; try{ if(type === 'json') { //转为json result = JSON.parse(payloadG); } } catch (error) { } return result; } //写入函数 function writeTFDB(destinationId,ts,data){ //拼凑参数对象 var result = {}; result.destinationId = destinationId; result.ts = ts; result.data = data; //设置全局变量 resultG.tfdb = result; return result; } function writeRds(destinationId,data){ //拼凑参数对象 } //写入另一topic function writeIotTopic(destinationId,topic,data){ var result = {}; result.destinationId = destinationId; result.topic = topic; result.data = data; //设置全局变量 resultG.iotTopic = result; return result; } function reset() { deviceIdG = undefined; deviceNameG = undefined; productIdG = undefined; topicG = undefined; payloadG = undefined; resultG = {}; } //设置上下文 function setContext(context) { reset(); var contextObject = JSON.parse(context); deviceIdG = contextObject[\\\"deviceId\\\"]; deviceNameG = contextObject[\\\"deviceName\\\"]; productIdG = contextObject[\\\"productId\\\"]; topicG = contextObject[\\\"topic\\\"]; payloadG = contextObject[\\\"payload\\\"]; } //转换函数 function transform(context){ setContext(context); ${script} return JSON.stringify(resultG); } \"]},\"650\":{\"h\":\"servlet\"},\"651\":{\"h\":\"jsp\",\"t\":[\"java server pages,是一种基于可执行java代码的web技术，动态生成html\",\"核心是生成 jsp servlet\",\"需要在支持jsp servlet标准的服务器上运行，即需要jsp引擎或容器\",\"jsp引擎\",\"它将获取到的jsp页面，转化为jspServlet(包含生成html的代码)\",\"JSP 引擎将 Servlet 编译成可执行类，并且将原始请求传递给 Servlet 引擎(容器)。\",\"这里会判断jsp也i按对应的servlet是否已经生成\"]},\"652\":{\"h\":\"servlet\",\"t\":[\"它是sun设计的让java能够实现动态可交互网页，进入web领域的标准\",\"Servlet没有main方法，所以，如果要执行，则需要在一个容器里面才能执行，这个容器就是为了支持Servlet的功能而存在，\",\"Tomcat其实就是一个Servlet容器的实现。\",\"它是运行在web服务器(支持javaServlet规范)上的小型应用程序,主要处理来自客户端的请求，是一个浏览器和应用程序Controller交互的中间层。 如 dispatcherServlet或其他自定义servlet\",\"它是处理请求的入口，以前web服务器处理请求的入口是web.xml(内部配置了请求路径和servlet的映射路径)\",\"一次创建，到处服务，只处理一个路径的多次请求。\",\"生命周期\",\"初始化后调用 init () 方法。在第一次创建servlet时执行\",\"Servlet 容器（即 Web 服务器）调用 service() 方法来处理客户端的请求\",\"Servlet 销毁前调用 destroy() 方法\",\"Servlet 是由 JVM 的垃圾回收器进行垃圾回收的\",\"servletContext上下文\",\"web.xml\",\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> <web-app> <filter> <filter-name>LogFilter</filter-name> <filter-class>com.runoob.test.LogFilter</filter-class> <init-param> <param-name>Site</param-name> <param-value>菜鸟教程</param-value> </init-param> </filter> <filter-mapping> <filter-name>LogFilter</filter-name> <url-pattern>/*</url-pattern> </filter-mapping> <servlet> <!-- 类名 --> <servlet-name>DisplayHeader</servlet-name> <!-- 所在的包 --> <servlet-class>com.runoob.test.DisplayHeader</servlet-class> </servlet> <servlet-mapping> <servlet-name>DisplayHeader</servlet-name> <!-- 访问的网址 --> <url-pattern>/TomcatTest/DisplayHeader</url-pattern> </servlet-mapping> </web-app> \",\"过滤器实例\",\"public class LogFilter implements Filter { //只执行一次 public void init(FilterConfig config) throws ServletException { // 获取初始化参数 String site = config.getInitParameter(\\\"Site\\\"); // 输出初始化参数 System.out.println(\\\"网站名称: \\\" + site); } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws java.io.IOException, ServletException { // 输出站点名称 System.out.println(\\\"站点网址：http://www.runoob.com\\\"); // 把请求传回过滤链 chain.doFilter(request,response); } public void destroy( ){ /* 在 Filter 实例被 Web 容器从服务移除之前调用 */ } } \",\"servlet实例\",\"public class HelloWorld extends HttpServlet { private String message; public void init() throws ServletException { // 执行必需的初始化 message = \\\"Hello World\\\"; } public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // 设置响应内容类型 response.setContentType(\\\"text/html\\\"); // 实际的逻辑是在这里 PrintWriter out = response.getWriter(); out.println(\\\"<h1>\\\" + message + \\\"</h1>\\\"); } public void destroy() { // 什么也不做 } } \",\"自定义servlet出现异常时的处理器 servlet的cookie 保存在客户端的文本，用于保存一些身份信息\",\"在后端设置cookie，返回响应\",\"前后端分离的项目，使用js在客户端设置\",\"public Example { Cookie name = new Cookie(\\\"name\\\", URLEncoder.encode(request.getParameter(\\\"name\\\"), \\\"UTF-8\\\")); // 中文转码 Cookie url = new Cookie(\\\"url\\\", request.getParameter(\\\"url\\\")); // 为两个 Cookie 设置过期日期为 24 小时后 name.setMaxAge(60*60*24); url.setMaxAge(60*60*24); // 在响应头中添加两个 Cookie response.addCookie( name ); response.addCookie( url ); // 读取cookie Cookie cookie = null; Cookie[] cookies = null; // 获取与该域相关的 Cookie 的数组 cookies = request.getCookies(); //删除cookie } \",\"servlet Session跟踪\",\"http是一个无状态协议，不会记录上一次请求记录\",\"httpSession接口，Servlet 容器使用这个接口来创建一个 HTTP 客户端和 HTTP 服务器之间的 session 会话。\",\"会话持续一个指定的时间段，跨多个连接或页面请求。\",\"核心是客户端和服务器之间\",\"生命周期是servlet容器\",\"public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { // 如果不存在 session 会话，则创建一个 session 对象 //request.getSession(false)使用已有的会话对象 HttpSession session=request.getSession(true); // 获取 session 创建时间 Date createTime=new Date(session.getCreationTime()); // 获取该网页的最后一次访问时间 Date lastAccessTime=new Date(session.getLastAccessedTime()); // public void invalidate() 方法来丢弃整个 session 会话 } \"]},\"653\":{\"c\":[\"web\"]},\"654\":{\"h\":\"task\"},\"655\":{\"h\":\"实现方式\",\"t\":[\"springboot方式\",\"quartz\",\"xxl-job\"]},\"656\":{\"h\":\"通配符\",\"t\":[\"? 表示不指定值，即不关心某个字段的取值时使用。需要注意的是，月份中的日期和星期可能会起冲突，因此在配置时这两个得有一个是 ? * 表示所有值，例如:在秒的字段上设置 *,表示每一秒都会触发 , 用来分开多个值，例如在周字段上设置 “MON,WED,FRI” 表示周一，周三和周五触发 - 表示区间，例如在秒上设置 “10-12”,表示 10,11,12秒都会触发 / 用于递增触发，如在秒上面设置”5/15” 表示从5秒开始，每增15秒触发(5,20,35,50) # 序号(表示每月的第几个周几)，例如在周字段上设置”6#3”表示在每月的第三个周六，(用 在母亲节和父亲节再合适不过了) 周字段的设置，若使用英文字母是不区分大小写的 ，即 MON 与mon相同 L 表示最后的意思。在日字段设置上，表示当月的最后一天(依据当前月份，如果是二月还会自动判断是否是润年), 在周字段上表示星期六，相当于”7”或”SAT”（注意周日算是第一天）。如果在”L”前加上数字，则表示该数据的最后一个。例如在周字段上设置”6L”这样的格式,则表示”本月最后一个星期五” W 表示离指定日期的最近工作日(周一至周五)，例如在日字段上设置”15W”，表示离每月15号最近的那个工作日触发。如果15号正好是周六，则找最近的周五(14号)触发, 如果15号是周未，则找最近的下周一(16号)触发，如果15号正好在工作日(周一至周五)，则就在该天触发。如果指定格式为 “1W”,它则表示每月1号往后最近的工作日触发。如果1号正是周六，则将在3号下周一触发。(注，”W”前只能设置具体的数字,不允许区间”-“) L 和 W 可以一组合使用。如果在日字段上设置”LW”,则表示在本月的最后一个工作日触发(一般指发工资 ) \",\"样例\",\" \\\"0/10 * * * * ?\\\" 每10秒触发 \\\"0 0/3 * * * ?\\\" 每隔1分钟执行一次 \\\"0 0 08 * * ?\\\" 每天上午8点触发 \\\"0 15 10 ? * *\\\" 每天上午10:15触发 \\\"0 15 10 * * ?\\\" 每天上午10:15触发 \\\"0 15 10 * * ? *\\\" 每天上午10:15触发 \\\"0 15 10 * * ? 2005\\\" 2005年的每天上午10:15触发 \\\"0 * 14 * * ?\\\" 在每天下午2点到下午2:59期间的每1分钟触发 \\\"0 0/5 14 * * ?\\\" 在每天下午2点到下午2:55期间的每5分钟触发 \\\"0 0/5 14-18 * * ?\\\" 在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发 \\\"0 0-5 14 * * ?\\\" 在每天下午2点到下午2:05期间的每1分钟触发 \\\"0 10,44 14 ? 3 WED\\\" 每年三月的星期三的下午2:10和2:44触发 \\\"0 15 10 ? * MON-FRI\\\" 周一至周五的上午10:15触发 \\\"0 15 10 15 * ?\\\" 每月15日上午10:15触发 \\\"0 15 10 L * ?\\\" 每月最后一日的上午10:15触发 \\\"0 15 10 ? * 6L\\\" 每月的最后一个星期五上午10:15触发 \\\"0 15 10 ? * 6L 2009-2019\\\" 2009年至2019年的每月的最后一个星期五上午10:15触发 \\\"0 15 10 ? * 6#3\\\" 每月的第三个星期五上午10:15触发 \"]},\"657\":{\"h\":\"springboot方式\",\"t\":[\"基于注解\",\"@Scheduled标注在方法上，并使用@EnableScheduling开启定时任务 \",\"基于接口，动态获取触发时间，可配置\",\"/** * @author wanhongji * @since 2022/12/19 * 可配置定时时间的定时任务 */ @Configuration @EnableScheduling @Slf4j public class CustomScheduledTask implements SchedulingConfigurer { //cron表达式 public String getCron() { return \\\"0 0/1 * * * ?\\\"; } @Override public void configureTasks(ScheduledTaskRegistrar taskRegistrar) { taskRegistrar.addTriggerTask(() -> { log.info(\\\"执行定时任务:{}\\\", DateUtil.formatDateTime(new Date())); System.out.println(\\\"df\\\"); }, triggerContext -> new CronTrigger(getCron()).nextExecutionTime(triggerContext)); } } \"]},\"658\":{\"h\":\"Quartz\",\"t\":[\"添加依赖\",\" <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-quartz</artifactId> </dependency> #开启@EnableScheduling注解 \",\"Quartz 在使用过程中，有两个关键概念，\",\"一个是 JobDetail（要做的事情），要定义 JobDetail，需要先自定义Job\",\"一个是 Trigger触发器（什么时候做）\",\"Job 的定义有两种方式：\",\"直接定义一个Bean，不支持传参。\",\"定义一个Bean继承 QuartzJobBean类，并实现默认的方法，支持传参，任务启动时，executeInternal 方法将会被执行。\",\"@Component public class MyJob1 { public void myTask1() { System.out.println(\\\"MyJob1 myTask1任务开始 : \\\" + LocalDateTime.now().toLocalTime() + \\\"，线程：\\\" + Thread.currentThread().getName()); } } @Component public class MyJob2 extends QuartzJobBean { // @Autowired 这里注入方式是不行的，报NPE private UserService userService; private Long id; @Override protected void executeInternal(JobExecutionContext jobExecutionContext) throws JobExecutionException { // 处理相应的注入service业务 String data = userService.get(id); System.out.println(data); System.out.println(\\\"MyJob2 任务开始 : \\\" + LocalDateTime.now().toLocalTime() + \\\"，线程：\\\" + Thread.currentThread().getName()); } public UserService getUserService() { return userService; } public void setUserService(UserService userService) { this.userService = userService; } public Long getId() { return id; } public void setId(Long id) { this.id = id; } } \",\"创建配置类，配置 JobDetail， Trigger 触发器\",\"JobDetail 的配置有两种方式：\",\"MethodInvokingJobDetailFactoryBean：可以配置目标 Bean 的名字和目标方法的名字，这种方式不支持传参。\",\"JobDetailFactoryBean：任务类继承自 QuartzJobBean ，这种方式支持传参，将参数封装在 JobDataMap 中进行传递。\",\"Quartz 中定义了多个 Trigger触发器，，这里使用下 SimpleTrigger 和 CronTrigger 。\",\"SimpleTrigger触发器： 有点类似于上面的 @Scheduled 的基本用法。\",\"CronTrigger触发器：支持 cron 表达式来配置任务执行时间\",\"@Configuration public class QuartzConfig { // MyJob2 需要 userService， 这两个都可以注入 // @Bean // UserService userService() { // return new UserService(); // } @Autowired private UserService userService; // MyJob1任务配置 @Bean MethodInvokingJobDetailFactoryBean methodInvokingJobDetailFactoryBean() { MethodInvokingJobDetailFactoryBean bean = new MethodInvokingJobDetailFactoryBean(); bean.setTargetBeanName(\\\"myJob1\\\"); // 首字母小写 bean.setTargetMethod(\\\"myTask1\\\"); return bean; } @Bean SimpleTriggerFactoryBean simpleTriggerFactoryBean() { SimpleTriggerFactoryBean bean = new SimpleTriggerFactoryBean(); bean.setStartTime(new Date()); bean.setRepeatCount(5); bean.setRepeatInterval(2000); bean.setJobDetail(methodInvokingJobDetailFactoryBean().getObject()); return bean; } // MyJob2任务配置 // 传参 @Bean JobDetailFactoryBean jobDetailFactoryBean() { JobDetailFactoryBean bean = new JobDetailFactoryBean(); bean.setJobClass(MyJob2.class); JobDataMap map = new JobDataMap(); map.put(\\\"userService\\\", userService); map.put(\\\"id\\\", 101); bean.setJobDataMap(map); return bean; } @Bean CronTriggerFactoryBean cronTriggerFactoryBean() { CronTriggerFactoryBean bean = new CronTriggerFactoryBean(); bean.setCronExpression(\\\"0/5 * * * * ?\\\"); bean.setJobDetail(jobDetailFactoryBean().getObject()); return bean; } // 添加 MyJob1和MyJob2的触发器 @Bean SchedulerFactoryBean schedulerFactoryBean() { SchedulerFactoryBean bean = new SchedulerFactoryBean(); bean.setTriggers(cronTriggerFactoryBean().getObject(), simpleTriggerFactoryBean().getObject()); return bean; } } \"]},\"659\":{\"c\":[\"web\"]},\"660\":{\"h\":\"transaction\",\"t\":[\"seata官网\"]},\"661\":{\"h\":\"分布式事务\"},\"662\":{\"h\":\"二阶段提交\"},\"663\":{\"h\":\"三阶段提交\"},\"664\":{\"h\":\"TCC\",\"t\":[\"try\",\"confirm\",\"cancel\"]},\"665\":{\"h\":\"本地消息表\"},\"666\":{\"h\":\"MQ消息事务\",\"t\":[\"使用消息队列，最终一致性\"]},\"667\":{\"h\":\"最大努力通知\"},\"668\":{\"h\":\"总结\",\"t\":[\"可以看出 2PC 和 3PC 是一种强一致性事务，不过还是有数据不一致，阻塞等风险，而且只能用在数据库层面。\",\"而 TCC 是一种补偿性事务思想，适用的范围更广，在业务层面实现，因此对业务的侵入性较大，每一个操作都需要实现对应的三个方法。\",\"本地消息、事务消息和最大努力通知其实都是最终一致性事务，因此适用于一些对时间不敏感的业务\"]},\"669\":{\"h\":\"saga\"},\"670\":{\"h\":\"seata\"},\"671\":{\"h\":\"tree\"},\"672\":{\"h\":\"样例\",\"t\":[\" @Override public List<DeviceProductCategory> getAllCategoryTree(DeviceProductCategoryQueryDTO queryDTO) { List<DeviceProductCategory> result = new ArrayList<>(); LambdaQueryWrapper<DeviceProductCategory> queryWrapper = Wrappers.<DeviceProductCategory>lambdaQuery(); queryWrapper.orderByAsc(DeviceProductCategory::getSortIndex); List<DeviceProductCategory> deviceProductCategories = this.list(queryWrapper); boolean flag = false; if (StringUtils.isNotEmpty(queryDTO.getName())) { queryWrapper.like(DeviceProductCategory::getName, queryDTO.getName()); flag = true; } if (StringUtils.isNotEmpty(queryDTO.getDescription())) { queryWrapper.like(DeviceProductCategory::getDescription, queryDTO.getDescription()); flag = true; } if (flag) { //多条件查询时，list可能不包含父类别，需进行补全 List<DeviceProductCategory> categoriesByName = this.list(queryWrapper); if (CollectionUtil.isEmpty(categoriesByName)) { return result; } List<DeviceProductCategory> needCategories = new ArrayList<>(categoriesByName); List<String> ids = categoriesByName.stream().map(DeviceProductCategory::getId).collect(Collectors.toList()); categoriesByName.forEach(item-> { if (StringUtils.isNotBlank(item.getParentId())) { getCompleteCategory(item.getParentId(),ids, needCategories); } }); deviceProductCategories = needCategories; } Map<String, DeviceProductCategory> idMap = deviceProductCategories.stream().collect(Collectors.toMap(DeviceProductCategory::getId, item -> item)); deviceProductCategories.forEach(item -> { if (Symbol.EMPTY.equals(item.getParentId())) { result.add(item); } else if (StringUtils.isNotBlank(item.getParentId())) { //子节点加入到父节点中 DeviceProductCategory parent = idMap.get(item.getParentId()); if (parent != null && parent.getChildren() != null) { parent.getChildren().add(item); sort(parent.getChildren()); } else if (parent != null && parent.getChildren() == null) { List<DeviceProductCategory> children = new ArrayList<>(); children.add(item); parent.setChildren(children); sort(parent.getChildren()); } } }); sort(deviceProductCategories); return result; } /** * 获取完整列表 * @param parentId * @param existIds * @param categoryList */ private void getCompleteCategory(String parentId,List<String> existIds, List<DeviceProductCategory> categoryList) { if (existIds.contains(parentId)) { return; } DeviceProductCategory deviceProductCategory = baseMapper.selectById(parentId); if (deviceProductCategory == null) { return; } categoryList.add(deviceProductCategory); existIds.add(deviceProductCategory.getId()); if (StringUtils.isNotBlank(deviceProductCategory.getParentId())) { getCompleteCategory(deviceProductCategory.getParentId(), existIds, categoryList); } } /** * 排序 * @param categoryList */ private void sort(List<DeviceProductCategory> categoryList) { if (CollectionUtil.isNotEmpty(categoryList)) { categoryList.sort(Comparator.comparingInt(DeviceProductCategory::getSortIndex)); } } \"]},\"673\":{\"h\":\"web服务器\"},\"674\":{\"h\":\"tomcat\",\"t\":[\"参考\",\"参考\",\"web服务器，实现了对 Java Servlet 和 JSP（JavaServer Pages）技术的支持\",\"前身是catalina servlet 容器，用于运行servlet程序\"]},\"675\":{\"h\":\"ApplicationContext与StandardContext\",\"t\":[\"职责不同\",\"StandardContext掌握控制权，也是一个容器，负责servlet的选择，session cookie 的管理\",\"ApplicationContext是servlet运行环境的上下文信息\"]},\"676\":{\"h\":\"StandardContext\",\"t\":[\"负责servlet的选择，session cookie 的管理\",\"getServletContext 获取ServletContext\"]},\"677\":{\"h\":\"ApplicationContext\"},\"678\":{\"h\":\"从组件角度\",\"t\":[\"server\",\"服务器顶层，可以包含多个service\",\"service\",\"一个service只有一个engine\",\"可以有多个connector处理不同协议的请求\",\"connector\",\"支持多种协议\",\"连接容器和service\",\"封装request和response\",\"对请求的封装使用了包装器RequestFacade\",\"交给servlet后还会对请求包装ServletRequestWrapper、HttpServletRequestWrapper\",\"container 引擎(Engine)、主机(Host)、上下文(Context)和Wraper均继承自Container接口，所以它们都是容器。\",\"engine 可配置多个host，一个ip对应多个域名，以域名划分host容器\",\"host host可配置多个context，有默认host,即webapps目录\",\"context 这里的上下文即standardContext(standardContext实现context接口)属于host,即一个web应用，默认root文件夹，可配置其他文件夹\",\"wrapper 封装着一个servlet\",\"service内部组件\",\"Manager servletContext中的组件，管理session会话\",\"logger 日志\",\"context 加载器，和类加载有关，只会开放给Context所使用\",\"pipeline 管道组件，配合Valve实现过滤器功能\",\"value 阀门组件，配合Pipeline实现过滤器功能\"]},\"679\":{\"h\":\"从一个完整请求的角度来看\",\"t\":[\"假设来自客户的请求为：http://localhost:8080/test/index.jsp 请求被发送到本机端口8080，被在那里侦听的Coyote HTTP/1.1 Connector,然后\",\"Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应\",\"Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host\",\"Engine匹配到名为localhost的Host(即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机) localhost\",\"Host获得请求/test/index.jsp，匹配它所拥有的所有Context\",\"Host匹配到路径为/test的Context(如果匹配不到就把该请求交给路径名为\\\"\\\"的Context去处理)\",\"path=\\\"/test\\\"的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet\",\"Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类，构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法\",\"Context把执行完了之后的HttpServletResponse对象返回给Host\",\"Host把HttpServletResponse对象返回给Engine\",\"Engine把HttpServletResponse对象返回给Connector\",\"Connector把HttpServletResponse对象返回给客户browse\"]},\"680\":{\"h\":\"从后续深入理解的角度\",\"t\":[\"基于组件的架构\",\"基于生命周期 各个组件的源代码，会发现绝大多数组件实现了Lifecycle接口，这也就是我们所说的基于生命周期。生命周期的各个阶段的触发又是基于事件的方式。\",\"基于JMX\"]},\"681\":{\"h\":\"servlet引擎(容器)\",\"t\":[\"Servlet没有main方法，所以，如果要执行，则需要在一个容器里面才能执行，这个容器就是为了支持Servlet的功能而存在\"]},\"682\":{\"h\":\"jsp引擎\",\"t\":[\"将jsp转为servlet，代码动态构建网页输出\"]},\"683\":{\"h\":\"线程模型\",\"t\":[\"acceptor\",\"poller\",\"worker线程池\"]},\"684\":{\"h\":\"org.apache.coyote.Response\"},\"685\":{\"h\":\"NioEndpoint,Nio2Endpoint,AbstractEndpoint\",\"t\":[\"createSocketProcessor\",\"processSocket 创建线程任务SocketProcessor交给线程池执行\"]},\"686\":{\"h\":\"NioAcceptor，NioEndpoint下的accept任务\",\"t\":[\"run\"]},\"687\":{\"h\":\"SocketProcessor，NioEndpoint下的内部类\",\"t\":[\"doRun\"]},\"688\":{\"h\":\"Connector\",\"t\":[\"实例时创建ProtocolHandler的实现Http11NioProtocol\",\"initInternal，初始化CoyoteAdapter，并塞到ProtocolHandler中\"]},\"689\":{\"h\":\"Http11NioProtocol,Http11Nio2Protocol,AbstractHttp11JsseProtocol,AbstractHttp11Protocol,AbstractProtocol\",\"t\":[\"实例化Http11NioProtocol，同时创建NioEndpoint，ConnectionHandler\"]},\"690\":{\"h\":\"ConnectionHandler，AbstractProtocol下的内部类\",\"t\":[\"process 创建Http11Processor处理socketWrapper,socket\"]},\"691\":{\"h\":\"Http11Processor,AbstractProcessorLight,Processor\",\"t\":[\"process\",\"service\",\"action\"]},\"692\":{\"h\":\"CoyoteAdapter\",\"t\":[\"创建ServletRequest,ServletResponse,并设置 org.apache.coyote.Request req, org.apache.coyote.Response res,主要用于数据的交互\"]},\"693\":{\"h\":\"LifecycleBase\",\"t\":[\"StandardServer, 包含service\",\"StandardService,包含connector\"]},\"694\":{\"h\":\"Container\",\"t\":[\"StandardEngine\",\"StandardHost\",\"StandardContext\",\"StandardWrapper \",\"ApplicationDispatcher\",\"pipeline \",\"base\"]},\"695\":{\"h\":\"servlet3.0 异步请求\",\"t\":[\"HttpServletRequest的startAsync启动异步处理，释放容器worker线程\",\"AsyncContextImpl,AsyncContext \",\"setStarted\",\"AsyncRunnable 设置请求状态为DISPATCHED\"]},\"696\":{\"h\":\"AsyncStateMachine\",\"t\":[\"DISPATCHED 非异步状态\",\"STARTING\",\"STARTED\",\"DISPATCHING\"]},\"697\":{\"h\":\"jetty\"},\"698\":{\"h\":\"undertow\"},\"699\":{\"c\":[\"web\"]},\"700\":{\"h\":\"工作流\"},\"701\":{\"h\":\"表\"},\"702\":{\"h\":\"元数据表GE RE\",\"t\":[\"ACT_RE_DEPLOYMENT\",\"部署记录表\",\"ACT_GE_BYTEARRAY\",\"流程元数据表，包含XML信息\",\"ACT_RE_PROCDEF\",\"流程定义表\"]},\"703\":{\"h\":\"历史表HI\",\"t\":[\"ACT_HI_PROCINST\",\"存放流程实例记录\",\"ACT_HI_TASKINST\",\"存放流程实例的任务记录\",\"ACT_HI_ACTINST\",\"流程实例所有节点记录，开始、结束、任务节点\"]},\"704\":{\"h\":\"运行表RU\",\"t\":[\"ACT_RU_EXECUTION\",\"流程实例表\",\"ACT_RU_IDENTITYLINK\",\"负责处理任务的审批人或候选人\",\"ACT_RU_TASK\",\"当前待执行的任务表\"]},\"705\":{\"h\":\"基本使用\"},\"706\":{\"h\":\"Modeler\",\"t\":[\"model创建审批流程图\",\"配置用户任务节点\",\"给任务节点配置审批人及处理监听器\",\"给节点任务配置创建或完成任务监听器\",\"使用${变量}或${表达式}的形式配置候选人，如${initial}、${userService.getRole(\\\"role\\\")}\"]},\"707\":{\"h\":\"spring boot\",\"t\":[\"引入jar包\",\"// gradle project(':learning-research') { dependencies { implementation 'org.springframework.boot:spring-boot-starter-web' implementation 'org.camunda.bpm.springboot:camunda-bpm-spring-boot-starter-webapp:7.15.0' implementation 'mysql:mysql-connector-java' implementation 'org.springframework.boot:spring-boot-starter-jdbc' implementation 'junit:junit:4.13.2' implementation 'com.baomidou:mybatis-plus-boot-starter:3.5.2' } } \",\"流程部署\",\"resource文件夹中创建processes文件夹存放bpmn流程XML\",\"repositoryservice加载XML文件部署流程\",\"启动流程\",\"runtimeService创建流程实例，配置流程变量\",\"创建第一个代办任务\",\"执行流程实例中的节点任务\",\"通过代理人及候选代理人查询代办任务\",\"设置任务处理人\",\"处理任务，触发任务监听器，执行具体任务操作\"]},\"708\":{\"h\":\"任务的流转处理\",\"t\":[\"前一个任务节点处理完成，同时创建第二个代办任务\",\"任务处理时要设置处理意见，同意还是驳回，从而决定任务的流向\",\"任务流向上的表达式\"]},\"709\":{\"h\":\"监听器\",\"t\":[\"任务监听器\",\"执行监听器\"]},\"710\":{\"h\":\"接口方式\",\"t\":[\"TaskListener\",\"ExecutionListener\",\"实现上述接口,实现notify方法\"]},\"711\":{\"h\":\"spring事件总线\",\"t\":[\"使用spring事件机制，即@EventListener注解，使用条件表达式表示处理某一任务的create或complete事件\",\"示例\",\"@Component class MyTaskListener { @EventListener(condition=\\\"#taskDelegate.eventName=='create' && #taskDelegate.taskDefinitionKey=='task_confirm'\\\") public void onTaskEvent(DelegateTask taskDelegate) { // 处理被task_confirm任务触发的任务事件 } } \",\"开启spring事件配置\",\"camunda.bpm.eventing.execution=true camunda.bpm.eventing.history=true camunda.bpm.eventing.task=true \",\"这些属性分别控制执行、历史事件和任务的三个事件流。\"]},\"712\":{\"c\":[\"web\"]},\"713\":{\"h\":\"性能调优\"},\"714\":{\"h\":\"sql优化\"},\"715\":{\"h\":\"explain 参数详解\",\"t\":[\"参考\",\"参考\"]},\"716\":{\"h\":\"sql层\",\"t\":[\"查询列\",\"避免使用*，大字段（json,text）\",\"复杂查询\",\"join等联表查询优先，联表关联字段避免使用or条件，可以使用多次关联\",\"避免使用union、union all和子查询\",\"索引使用\",\"尽量命中多个索引\",\"分页查询，先使用条件查出对应ID，再in查询id，查询相应列，也可join代替in\",\"条件列尽量在索引中，避免回表\",\"联合索引的创建，最左原则\",\"SELECT dd.NAME, dd.state, dd.product_id, dd.product_name, dd.parent_id, dd.pic_url, dd.description, dd.from_share, dd.from_id, dd.creator_id, dd.user_id, dd.create_time, dd.dev_type, dd.source_user_id, dd.share_authority from (SELECT di.id FROM device_info di LEFT JOIN device_state ds ON di.id = ds.id LEFT JOIN device_state dst ON di.from_id = dst.id WHERE di.is_Delete = 0 AND di.parent_id = '' AND di.user_id = '2508368a0e09809582b58dbd8d59d003' -- and ds.state =1 or dst.state =1 and (ds.state=0 or ds.state is null) and (dst.state =0 or dst.state is null) ORDER BY create_time DESC limit 380000,12) as temp join device_info dd on temp.id =dd.id \"]},\"717\":{\"h\":\"硬件层\",\"t\":[\"参考\",\"调整innodb_buffer_pool_size的大小，默认128MB,由chunk*instance\",\"sort_buffer_size\",\"tmp_table_size\",\"read_buffer_size\",\"join_buffer_size\",\"show variables like 'innodb%' show status # 展示缓冲池的状态 show status like 'innodb_buffer_pool_read%'; SET GLOBAL innodb_buffer_pool_size = 3221225472 \"]},\"718\":{\"h\":\"数据加密脱敏\"},\"719\":{\"h\":\"aes加密\",\"t\":[\"对称加密算法，需提供双方约定的唯一密钥\",\"密钥长度只能为16/24/32个字符\",\"public class AESUtil { private static SymmetricCrypto aes; private static String secret; @Value(\\\"${aes.secret}\\\") public void setSecret(String secret) { AESUtil.secret = secret; } @PostConstruct public void init() { byte[] key = secret.getBytes(StandardCharsets.UTF_8); aes = new SymmetricCrypto(SymmetricAlgorithm.AES, key); System.out.println(\\\"++++++++++\\\"); System.out.println(aes.getSecretKey().getEncoded().length); System.out.println(\\\"++++++++++\\\"); } /** * 加密 * @param content * @return */ public static String encrypt(String content) { return aes.encryptHex(content); } /** * 解密 * @param encryptStr * @return */ public static String decrypt(String encryptStr) { return aes.decryptStr(encryptStr); } } \"]},\"720\":{\"h\":\"rsa加密\",\"t\":[\"引入包\",\"# 传统js # 下载jsencrypt.min.js # 前后端分离端 yarn add jsencrypt@3.2.0 npm install jsencrypt@3.2.0 \"]},\"721\":{\"c\":[\"web\"]},\"722\":{\"h\":\"登录\",\"t\":[\"什么是session?\",\"session从字面意思来讲，是会话。它是一种会话技术。\",\"使用session方式\",\"浏览器向服务器发起请求\",\"服务器查询到用户信息后放在session中，并返回sessionId存放在cookie中\",\"下次请求只需验证session中是否有用户信息，来避免重复登录\",\"使用JWT的方式,采用较多\",\"用户在登录成功，使用用户信息构造JWT token放在cookie中，或者保存到localStorage中\",\"下一次登录将token放在cookie中或者请求头中携带到后端服务器\",\"服务器端使用过滤器或拦截器进行校验处理，对token进行解析获取用户信息放在上下文中\",\"为什么使用JWT?\",\"session存放于对应的服务器中，适用于单体应用，对于分布式应用来说，不适用。\"]},\"723\":{\"h\":\"单点登录\",\"t\":[\"对应用的用户信息和菜单权限统一管理\",\"身份认证授权方式\",\"credential\",\"Authorization code\",\"password\",\"implicit\",\"内部多个应用登录\",\"网关 -》 auth服务,业务服务A,B\",\"登录A,判断token是否存在，若不存在，携带信息重定向到auth登录页面\",\"缓存前一次请求，登录成功后，携带授权码重定向到系统A\",\"系统A拿着code获取token\",\"下一次请求拿着token,在网关校验，再转到对应服务\",\"第三方授权登录\"]},\"724\":{\"h\":\"session + redis + nginx\",\"t\":[\"登录成功,用户信息存放到redis\",\"nginx避免跨域\",\"父子域名保证cookie在父子域名间共享\"]},\"725\":{\"h\":\"跨域请求\",\"t\":[\"Access-Control-Allow-Origin: 表明哪些源可以访问资源。\",\"Access-Control-Allow-Methods: 列出实际请求所允许使用的方法（如GET、POST等）。\",\"Access-Control-Allow-Headers: 允许的请求头字段列表。\",\"Access-Control-Allow-Credentials: 表示是否允许请求带有凭证（如Cookie）。\",\"Access-Control-Max-Age: 预检请求结果可缓存的时间，减少后续同类型请求的预检步骤。\"]},\"726\":{\"h\":\"JWT\",\"t\":[\"JWT token由三部分组成:\",\"header 头 包含格式和签名算法，常用rsa算法\",\"payload 载荷 主体信息\",\"signature 签名\\nheader和payload使用base64加密，signature使用加密后的头和载荷以及密钥加密形成\"]},\"727\":{\"c\":[\"web\"]},\"728\":{\"h\":\"Dubbo\"},\"729\":{\"h\":\"概念\",\"t\":[\"Dubbo是阿里巴巴公司开源的一个高性能、轻量级的 Java RPC 框架。\",\"致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案\"]},\"730\":{\"h\":\"高级特性\",\"t\":[\"dubbo底层封装了序列化与反序列化，只需实现serializable接口，服务方和消费方共同依赖，就可以实现对象传输响应。\",\"地址缓存\",\"超时与重试\",\"服务消费者在调用服务提供者的时候发生了阻塞、等待的情形，这个时候，服务消费者会一直等待下去。 在某个峰值时刻，大量的请求都在同时请求服务消费者，会造成线程的大量堆积，势必会造成雪崩。 dubbo 利用超时机制来解决这个问题，设置一个超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。 使用timeout属性配置超时时间，默认值1000，单位毫秒。即连接超时时间和读取超时时间 设置了超时时间，在这个时间段内，无法完成服务访问，则自动断开连接。 如果出现网络抖动，则这一次请求就会失败。 Dubbo 提供重试机制来避免类似问题的发生。 通过 retries 属性来设置重试次数。默认为 2 次 \",\"多版本\",\"灰度发布：当出现新功能时，会让一部分用户先使用新功能，用户反馈没问题时，再将所有用户迁移到新功能。 dubbo 中使用version 属性来设置和调用同一个接口的不同版本 \",\"负载均衡\",\"负载均衡策略（4种）： Random ：按权重随机，默认值。按权重设置随机概率。 RoundRobin ：按权重轮询。 LeastActive：最少活跃调用数，相同活跃数的随机。 ConsistentHash：一致性 Hash，相同参数的请求总是发到同一提供者。 \",\"集群容错\",\"集群容错模式： Failover Cluster：失败重试。默认值。当出现失败，重试其它服务器 ，默认重试2次，使用 retries 配置。一般用于读操作 Failfast Cluster ：快速失败，只发起一次调用，失败立即报错。通常用于写操作。 Failsafe Cluster ：失败安全，出现异常时，直接忽略。返回一个空结果。 Failback Cluster ：失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。 Forking Cluster ：并行调用多个服务器，只要一个成功即返回。 Broadcast Cluster ：广播调用所有提供者，逐个调用，任意一台报错则报错。 \",\"服务降级\"]},\"731\":{\"h\":\"原理\"},\"732\":{\"h\":\"代理类生成\",\"t\":[\"javaassist\",\"jdk动态代理\"]},\"733\":{\"h\":\"springboot方式初始化\",\"t\":[\"Model\",\"context\",\"config\",\"deploy\"]},\"734\":{\"h\":\"Model模型\",\"t\":[\"通过spi的方式，加载配置类、功能类、拓展类到jvm,并创建实例进行管理\"]},\"735\":{\"h\":\"ScopeModel、FrameModel、ApplicationModel、ModuleModel\",\"t\":[\"模型有父子级关系，每个模型Model、内部的ScopeBeanFactory、ExtensionDirector都记录了父级实例,父模型记录子模型\",\"ScopeBeanFactory\",\"ExtensionDirector\"]},\"736\":{\"h\":\"ExtensionDirector\",\"t\":[\"ExtensionDirector负责创建并管理相应scope级别、相应类型的ExtensionLoader,\",\"获取loader优先查找当前对象，没有从父级ExtensionDirector查找，最后没有再创建\",\"ExtensionInjector类型的ExtensionLoader属于顶级loader，用于加载Injector类型的extension类，并创建管理适配器注入器adaptiveExtensionInjector \",\"SpiExtensionInjector\",\"ScopeBeanExtensionInjector\",\"SpringExtensionInjector\",\"其余类型的ExtensionLoader都会使用ExtensionInjector类型的ExtensionLoader的adaptiveExtensionInjector作为injector\"]},\"737\":{\"h\":\"ExtensionLoader\",\"t\":[\"根据相应的load加载策略,加载对应类型的类进行管理，并缓存类对象，以及实例对象\",\"ExtensionLoader类型有scope(frame、model、module),被不同ExtensionDirector管理\"]},\"738\":{\"h\":\"DubboSpringInitializer\",\"t\":[\"初始化dubbo上下文\",\"创建applicationModel、moduleModel\",\"注册上下文和模型对象到容器的单例对象集合中\",\"注册基础配置对象到beanDefinition \",\"ServicePackagesHolder\",\"ReferenceAnnotationBeanPostProcessor\",\"ReferenceBeanManager\",\"DubboDeployApplicationListener\",\"DubboConfigApplicationListener\",\"DubboConfigBeanInitializer\",\"DubboInfraBeanRegisterPostProcessor\"]},\"739\":{\"h\":\"ServiceAnnotationPostProcessor\",\"t\":[\"处理@DubboService注解，生成对应service的服务代理对象提供服务，用于rpc的服务\"]},\"740\":{\"h\":\"DubboInfraBeanRegisterPostProcessor\",\"t\":[\"对提前创建好的Model、Dubbo上下文初始化ApplicationContext\",\"设置dubboProperties到ApplicationModel的ModelEnvironment中\",\"注册ConfigManager到单例对象集合中\"]},\"741\":{\"h\":\"ReferenceAnnotationBeanPostProcessor\",\"t\":[\"处理@DubboRefrence注解，生成对应接口的代理对象，用于rpc请求调用\",\"发送Config初始化事件到DubboConfigApplicationListener\"]},\"742\":{\"h\":\"DubboDeployApplicationListener\",\"t\":[\"注册DeployListenerAdapter监听器到deployer中，用于发布相应部署事件\",\"监听应用上下文已刷新事件\",\"启动Model \",\"发布模块启动事件\",\"exportServices\",\"referServices\",\"模块已启动事件\"]},\"743\":{\"h\":\"DubboConfigApplicationListener\",\"t\":[\"监听配置初始化事件，并获取DubboConfigBeanInitializer对象触发afterProperties初始化\",\"所有配置、功能bean已初始化，部署dubbo\"]},\"744\":{\"h\":\"deploy\",\"t\":[\"获取模型中moduleDeployer、applicationDeployer进行部署\",\"调用Deployer的initialize方法进行初始化\",\"applicationDeployer的初始化 \",\"触发deploy状态事件\",\"初始化配置，获取applicationConfig,registryConfig\",\"获取配置中心配置，若没有配置中心配置，使用registryConfig作为配置中心配置，启动配置中心，从配置中心获取配置\",\"startMetadataCenter启用元数据中心\"]},\"745\":{\"h\":\"protocol\",\"t\":[\"DubboProtocol\",\"GrpcProtocol\",\"RestProtocol\"]},\"746\":{\"h\":\"easy-orm\",\"t\":[\"响应式关系映射框架\"]},\"747\":{\"h\":\"es\"},\"748\":{\"h\":\"概念\",\"t\":[\"es是一个可扩展的高性能的用于数据分析的全文搜索引擎。提供了收集、分析、存储数据的功能。\",\"分片是底层的工作单元，文档保存在分片内，分片保存在集群节点\",\"索引自动分片\",\"内部使用lucene做索引及搜索\",\"进一部封装lucene的内部复杂性\",\"提供restful接口Api\",\"es\",\"mysql\",\"es\",\"mysql\",\"index\",\"database\",\"everything is indexed 倒排索引\",\"index\",\"type\",\"table\",\"query dsl\",\"dsl\",\"document\",\"row\",\"get url\",\"select\",\"field\",\"column\",\"put url\",\"update\",\"mapping\",\"scheme\",\"mapping 定义了索引下字段处理规则，索引如何建立，索引类型，是否分词处理，如何分词处理\",\"scheme定义了表及表字段，表和字段的关系\",\"@Document作用于类，用于标记实体类为文档对象，使用json格式将数据存储，实际发送json格式的字符串给es。\",\"存储在es的一条数据即是一个文档，es会索引每个 文档的内容，索引是document集，可进行分片存储数据，分片可进行备份\"]},\"749\":{\"h\":\"字段数据类型\",\"t\":[\"keyword 类型\",\"keyword 类型：存储数据时候，不会分词建立索引，支持模糊、支持精确匹配；支持聚合、排序操作。\",\"keyword 类型的最大支持的长度为——32766个UTF-8类型的字符，可以通过设置 ignore_above 指定自持字符长度，超过给定长度后的数据将不被索引，无法通过 term 精确匹配检索返回结果。\",\"使用场景： 存储邮箱号码、url、name、title，手机号码、主机名、状态码、邮政编码、标签、年龄、性别等数据。 用于筛选数据（例如: select * from x where status='open')、排序、聚合(统计)）。 直接将完整的文本保存到倒排索引中。\",\"text 类型\",\"text 类型：存储数据时候，会自动分词，并生成索引，支持全文检索、支持模糊、精确查询；不支持聚合和排序操作。\",\"text 类型的最大支持的字符长度无限制，适合大字段存储。\",\"使用场景： 存储全文搜索数据，例如：邮箱内容、地址、代码块、博客文章内容等。\",\"默认结合 standard analyzer（标准解析器）对文本进行分词、倒排索引。 默认结合标准分析器进行词命中、词频相关度打分。\",\"所以创建索引时，当字段需要进行排序、分组、聚合等操作时，需要使用 keyword 类型。\"]},\"750\":{\"h\":\"es集群\",\"t\":[\"参考\"]},\"751\":{\"h\":\"match、match_phrase、match_phrase_prefix的区别\",\"t\":[\"参考\",\"match 检索关键字分词，只要有一个包含在文档的字段的分词结果中\",\"match_phrase 会将检索关键词分词。match_phrase的分词结果必须在被检索字段的分词中都包含，而且顺序必须相同，而且默认必须都是连续的。\",\"match_phrase_prefix 与match_phrase查询类似，但是会对最后一个Token在倒排序索引列表中进行通配符搜索。Token的模糊匹配数控制：max_expansions 默认值为50\"]},\"752\":{\"h\":\"倒排索引\",\"t\":[\"以分词后的单词或词组作为键，document或记录地址作为值\"]},\"753\":{\"h\":\"正排索引\",\"t\":[\"与倒排索引相反\"]},\"754\":{\"h\":\"内核\",\"t\":[\"query then fetch\"]},\"755\":{\"h\":\"api\"},\"756\":{\"h\":\"查看节点负载\",\"t\":[\"Elasticsearch 中的负载平均值通常是指节点的负载平均1分钟值（1-minute load average）。\",\"这是根据节点的线程队列长度和线程等待时间等指标计算得出的。负载平均值越高，表示节点当前的负荷越大，有更多的请求正在等待处理。\",\"GET http://<elasticsearch_host>:<port>/_nodes/stats/os \"]},\"757\":{\"h\":\"更新\",\"t\":[\"根据id更新\",\"查询后脚本更新\"]},\"758\":{\"h\":\"_update 7.14\",\"t\":[\"# 更新对应字段 POST manufacturer_device/_update/DEA0637BC19YZ6636093 { \\\"doc\\\": { \\\"collector_no\\\" : \\\"DEA0637BC1\\\", \\\"inverter_no\\\" : \\\"9YZ6636093\\\", \\\"manufacturer\\\" : \\\"growattapi\\\", \\\"type\\\" : 1 } } # 存在更新，不存在使用要更新字段插入 POST manufacturer_device/_update/DEA0637BC19YZ6636093 { \\\"doc\\\": { \\\"type\\\" : 2 }, \\\"doc_as_upsert\\\": true } # 存在更新，不存在使用upsert要更新字段插入 POST manufacturer_device/_update/DEA0637BC19YZ6636093 { \\\"doc\\\": { \\\"collector_no\\\" : \\\"DEA0637BC1\\\", \\\"inverter_no\\\" : \\\"9YZ6636093\\\", \\\"manufacturer\\\" : \\\"growattapi\\\", \\\"type\\\" : 1 }, \\\"upsert\\\": {} } # 文档存在使用脚本更新，不存在插入后，根据scripted_upsert是否使用脚本更新 POST manufacturer_device/_update/DEA0637BC19YZ6636093 { \\\"scripted_upsert\\\": true, \\\"script\\\": { \\\"source\\\": \\\"ctx._source.type += params.count\\\", \\\"lang\\\": \\\"painless\\\", \\\"params\\\": { \\\"count\\\": 1 } }, \\\"upsert\\\": {} } # 根据条件更新 POST manufacturer_device/_update_by_query { \\\"query\\\": {}, \\\"script\\\": { \\\"source\\\": \\\"SCRIPT\\\", \\\"lang\\\": \\\"painless\\\", \\\"params\\\": { } } } \"]},\"759\":{\"h\":\"_update\",\"t\":[\"参考\",\"PUT test/type1/1 { \\\"counter\\\" : 1, \\\"tags\\\" : [\\\"red\\\"] } POST test/type1/1/_update { \\\"script\\\" : { \\\"source\\\": \\\"ctx._source.counter += params.count\\\", \\\"lang\\\": \\\"painless\\\", \\\"params\\\" : { \\\"count\\\" : 4 } } } POST test/type1/1/_update { \\\"script\\\" : { \\\"source\\\": \\\"ctx._source.tags.add(params.tag)\\\", \\\"lang\\\": \\\"painless\\\", \\\"params\\\" : { \\\"tag\\\" : \\\"blue\\\" } } } // 添加字段 POST test/type1/1/_update { \\\"script\\\" : \\\"ctx._source.new_field = 'value_of_new_field'\\\" } //删除字段 POST test/type1/1/_update { \\\"script\\\" : \\\"ctx._source.remove('new_field')\\\" } \"]},\"760\":{\"h\":\"_update_by_query\",\"t\":[\"POST index_name/_update_by_query { \\\"query\\\": { \\\"match\\\": { \\\"条件\\\": \\\"8fe6e9b2a9330862\\\" } }, \\\"script\\\": { \\\"source\\\": \\\"ctx._source['column'] = params['one']\\\", \\\"params\\\": { \\\"one\\\": \\\"修改后的值\\\" } } } 示例: POST xxxx_company/_update_by_query { \\\"query\\\": { \\\"match\\\": { \\\"_id\\\": \\\"8fe6e9b2a9330862\\\" } }, \\\"script\\\": { \\\"source\\\": \\\"ctx._source['eps'] = params['one']\\\", \\\"params\\\": { \\\"one\\\": { \\\"value\\\": 1.0, \\\"value_usd\\\": 1.1 } } } } \"]},\"761\":{\"h\":\"搜索\",\"t\":[\"查询分为基于文本和基于词项的查询。\",\"filter 和must_not不打分\"]},\"762\":{\"h\":\"term/terms\",\"t\":[\"term精确匹配不分词查询，需保证存储也是完整，不分词存储，使用keyword类型\",\"terms传递多个字段，匹配其中一个字段即可\",\"GET /customer/doc/_search/ { \\\"query\\\": { \\\"term\\\": { \\\"title\\\": \\\"blog\\\" } } } \",\"-- filter查询,必须相等,过滤 {\\\"query\\\": { \\\"bool\\\": { \\\"filter\\\": { \\\"term\\\": {\\\"id\\\": \\\"13\\\"} } } } } -- bool使用terms {\\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ {\\\"terms\\\":{\\\"node_standard_code\\\":[1001,1002,1004,1007]}} ] } } } {\\\"query\\\": { \\\"bool\\\": { \\\"filter\\\": { {\\\"terms\\\":{\\\"node_standard_code\\\":[1001,1002,1004,1007]}} } } } } \"]},\"763\":{\"h\":\"指定字段查询：match\",\"t\":[\"es使用match,会对查询条件分词后进行匹配查询，match本质是对term的结果组合\",\"如果要在字段中搜索特定字词，可以使用match; 如下语句将查询address 字段中包含 mill 或者 lane的数据 GET /bank/_search { \\\"query\\\": { \\\"match\\\": { \\\"address\\\": \\\"mill lane\\\" } } } \"]},\"764\":{\"h\":\"搜索所有macth_all\",\"t\":[\"es查询所有matchall ,sort排序\",\"GET /bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"account_number\\\": \\\"asc\\\" } ] } \"]},\"765\":{\"h\":\"分页查询(from+size)\",\"t\":[\"es分页查询from,size\",\"GET /bank/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"sort\\\": [ { \\\"account_number\\\": \\\"asc\\\" } ], \\\"from\\\": 10, \\\"size\\\": 10 } \"]},\"766\":{\"h\":\"查询段落匹配：match_phrase\",\"t\":[\"es的match_phrase\",\"如果我们希望查询的条件是 address字段中包含 \\\"mill lane\\\"，则可以使用match_phrase\",\"GET /bank/_search { \\\"query\\\": { \\\"match_phrase\\\": { \\\"address\\\": \\\"mill lane\\\" } } } \"]},\"767\":{\"h\":\"多条件查询: bool\",\"t\":[\"如果要构造更复杂的查询，可以使用bool查询来组合多个查询条件。\",\"GET /bank/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"match\\\": { \\\"age\\\": \\\"40\\\" } } ], \\\"must_not\\\": [ { \\\"match\\\": { \\\"state\\\": \\\"ID\\\" } } ] } } } \",\"must, should, must_not 和 filter 都是bool查询的子句。那么filter和上述query子句有啥区别呢？\",\"两者都可以写查询条件，而且语法也类似。区别在于，query 上下文的条件是用来给文档打分的，匹配越好 _score 越高；filter 的条件只产生两种结果：符合与不符合，后者被过滤掉。\"]},\"768\":{\"h\":\"聚合查询：Aggregation\",\"t\":[\"我们知道SQL中有group by，在ES中它叫Aggregation，即聚合运算。\"]},\"769\":{\"h\":\"简单聚合\",\"t\":[\"比如我们希望计算出account每个州的统计数量， 使用aggs关键字对state字段聚合，被聚合的字段无需对分词统计，所以使用state.keyword对整个字段统计\",\"GET /bank/_search { \\\"size\\\": 0, \\\"aggs\\\": { \\\"group_by_state\\\": { \\\"terms\\\": { \\\"field\\\": \\\"state.keyword\\\" } } } } \"]},\"770\":{\"h\":\"嵌套聚合\",\"t\":[\"ES还可以处理个聚合条件的嵌套。\",\"比如承接上个例子， 计算每个州的平均结余。涉及到的就是在对state分组的基础上，嵌套计算avg(balance):\",\"GET /bank/_search { \\\"size\\\": 0, \\\"aggs\\\": { \\\"group_by_state\\\": { \\\"terms\\\": { \\\"field\\\": \\\"state.keyword\\\" }, \\\"aggs\\\": { \\\"average_balance\\\": { \\\"avg\\\": { \\\"field\\\": \\\"balance\\\" } } } } } } \"]},\"771\":{\"h\":\"对聚合结果排序\",\"t\":[\"可以通过在aggs中对嵌套聚合的结果进行排序\",\"比如承接上个例子， 对嵌套计算出的avg(balance)，这里是average_balance，进行排序\"]},\"772\":{\"h\":\"索引管理\"},\"773\":{\"h\":\"创建索引\",\"t\":[\"我们创建一个user 索引test-index-users，其中包含三个属性：name，age, remarks; 存储在一个分片一个副本上。\",\"PUT /test-index-users { \\\"settings\\\": { \\\"number_of_shards\\\": 1, \\\"number_of_replicas\\\": 1 }, \\\"mappings\\\": { \\\"properties\\\": { \\\"name\\\": { \\\"type\\\": \\\"text\\\", \\\"fields\\\": { \\\"keyword\\\": { //不进行分词索引 \\\"type\\\": \\\"keyword\\\", \\\"ignore_above\\\": 256 } } }, \\\"age\\\": { \\\"type\\\": \\\"long\\\" }, \\\"remarks\\\": { \\\"type\\\": \\\"text\\\" // 数据类型 } } } } \"]},\"774\":{\"h\":\"分词结果\",\"t\":[\"参考\",\"term条件的区分大小写，而实际上，text数据经过默认的standard analyzer分词器分词，大写字母全部转为了小写字母，并存入了倒排索引以供搜索。\",\"# 创建索引 PUT test_match # 查看字段的分词后存储在倒排索引的值 GET test_match/_analyze { \\\"field\\\": \\\"{field}\\\", \\\"text\\\": [] } \"]},\"775\":{\"h\":\"信息查看\",\"t\":[\"//查看索引设置 get indexName/settings //查看字段映射 get indexName/mappings \"]},\"776\":{\"h\":\"查看分词结果\",\"t\":[\"GET device_info/_doc/230277cdcd684105945aaa246707e0a3/_termvectors?fields=name \"]},\"777\":{\"h\":\"修改查询限制\"},\"778\":{\"h\":\"设置结果最大窗口\",\"t\":[\"put _all/_settings { \\\"index.max_result_window\\\":200000 } searchSourceBuilder.trackTotalHits(true); GET 索引名/_search { \\\"query\\\": { \\\"match_all\\\": {} }, \\\"track_total_hits\\\":true } \"]},\"779\":{\"h\":\"创建索引添加配置\",\"t\":[\"\\\"settings\\\":{ \\\"index\\\":{ \\\"max_result_window\\\": 500000 } } \"]},\"780\":{\"h\":\"scroll查询\",\"t\":[\"参考\",\"参考\",\"参考\",\"一次从各分片中查到所有匹配的文档，返回分片数*size大小的hits记录，并获得下一次的游标位置\",\"根据游标位置获取下一批结果，可设置结果维持的查询时间\",\"查询条件中设置了滚动条件之后，在滚动的有效时间范围内，比如上面设置的是1分钟内，可以保持搜索的上下文环境的时间（滚动时间），\",\"在具体查询过程中，每滚动一次，es会产生一个scrollId，用于记录每次滚动的结果，直到滚动到无法继续查询数据的时候结束\",\"//使用order_id 进行排序，保持游标查询窗口5分钟。 GET 索引名称/_search?scroll=5m { \\\"query\\\": { \\\"match_all\\\": {}}, \\\"sort\\\" : [\\\"order_id\\\"], \\\"size\\\": 1000 } //传递字段 _scroll_id 到 _search/scroll 查询接口获取下一批结果 GET _search/scroll { \\\"scroll\\\": \\\"5m\\\", \\\"scroll_id\\\" : \\\"FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFmV0cjE1Q3JfUmpXeF95NVlyVDlFUncAAAAAAACmmBZTc29KeGx0dFEyYUo2VTVEVWMtdnF3\\\"} //清理 DELETE _search/scroll{ \\\"scroll_id\\\":\\\"FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFmV0cjE1Q3JfUmpXeF95NVlyVDlFUncAAAAAAACmmBZTc29KeGx0dFEyYUo2VTVEVWMtdnF3\\\"} \",\"示例代码\",\"final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L)); SearchRequest searchRequest = new SearchRequest(\\\"kibana_sample_data_ecommerce\\\"); searchRequest.scroll(scroll); SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); searchSourceBuilder.query(matchQuery(\\\"title\\\", \\\"Elasticsearch\\\")); searchRequest.source(searchSourceBuilder); SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT); String scrollId = searchResponse.getScrollId(); SearchHit[] searchHits = searchResponse.getHits().getHits();while (searchHits != null && searchHits.length > 0) { SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId); scrollRequest.scroll(scroll); searchResponse = client.scroll(scrollRequest, RequestOptions.DEFAULT); scrollId = searchResponse.getScrollId(); searchHits = searchResponse.getHits().getHits(); } ClearScrollRequest clearScrollRequest = new ClearScrollRequest(); clearScrollRequest.addScrollId(scrollId); ClearScrollResponse clearScrollResponse = client.clearScroll(clearScrollRequest, RequestOptions.DEFAULT); boolean succeeded = clearScrollResponse.isSucceeded(); \",\"工具示例\",\"参考\",\"package com.yq.demo.Util; import org.apache.commons.lang3.ArrayUtils; import org.elasticsearch.action.search.ClearScrollRequest; import org.elasticsearch.action.search.SearchRequest; import org.elasticsearch.action.search.SearchResponse; import org.elasticsearch.action.search.SearchScrollRequest; import org.elasticsearch.action.support.IndicesOptions; import org.elasticsearch.client.RequestOptions; import org.elasticsearch.client.RestHighLevelClient; import org.elasticsearch.core.TimeValue; import org.elasticsearch.index.query.QueryBuilder; import org.elasticsearch.search.Scroll; import org.elasticsearch.search.SearchHit; import org.elasticsearch.search.aggregations.AggregationBuilder; import org.elasticsearch.search.builder.SearchSourceBuilder; import org.elasticsearch.search.sort.SortOrder; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.util.ArrayList; import java.util.List; import java.util.function.Function; public class ESUtil { private static final Logger log = LoggerFactory.getLogger(ESUtil.class); private static final long SCROLL_TIMEOUT = 180000; private static int SIZE = 1000; private static int MAX_BUFFER = 209715200; /** * 构建SearchResponse * * @param client restHighLevelClient * @param indices 索引 * @param query queryBuilder * @param includes 包含的字段 * @param orderField 排序字段 * @param order 排序类型 * @param fun 返回函数 * @param <T> 返回类型 * @return List, 可以使用fun转换为T结果 * @throws Exception */ public static <T> List<T> searchResponse(RestHighLevelClient client, String[] indices, QueryBuilder query, String[] includes, String orderField, SortOrder order, Function<SearchHit, T> fun) throws Exception { //滚动查询的Scroll Scroll scroll = new Scroll(TimeValue.timeValueMillis(SCROLL_TIMEOUT)); //构建searchRequest SearchRequest request = new SearchRequest(indices); SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); if (includes != null) { //构造器加入需要查找的字段 sourceBuilder.fetchSource(includes, null); } //加入query语句 sourceBuilder.query(query); //每次滚动的长度 sourceBuilder.size(SIZE); //加入排序字段 if (orderField != null && !\\\"\\\".equals(orderField.trim())) { sourceBuilder.sort(orderField, order); } //加入scroll和构造器 request.scroll(scroll); request.source(sourceBuilder); //存储scroll的list List<String> scrollIdList = new ArrayList<>(); //返回结果 SearchResponse searchResponse = client.search(request, RequestOptions.DEFAULT); //拿到第一个ScrollId（游标） String scrollId = searchResponse.getScrollId(); //拿到hits结果 SearchHit[] hits = searchResponse.getHits().getHits(); //保存返回结果List List<T> result = new ArrayList<>(); scrollIdList.add(scrollId); try { //滚动查询将SearchHit封装到result中 while (ArrayUtils.isNotEmpty(hits)) { for (SearchHit hit : hits) { //Function<SearchHit, T>, 输入SearchHit，经过操作后，返回T结果 result.add(fun.apply(hit)); } //说明滚动完了，返回结果即可 if (hits.length < SIZE) { break; } //继续滚动，根据上一个游标，得到这次开始查询位置 SearchScrollRequest searchScrollRequest = new SearchScrollRequest(scrollId); searchScrollRequest.scroll(scroll); //得到结果 SearchResponse searchScrollResponse = client.scroll(searchScrollRequest, RequestOptions.DEFAULT); //定位游标 scrollId = searchScrollResponse.getScrollId(); hits = searchScrollResponse.getHits().getHits(); scrollIdList.add(scrollId); } } finally { //清理scroll,释放资源 ClearScrollRequest clearScrollRequest = new ClearScrollRequest(); clearScrollRequest.setScrollIds(scrollIdList); client.clearScroll(clearScrollRequest, RequestOptions.DEFAULT); } return result; } /** * 聚合查询的SearchResponse * @param client * @param indices 索引 * @param query QueryBuilder * @param aggregations AggregationBuilder * @return SearchResponse * @throws Exception */ public static SearchResponse searchResponse(RestHighLevelClient client, String[] indices, QueryBuilder query, AggregationBuilder... aggregations) throws Exception { //构建request请求 SearchRequest request = new SearchRequest(indices); SearchSourceBuilder sourceBuilder = new SearchSourceBuilder(); sourceBuilder.query(query); //加入Agg if (aggregations != null && aggregations.length > 0) { for (AggregationBuilder aggregation : aggregations) { sourceBuilder.aggregation(aggregation); } } sourceBuilder.size(0); //忽略不可用索引，只用于开放索引 request.indicesOptions(IndicesOptions.lenientExpandOpen()); request.source(sourceBuilder); return client.search(request, RequestOptions.DEFAULT); } } \"]},\"781\":{\"h\":\"聚合\",\"t\":[\"参考\",\"参考\"]},\"782\":{\"h\":\"聚合并获取聚合列表数据\",\"t\":[\"GET device_info/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must_not\\\": [ { \\\"term\\\": { \\\"is_delete\\\": { \\\"value\\\": \\\"1\\\" } } } ] } }, \\\"size\\\": 0, \\\"aggs\\\": { \\\"test\\\": { \\\"terms\\\": { \\\"field\\\": \\\"device_key\\\", \\\"min_doc_count\\\": 2, #限制桶数量 \\\"size\\\": 2 }, \\\"aggs\\\": { \\\"test2\\\": { \\\"top_hits\\\": { #限制分组记录数 \\\"size\\\": 2, \\\"_source\\\": { \\\"includes\\\": [ \\\"dev_type\\\", \\\"device_key\\\" ] } } } } } } } \"]},\"783\":{\"h\":\"bool查询\",\"t\":[\"GET notify_log_2023-04/_search { \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"term\\\": { \\\"notifyType\\\": { \\\"value\\\": \\\"webhook\\\" } } } ] } }, \\\"sort\\\": [ { \\\"notifyTime\\\": { \\\"order\\\": \\\"desc\\\" } } ], \\\"from\\\": 1000 \\\"size\\\": 3 } \"]},\"784\":{\"h\":\"DeleteRequest、DeleteByQueryRequest区别\"},\"785\":{\"h\":\"原生查询api\"},\"786\":{\"h\":\"java-api\",\"t\":[\"search查询\",\"//SearchSourceBuilder sourceBuilder = alarmLogMapper.getSearchSourceBuilder(wrapper); //sourceBuilder.from(10000); //sourceBuilder.size(10); //wrapper.setSearchSourceBuilder(sourceBuilder); //sourceBuilder.trackTotalHits(Boolean.TRUE); // //SearchResponse searchResponse = alarmLogMapper.search(wrapper); //SearchHit[] hits = searchResponse.getHits().getHits(); //List<AlarmLog> logs = new ArrayList<>(); //for (SearchHit hit : hits) { // AlarmLog log = JSON.parseObject(hit.getSourceAsString(), AlarmLog.class); // logs.add(log); //} //log.info(JSON.toJSONString(logs)); //SearchScrollRequest scrollRequest = new SearchScrollRequest(); // \",\"清除缓存\",\"public boolean clearIndicesCache(String indexName){ try { ClearIndicesCacheRequest request = new ClearIndicesCacheRequest(indexName); //Set the query flag to true request.queryCache(true); // Set the fielddata flag to true request.fieldDataCache(true); // Set the request flag to true request.requestCache(true); ClearIndicesCacheResponse response = restHighLevelClient.indices().clearCache(request, RequestOptions.DEFAULT); if (response.getFailedShards()>0) { return false; } return true; } catch (Exception e) { e.printStackTrace(); } return false; } \",\"聚合\",\" PropertyCountVO propertyCountVO = new PropertyCountVO(); //获取当前用户下所有产品id LambdaQueryWrapper<DeviceProduct> productWrapper = new LambdaQueryWrapper<>(); productWrapper.eq(DeviceProduct::getIsDelete, Boolean.FALSE); UserUtils.addUserIdTerm(productWrapper); List<String> productIds = deviceProductMapper.selectList(productWrapper).stream().map(DeviceProduct::getId).collect(Collectors.toList()); if (CollectionUtil.isEmpty(productIds) || StringUtils.isBlank(propertyCountQuery.getType()) || null == propertyCountQuery.getStartTime() || null == propertyCountQuery.getEndTime()) { return Result.succeed(propertyCountVO); } //聚合 String indexName = IndexConstants.DEVICE_DATA_PROPERTY_ALIAS; LambdaEsQueryWrapper<DevicePoint> lambdaQueryWrapper = new LambdaEsQueryWrapper<>(); lambdaQueryWrapper.index(indexName); lambdaQueryWrapper.in(DevicePoint::getProductId, productIds); lambdaQueryWrapper.ge(DevicePoint::getCreateTime, propertyCountQuery.getStartTime().getTime()); lambdaQueryWrapper.le(DevicePoint::getCreateTime, propertyCountQuery.getEndTime().getTime()); lambdaQueryWrapper.orderByDesc(DevicePoint::getCreateTime); SearchSourceBuilder builder = devicePointMapper.getSearchSourceBuilder(lambdaQueryWrapper); DateHistogramAggregationBuilder dateHistogramAggregationBuilder = new DateHistogramAggregationBuilder(PROPERTY_COUNT); dateHistogramAggregationBuilder.timeZone(ZoneId.systemDefault()); dateHistogramAggregationBuilder.field(\\\"createTime\\\"); if (HOUR.equals(propertyCountQuery.getType())) { dateHistogramAggregationBuilder.calendarInterval(DateHistogramInterval.HOUR).format(HOUR_FORMAT); } else if (DAY.equals(propertyCountQuery.getType())) { dateHistogramAggregationBuilder.calendarInterval(DateHistogramInterval.DAY).format(DAY_FORMAT); } else { dateHistogramAggregationBuilder.calendarInterval(DateHistogramInterval.MONTH).format(MONTH_FORMAT); } builder.aggregation(dateHistogramAggregationBuilder); lambdaQueryWrapper.setSearchSourceBuilder(builder); try { log.info(\\\"查询条件\\\", lambdaQueryWrapper); SearchResponse searchResponse = devicePointMapper.search(lambdaQueryWrapper); Map<String, Aggregation> resultMap = searchResponse.getAggregations().asMap(); if (CollectionUtils.isNotEmpty(resultMap)) { if (resultMap.containsKey(PROPERTY_COUNT)) { Histogram histogram = (Histogram) resultMap.get(PROPERTY_COUNT); List<? extends Histogram.Bucket> buckets = histogram.getBuckets(); if (CollectionUtils.isNotEmpty(buckets)) { List<PropertyCountVO.DateValue> dateValues; Long count = buckets.stream().map(MultiBucketsAggregation.Bucket::getDocCount).mapToLong(item->item).sum(); dateValues = buckets.stream().map(item -> { PropertyCountVO.DateValue value = new PropertyCountVO.DateValue(); value.setCount(item.getDocCount()); value.setTimeString(item.getKeyAsString()); return value; }).collect(Collectors.toList()); propertyCountVO.setDateCount(dateValues); propertyCountVO.setTotalCount(count); } } } } catch (Exception e) { log.error(\\\"未知错误\\\", e); } \"]},\"787\":{\"h\":\"flink\",\"t\":[\"流式计算\"]},\"788\":{\"h\":\"术语\"},\"789\":{\"h\":\"sink\",\"t\":[\"在计算机语言中，\\\"sink\\\"可以翻译为\\\"汇\\\"、\\\"消费者\\\"或\\\"输出端\\\"。它指的是一个接收数据并处理或输出数据的组件或模块。在数据流处理框架中，\",\"\\\"sink\\\"通常用来表示将数据写入外部系统（如数据库、消息队列、文件等）或者在数据处理流程中终止数据流的操作。\"]},\"790\":{\"h\":\"引入\",\"t\":[\" <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-streaming-java</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-clients</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-connector-kafka</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-connector-rabbitmq</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-connector-base</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-connector-base</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>org.apache.flink</groupId> <artifactId>flink-statebackend-rocksdb</artifactId> <version>${flink.version}</version> </dependency> <dependency> <groupId>mysql</groupId> <artifactId>mysql-connector-java</artifactId> </dependency> \"]},\"791\":{\"h\":\"使用\",\"t\":[\"StreamExecutionEnvironment\",\"ParameterTool\",\"DataStream\",\"BroadcastStream\",\"RichSourceFunction\",\"ReadOnlyBroadcastState\",\"RMQSink\",\"KafkaSource\"]},\"792\":{\"h\":\"使用样例\",\"t\":[\"package com.chint.iot.rule.engine.evaluator; import com.chint.iot.rule.engine.config.FlinkConfig; import com.chint.iot.rule.engine.functions.DynamicAlertFunction; import com.chint.iot.rule.engine.functions.DynamicKeyFunction; import com.chint.iot.rule.engine.pojo.DeviceData; import com.chint.iot.rule.engine.pojo.TriggerConfig; import com.chint.iot.rule.engine.pojo.TriggerSink; import com.chint.iot.rule.engine.sinks.RichRMQSink; import com.chint.iot.rule.engine.sinks.TriggerSinkStream; import com.chint.iot.rule.engine.sources.MysqlSourceFunction; import com.chint.iot.rule.engine.util.ExternalDataSourceSink; import org.apache.flink.api.common.eventtime.WatermarkStrategy; import org.apache.flink.api.common.restartstrategy.RestartStrategies; import org.apache.flink.api.common.state.MapStateDescriptor; import org.apache.flink.api.common.time.Time; import org.apache.flink.api.common.typeinfo.BasicTypeInfo; import org.apache.flink.api.common.typeinfo.TypeInformation; import org.apache.flink.api.java.typeutils.ListTypeInfo; import org.apache.flink.api.java.utils.ParameterTool; import org.apache.flink.connector.kafka.source.KafkaSource; import org.apache.flink.streaming.api.datastream.BroadcastStream; import org.apache.flink.streaming.api.datastream.DataStream; import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment; import org.apache.kafka.clients.consumer.ConsumerRecord; import java.util.HashMap; import java.util.List; import java.util.Map; //@Slf4j public class RulesEvaluator { private ParameterTool parameterTool; private FlinkConfig config; public RulesEvaluator(FlinkConfig flinkConfig) { this.config = flinkConfig; } public void run() throws Exception { StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment(); Map<String, String> map = new HashMap<>(); map.put(\\\"deviceUrl\\\", config.getDeviceUrl()); map.put(\\\"mysql.url\\\", config.getMysql().getUrl()); map.put(\\\"mysql.user\\\", config.getMysql().getUser()); map.put(\\\"mysql.passwd\\\", config.getMysql().getPasswd()); map.put(\\\"mysql.jdbc.driver\\\", config.getMysql().getJdbcDriver()); map.put(\\\"mysql.second.interval\\\", config.getMysql().getSecondInterval()); parameterTool = ParameterTool.fromMap(map); env.getConfig().setGlobalJobParameters(parameterTool); env.setRestartStrategy(RestartStrategies.fixedDelayRestart(Integer.MAX_VALUE, Time.seconds(20))); DataStream<List<TriggerConfig>> sceneRuleStream = getRuleScenesStream(env); BroadcastStream<List<TriggerConfig>> sceneRuleKeyBroadcastStream = sceneRuleStream.broadcast(Descriptors.sceneRuleKeyDescriptor); BroadcastStream<List<TriggerConfig>> sceneBroadcastStream = sceneRuleStream.broadcast(Descriptors.sceneRuleDescriptor); DataStream<DeviceData> transactions = getTransactionsStream(env); int transactionParallelism = config.getConfig().getTransactionParallelism(); DataStream<TriggerSink> scenes = transactions .connect(sceneRuleKeyBroadcastStream) .process(new DynamicKeyFunction()) .setParallelism(transactionParallelism) .uid(\\\"DynamicKeyFunction\\\") .name(\\\"Dynamic Partitioning Function\\\") .keyBy((keyed) -> keyed.getKey()) .connect(sceneBroadcastStream) .process(new DynamicAlertFunction()) .setParallelism(transactionParallelism) .uid(\\\"DynamicAlertFunction\\\") .name(\\\"Trigger process\\\"); Integer sinkParallelism = config.getConfig().getSinkParallelism(); DataStream<String> triggersJson = TriggerSinkStream.triggerSinkStreamToJson(scenes, sinkParallelism); triggersJson.print(); triggersJson .addSink(RichRMQSink.createRichRMQSink(config)) .setParallelism(sinkParallelism) .name(\\\"triggers JSON Sink\\\"); env.execute(\\\"Trigger Detection Engine\\\"); } private DataStream<DeviceData> getTransactionsStream(StreamExecutionEnvironment env) { int sourceParallelism = config.getConfig().getSourceParallelism(); KafkaSource<ConsumerRecord<String, String>> transactionSource = ExternalDataSourceSink.createTransactionsSource(config); DataStream<ConsumerRecord<String, String>> transactionStringsStream = env.fromSource(transactionSource, WatermarkStrategy.noWatermarks(), \\\"Kafka Source\\\") .name(\\\"Transactions Source\\\") .setParallelism(sourceParallelism); DataStream<String> devicesTransactionStream = ExternalDataSourceSink .multipleToSingleStringStream(transactionStringsStream, sourceParallelism); DataStream<DeviceData> deviceTransactionsStream = ExternalDataSourceSink.stringsStreamToDeviceData(devicesTransactionStream, sourceParallelism); return deviceTransactionsStream; } private DataStream<List<TriggerConfig>> getRuleScenesStream(StreamExecutionEnvironment env) { DataStream<List<TriggerConfig>> ruleScenesStream = env .addSource(new MysqlSourceFunction()) .name(\\\"RuleScene Source\\\") .setParallelism(1); return ruleScenesStream; } public static class Descriptors { public static final MapStateDescriptor<String, List<TriggerConfig>> sceneRuleKeyDescriptor = new MapStateDescriptor<>( \\\"sceneRulesKey\\\", BasicTypeInfo.STRING_TYPE_INFO, new ListTypeInfo<>(TypeInformation.of(TriggerConfig.class))); public static final MapStateDescriptor<String, TriggerConfig> sceneRuleDescriptor = new MapStateDescriptor<>( \\\"sceneRules\\\", BasicTypeInfo.STRING_TYPE_INFO, TypeInformation.of(TriggerConfig.class)); } } \"]},\"793\":{\"h\":\"hikari\"},\"794\":{\"h\":\"原理\",\"t\":[\"参考\",\"参考\"]},\"795\":{\"h\":\"kafka\"},\"796\":{\"h\":\"使用\"},\"797\":{\"h\":\"注意事项\",\"t\":[\"@KafkaListener注解只能循环拉取数据，即使前一次拉取的数据未确认，下一次也不会拉取未确认的数据，会顺序拉取数据，只有重启后才会从偏移处offset拉取消息\"]},\"798\":{\"h\":\"自动提交和手动提交\",\"t\":[\"参考\",\"kafka api\",\"如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll的数据处理完毕之后，将会在下一次poll数据的时候， 首先检查是否到达了auto.commit.interval.ms自动提交间隔的时间，如果到达了（默认5s），那么会提交此前拉取的消息的最大偏移量，否则不会提交。\",\"如果enable.auto.commit为false，则表示手动提交，那么需要通过consumer.commitAsync()或者commitSync()手动提交偏移量， 这两个方法将会提交目前最大的offset，否则重启之后将会消费此前的数据。\",\"kafka listener\",\"如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll的数据处理完毕之后，将会在下一次poll数据的时候，首先检查是否到达了auto.commit.interval.ms自动提交间隔的时间，如果到达了（默认5s），那么会提交此前拉去的消息的最大偏移量，否则不会提交。\",\"如果enable.auto.commit为false，则表示手动提交，此时需要注意选择提交的模式AckMode。\",\"BATCH：默认的提交模式。当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交，由Spring帮我们提交。\",\"RECORD：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交，由Spring帮我们提交。\",\"TIME：当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交，由Spring帮我们提交。\",\"COUNT：当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交，由Spring帮我们提交。\",\"COUNT_TIME：TIME和COUNT有一个条件满足时提交，由Spring帮我们提交。\",\"MANUAL：需要对监听消息的方法中引入 Acknowledgment参数，并在代码中调用acknowledge()方法进行手动提交。实际上，对于每一批poll()的数据，每次调用acknowledge()方法之后仅仅是将offset存放到本地map缓存，在下一次poll的时候，在poll新数据之前从缓存中拿出来批量提交，也就是说与BATCH有相同的语义。\",\"MANUAL_IMMEDIATE：需要对监听消息的方法中引入 Acknowledgment参数，并在代码中调用acknowledge()方法进行手动提交。实际上，对于每一批poll()的数据，每次调用acknowledge()方法之后立即进行偏移量的提交。\",\"MANUAL和MANUAL_IMMEDIATE的区别\",\"MANUAL_IMMEDIATE是消费完一个消息就提交，MANUAL是处理完一批消息（默认500）之后，在下一次拉取消息之前批量提交。\",\"如果中间有一批数据没有提交，那么在一次消费过程中，这些没有提交的数据不会重复消费，而是会一直向后消费，\",\"除非重启消费者，会被再次消费。如果后面有消息的offset被提交，那么该offset之前的所有消息都算作已提交，重启之后也不会被再次消费。\"]},\"799\":{\"h\":\"引入\",\"t\":[\" <dependency> <groupId>org.springframework.kafka</groupId> <artifactId>spring-kafka</artifactId> <version>2.4.0.RELEASE</version> </dependency> \"]},\"800\":{\"h\":\"配置\"},\"801\":{\"h\":\"java类配置\",\"t\":[\"配置主题\",\"/** * kafka 主题配置类 * * @author Leo * @create 2020/12/31 15:57 **/ @Configuration public class KafkaTopicConfiguration { /** * 创建 KafkaAmin，可以自动检测集群中是否存在topic，不存在则创建 * @return */ @Bean public KafkaAdmin kafkaAdmin() { Map<String, Object> props = new HashMap<>(); props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, \\\"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094\\\"); return new KafkaAdmin(props); } @Bean public NewTopic newTopic() { // 创建 topic，指定 名称、分区数、副本数 return new NewTopic(\\\"hello-kafka-test-topic\\\", 3, (short) 2); } } \",\"配置生产者\",\"/** * kafka 生产者配置类 * * @author Leo * @create 2020/12/31 15:09 **/ @Configuration public class KafkaProducerConfiguration { /** * 不包含事务 producerFactory * @return */ public ProducerFactory<String, String> producerFactory() { Map<String, Object> props = new HashMap<>(); //kafka 集群地址 props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \\\"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094\\\"); //重试次数 props.put(ProducerConfig.RETRIES_CONFIG, 3); //应答级别 //acks=0 把消息发送到kafka就认为发送成功 //acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功 //acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功 props.put(ProducerConfig.ACKS_CONFIG, \\\"all\\\"); //KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms props.put(ProducerConfig.MAX_BLOCK_MS_CONFIG, 6000); //批量处理的最大大小 单位 byte props.put(ProducerConfig.BATCH_SIZE_CONFIG, 4096); //发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka props.put(ProducerConfig.LINGER_MS_CONFIG, 1000); //生产者可用缓冲区的最大值 单位 byte props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, 33554432); //每条消息最大的大小 props.put(ProducerConfig.MAX_REQUEST_SIZE_CONFIG, 1048576); //客户端ID props.put(ProducerConfig.CLIENT_ID_CONFIG, \\\"hello-kafka\\\"); //Key 序列化方式 props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); //Value 序列化方式 props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName()); //消息压缩：none、lz4、gzip、snappy，默认为 none。 props.put(ProducerConfig.COMPRESSION_TYPE_CONFIG, \\\"gzip\\\"); //自定义分区器 props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG, MyPartitioner.class.getName()); return new DefaultKafkaProducerFactory<>(props); } /** * 包含事务 producerFactory * @return */ public ProducerFactory<String, String> producerFactoryWithTransaction() { DefaultKafkaProducerFactory<String, String> defaultKafkaProducerFactory = (DefaultKafkaProducerFactory<String, String>) producerFactory(); //设置事务Id前缀 defaultKafkaProducerFactory.setTransactionIdPrefix(\\\"tx\\\"); return defaultKafkaProducerFactory; } /** * 不包含事务 kafkaTemplate * @return */ @Bean(\\\"kafkaTemplate\\\") public KafkaTemplate<String, String> kafkaTemplate() { return new KafkaTemplate<>(producerFactory()); } /** * 包含事务 kafkaTemplate * @return */ @Bean(\\\"kafkaTemplateWithTransaction\\\") public KafkaTemplate<String, String> kafkaTemplateWithTransaction() { return new KafkaTemplate<>(producerFactoryWithTransaction()); } /** * 以该方式配置事务管理器：就不能以普通方式发送消息，只能通过 kafkaTemplate.executeInTransaction 或 * 在方法上加 @Transactional 注解来发送消息，否则报错 * @param producerFactory * @return */ // @Bean // public KafkaTransactionManager<Integer, String> kafkaTransactionManager(ProducerFactory<Integer, String> producerFactory) { // return new KafkaTransactionManager<>(producerFactory); // } } \",\"配置消费者\",\"/** * kafka 消费者配置类 * * @author Leo * @create 2020/12/31 15:09 **/ @Slf4j @Configuration public class KafkaConsumerConfiguration { @Bean public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, String>> kafkaListenerContainerFactory() { ConcurrentKafkaListenerContainerFactory<String, String> factory = new ConcurrentKafkaListenerContainerFactory<>(); //设置 consumerFactory factory.setConsumerFactory(consumerFactory()); //设置是否开启批量监听 factory.setBatchListener(false); //设置消费者组中的线程数量 factory.setConcurrency(1); return factory; } /** * consumerFactory * @return */ public ConsumerFactory<String, Object> consumerFactory() { Map<String, Object> props = new HashMap<>(); //kafka集群地址 props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \\\"127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094\\\"); //自动提交 offset 默认 true props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, false); //自动提交的频率 单位 ms props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, 1000); //批量消费最大数量 props.put(ConsumerConfig.MAX_POLL_RECORDS_CONFIG, 100); //消费者组 props.put(ConsumerConfig.GROUP_ID_CONFIG, \\\"testGroup\\\"); //session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作 props.put(ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, 120000); //请求超时 props.put(ConsumerConfig.REQUEST_TIMEOUT_MS_CONFIG, 120000); //Key 反序列化类 props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); //Value 反序列化类 props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName()); //当kafka中没有初始offset或offset超出范围时将自动重置offset //earliest:重置为分区中最小的offset //latest:重置为分区中最新的offset(消费分区中新产生的数据) //none:只要有一个分区不存在已提交的offset,就抛出异常 props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \\\"latest\\\"); //设置Consumer拦截器 props.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, MyConsumerInterceptor.class.getName()); return new DefaultKafkaConsumerFactory<>(props); } /** * 消费异常处理器 * @return */ @Bean public ConsumerAwareListenerErrorHandler consumerAwareListenerErrorHandler() { return new ConsumerAwareListenerErrorHandler() { @Override public Object handleError(Message<?> message, ListenerExecutionFailedException exception, Consumer<?, ?> consumer) { //打印消费异常的消息和异常信息 log.error(\\\"consumer failed! message: {}, exceptionMsg: {}, groupId: {}\\\", message, exception.getMessage(), exception.getGroupId()); return null; } }; } } \"]},\"802\":{\"h\":\"配置文件配置\",\"t\":[\"spring: application: name: hello-kafka kafka: listener: #设置是否批量消费，默认 single（单条），batch（批量） type: single # 集群地址 bootstrap-servers: 127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094 # 生产者配置 producer: # 重试次数 retries: 3 # 应答级别 # acks=0 把消息发送到kafka就认为发送成功 # acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功 # acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功 acks: all # 批量处理的最大大小 单位 byte batch-size: 4096 # 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka buffer-memory: 33554432 # 客户端ID client-id: hello-kafka # Key 序列化类 key-serializer: org.apache.kafka.common.serialization.StringSerializer # Value 序列化类 value-serializer: org.apache.kafka.common.serialization.StringSerializer # 消息压缩：none、lz4、gzip、snappy，默认为 none。 compression-type: gzip properties: partitioner: #指定自定义分区器 class: top.zysite.hello.kafka.partitioner.MyPartitioner linger: # 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka ms: 1000 max: block: # KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms ms: 6000 # 消费者配置 consumer: # 默认消费者组 group-id: testGroup # 自动提交 offset 默认 true enable-auto-commit: false # 自动提交的频率 单位 ms auto-commit-interval: 1000 # 批量消费最大数量 max-poll-records: 100 # Key 反序列化类 key-deserializer: org.apache.kafka.common.serialization.StringDeserializer # Value 反序列化类 value-deserializer: org.apache.kafka.common.serialization.StringDeserializer # 当kafka中没有初始offset或offset超出范围时将自动重置offset # earliest:重置为分区中最小的offset # latest:重置为分区中最新的offset(消费分区中新产生的数据) # none:只要有一个分区不存在已提交的offset,就抛出异常 auto-offset-reset: latest properties: interceptor: classes: top.zysite.hello.kafka.interceptor.MyConsumerInterceptor session: timeout: # session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作 ms: 120000 request: timeout: # 请求超时 ms: 120000 \"]},\"803\":{\"h\":\"样例\",\"t\":[\"参考\"]},\"804\":{\"h\":\"消费者\",\"t\":[\"单记录消费 - 手动确认\",\"/** * 定义biz1消息接收者 * * @param message * @kafka.topic topic1 * @kafka.group group1 */ @KafkaListener( id = \\\"biz1-${spring.kafka.biz1.consumer.group}\\\", groupId = \\\"${spring.kafka.biz1.consumer.group}\\\", topics = \\\"${spring.kafka.biz1.topic}\\\") public void biz1Consumer(String message, Acknowledgment ack) { log.info(\\\"[biz1Consumer] RECV MSG: {}\\\", message); //确认单当前消息（及之前的消息）offset均已被消费完成 ack.acknowledge(); //拒绝当前消息（此方法仅适用于listener.type=single） //当前poll查询出的剩余消息记录均被抛弃， //且当前消费线程在阻塞指定sleep（如下3000毫秒）后重新调用poll获取待消费消息（包括之前poll被抛弃的消息） //ack.nack(3000) } \",\"批量消费 - 手动确认\",\"/** * 定义biz1消息接收者 * 手动模式（需手动ack）： * 1. listener.type=batch * 2. ack-mode=manual * * @param messages * @kafka.topic topic1 * @kafka.group group1 */ @KafkaListener( id = \\\"biz1-${spring.kafka.biz1.consumer.group}\\\", groupId = \\\"${spring.kafka.biz1.consumer.group}\\\", //仅在多partition单个消费者时，用于多线程消费消息（concurrency <= partition数量） //当存在多个消费者时，即便设置concurrency > 1也仅有唯一消费线程生效 concurrency = \\\"${spring.kafka.biz1.consumer.concurrency}\\\", topics = \\\"${spring.kafka.biz1.topic}\\\") public void biz1Consumer(List<String> messages, Acknowledgment ack) { log.info(\\\"[biz1Consumer] RECV MSG COUNT: {}\\\", messages.size()); log.info(\\\"[biz1Consumer] RECV MSG[0]: {}\\\", messages.get(0)); //确认单当前消息（及之前的消息）offset均已被消费完成 ack.acknowledge(); //拒绝消息列表中指定index（发生错误的消息index）对应的消息（此方法仅适用于listener.type=batch）， //当前指定index之前的消息会被成功提交， //当前poll查询出的剩余消息记录（包括当前指定的index）均被抛弃， //且当前消费线程在阻塞指定sleep（如下3000毫秒）后重新调用poll获取待消费消息（包括当前index及之前poll抛弃的消息） //如下即确认当前list中前5条消息（0-4），抛弃当前list中后续消息，3秒后再次poll查询未消费消息 //ack.nack(5, 3000); } /** * 定义biz2消息接收者 * 手动模式（需手动ack）： * 1. listener.type=batch * 2. ack-mode=manual * * @param messages * @kafka.topic topic2 * @kafka.group group2 */ @KafkaListener( id = \\\"biz2-${spring.kafka.biz2.consumer.group}\\\", groupId = \\\"${spring.kafka.biz2.consumer.group}\\\", //消费指定分区 topicPartitions = { @TopicPartition(topic = \\\"${spring.kafka.biz2.topic}\\\", partitions = \\\"${spring.kafka.biz2.consumer.partitions}\\\") }) public void biz2Consumer(List<Message> messages, Acknowledgment ack) { log.info(\\\"[biz2Consumer] RECV MSG COUNT: {}\\\", messages.size()); log.info(\\\"[biz2Consumer] RECV MSG[0]: {}\\\", messages.get(0)); //确认单当前消息（及之前的消息）offset均已被消费完成 ack.acknowledge(); } \"]},\"805\":{\"h\":\"常用命令\"},\"806\":{\"h\":\"生产\"},\"807\":{\"h\":\"消费\"},\"808\":{\"h\":\"多线程消费\",\"t\":[\"Kafka自身并没有多线程消费的模式，可采用如rocketmq的方式进行消费\",\"每次批量消费消息，采用工作线程池来对消息进行消费\"]},\"809\":{\"h\":\"spingboot初始化分析\"},\"810\":{\"h\":\"KafkaBootstrapConfiguration\"},\"811\":{\"h\":\"KafkaListenerAnnotationBeanPostProcessor\",\"t\":[\"获取被@KafkaListener注解的类或方法\",\"获取KafkaListenerContainerFactory\",\"afterSingletonsInstantiated注册监听器容器 \",\"KafkaListenerEndpointRegistrar\",\"KafkaListenerEndpointRegistry # registerListenerContainer\",\"finishRefresh触发生命周期方法启动监听器容器 \",\"KafkaListenerEndpointRegistry # start\"]},\"812\":{\"h\":\"ConcurrentMessageListenerContainer#AbstractMessageListenerContainer\",\"t\":[\"start\"]},\"813\":{\"h\":\"kafkaMessageListenerContainer#ListenerConsumer\"},\"814\":{\"h\":\"run\",\"t\":[\"initAssignedPartitions\",\"pollAndInvoke()\",\"doPull\",\"pollConsumer\"]},\"815\":{\"h\":\"kafkaConsumer\",\"t\":[\"poll\"]},\"816\":{\"h\":\"ConsumerCoordinator\",\"t\":[\"用于分区的分配\",\"ensureActiveGroup\",\"joinGroupIfNeeded\",\"onJoinComplete\",\"invokePartitionsAssigned\"]},\"817\":{\"h\":\"mqtt\"},\"818\":{\"h\":\"paho-mqtt5-client\",\"t\":[\"ClientState是核心，类似于中介者,CommsReceiver和CommsSender与其交互获取消息\"]},\"819\":{\"h\":\"MqttAsyncClient\",\"t\":[\"connect方法\",\"准备ClientComms\",\"设置网络模块\",\"重连回调\",\"connectActionListener#connect进行连接\",\"startReconnectCycle\"]},\"820\":{\"h\":\"MqttAsyncClient下的MqttReconnectCallback\",\"t\":[\"判断是否自动重连，调用startReconnectCycle方法\"]},\"821\":{\"h\":\"MqttToken\",\"t\":[\"setActionCallback设置回调\"]},\"822\":{\"h\":\"TokenStore\"},\"823\":{\"h\":\"MqttPingReq\"},\"824\":{\"h\":\"ClientState\",\"t\":[\"属性\",\"pingOutStanding ping的次数\",\"lastInboundActivity 最后收到消息时间\",\"lastOutboundActivity 最后发送消息时间\",\"inUseMsgIds 已使用消息id列表\",\"pendingFlows 其他要发送的消息\",\"pendingMessages 存放要发布的消息\",\"actualInFlight\",\"方法\",\"checkForActivity方法,校验是否超过保活时间，在保活时间内发送ping到server验证server是否存活\",\"send方法\",\"notifySent方法 被CommsSender调用 消息已发送\",\"notifyReceivedMsg方法 被CommsSender调用 消息已到达\"]},\"825\":{\"h\":\"send方法\",\"t\":[\"设置消息id\",\"校验消息类型为MqttPublish、MqttConnect\"]},\"826\":{\"h\":\"ConnectActionLister\",\"t\":[\"connect方法,创建token,调用ClientComms的connect方法\"]},\"827\":{\"h\":\"ClientComms\",\"t\":[\"实例化时\",\"创建tokenstore\",\"创建callback回调\",\"创建clientState\",\"callback回调中设置clientState\"]},\"828\":{\"h\":\"connect方法\",\"t\":[\"准备连接信息对象MqttConnect\",\"创建ConnectBG对象，并启动\"]},\"829\":{\"h\":\"internalSend方法\",\"t\":[\"调用clientState的send方法\"]},\"830\":{\"h\":\"checkForActivity 检查活跃度\"},\"831\":{\"h\":\"shutdownConnection方法\",\"t\":[\"被CommsReceiver触发调用\"]},\"832\":{\"h\":\"ClientComms#ConnectBG\",\"t\":[\"核心类，它是一个内部私有类\"]},\"833\":{\"h\":\"run\",\"t\":[\"缓存token 即以要发送消息的key作为键，token作为值\",\"启动网络模块connect\",\"启动receiver、sender、callback线程\",\"internalSend发送验证信息进行验证\",\"public void run() { Thread.currentThread().setName(threadName); final String methodName = \\\"connectBG:run\\\"; MqttException mqttEx = null; // @TRACE 220=> log.fine(CLASS_NAME, methodName, \\\"220\\\"); try { // Reset an exception on existing delivery tokens. // This will have been set if disconnect occurred before delivery was // fully processed. MqttToken[] toks = tokenStore.getOutstandingDelTokens(); for (MqttToken tok : toks) { tok.internalTok.setException(null); } // Save the connect token in tokenStore as failure can occur before send tokenStore.saveToken(conToken, conPacket); // Connect to the server at the network level e.g. TCP socket and then // start the background processing threads before sending the connect // packet. NetworkModule networkModule = networkModules[networkModuleIndex]; networkModule.start(); receiver = new CommsReceiver(clientComms, clientState, tokenStore, networkModule.getInputStream()); receiver.start(\\\"MQTT Rec: \\\" + getClient().getClientId(), executorService); sender = new CommsSender(clientComms, clientState, tokenStore, networkModule.getOutputStream()); sender.start(\\\"MQTT Snd: \\\" + getClient().getClientId(), executorService); callback.start(\\\"MQTT Call: \\\" + getClient().getClientId(), executorService); internalSend(conPacket, conToken); } catch (MqttException ex) { // @TRACE 212=connect failed: unexpected exception log.fine(CLASS_NAME, methodName, \\\"212\\\", null, ex); mqttEx = ex; } catch (Exception ex) { // @TRACE 209=connect failed: unexpected exception log.fine(CLASS_NAME, methodName, \\\"209\\\", null, ex); mqttEx = ExceptionHelper.createMqttException(ex); } if (mqttEx != null) { shutdownConnection(conToken, mqttEx, null); } } } \"]},\"834\":{\"h\":\"CommsCallback\",\"t\":[\"completeQueue完成队列，触发ConnectedComplete的方法的前置判断\",\"messageArrived方法，增加消息到messageQueue,注意如果消息队列中消息大于10条，这里会自旋等待\",\"connectionLost 触发重连回调\",\"run方法，循环消费消息\"]},\"835\":{\"h\":\"CommsSender\",\"t\":[\"start()\",\"stop\",\"run方法\"]},\"836\":{\"h\":\"run\",\"t\":[\"调用ClientState的get方法获取要发送的消息\",\"使用OutputStream将消息发送出去\",\"调用ClientState的notifySent方法\"]},\"837\":{\"h\":\"CommsReceiver\",\"t\":[\"start\",\"stop\",\"run\"]},\"838\":{\"h\":\"run\",\"t\":[\"从输入流中获取字节数据转为消息对象\",\"判断消息类型，调用回调Callback相应的方法\"]},\"839\":{\"h\":\"MqttInputStream\",\"t\":[\"DataInputStream\",\"ByteArrayOutputStream\",\"readMqttWireMessage\"]},\"840\":{\"h\":\"TcpNetworkModule实现NetworkModule\",\"t\":[\"socket属性\",\"SocketFactory\",\"start方法 创建socket，连接服务器\"]},\"841\":{\"h\":\"Timer\",\"t\":[\"定时器主要用于延迟执行任务\"]},\"842\":{\"h\":\"Timer#TimerThread\",\"t\":[\"TaskQueue任务队列\",\"run方法 执行mainLoop\",\"mainLoop方法,从任务队列获取任务执行\"]},\"843\":{\"h\":\"TimerPingSender\",\"t\":[\"定时ping发送器\",\"方法\",\"init 初始化设置ClientComms对象\",\"start 启动延迟执行任务\",\"stop\",\"schedule 选择使用哪种延时执行器\",\"内部类\",\"PingTask类实现TimerTask接口\",\"PingRunnable实现Runnable接口\"]},\"844\":{\"h\":\"重复订阅分析\"},\"845\":{\"h\":\"设置保活时间间隔keepAliveInterval作用\",\"t\":[\"客户端判断broker是否存活\",\"服务器判断是否客户端存活\",\"emq的处理是1.5倍保活时间内未收到客户端任何报文则断开连接\"]},\"846\":{\"h\":\"原因\",\"t\":[\"开启重连问题\",\"在回调中进行订阅的问题，可能性不大，因为订阅是异步，并不会阻塞\",\"broker断开连接，导致重复连接\",\"同一clientid问题\",\"模拟器和设备调试的客户端id相同问题\",\"emqx版本问题\"]},\"847\":{\"h\":\"解决方法\",\"t\":[\"尝试关闭保活间隔，但会导致连接状态不准确\"]},\"848\":{\"h\":\"已定位问题，解决方案\",\"t\":[\"由于重连时，订阅主题为空，导致客户端收到服务端断开连接的143响应，断开连接shutdownConnection，触发callback的connectionLost方法进行重连startReconnectCycle\",\"重连时判断订阅主题是否为空\"]},\"849\":{\"h\":\"mybatis\",\"t\":[\"核心\",\"数据源datasource\",\"Configuration\",\"sqlSessionFactory\",\"sqlSessionTemplate\",\"代理对象\",\"缓存\"]},\"850\":{\"h\":\"DataSource\",\"t\":[\"# 数据库配置 #数据库连接池名 spring.datasource.name=test # 数据库连接地址 spring.datasource.url=${DATASOURCE_URL:jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/${MYSQL_DATASOURCE:scms_bms}?useUnicode=true&characterEncoding=UTF8} # 数据库账号 spring.datasource.username=${MYSQL_USER:root} # 数据库密码 spring.datasource.password=${MYSQL_PASSWORD:root} # 数据库驱动名 spring.datasource.driver-class-name=com.mysql.jdbc.Driver # 数据库连接池类型 spring.datasource.type=com.zaxxer.hikari.HikariDataSource # 池中维护的最小空闲连接数 spring.datasource.hikari.minimum-idle=5 # 池中最大连接数，包括闲置和使用中的连接 如果maxPoolSize小于1，则会被重置。当minIdle<=0被重置为DEFAULT_POOL_SIZE则为10;如果minIdle>0则重置为minIdle的值 spring.datasource.hikari.maximum-pool-size=15 # 自动提交从池中返回的连接 spring.datasource.hikari.auto-commit=true # 连接允许在池中闲置的最长时间 spring.datasource.hikari.idle-timeout=30000 # 连接池的用户定义名称，主要出现在日志记录和JMX管理控制台中以识别池和池配置 spring.datasource.hikari.pool-name=DatebookHikariCP # 池中连接最长生命周期 如果不等于0且小于30秒则会被重置回30分钟 spring.datasource.hikari.max-lifetime=1800000 # 等待来自池的连接的最大毫秒数 如果小于250毫秒，则被重置回30秒 spring.datasource.hikari.connection-timeout=30000 # 连接健康测试的sql spring.datasource.hikari.connection-test-query=SELECT 1 \",\"Java SQL框架允许多个数据库驱动程序。每个驱动程序都应该提供一个实现driver接口的类 DriverManager将尝试加载尽可能多的驱动程序，因为它可以找到，然后为任何给定的连接请求，它将轮流要求每个驱动程序尝试连接到目标URL。 当一个Driver类被加载时，它应该创建一个自己的实例并注册到DriverManager。这意味着用户可以加载和注册 根据application.yml中的配置，构建数据源Datasource,包括以下信息： 1、数据库地址端口、用户名密码 2、数据库驱动名 spring.datasource.driver-class-name=com.mysql.jdbc.Driver，用于连接目标数据库 3、数据库连接池配置 - 使用的数据库连接池 com.alibaba.druid.pool.DruidDataSource com.zaxxer.hikari.HikariDataSource - 对应连接池配置 \"]},\"851\":{\"h\":\"jar包引用方式\",\"t\":[\"springBoot仅仅是通过starter，以及自动配置相关的： 1、spring.factiries 2、@Configure 来简化配置，自动将bean注册到spring的ioc容器中构建组件运行环境 springboot的核心jar包如下，每个支持springboot自动配置的组件都会引用 org.springframework.boot: spring-boot:2.3.9.RLEASE org.springframework.boot: spring-boot-autoConfigure:2.3.9.RLEASE 用于读取配置文件的信息，来进行自动配置，如 \",\"通过starter引入jar包构建web环境： org.springframework.boot:spring-boot-starter-web:2.3.2.RELEASE compile 'org.springframework:spring-jdbc:5.2.18.Release' compile 'org.springframework:spring-aop:5.2.18.Release' compile 'org.springframework:spring-webmvc:5.2.18.Release' 单独引用：对spring的版本升级，它会对以上版本进行覆盖，更新如下最新版本 compile 'org.springframework:spring-jdbc:5.3.18' compile 'org.springframework:spring-aop:5.3.18' compile 'org.springframework:spring-webmvc:5.3.18' \"]},\"852\":{\"h\":\"工作原理\",\"t\":[\"mybatis-config.xml\",\"使用了springboot的自动配置功能代替配置文件配置的方式 # mybatis配置 # mybatis mapper扫描路径 mybatis.mapper-locations=classpath*:mapper/*.xml # mybatis实体类扫描路径 mybatis.type-aliases-package=com.saascloud.scms.wms.entity # 自动驼峰命名转换 mybatis.configuration.map-underscore-to-camel-case=true # mybatis的mapper父类 mapper.mappers=com.saascloud.common.core.mapper.CommonMapper # mybatis数据库自增主键类型 #mapper.identity=MYSQL # mybatis是否不能为空 mapper.not-empty=false #ide自动提示mapper为原值 mapper.style=normal \",\"通过sqlSessionFactoryBean的getObject方法得到sqlSessionFactory\",\"@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception { SqlSessionFactoryBean factory = new SqlSessionFactoryBean(); factory.setDataSource(dataSource); factory.setVfs(SpringBootVFS.class); if (StringUtils.hasText(this.properties.getConfigLocation())) { factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation())); } applyConfiguration(factory); if (this.properties.getConfigurationProperties() != null) { factory.setConfigurationProperties(this.properties.getConfigurationProperties()); } if (!ObjectUtils.isEmpty(this.interceptors)) { factory.setPlugins(this.interceptors); } if (this.databaseIdProvider != null) { factory.setDatabaseIdProvider(this.databaseIdProvider); } if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) { factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage()); } if (this.properties.getTypeAliasesSuperType() != null) { factory.setTypeAliasesSuperType(this.properties.getTypeAliasesSuperType()); } if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) { factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage()); } if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) { factory.setMapperLocations(this.properties.resolveMapperLocations()); } return factory.getObject(); } \",\"getObject会调用afterPropertiesSet方法\",\"@Override public SqlSessionFactory getObject() throws Exception { if (this.sqlSessionFactory == null) { afterPropertiesSet(); } return this.sqlSessionFactory; } \",\"afterProperties调用buildSqlSessionFactory方法构建sqlSessionFactory,核心是sqlSessionFactory中的configuration对象(包含xml等mappedStatement信息)\",\"@Override public void afterPropertiesSet() throws Exception { notNull(dataSource, \\\"Property 'dataSource' is required\\\"); notNull(sqlSessionFactoryBuilder, \\\"Property 'sqlSessionFactoryBuilder' is required\\\"); state((configuration == null && configLocation == null) || !(configuration != null && configLocation != null), \\\"Property 'configuration' and 'configLocation' can not specified with together\\\"); this.sqlSessionFactory = buildSqlSessionFactory(); } \",\"buildSqlSessionFactory\",\" protected SqlSessionFactory buildSqlSessionFactory() throws IOException { Configuration configuration; XMLConfigBuilder xmlConfigBuilder = null; if (this.configuration != null) { configuration = this.configuration; if (configuration.getVariables() == null) { configuration.setVariables(this.configurationProperties); } else if (this.configurationProperties != null) { configuration.getVariables().putAll(this.configurationProperties); } } else if (this.configLocation != null) { xmlConfigBuilder = new XMLConfigBuilder(this.configLocation.getInputStream(), null, this.configurationProperties); configuration = xmlConfigBuilder.getConfiguration(); } else { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Property 'configuration' or 'configLocation' not specified, using default MyBatis Configuration\\\"); } configuration = new Configuration(); if (this.configurationProperties != null) { configuration.setVariables(this.configurationProperties); } } if (this.objectFactory != null) { configuration.setObjectFactory(this.objectFactory); } if (this.objectWrapperFactory != null) { configuration.setObjectWrapperFactory(this.objectWrapperFactory); } if (this.vfs != null) { configuration.setVfsImpl(this.vfs); } if (hasLength(this.typeAliasesPackage)) { String[] typeAliasPackageArray = tokenizeToStringArray(this.typeAliasesPackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS); for (String packageToScan : typeAliasPackageArray) { configuration.getTypeAliasRegistry().registerAliases(packageToScan, typeAliasesSuperType == null ? Object.class : typeAliasesSuperType); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Scanned package: '\\\" + packageToScan + \\\"' for aliases\\\"); } } } if (!isEmpty(this.typeAliases)) { for (Class<?> typeAlias : this.typeAliases) { configuration.getTypeAliasRegistry().registerAlias(typeAlias); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Registered type alias: '\\\" + typeAlias + \\\"'\\\"); } } } if (!isEmpty(this.plugins)) { for (Interceptor plugin : this.plugins) { configuration.addInterceptor(plugin); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Registered plugin: '\\\" + plugin + \\\"'\\\"); } } } if (hasLength(this.typeHandlersPackage)) { String[] typeHandlersPackageArray = tokenizeToStringArray(this.typeHandlersPackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS); for (String packageToScan : typeHandlersPackageArray) { configuration.getTypeHandlerRegistry().register(packageToScan); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Scanned package: '\\\" + packageToScan + \\\"' for type handlers\\\"); } } } if (!isEmpty(this.typeHandlers)) { for (TypeHandler<?> typeHandler : this.typeHandlers) { configuration.getTypeHandlerRegistry().register(typeHandler); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Registered type handler: '\\\" + typeHandler + \\\"'\\\"); } } } if (this.databaseIdProvider != null) {//fix #64 set databaseId before parse mapper xmls try { configuration.setDatabaseId(this.databaseIdProvider.getDatabaseId(this.dataSource)); } catch (SQLException e) { throw new NestedIOException(\\\"Failed getting a databaseId\\\", e); } } if (this.cache != null) { configuration.addCache(this.cache); } if (xmlConfigBuilder != null) { try { xmlConfigBuilder.parse(); if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Parsed configuration file: '\\\" + this.configLocation + \\\"'\\\"); } } catch (Exception ex) { throw new NestedIOException(\\\"Failed to parse config resource: \\\" + this.configLocation, ex); } finally { ErrorContext.instance().reset(); } } //默认创建spring事务工厂 if (this.transactionFactory == null) { this.transactionFactory = new SpringManagedTransactionFactory(); } //根据事务工厂和数据源创建环境对象到configuration configuration.setEnvironment(new Environment(this.environment, this.transactionFactory, this.dataSource)); if (!isEmpty(this.mapperLocations)) { for (Resource mapperLocation : this.mapperLocations) { if (mapperLocation == null) { continue; } try { //解析xml文件生成MappedStatement XMLMapperBuilder xmlMapperBuilder = new XMLMapperBuilder(mapperLocation.getInputStream(), configuration, mapperLocation.toString(), configuration.getSqlFragments()); xmlMapperBuilder.parse(); } catch (Exception e) { throw new NestedIOException(\\\"Failed to parse mapping resource: '\\\" + mapperLocation + \\\"'\\\", e); } finally { ErrorContext.instance().reset(); } if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Parsed mapper file: '\\\" + mapperLocation + \\\"'\\\"); } } } else { if (LOGGER.isDebugEnabled()) { LOGGER.debug(\\\"Property 'mapperLocations' was not specified or no matching resources found\\\"); } } return this.sqlSessionFactoryBuilder.build(configuration); } \",\"​\",\"sqlsession\",\"通过sqlSessionFactory的openSession方法获取sqlSession 正常调用mapper接口的方法执行sql操作时会创建sqlSession对象 private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) { Transaction tx = null; try { final Environment environment = configuration.getEnvironment(); final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment); //创建事务对象 tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit); //创建执行器对象，这里可以通过配置拦截器对执行器增强，生成代理对象，在执行query方法时，执行拦截器方法 final Executor executor = configuration.newExecutor(tx, execType); return new DefaultSqlSession(configuration, executor, autoCommit); } catch (Exception e) { closeTransaction(tx); // may have fetched a connection so lets call close() throw ExceptionFactory.wrapException(\\\"Error opening session. Cause: \\\" + e, e); } finally { ErrorContext.instance().reset(); } } \",\"executor\",\"sqlsession拦截器 private class SqlSessionInterceptor implements InvocationHandler { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { SqlSession sqlSession = getSqlSession( SqlSessionTemplate.this.sqlSessionFactory, SqlSessionTemplate.this.executorType, SqlSessionTemplate.this.exceptionTranslator); // sqlSession是defaultSqlSession try { Object result = method.invoke(sqlSession, args); if (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.this.sqlSessionFactory)) { // force commit even on non-dirty sessions because some databases require // a commit/rollback before calling close() sqlSession.commit(true); } return result; } catch (Throwable t) { Throwable unwrapped = unwrapThrowable(t); if (SqlSessionTemplate.this.exceptionTranslator != null && unwrapped instanceof PersistenceException) { // release the connection to avoid a deadlock if the translator is no loaded. See issue #22 closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory); sqlSession = null; Throwable translated = SqlSessionTemplate.this.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped); if (translated != null) { unwrapped = translated; } } throw unwrapped; } finally { if (sqlSession != null) { closeSqlSession(sqlSession, SqlSessionTemplate.this.sqlSessionFactory); } } } } SqlSessionTemplate @Override public <E> List<E> selectList(String statement, Object parameter) { //this.sqlSessionProxy(即sqlsession的代理对象),调用处理器SqlSessionInterceptor return this.sqlSessionProxy.<E> selectList(statement, parameter); } MapperMethod的excute方法,初始化时构建sqlCommand和methodSignature MapperProxy的invoke方法 MapperProxyFactory的newInstance生产mapper接口的代理对象，调用处理器MapperProxy mapperRegistry的getMapper configuration的getMapper MapperFactoryBean的getObject \"]},\"853\":{\"h\":\"拦截器\",\"t\":[\"//mybatis的拦截器可以对Executor,statementHandler,parameterhandler，resltsestHandler增强 核心： @Intercepts( { @Signature(type = Executor.class, method = \\\"query\\\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class}), @Signature(type = Executor.class, method = \\\"query\\\", args = {MappedStatement.class, Object.class, RowBounds.class, ResultHandler.class, CacheKey.class, BoundSql.class}), } ) @Intercepts({@Signature(method = \\\"prepare\\\", type = StatementHandler.class, args = {Connection.class, Integer.class})}) @Override public Object plugin(Object target) { if (target instanceof StatementHandler) { return Plugin.wrap(target, this); } return target; } //分页插件 将分页信息page(当前页，每页条数，是否count数量)放在线程局部变量中：PageHelper.startPage(query.getPage(), query.getLimit()); //在执行jdbc查询前，拦截器进行拦截处理，从线程局部变量中取分页信息构建查询sql语句 //PageInterceptor implements Interceptor,重写intercept方法 \"]},\"854\":{\"h\":\"mapperinterface代理对象的生成\",\"t\":[\"在容器初始化时使用ClasspathMapperScanner,生成mapperinterface的mapperfactoryBean用于生成mapper代理对象 工厂bean通过getObject方法获取其生产的对象\"]},\"855\":{\"h\":\"MapperAutoConfiguration\",\"t\":[\"registerBeanDefinitions方法处理Mapper接口生成beanDefinition注册到spring中，并后置处理为工厂bean\"]},\"856\":{\"h\":\"mybatis-plus\"},\"857\":{\"h\":\"MybatisPlusAutoConfiguration和MybatisAutoConfiguration优先级问题\",\"t\":[\"在AutoConfigurationSorter类中，因为MybatisAutoConfiguration和MybatisPlusAutoConfiguration两个自动配置类都没有指定AutoConfigureOrder， 所以就直接按照全限定类名进行排序了。\"]},\"858\":{\"h\":\"自定义内容\",\"t\":[\"MybatisPlusAutoConfiguration \",\"sqlSessionFactory方法\",\"MybatisSqlSessionFactoryBean \",\"buildSqlSessionFactory方法\",\"MybatisConfiguration\",\"MybatisMapperRegistry继承MapperRegistry\",\"MybatisMapperProxyFactory\",\"MybatisMapperAnnotationBuilder\",\"AutoConfiguredMapperScannerRegistrar\",\" @Configuration @Import(AutoConfiguredMapperScannerRegistrar.class) @ConditionalOnMissingBean({MapperFactoryBean.class, MapperScannerConfigurer.class}) public static class MapperScannerRegistrarNotFoundConfiguration implements InitializingBean { @Override public void afterPropertiesSet() { logger.debug( \\\"Not found configuration for registering mapper bean using @MapperScan, MapperFactoryBean and MapperScannerConfigurer.\\\"); } } \"]},\"859\":{\"h\":\"MapperScannerConfigurer实现BeanDefinitionRegistryPostProcessor\",\"t\":[\"创建ClassPathMapperScanner scanner = new ClassPathMapperScanner(registry);\",\"processBeanDefinitions(beanDefinitions);转为工厂beanDefinition\",\"扫描mapper为MapperFactoryBean\",\"参考依赖注入\",\"参考依赖注入\"]},\"860\":{\"h\":\"配置加载流程\",\"t\":[\"MybatisPlusAutoConfiguration下的sqlSessionFactory方法\",\"MybatisSqlSessionFactoryBean下的buildSqlSessionFactory方法\",\"xmlMapperBuilder.parse()生成对应@Mapper注解的类的方法的MappedStatement\",\"bindMapperForNamespace\",\"MybatisConfiguration的addMapper, mybatisMapperRegistry.addMapper(type);\",\"缓存MapperProxyFactory用于生成Mapper代理对象,knownMappers.put(type, new MybatisMapperProxyFactory<>(type));\",\"MybatisMapperAnnotationBuilder下的parse方法，解析xml为MappedStatement,注入 CURD 动态 SQL ,\"]},\"861\":{\"h\":\"nacos\",\"t\":[\"服务注册 根据ServletWebServerInitializedEvent开启服务注册\",\"服务发现\",\"心跳机制\"]},\"862\":{\"h\":\"客户端侧依赖\",\"t\":[\"配置中心\",\"服务注册与发现\",\"负载均衡\",\"网关\",\" <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-loadbalancer</artifactId> </dependency> <dependency> <groupId>com.alibaba.cloud</groupId> <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-bootstrap</artifactId> </dependency> <dependency> <groupId>org.springframework.cloud</groupId> <artifactId>spring-cloud-starter-gateway</artifactId> </dependency> \"]},\"863\":{\"h\":\"configuration\"},\"864\":{\"h\":\"NacosServiceAutoConfiguration\",\"t\":[\"配置nacos服务管理器 NacosServiceManager\"]},\"865\":{\"h\":\"NacosDiscoveryAutoConfiguration\",\"t\":[\"NacosDiscoveryProperties属性\",\"NacosServiceDiscovery 负责服务发现 包含NacosDiscoveryProperties、NacosServiceManager\"]},\"866\":{\"h\":\"NacosDiscoveryClientConfiguration\",\"t\":[\"DiscoveryClient 包含NacosServiceDiscovery\",\"NacosWatch\"]},\"867\":{\"h\":\"NacosServiceRegistryAutoConfiguration\",\"t\":[\"NacosServiceRegistry\",\"NacosRegistration\",\"NacosAutoServiceRegistration\"]},\"868\":{\"h\":\"NacosServiceManager\"},\"869\":{\"h\":\"NamingService\",\"t\":[\"获取命名服务\",\"public NamingService getNamingService(Properties properties) { if (Objects.isNull(this.namingService)) { buildNamingService(properties); } return namingService; } \"]},\"870\":{\"h\":\"NacosFactory\",\"t\":[\"createConfigService ConfigFactory\",\"createNamingService NamingFactory\",\"createMaintainService NamingMaintainFactory\"]},\"871\":{\"h\":\"NamingFactory的createConfigService\",\"t\":[\"public static NamingService createNamingService(String serverList) throws NacosException { try { Class<?> driverImplClass = Class.forName(\\\"com.alibaba.nacos.client.naming.NacosNamingService\\\"); Constructor constructor = driverImplClass.getConstructor(String.class); NamingService vendorImpl = (NamingService) constructor.newInstance(serverList); return vendorImpl; } catch (Throwable e) { throw new NacosException(NacosException.CLIENT_INVALID_PARAM, e); } } \"]},\"872\":{\"h\":\"NacosNamingService\",\"t\":[\"实例化时会进行init初始化，服务代理，心跳注册器 serverProxy、beatReactor、hostReactor\",\"注册实例\",\"取消注册实例\",\"获取所有实例\",\"查询实例\",\"订阅、取消订阅\",\" private void init(Properties properties) throws NacosException { ValidatorUtils.checkInitParam(properties); this.namespace = InitUtils.initNamespaceForNaming(properties); InitUtils.initSerialization(); initServerAddr(properties); InitUtils.initWebRootContext(properties); initCacheDir(); initLogName(properties); this.serverProxy = new NamingProxy(this.namespace, this.endpoint, this.serverList, properties); this.beatReactor = new BeatReactor(this.serverProxy, initClientBeatThreadCount(properties)); this.hostReactor = new HostReactor(this.serverProxy, beatReactor, this.cacheDir, isLoadCacheAtStart(properties), isPushEmptyProtect(properties), initPollingThreadCount(properties)); } \"]},\"873\":{\"h\":\"NacosServiceRegistry ServiceRegistry\",\"t\":[\"register\",\"deRegister\",\"close\",\"namingService\"]},\"874\":{\"h\":\"NacosServiceDiscovery\",\"t\":[\"getServices\",\"getInstances\",\"namingService\"]},\"875\":{\"h\":\"NacosDiscoveryClient DiscoveryClient\",\"t\":[\"getInstances\",\"getServices\"]},\"876\":{\"h\":\"读取配置中心配置\",\"t\":[\"NacosPropertySourceBuilder的loadNacosData\"]},\"877\":{\"h\":\"NacosConfigAutoConfiguration\"},\"878\":{\"h\":\"NacosConfigManager\",\"t\":[\"获取配置服务NacosConfigService\"]},\"879\":{\"h\":\"NacosContextRefresher\",\"t\":[\"项目启动后，注册监听器\",\"registerNacosListenersForApplications\",\"registerNacosListener\"]},\"880\":{\"h\":\"ClientWorker\",\"t\":[\"cacheMap 缓存配置数据 以dataId, group, tenant拼接为键key\",\"addTenantListeners 增加租户监听器\",\"addCacheDataIfAbsent\",\"getServerConfig 获取配置\",\"checkUpdateDataIds 获取以更新的配置id\"]},\"881\":{\"h\":\"ClientWorker#LongPollingRunnable\",\"t\":[\"长轮询获取已更新的配置id\"]},\"882\":{\"h\":\"NacosConfigService\"},\"883\":{\"h\":\"NacosAutoServiceRegistration\"},\"884\":{\"h\":\"nacos配置自动刷新流程\",\"t\":[\"RefreshEvent\",\"RefreshEventLister\",\"ContextRefresher\",\"EnvironmentChangeEvent\",\"ConfigurationPropertiesRebinder \",\"监听EnvironmentChangeEvent事件\",\"由ConfigurationPropertiesBindingPostProcessor将被@ConfigurationProperties注解的对象放入ConfigurationPropertiesRebinder\"]},\"885\":{\"h\":\"nacos集群\",\"t\":[\"集群搭建\"]},\"886\":{\"h\":\"nacos-server\",\"t\":[\"nacos-api\",\"nacos-config\",\"nacos-naming\",\"nacos-client\",\"nacos-persistence\",\"nacos-consistency\",\"nacos-core\",\"nacos-common\",\"nacos-auth\"]},\"887\":{\"h\":\"nacos-config\",\"t\":[\"待完善\"]},\"888\":{\"h\":\"nacos-naming\"},\"889\":{\"h\":\"HealthController\",\"t\":[\"健康检查接口\"]},\"890\":{\"h\":\"OperatorController\",\"t\":[\"获取一些统计数据\"]},\"891\":{\"h\":\"CatalogController\",\"t\":[\"nacos用户界面使用的接口\"]},\"892\":{\"h\":\"ServiceController\",\"t\":[\"获取命名空间对应组下service列表\"]},\"893\":{\"h\":\"InstanceController\",\"t\":[\"业务\",\"注册实例 \",\"创建instance实例、client客户端(ip+端口)、service服务\",\"添加service,instance到客户端\",\"维护service和client的关系，1对多\",\"取消注册实例\",\"心跳机制\",\"查询服务实例\",\"核心类\",\"ClientManager\",\"Service\",\"ServiceManager 单例\",\"ClientServiceIndexesManager管理Service和client之间关系 1对多\",\"NamingSubscriberService NamingSubscriberServiceV2Impl \",\"PushDelayTaskExecuteEngine 通知订阅service的客户端，instances信息已发生改变，可配置是否启用\",\"ClientManager\",\"ClientServiceIndexesManager\",\"InstanceMetadataProcessor\",\"NamingMetadataManager\"]},\"894\":{\"h\":\"distribution 分布式\",\"t\":[\"负责nacos集群间的数据同步，保证数据一致\"]},\"895\":{\"h\":\"orm\"},\"896\":{\"h\":\"如何处理多数据源？\",\"t\":[\"直接获取jdbc模版jdbcTemplate,设置数据源\",\"调用模版查询方法，对结果处理\"]},\"897\":{\"h\":\"datasource\",\"t\":[\"包含数据库基本信息,即操作的数据库\",\"可配置多数据源\"]},\"898\":{\"h\":\"jdbcTemplate\",\"t\":[\"对数据库操作的jdbc模板,做增删改查操作\"]},\"899\":{\"h\":\"NamedParameterJdbcTemplate\",\"t\":[\"可以使用具体名称形式的占位符，而不是传统的 ? 形式，\",\"样例\",\"select * from student where name = '${name}' \"]},\"900\":{\"h\":\"factory\",\"t\":[\"MiniDaoBeanFactory\",\"自定义生成dao接口的代理对象的工厂bean\",\"public class MiniDaoBeanFactory<T> implements FactoryBean<T> { //dao接口 private Class<T> daoInterface; //代理对象调用处理器 private MiniDaoHandler proxy; @Override public T getObject() throws Exception { return newInstance(); } @Override public Class<?> getObjectType() { return daoInterface; } public MiniDaoHandler getProxy() { return proxy; } @Override public boolean isSingleton() { return true; } //生成代理对象 @SuppressWarnings(\\\"unchecked\\\") private T newInstance() { return (T) Proxy.newProxyInstance(daoInterface.getClassLoader(), new Class[] { daoInterface }, proxy); } public void setProxy(MiniDaoHandler proxy) { this.proxy = proxy; } public void setDaoInterface(Class<T> daoInterface) { this.daoInterface = daoInterface; } } \",\"MiniDaoBeanScannerConfigurer 对BeanFactoryPostProcessor的拓展，允许在常规的BeanFactoryPostProcessor检测生效之前注册进一步的bean定义。 特别地，BeanDefinitionRegistryPostProcessor可以注册进一步的bean定义，这些定义反过来定义BeanFactoryPostProcessor实例\",\"public class MiniDaoBeanScannerConfigurer implements BeanDefinitionRegistryPostProcessor { } \",\"MiniDaoClassPathMapperScanner 根据类路径扫描dao接口，并生成beanDefinition,使用工厂bean来生成bean对象\",\"public class MiniDaoClassPathMapperScanner extends ClassPathBeanDefinitionScanner { @Override public Set<BeanDefinitionHolder> doScan(String... basePackages) { Set<BeanDefinitionHolder> beanDefinitions = super.doScan(basePackages); if (beanDefinitions.isEmpty()) { logger.warn(\\\"No Dao interface was found in '\\\" + Arrays.toString(basePackages) + \\\"' package. Please check your configuration.\\\"); } GenericBeanDefinition definition; for (BeanDefinitionHolder holder : beanDefinitions) { definition = (GenericBeanDefinition) holder.getBeanDefinition(); //手动设置beanDefinition中要注入的依赖属性,使用set方法注入 definition.getPropertyValues().add(\\\"proxy\\\", getRegistry().getBeanDefinition(\\\"miniDaoHandler\\\")); definition.getPropertyValues().add(\\\"daoInterface\\\", definition.getBeanClassName()); if (logger.isInfoEnabled()) { logger.info(\\\"register minidao name is { \\\" + definition.getBeanClassName() + \\\" }\\\"); } definition.setBeanClass(MiniDaoBeanFactory.class); } return beanDefinitions; } } \"]},\"901\":{\"h\":\"mybatis-plus\"},\"902\":{\"h\":\"更新\",\"t\":[\"mybatis-plus FieldStrategy 有三种策略：\",\"IGNORED：0 忽略\",\"NOT_NULL：1 非 NULL，默认策略\",\"NOT_EMPTY：2 非空 而默认更新策略是NOT_NULL：非 NULL；即通过接口更新数据时数据为NULL值时将不更新进数据库。\",\"设数据库值为null\",\"写sql。直接在xml中写update sql语句。\",\"设置全局策略\",\"# yml文件格式： # 这样做是全局配置，会对所有字段忽略判断。如果一些字段没有传值过来，会被直接更新为null，可能会影响其他业务数据的准确性。 不推荐 mybatis-plus: global-config: #字段策略 0:\\\"忽略判断\\\",1:\\\"非 NULL 判断\\\",2:\\\"非空判断\\\" field-strategy: 0 \",\"对指定字段单独设置field-strategy\",\"/** * 如果需要这样处理的字段较多，那么就涉及到给各个字段加注解，这样弊端也就比较明显了。 */ @TableField(updateStrategy = FieldStrategy.IGNORED) private Date patchedDate; DbPatchScheduleEntity schedule = dbPatchScheduleService.getById(scheduleRequest.getScheduleId()); schedule.setScheduleStatus(DbPatchConstant.ScheduleStatus.UNSCHEDULED); schedule.setPatchedDate(null); dbPatchScheduleService.updateById(schedule); \",\"使用UpdateWrapper方式更新\",\" // updateWrapper方式更新 List<DbPatchScheduleRequestEntity> scheduleRequestList = dbPatchScheduleRequestService.list(new QueryWrapper<DbPatchScheduleRequestEntity>().lambda().eq(DbPatchScheduleRequestEntity::getRequestId, requestId)); scheduleRequestList.forEach(scheduleRequest -> { dbPatchScheduleRequestService.update(scheduleRequest, new UpdateWrapper<DbPatchScheduleRequestEntity>().lambda() .set(DbPatchScheduleRequestEntity::getScheduleStatus, DbPatchConstant.ScheduleStatus.UNSCHEDULED) .set(DbPatchScheduleRequestEntity::getPatchedDate, null) .eq(DbPatchScheduleRequestEntity::getId, scheduleRequest.getId())); \"]},\"903\":{\"h\":\"响应式orm\"},\"904\":{\"h\":\"rabbitMQ\"},\"905\":{\"h\":\"使用\",\"t\":[\"参考 配置多台监听绑定到同一个直连交互的同一个队列，实现了轮询的方式对消息进行消费，而且不存在重复消费\"]},\"906\":{\"h\":\"相关概念\",\"t\":[\"直连交换机 精确匹配路由key\",\"扇形交换机 忽略key\",\"主题交换机  路由key包含 * # 通配符\"]},\"907\":{\"h\":\"redis\"},\"908\":{\"h\":\"基本使用\",\"t\":[\"# 删除所有key FLUSHALL # 选择数据库 select 0 #当前数据库所有key数量 DBsize # 开启redis客户端 redis-cli # --列出当前库的所有key keys * # --判断某个key是否存在 exists key # --移除当前库并复制到指定库 move key db # -- 给指定的key设置过期时间(秒钟) expire key # --查看还有多少秒过期(-1表示永不过期-2表示已过期) ttl key # --查看key是什么数据类型 type key \"]},\"909\":{\"h\":\"hash\",\"t\":[\"Hash(哈希) key-value模式不变，但value是一个键值对\",\"hset/hget/hmset/hmget/hgetall/hdel --一个或多个设置/获取/删除值\",\"hlen --返回hash的field数量\",\"hexists myhash field --验证field是否存在\",\"hkeys/hvals -- 返回hash所有的field/value\",\"hincrby/hincrbyfloat --给hash中的filed加上指定的值/指定的浮点数\",\"hsetnx hash field value --不存在的情况下设置hash的field为value,存在不做任何操作\"]},\"910\":{\"h\":\"string\",\"t\":[\"String(字符串)：\",\"set/get/del/append/strlen --添加/查询/删除/拼接/长度\",\"incr/decr/incrby/decrby --自增/自减/按指定值增加/按指定值减少,一定要是数字才能加减\",\"getrange/setrange --获取指定区间范围内的值/设置指定区间范围内的值，超过字符串长度的自动用x00补齐\",\"setex(set key expire value)/setnx(set if not exist) --设置key对应的值value,并设置有效期(秒)/如果不存在，则set,存在则不做任何动作\",\"mset/mget/msetnx --同时设置/获取一个或多个值，msetnx 设置的key都不存在时才成功，反之则失败。\",\"getset key value --将给定 key 的值设为 value ，并返回 key 的旧值(old value)\"]},\"911\":{\"h\":\"待整理\",\"t\":[\"Redis的使用\",\"在订单导入时，涉及服务间的数据传输，将导入的文件输入流放在redis缓存中，同时发送服务调用请求到数据交换服务从缓存中取字节数组，在通过oss的sdk工具将数据上传到阿里云的oss中\",\"订单导入时，商品信息是变动量较小的信息，会根据导入的商品code查询商品信息给对应的订单实体类赋值，放在redis缓存中，这样就避免了多次查询数据库的耗时操作，\",\"如何保证数据一致性？\",\"我使用的做法是先清空对应商品的缓存，同时更新对应的商品信息\",\"redis的持久化方式?\",\"RDF和aof文件\",\"rdf是默认的持久化方式，aof是需要配置文件开启\",\"一般采用aof的方式进行持久化，它会记录所有写操作命令，并且它是实时持久化的，数据恢复也比较快\",\"rdf一般在主从复制的时候，使用bgsave命令进行某一时刻的数据进行存盘。\",\"数据结构\",\"hash string list set zset\",\"zset是基于跳表，它是对链表的再次抽象，再抽出一层子链表，即每个链表中维护了下一节点的数组，索引为0的最上面一层链表\",\"setNx setex hset给hash设值\",\"getset方法 若不存在返回nil 存在返回旧值\",\"为什么使用redis,而不用mongdb?\",\"redis是一个单线程处理请求，避免了多线程处理的上下文切换\",\"redis有较丰富的数据结构\",\"redis对请求的处理使用了基于epoll的非阻塞IO模型，它能够处理大量的请求，以及redis自身的较好事件处理模型\",\"redis支持数据的持久化\",\"Redis分布式锁的使用\",\"无单发货，当在发货单页面时，无单发货单点击一键发货时，如果误操作点了两次，可能生成多张拣货单，扣减库存\",\"这时就需要使用redis分布式锁进行处理，使用对订单id创建锁实例，trylock尝试竞争锁的方式获取锁\",\"为什么不用sychronized,原理是是什么？\",\"服务集群有多个节点，sychronized只适用于单体应用\",\"锁升级，00乐观锁 01 10重量级锁\",\"sychronized是重量级锁，如果获取锁失败，线程就会挂起，涉及操作系统用户态切换内核态，线程上下文切换\",\"cas是乐观锁的实现方式，即比较和交换，在操作共享变量时，写入操作时，是否是原值，若不是自旋获取新值变更数据\",\"查询当前仓库下的所有发货单时，如果未传具体的货主，那么就要根据租户id查询当前仓库下有权限的货主，查询租户下所有货主的发货单\",\"货主的查询功能\",\"结合aop使用\",\"缓存的使用，使用aop，切点为被@Cache和@CacheClear修饰的方法\",\"也可用在Mapper方法上，统计sql的耗时时间\",\"@Pointcut(\\\"execution(* com.saascloud.scms.wms.mapper.Mapper.(..))\\\")\",\"@pointCut(@annotation)\",\"@Around\",\"@Aspect\",\"@Pointcut(\\\"@annotation(com.saascloud.common.cache.annotation.Cache)\\\") public void aspect() { } @Around(\\\"aspect()&&@annotation(anno)\\\") public Object interceptor(ProceedingJoinPoint invocation, Cache anno) throws Throwable { MethodSignature signature = (MethodSignature) invocation.getSignature(); Method method = signature.getMethod(); Object result = null; Class<?>[] parameterTypes = method.getParameterTypes(); Object[] arguments = invocation.getArgs(); String key = \\\"\\\"; String value = \\\"\\\"; try { key = getKey(anno, parameterTypes, arguments); value = cacheAPI.get(key); Type returnType = method.getGenericReturnType(); result = getResult(anno, result, value, returnType); } catch (Exception e) { log.error(\\\"获取缓存失败：\\\" + key, e); } finally { if (result == null) { result = invocation.proceed(); if (StringUtils.isNotBlank(key) && anno.store()) { cacheAPI.set(key, result, anno.expire()); } } } return result; } \",\"手写分布式锁\",\"public class RedisDistributedLock { public static final String LOCK_PREFIX = \\\"redis_lock\\\"; @Autowired private RedisTemplate redisTemplate; /** * 最终加强分布式锁 * * @param key key值 * @return 是否获取到 */ public boolean lock(String key, int LOCK_EXPIRE) { String lock = LOCK_PREFIX + key; // 利用lambda表达式 return (Boolean)redisTemplate.execute((RedisCallback)connection -> { long expireAt = System.currentTimeMillis() + LOCK_EXPIRE + 1; Boolean acquire = connection.setNX(lock.getBytes(), String.valueOf(expireAt).getBytes()); if (acquire) { return true; } else { byte[] value = connection.get(lock.getBytes()); if (Objects.nonNull(value) && value.length > 0) { long expireTime = Long.parseLong(new String(value)); if (expireTime < System.currentTimeMillis()) { // 如果锁已经过期 byte[] oldValue = connection.getSet(lock.getBytes(), String.valueOf(System.currentTimeMillis() + LOCK_EXPIRE + 1).getBytes()); // 防止死锁 return Long.parseLong(new String(oldValue)) < System.currentTimeMillis(); } } } return false; }); } /** * 删除锁 * * @param key */ public void delete(String key) { key = LOCK_PREFIX + key; redisTemplate.delete(key); } } \"]},\"912\":{\"h\":\"redisson\",\"t\":[\"Redisson 是一个在 Redis 的基础上实现的 Java 驻内存数据网格客户端（In-Memory Data Grid）。 它不仅提供了一系列的 redis 常用数据结构命令服务，还提供了许多分布式服务，例如分布式锁、分布式对象、分布式集合、分布式远程服务、分布式调度任务服务等等。\"]},\"913\":{\"h\":\"基本使用\",\"t\":[\"参考\"]},\"914\":{\"h\":\"RocketMq\",\"t\":[\"ListenerContainerConfiguration实现SmartInitializingSingleton接口\",\"afterSingletonsInstantiated\",\"registerContainer\",\"DefaultRocketMQListenerContainer\",\"afterPropertiesSet\",\"initRocketMQPushConsumer\",\"start\",\"consumer.start();\",\"DefaultMQPushConsumer\",\"@Override public void start() throws MQClientException { setConsumerGroup(NamespaceUtil.wrapNamespace(this.getNamespace(), this.consumerGroup)); this.defaultMQPushConsumerImpl.start(); if (null != traceDispatcher) { try { traceDispatcher.start(this.getNamesrvAddr(), this.getAccessChannel()); } catch (MQClientException e) { log.warn(\\\"trace dispatcher start failed \\\", e); } } } \",\"DefaultMQPushConsumerImpl\",\"public synchronized void start() throws MQClientException { switch (this.serviceState) { case CREATE_JUST: log.info(\\\"the consumer [{}] start beginning. messageModel={}, isUnitMode={}\\\", this.defaultMQPushConsumer.getConsumerGroup(), this.defaultMQPushConsumer.getMessageModel(), this.defaultMQPushConsumer.isUnitMode()); this.serviceState = ServiceState.START_FAILED; this.checkConfig(); this.copySubscription(); if (this.defaultMQPushConsumer.getMessageModel() == MessageModel.CLUSTERING) { this.defaultMQPushConsumer.changeInstanceNameToPID(); } this.mQClientFactory = MQClientManager.getInstance().getAndCreateMQClientInstance(this.defaultMQPushConsumer, this.rpcHook); this.rebalanceImpl.setConsumerGroup(this.defaultMQPushConsumer.getConsumerGroup()); this.rebalanceImpl.setMessageModel(this.defaultMQPushConsumer.getMessageModel()); this.rebalanceImpl.setAllocateMessageQueueStrategy(this.defaultMQPushConsumer.getAllocateMessageQueueStrategy()); this.rebalanceImpl.setmQClientFactory(this.mQClientFactory); this.pullAPIWrapper = new PullAPIWrapper( mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup(), isUnitMode()); this.pullAPIWrapper.registerFilterMessageHook(filterMessageHookList); if (this.defaultMQPushConsumer.getOffsetStore() != null) { this.offsetStore = this.defaultMQPushConsumer.getOffsetStore(); } else { switch (this.defaultMQPushConsumer.getMessageModel()) { case BROADCASTING: this.offsetStore = new LocalFileOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup()); break; case CLUSTERING: this.offsetStore = new RemoteBrokerOffsetStore(this.mQClientFactory, this.defaultMQPushConsumer.getConsumerGroup()); break; default: break; } this.defaultMQPushConsumer.setOffsetStore(this.offsetStore); } this.offsetStore.load(); if (this.getMessageListenerInner() instanceof MessageListenerOrderly) { this.consumeOrderly = true; this.consumeMessageService = new ConsumeMessageOrderlyService(this, (MessageListenerOrderly) this.getMessageListenerInner()); } else if (this.getMessageListenerInner() instanceof MessageListenerConcurrently) { this.consumeOrderly = false; this.consumeMessageService = new ConsumeMessageConcurrentlyService(this, (MessageListenerConcurrently) this.getMessageListenerInner()); } this.consumeMessageService.start(); boolean registerOK = mQClientFactory.registerConsumer(this.defaultMQPushConsumer.getConsumerGroup(), this); if (!registerOK) { this.serviceState = ServiceState.CREATE_JUST; this.consumeMessageService.shutdown(); throw new MQClientException(\\\"The consumer group[\\\" + this.defaultMQPushConsumer.getConsumerGroup() + \\\"] has been created before, specify another name please.\\\" + FAQUrl.suggestTodo(FAQUrl.GROUP_NAME_DUPLICATE_URL), null); } mQClientFactory.start(); log.info(\\\"the consumer [{}] start OK.\\\", this.defaultMQPushConsumer.getConsumerGroup()); this.serviceState = ServiceState.RUNNING; break; case RUNNING: case START_FAILED: case SHUTDOWN_ALREADY: throw new MQClientException(\\\"The PushConsumer service state not OK, maybe started once, \\\" + this.serviceState + FAQUrl.suggestTodo(FAQUrl.CLIENT_SERVICE_NOT_OK), null); default: break; } this.updateTopicSubscribeInfoWhenSubscriptionChanged(); this.mQClientFactory.checkClientInBroker(); this.mQClientFactory.sendHeartbeatToAllBrokerWithLock(); this.mQClientFactory.rebalanceImmediately(); } \",\"mQClientFactory.start();\",\"public void start() throws MQClientException { synchronized (this) { switch (this.serviceState) { case CREATE_JUST: this.serviceState = ServiceState.START_FAILED; // If not specified,looking address from name server if (null == this.clientConfig.getNamesrvAddr()) { this.mQClientAPIImpl.fetchNameServerAddr(); } // Start request-response channel this.mQClientAPIImpl.start(); // Start various schedule tasks this.startScheduledTask(); // Start pull service this.pullMessageService.start(); // Start rebalance service this.rebalanceService.start(); // Start push service this.defaultMQProducer.getDefaultMQProducerImpl().start(false); log.info(\\\"the client factory [{}] start OK\\\", this.clientId); this.serviceState = ServiceState.RUNNING; break; case RUNNING: break; case SHUTDOWN_ALREADY: break; case START_FAILED: throw new MQClientException(\\\"The Factory object[\\\" + this.getClientId() + \\\"] has been created before, and failed.\\\", null); default: break; } } } \"]},\"915\":{\"h\":\"使用\",\"t\":[\"在点击一键发货功能对库存扣减，同时生成各种单据。\",\"在对实时库存明细扣减时，会根据拣货明细生成库存扣减消息，进行异步库存扣减\",\"在进行相应操作时，会生成操作日志，发送到操作日志消息队列\",\"在生成单据的报表信息，保存到es数据库\",\"消息丢失的情况？\",\"消息发送时，内部有重试机制，同步发送，发送失败，消息存入消息表，使用xxl定时任务重新发送\",\"数据存盘时，默认异步刷盘，即数据发送到broker服务器，还未存盘。同步刷盘\",\"消费时，默认消费方式，消息消费结束后，发送消息到broker表示已经消费，删除消息\",\"重复消费解决方式？\",\"我的理解，存储对应消息的唯一id,设置过期时间\",\"将已消费的消息存表\",\"解耦 削峰 异步\",\"线程内部维护了ThreadLocal.ThreadLocalMap threadLocals = null;的变量，每开启线程向线程局部变量存值会初始化threadLocals，并以线程局部变量对象为键，null为值初始化值\",\"每次都是获取存放在线程局部变量中的值，或设置值到线程局部变量中\"]},\"916\":{\"h\":\"消费原理\",\"t\":[\"推送消息的本质是拉取消息\"]},\"917\":{\"h\":\"消费者侧\"},\"918\":{\"h\":\"ListenerContainerConfiguration实现ApplicationContextAware、SmartInitializingSingleton\",\"t\":[\"registerContainer 注册所有监听器容器\"]},\"919\":{\"h\":\"DefaultRocketMQListenerContainer\",\"t\":[\"实现InitializingBean、SmartLifecycle接口\",\"start 优先在单例对像创建完成后，由ListenerContainerConfiguration创建监听容器并启动， 否则在容器启动后执行，启动消费者,执行DefaultMQPushConsumer的start方法\",\"afterProperties 执行 initRocketMQPushConsumer初始化\"]},\"920\":{\"h\":\"DefaultMqpullConsumerImpl\",\"t\":[\"DefaultMqpullConsumerImpl实现DefaultMqpullConsumer接口，主要是start方法，启动以下服务service mqclientService,pullMessageService，rebalanceservice, consumeMessgeOrderlyservice\",\"消费者组\",\"消费者ID\",\"消息队列\",\"分配策略\",\"pullRequest\",\"MessageModel 消费集群还是广播\",\"consumeModel 有序消费还是多线程\",\"broker中的commit文件\"]},\"921\":{\"h\":\"broker侧\",\"t\":[\"PullMessageProcessor\",\"PullRequestHoldService\",\"ReputMessageService\",\"notifyMessageArriving方法\",\"消费原理图\"]},\"922\":{\"h\":\"数据同步\"},\"923\":{\"h\":\"DataX\",\"t\":[\"参考\",\"安装python和java8环境\",\"配置job\",\"运行python脚本\"]},\"924\":{\"h\":\"配置文件示例\",\"t\":[\" { \\\"job\\\": { \\\"setting\\\": { \\\"speed\\\": { \\\"channel\\\":1 } }, \\\"content\\\": [ { \\\"reader\\\": { \\\"name\\\": \\\"mysqlreader\\\", \\\"parameter\\\": { \\\"username\\\": \\\"root\\\", \\\"password\\\": \\\"123456\\\", \\\"connection\\\": [ { \\\"querySql\\\": [ \\\"select id,name from device_info;\\\" ], \\\"jdbcUrl\\\": [ \\\"jdbc:mysql://127.0.0.1:3306/iot_platform\\\", \\\"jdbc:mysql://127.0.0.1:bad_port/database\\\", \\\"jdbc:mysql://127.0.0.1:3306/database\\\" ] } ] } }, \\\"writer\\\": { \\\"name\\\": \\\"streamwriter\\\", \\\"parameter\\\": { \\\"print\\\": true, \\\"encoding\\\": \\\"UTF-8\\\" } } } ] } } \"]},\"925\":{\"h\":\"定时任务\",\"t\":[\"参考 使用crontab实现\",\"crontab -e # 添加如下内容 */1 * * * * sh /opt/data/crontab/mysql2mysql.sh \"]},\"926\":{\"h\":\"flutter\",\"t\":[\"可跨端的ui框架\"]},\"927\":{\"h\":\"js\"},\"928\":{\"h\":\"json的类型\",\"t\":[\"数字 (整数或浮点数)\",\"字符串 (在双括号中)\",\"逻辑值 (true或false)\",\"数组 (在中括号中)\",\"对象 (在大括号中)\",\"null\"]},\"929\":{\"h\":\"赋值\",\"t\":[\"undefined和null和0等同于false,与之相反true\",\"//若两者都是布尔值，则返回false或true, let test = true || false //若有一个不是则返回具体值 let test2 = null || 'df' let test3 = undefined || 'df' //若为与与运算如下分别为 'fd' 'er' let test4 = true && 'fd' let test5 = 'fd'&& 'er' \"]},\"930\":{\"h\":\"使用\",\"t\":[\"JSON.stringify()() JSON.parse() Object.keys() \"]},\"931\":{\"h\":\"string\",\"t\":[\"判断子字符串、\",\"'str'.indexOf('subStr') //返回true,false // /正则表达式/.test() //返回匹配的字符串 // 正则表达式/.exec() \"]},\"932\":{\"h\":\"类\",\"t\":[\"在Class语法糖出现之前，我们想重用一个功能模块，通常是用一个函数来进行封装：\",\"function Animal(name) { this.name = name; } Animal.prototype.walk = function () { // dosomething }; const dog = new Animal(\\\"小狗\\\"); const duck = new Animal(\\\"鸭子\\\"); \",\"为了更好的做成一个单独的模块，还有使用IIFE（立即执行函数）形式来增强模块的：\",\"var Animal = (function () { function Animal(name) { this.name = name; } Animal.prototype.walk = function () { // dosomething }; return Animal; }()); \",\"由于这是一种很常见的需求，所以ECMAScript规范中加入了Class语法，简化了之前的使用形式。\",\"class Animal { constructor(name) { this.name = name; } walk() { // dosomething } } \"]},\"933\":{\"h\":\"jquery\",\"t\":[\"jquery是一个javascript库\"]},\"934\":{\"h\":\"引用方式\",\"t\":[\"在线引用\",\"<script src=\\\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\\\"> </script> <head> <script src=\\\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\\\"> </script> </head> \",\"下载后引用\",\"<head> <script src=\\\"jquery-1.10.2.min.js\\\"></script> </head> \"]},\"935\":{\"h\":\"文档就绪\",\"t\":[\"因为页面中的代码一般情况下按照，从上到下，从左到右的顺序执行。\",\"所以当js代码需要获取页面中的元素时，如果script标签在元素的前面，需要加window.onload；如果script放在了元素后面，就不需要加 window.onload。\",\"所有 jQuery 函数位于一个 document ready 函数中,这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。\",\"jquery入口函数\",\"$(document).ready(function(){ // 开始写 jQuery 代码... }); //简洁写法 $(function(){ // 开始写 jQuery 代码... }); \",\"JavaScript 入口函数:\",\"window.onload = function () { // 执行代码 } \",\"两者区别\",\"jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。\",\"JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。\",\"javascript的入口函数只能执行一次，第二次会覆盖前面\",\"jquery的入口函数可以执行多次\"]},\"936\":{\"h\":\"语法\"},\"937\":{\"h\":\"选择器\"},\"938\":{\"h\":\"事件\"},\"939\":{\"h\":\"html\"},\"940\":{\"h\":\"遍历\"},\"941\":{\"h\":\"ajax\"},\"942\":{\"h\":\"jquery\"},\"943\":{\"h\":\"引入\",\"t\":[\"<script th:src=\\\"@{assets/js/jquery.min.js}\\\"></script> <script th:src=\\\"@{assets/js/index.js}\\\"></script> <script type=\\\"text/javascript\\\" th:inline=\\\"javascript\\\"> $(function(){ let defaultClientId = [[${defaultClientId}]] }) </script> \"]},\"944\":{\"h\":\"加载\",\"t\":[\"在dom对象创建之后执行js\",\"$(function() { }) \"]},\"945\":{\"h\":\"ajax\",\"t\":[\"$.ajax({ url: '/auth/login/captcha', data: data, type: \\\"post\\\", dataType: 'json', success: function (result) { } }); \"]},\"946\":{\"h\":\"选择器\",\"t\":[\"//查询元素对象 document.querySelector(\\\".mobileLogin_verificationCode\\\") //类选择器 $(\\\".mobileLogin_verificationCode\\\") \"]},\"947\":{\"h\":\"事件触发\",\"t\":[\"$(\\\".signIn_btn .btn_mobileLogin\\\").click(function() { }) \"]},\"948\":{\"h\":\"样式设置\",\"t\":[\"$(\\\".account .check\\\").css(\\\"opacity\\\",1) //显隐 $(\\\".alert\\\").show() $(\\\".alert\\\").hide() \"]},\"949\":{\"h\":\"less\"},\"950\":{\"h\":\"nodejs\"},\"951\":{\"h\":\"pm2\"},\"952\":{\"h\":\"npm\"},\"953\":{\"h\":\"pnpm\"},\"954\":{\"h\":\"node-fetch\"},\"955\":{\"h\":\"async-mutex\"},\"956\":{\"h\":\"grunt\"},\"957\":{\"h\":\"workbox\"},\"958\":{\"h\":\"pwa\"},\"959\":{\"h\":\"sw(service worker)\"},\"960\":{\"h\":\"package\"},\"961\":{\"h\":\"vite\"},\"962\":{\"h\":\"webpack\"},\"963\":{\"h\":\"react\"},\"964\":{\"h\":\"应用框架\",\"t\":[\"next.js 参考\"]},\"965\":{\"h\":\"搭建步骤\",\"t\":[\"react-app\",\"# 应用初始化 # npx是 npm 5.2+ 附带的 package 运行工具 yarn create react-app my-app npx create-react-app my-app \",\"ts支持\",\"## 初始化ts项目 npx create-react-app my-app --template typescript yarn create react-app my-app --template typescript # 在已存在的项目引入ts检查和支持 npm install --save typescript @types/node @types/react @types/react-dom @types/jest yarn add typescript @types/node @types/react @types/react-dom @types/jest \"]},\"966\":{\"h\":\"状态\"},\"967\":{\"h\":\"路由\"},\"968\":{\"h\":\"jsx\",\"t\":[\"它是一个对象,是javascript的拓展语法，可以使用花括号{}，并使用js表达式\",\"JSX 允许在大括号中嵌入任何表达式\"]},\"969\":{\"h\":\"babel\",\"t\":[\"Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。\",\"下述样例等效\",\"const element = ( <h1 className=\\\"greeting\\\"> Hello, world! </h1> ); //创建一个被称为react元素的对象，react最终将这些元素转为dom const element = React.createElement( 'h1', {className: 'greeting'}, 'Hello, world!' ); \"]},\"970\":{\"h\":\"dom\",\"t\":[\"浏览器的dom\",\"html加载到浏览器会转变为一个文档对象模型dom来渲染\",\"react dom\",\"react根据react dom来跟踪真实dom ,它会更新dom来与react元素保持一致\",\"渲染元素到根节点\",\"const root = ReactDOM.createRoot( document.getElementById('root') ); const element = <h1>Hello, world</h1>; root.render(element); \",\"更新已渲染的函数\",\"React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。\",\"根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 root.render()。\",\"const root = ReactDOM.createRoot( document.getElementById('root') ); function tick() { const element = ( <div> <h1>Hello, world!</h1> <h2>It is {new Date().toLocaleTimeString()}.</h2> </div> ); root.render(element); } setInterval(tick, 1000); \",\"React 只更新它需要更新的部分\",\"React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。 上述例子，尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。\"]},\"971\":{\"h\":\"组件\",\"t\":[\"函数式组件\",\"function Welcome(props) { return <h1>Hello, {props.name}</h1>; } \",\"class组件\",\"class Welcome extends React.Component { render() { return <h1>Hello, {this.props.name}</h1>; } } \",\"渲染组件\",\"当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。\",\"const element = <Welcome name=\\\"Sara\\\" />; //样例 function Welcome(props) { return <h1>Hello, {props.name}</h1>; } const root = ReactDOM.createRoot(document.getElementById('root')); const element = <Welcome name=\\\"Sara\\\" />; root.render(element); \",\"注意： 组件名称必须以大写字母开头。\",\"React 会将以小写字母开头的组件视为原生 DOM 标签。例如，\",\" 代表 HTML 的 div 标签，而 \"]},\"972\":{\"h\":\"router\"},\"973\":{\"h\":\"react router\",\"t\":[\"参考\",\"引入模块\",\"import React from \\\"react\\\"; import { BrowserRouter as Router, Switch, Route, Link, useParams } from \\\"react-router-dom\\\"; \",\"useHistory()\",\"存放来源路由\",\"useLocation()\",\"获取目的路由参数\",\"useParam()\",\"获取路由中的参数\",\"useRouteMatch()\",\"获取匹配的路由对象\"]},\"974\":{\"h\":\"basic\",\"t\":[\"Link 跳转的地址\",\"switch 选择路由\",\"Route path 目标路由\",\"export default function BasicExample() { return ( <Router> <div> <ul> <li> <Link to=\\\"/\\\">Home</Link> </li> <li> <Link to=\\\"/about\\\">About</Link> </li> <li> <Link to=\\\"/dashboard\\\">Dashboard</Link> </li> </ul> <hr /> {/* A <Switch> looks through all its children <Route> elements and renders the first one whose path matches the current URL. Use a <Switch> any time you have multiple routes, but you want only one of them to render at a time */} <Switch> <Route exact path=\\\"/\\\"> <Home /> </Route> <Route path=\\\"/about\\\"> <About /> </Route> <Route path=\\\"/dashboard\\\"> <Dashboard /> </Route> </Switch> </div> </Router> ); } \"]},\"975\":{\"h\":\"目标路由中设置参数\",\"t\":[\"使用useParam钩子获取路由参数\",\"export default function ParamsExample() { return ( <Router> <div> <h2>Accounts</h2> <ul> <li> <Link to=\\\"/netflix\\\">Netflix</Link> </li> <li> <Link to=\\\"/zillow-group\\\">Zillow Group</Link> </li> <li> <Link to=\\\"/yahoo\\\">Yahoo</Link> </li> <li> <Link to=\\\"/modus-create\\\">Modus Create</Link> </li> </ul> <Switch> <Route path=\\\"/:id\\\" children={<Child />} /> </Switch> </div> </Router> ); } function Child() { // We can use the `useParams` hook here to access // the dynamic pieces of the URL. let { id } = useParams(); return ( <div> <h3>ID: {id}</h3> </div> ); } \"]},\"976\":{\"h\":\"路由嵌套nesting\",\"t\":[\"使用useRouteMatch()方法获取匹配的路径\",\"let { path, url } = useRouteMatch(); \"]},\"977\":{\"h\":\"路由重定向redirects(Auth)\",\"t\":[\"重定向的目标路由\",\"// A wrapper for <Route> that redirects to the login // screen if you're not yet authenticated. function PrivateRoute({ children, ...rest }) { let auth = useAuth(); return ( <Route {...rest} render={({ location }) => auth.user ? ( children ) : ( <Redirect to={{ pathname: \\\"/login\\\", state: { from: location } }} /> ) } /> ); } \"]},\"978\":{\"h\":\"custom link\"},\"979\":{\"h\":\"prevent transitions 阻止转移\"},\"980\":{\"h\":\"thymeleaf\",\"t\":[\"参考链接\",\"新一代java模板引擎，类似freemarker、jsp等，不同于jsp，它以html结尾，可被浏览器直接打开，但数据是静态的。\"]},\"981\":{\"h\":\"配置\",\"t\":[\"springboot配置\",\"<!-- thymeleaf模板依赖 --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> \",\"html声明\",\"<html xmlns:th=\\\"http://www.thymeleaf.org\\\"> \"]},\"982\":{\"h\":\"基础语法\",\"t\":[\"文本标签 th:text/th:utext 字符串拼接 *{…}和 ${…}表达式\",\"正常情况下 *{…} 和 ${…}是一样的，但是 *{…} 一般和 th:object 进行一起使用来完成对象属性的简写。\",\" @RequestMapping(\\\"/th\\\") public String th(Model model){ User user = new User(\\\"ljk\\\"，18); model.addAttribute(\\\"user\\\",user); return \\\"/course/th\\\"; } \",\"<p th:text=\\\"${user.name}\\\"></p> <p th:text=\\\"${user.age}\\\"></p> <p th:text=\\\"*{user.name}\\\"></p> <p th:text=\\\"*{user.age}\\\"></p> <div th:object=\\\"${user}\\\" > <p th:text=\\\"*{name}\\\"></p> <p th:text=\\\"*{age}\\\"></p> </div> \",\"@{…}链接网址表达式\",\"一般和 th:href、th:src进行结合使用，用于显示Web 应用中的URL链接。通过@{…}表达式Thymeleaf 可以帮助我们拼接上web应用访问的全路径，同时我们可以通过（）进行参数的拼接\",\"<img th:src=\\\"@{/images/gtvglogo.png}\\\" /> <img src=\\\"/sbe/images/gtvglogo.png\\\"> <a th:href=\\\"@{/product/comments(prodId=${prod.id})}\\\" >查看</a> <a href=\\\"/sbe/product/comments?prodId=2\\\">查看</a> \",\"条件判断 th:if/th:unless\",\"th:if 当条件为true则显示。 th:unless 当条件为false 则显示。\",\"<p th:if=\\\"${flag}\\\">if判断</p> \",\"switch\",\"th:switch 我们可以通过switch来完成类似的条件表达式的操作。\",\"<div th:switch=\\\"${user.name}\\\"> <p th:case=\\\"'ljk'\\\">User is ljk</p> <p th:case=\\\"ljk1\\\">User is ljk1</p> </div> \",\"for循环\",\"th:each 遍历集合\",\" @RequestMapping(\\\"/theach\\\") public String theach(Model model){ List<User> userList = new ArrayList<User>(); User user1 = new User(\\\"ljk\\\",18); User user2 = new User(\\\"ljk2\\\",19); User user3 = new User(\\\"ljk3\\\",20); User user4 = new User(\\\"lj4\\\",21); userList.add(user1); userList.add(user2); userList.add(user3); userList.add(user4); model.addAttribute(\\\"userList\\\",userList); List<String> strList = new ArrayList<String>(); strList.add(\\\"ljk\\\"); strList.add(\\\"ljk2\\\"); strList.add(\\\"ljk3\\\"); strList.add(\\\"lj4\\\"); model.addAttribute(\\\"strList\\\",strList); return \\\"/course/theach\\\"; } \",\" <table> <thead> <tr> <th>用户名称</th> <th>用户年龄</th> </tr> </thead> <tbody> <tr th:each=\\\"user : ${userList}\\\" th:class=\\\"${userStat.odd}? 'odd'\\\"> <td th:text=\\\"${user.name}\\\">Onions</td> <td th:text=\\\"${user.age}\\\">2.41</td> </tr> </tbody> </table> ---------------------------------------------------------------------- <table> <thead> <tr> <th>用户名称</th> </tr> </thead> <tbody> <tr th:each=\\\"str : ${strList}\\\" th:class=\\\"${strStat.odd}? 'odd'\\\"> <td th:text=\\\"${str}\\\">Onions</td> </tr> </tbody> </table> \"]},\"983\":{\"h\":\"内联\",\"t\":[\"在父标签声明 th:inline=“text” 来开启内联操作\",\"<div th:inline=\\\"text\\\"> <p>Hello, [[${user.name}]]!</p> </div> <div> <p>Hello,zhuoqianmingyue!</p> </div> //和内联等效 <div> <p th:text=\\\"Hello,+${user.name}\\\"></p> </div> [[…]]对应于th:text，[(…)]对应于th:utext \",\"禁用内联\",\"通过在父标签或者本标签上声明th:inline=\\\"none\\\"来禁用内联的操作，如下面代码所示：\",\"<p th:inline=\\\"none\\\">A double array looks like this: [[1, 2, 3], [4, 5]]!</p> <p>A double array looks like this: [[1, 2, 3], [4, 5]]!</p> \",\"javascript内联\",\"在JavaScript 中使用内联操作，需要在 script 标签上声明 th:inline=“javascript”\",\"<script th:inline=\\\"javascript\\\"> var username = [[${user.name}]]; </script> <script th:inline=\\\"javascript\\\"> var username = \\\"zhuoqianmingyue\\\"; </script> \",\"css内联\"]},\"984\":{\"h\":\"ts\",\"t\":[\"它是javascript的拓展，使用声明文件和ts文件来描述，最终会将ts编译为js，其中声明文件用于语义检查,ts和js是核心,d.ts文件是ts的结构\"]},\"985\":{\"h\":\"使用\",\"t\":[\"以 变量名 ：类型 定义变量\",\"以 变量名 ：类型 = 'test' 定义变量并赋值\",\"以？表示变量是否可选\",\"结合箭头函数\",\"样例\",\"declare type BuildCommand = (sourceDir?: string, commandOptions?: BuildCommandOptions) => Promise<void>; /** * CLI options of `build` command */ interface BuildCommandOptions { dest?: string; temp?: string; cache?: string; debug?: boolean; config?: string; cleanTemp?: boolean; cleanCache?: boolean; } declare const createBuild: (defaultAppConfig: Partial<AppConfig>) => BuildCommand; /** * Type of `dev` command function */ declare type DevCommand = (sourceDir?: string, commandOptions?: DevCommandOptions) => Promise<void>; \"]},\"986\":{\"h\":\"函数的类型\",\"t\":[\"函数声明（Function Declaration）和函数表达式（Function Expression）\",\"用接口定义函数的类型\",\"interface SearchFunc { (source: string, subString: string): boolean; } let mySearch: SearchFunc; mySearch = function(source: string, subString: string) { return source.search(subString) !== -1; } \",\"参数默认值\",\"function buildName(firstName: string, lastName: string = 'Cat') { return firstName + ' ' + lastName; } let tomcat = buildName('Tom', 'Cat'); let tom = buildName('Tom'); \"]},\"987\":{\"h\":\"与或运算符\",\"t\":[\"&\",\"取交集\",\"|\",\"取并集\"]},\"988\":{\"h\":\"断言\",\"t\":[\"一般使用： 值 as 类型\",\"interface Cat { name: string; run(): void; } interface Fish { name: string; swim(): void; } function isFish(animal: Cat | Fish) { if (typeof (animal as Fish).swim === 'function') { return true; } return false; } interface ApiError extends Error { code: number; } interface HttpError extends Error { statusCode: number; } function isApiError(error: Error) { if (typeof (error as ApiError).code === 'number') { return true; } return false; } \",\"类型断言 vs 泛型\",\"function getCacheData(key: string): any { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData('tom') as Cat; tom.run(); function getCacheData<T>(key: string): T { return (window as any).cache[key]; } interface Cat { name: string; run(): void; } const tom = getCacheData<Cat>('tom'); tom.run(); \"]},\"989\":{\"h\":\"声明文件\",\"t\":[\"什么是声明语句\",\"假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 script 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery 了。\",\"我们通常这样获取一个 id 是 foo 的元素：\",\"$('#foo'); // or jQuery('#foo'); \",\"但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西：\",\"jQuery('#foo'); // ERROR: Cannot find name 'jQuery'. \",\"这时，我们需要使用 declare var 来定义它的类型2：\",\"declare var jQuery: (selector: string) => any; jQuery('#foo'); \",\"上例中，declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除\",\"什么是声明文件\",\"通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中\",\"声明文件必需以 .d.ts 为后缀。\"]},\"990\":{\"h\":\"书写声明文件\"},\"991\":{\"h\":\"全局变量\",\"t\":[\"全局变量是最简单的一种场景，之前举的例子就是通过 script 标签引入 jQuery，注入全局变量 $ 和 jQuery。\",\"declare var 声明全局变量\",\"declare function 声明全局方法\",\"declare class 声明全局类\",\"declare enum 声明全局枚举类型\",\"declare namespace 声明（含有子属性的）全局对象\",\"interface 和 type 声明全局类型\",\"declare type sds = 箭头函数\",\"在type自定义对象类型或interface类型中，使用构造签名类型和原型属性\",\"构造签名类型（Constructor Signature Type）是用于描述构造函数的签名，即构造函数的参数类型和返回类型。 构造签名类型通常出现在接口或类型别名中，用于描述一个构造函数应该具有的结构。\",\"定义构造签名类型，用于创建实例对象\",\"interface SpeechRecognitionResult { readonly isFinal: boolean; readonly length: number; item(index: number): SpeechRecognitionAlternative; [index: number]: SpeechRecognitionAlternative; } declare var SpeechRecognitionResult: { prototype: SpeechRecognitionResult; new(): SpeechRecognitionResult; } interface Test { prototype: SpeechRecognitionResult; new(): SpeechRecognitionResult; } declare var SpeechRecognitionResult: Test \",\"declare var | const |let\",\"当我们使用 const 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了\",\"declare function\",\"// src/jQuery.d.ts declare function jQuery(selector: string): any; declare function jQuery(domReadyCallback: () => any): any; // src/index.ts jQuery('#foo'); jQuery(function() { alert('Dom Ready!'); }); \",\"declare class\",\"// src/Animal.d.ts declare class Animal { name: string; constructor(name: string); sayHi(): string; } // src/index.ts let cat = new Animal('Tom'); \",\"declare namespace\",\"它用来表示全局变量是一个对象，包含很多子属性。\",\"// src/jQuery.d.ts declare namespace jQuery { function ajax(url: string, settings?: any): void; const version: number; class Event { blur(eventType: EventType): void } enum EventType { CustomClick } } // src/index.ts jQuery.ajax('/api/get_something'); console.log(jQuery.version); const e = new jQuery.Event(); e.blur(jQuery.EventType.CustomClick); \",\"防止命名冲突\",\"declare namespace jQuery { interface AjaxSettings { method?: 'GET' | 'POST' data?: any; } function ajax(url: string, settings?: AjaxSettings): void; } // src/index.ts let settings: jQuery.AjaxSettings = { method: 'POST', data: { name: 'foo' } }; jQuery.ajax('/api/post_something', settings); \"]},\"992\":{\"h\":\"npm包\",\"t\":[\"npm 包的声明文件主要有以下几种语法：\",\"export 导出变量\",\"export namespace 导出（含有子属性的）对象\",\"export default ES6 默认导出\",\"export = commonjs 导出模块\",\"export\",\"npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。\",\"只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。\",\"export 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现\",\"// types/foo/index.d.ts export const name: string; export function getName(): string; export class Animal { constructor(name: string); sayHi(): string; } export enum Directions { Up, Down, Left, Right } export interface Options { data: any; } // src/index.ts import { name, getName, Animal, Directions, Options } from 'foo'; console.log(name); let myName = getName(); let cat = new Animal('Tom'); let directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]; let options: Options = { data: { name: 'foo' } }; \",\"混用 declare 和 export\",\"我们也可以使用 declare 先声明多个变量，最后再用 export 一次性导出。上例的声明文件可以等价的改写为\",\"// types/foo/index.d.ts declare const name: string; declare function getName(): string; declare class Animal { constructor(name: string); sayHi(): string; } declare enum Directions { Up, Down, Left, Right } interface Options { data: any; } export { name, getName, Animal, Directions, Options }; \",\"export namespace\",\"与 declare namespace 类似，export namespace 用来导出一个拥有子属性的对象\",\"// types/foo/index.d.ts export namespace foo { const name: string; namespace bar { function baz(): string; } } // src/index.ts import { foo } from 'foo'; console.log(foo.name); foo.bar.baz(); \",\"export default\",\"在 ES6 模块系统中，使用 export default 可以导出一个默认值，使用方可以用 import foo from 'foo' 而不是 import { foo } from 'foo' 来导入这个默认值。\",\"注意，只有 function、class 和 interface 可以直接默认导出，其他的变量需要先定义出来，再默认导出\",\"// types/foo/index.d.ts export default function foo(): string; // src/index.ts import foo from 'foo'; foo(); // types/foo/index.d.ts export default Directions; declare enum Directions { Up, Down, Left, Right } \",\"export=\",\"在 commonjs 规范中，我们用以下方式来导出一个模块：\",\"// 整体导出 module.exports = foo; // 单个导出 exports.bar = bar; \",\"在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 const ... = require：\",\"// 整体导入 const foo = require('foo'); // 单个导入 const bar = require('foo').bar; \",\"第二种方式是 import ... from，注意针对整体导出，需要使用 import * as 来导入：\",\"// 整体导入 import * as foo from 'foo'; // 单个导入 import { bar } from 'foo'; \",\"第三种方式是 import ... require，这也是 ts 官方推荐的方式：\",\"// 整体导入 import foo = require('foo'); // 单个导入 import bar = foo.bar; \",\"对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 export = 这种语法了21：\",\"// types/foo/index.d.ts export = foo; declare function foo(): string; declare namespace foo { const bar: number; } \"]},\"993\":{\"h\":\"umd库\",\"t\":[\"既可以通过 script 标签引入，又可以通过 import 导入的库，称为 UMD 库。相比于 npm 包的类型声明文件， 我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 export as namespace。\",\"直接扩展全局变量\",\"有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致 ts 编译错误，此时就需要扩展全局变量的类型。比如扩展 String 类型23：\",\"interface String { prependHello(): string; } 'foo'.prependHello(); \",\"也可以使用 declare namespace 给已有的命名空间添加类型声明24：\",\"// types/jquery-plugin/index.d.ts declare namespace JQuery { interface CustomOptions { bar: string; } } interface JQueryStatic { foo(options: JQuery.CustomOptions): string; } // src/index.ts jQuery.foo({ bar: '' }); \",\"在 npm 包或 UMD 库中扩展全局变量\",\"如之前所说，对于一个 npm 包或者 UMD 库的声明文件，只有 export 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库， 如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 declare global。\",\"// types/foo/index.d.ts declare global { interface String { prependHello(): string; } } export {}; // src/index.ts 'bar'.prependHello(); \",\"注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。\"]},\"994\":{\"h\":\"模块插件\",\"t\":[\"有时通过 import 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。\",\"ts 提供了一个语法 declare module，它可以用来扩展原有模块的类型。\",\"declare module\",\"如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 declare module 扩展原有模块26：\",\"// types/moment-plugin/index.d.ts import * as moment from 'moment'; declare module 'moment' { export function foo(): moment.CalendarKey; } // src/index.ts import * as moment from 'moment'; import 'moment-plugin'; moment.foo(); \",\"declare module 也可用于在一个文件中一次性声明多个模块的类型\",\"// types/foo-bar.d.ts declare module 'foo' { export interface Foo { foo: string; } } declare module 'bar' { export function bar(): string; } // src/index.ts import { Foo } from 'foo'; import * as bar from 'bar'; let f: Foo; bar.bar(); \"]},\"995\":{\"h\":\"声明文件中的依赖\",\"t\":[\"声明文件有时会依赖另一个声明文件中的类型，比如在前面的 declare module 的例子中，我们就在声明文件中导入了 moment，并且使用了 moment.CalendarKey 这个类型：\",\"// types/moment-plugin/index.d.ts import * as moment from 'moment'; declare module 'moment' { export function foo(): moment.CalendarKey; } \",\"三斜线指令\",\"类似于声明文件中的 import，它可以用来导入另一个声明文件。与 import 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 import：\",\"当我们在书写一个全局变量的声明文件时\",\"当我们需要依赖一个全局变量的声明文件时\",\"书写一个全局变量的声明文件\",\"这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 import, export 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，\",\"就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了28：\",\"// types/jquery-plugin/index.d.ts /// <reference types=\\\"jquery\\\" /> declare function foo(options: JQuery.AjaxSettings): string; // src/index.ts foo({}); \",\"三斜线指令的语法如上，/// 后面使用 xml 的格式添加了对 jquery 类型的依赖，这样就可以在声明文件中使用 JQuery.AjaxSettings 类型了。\",\"注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。\",\"依赖一个全局变量的声明文件\",\"在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 import 导入，当然也就必须使用三斜线指令来引入了29：\",\"// types/node-plugin/index.d.ts /// <reference types=\\\"node\\\" /> export function foo(p: NodeJS.Process): string; // src/index.ts import { foo } from 'node-plugin'; foo(global.process); \"]},\"996\":{\"h\":\"自动生成声明文件\",\"t\":[\"如果库的源码本身就是由 ts 写的，那么在使用 tsc 脚本将 ts 编译为 js 的时候，添加 declaration 选项，就可以同时也生成 .d.ts 声明文件了。\",\"我们可以在命令行中添加 --declaration（简写 -d），或者在 tsconfig.json 中添加 declaration 选项。这里以 tsconfig.json 为例：\",\"{ \\\"compilerOptions\\\": { \\\"module\\\": \\\"commonjs\\\", \\\"outDir\\\": \\\"lib\\\", \\\"declaration\\\": true } } \",\"上例中我们添加了 outDir 选项，将 ts 文件的编译结果输出到 lib 目录下，然后添加了 declaration 选项，设置为 true，表示将会由 ts 文件自动生成 .d.ts 声明文件，也会输出到 lib 目录下。\"]},\"997\":{\"h\":\"vue\"},\"998\":{\"h\":\"状态\",\"t\":[\"vuex是vue中的状态管理模式，统一管理多个组件共享的状态。 vuex状态管理模式的核心是store实例相当于应用的仓库，主要有四种属性： state对象，多组件共享的状态，通过this.$store.的方式或通过辅助函数mapState将state属性映射到组件的计算属性 getters属性，类似于vue的计算属性，它会根据依赖的改变实时变更getter属性的值，即vuex的状态存储是响应式的，通过辅助函数mapGetter将getter属性映射到组件的计算属性 mutations属性类型于有名称的事件，通过commmit方法触发，用于改变store中state的属性状态，通过辅助函数mapMutation将触发方法映射到组件的方法属性，注意mutations是 --同步的，即mutation事件中不可使用回调函数，因为判断不了回调函数何时执行，何时执行完成，进而无法及时变更store中state状态 万物皆对象，函数属性存放的是函数的地址 actions与mutations类似，用于触发mutations事件，且可以执行异步操作，使用await/async,其中dispatch可以处理action事件传回的promise对象，且自己也可以返回promise --对象，调用then方法执行后续操作,，通过辅助函数mapActions将触发方法dispatch映射到组件的方法属性， module模块可以解决state对象非常臃肿的问题，使用store.state.模块名.模块名.状态属性访问状态，模块中可以嵌套模块，带有命名空间的模块 可以通过将store实例放入vue根实例的方式将状态实例注入到每一个组件 双向绑定的数据对象的数据对象的数据类型，影响赋值 v-auth权限控制若放在元素首部，可能会失效 \"]},\"999\":{\"h\":\"通信\",\"t\":[\"axios\",\"qs处理参数\"]},\"1000\":{\"h\":\"异步\",\"t\":[\"promise对象本身是同步的，.then.catch方法是异步的 当promise对象创建完成后，其内部的executor函数会立即执行 通常在其中放入异步操作，使用resolve，reject告诉promise，改变状态 await，async，promise息息相关，await只能在async函数中使用，当执行到await时async函数会挂起， 等待await右侧的表达式返回promise或对象 \"]},\"1001\":{\"h\":\"问题\"},\"1002\":{\"h\":\"vue父子组件传值不刷新问题\",\"t\":[\"1、在父组件改变子组件的值后，立即调用子组件方法获取最新的值，结果获取不到，获取的是旧值 注意双向绑定和属性绑定的区别，以数据驱动的模型,数据改变组件刷新\",\"解决方案：\",\"1、强制刷新数据，$set,v-if\",\"2、在子组件中监听父组件传入的值，当值改变时进行操作\",\"3、改变key的值\",\"4、this.$nextTick,在组件渲染后执行\",\"5、延时操作setTimeout\"]},\"1003\":{\"h\":\"doris\",\"t\":[\"doris文档\"]},\"1004\":{\"h\":\"wechat\"},\"1005\":{\"h\":\"微信内部浏览器\",\"t\":[\"微信内部浏览器会渲染公众号或小程序中打开的网页\"]},\"1006\":{\"h\":\"公众号\",\"t\":[\"appId\",\"appSecret\"]},\"1007\":{\"h\":\"获取公众号订阅用户的的openid\",\"t\":[\"oauth2方式\",\"在微信公众号中点击按钮，打开网页，网页中点击发起授权按钮，向微信公众号平台发起授权，用户静默授权，带着code重定向到指定url\",\"公众号后台服务器根据code获取accessToken和openid\",\"根据openid和accessToken获取用户详细信息\"]},\"1008\":{\"h\":\"带参数二维码的生成\"},\"1009\":{\"h\":\"向微信公众号订阅用户发送模板消息\"},\"1010\":{\"h\":\"小程序\"},\"1011\":{\"h\":\"定时任务\"},\"1012\":{\"h\":\"基于redisson实现定时任务\",\"t\":[\"job仓库\",\"调度器\",\"job执行器\",\"job注册\"]},\"1013\":{\"h\":\"核心\",\"t\":[\"redis中信息\",\"workers\",\"job\",\"jobinfo\",\"taskid\",\"addCronJob\",\"redissonClient.getExecutorService 获取执行器\",\"executorService.scheduleAsync 定时调度\",\"execute执行任务\",\"缓存job的任务id\",\"public String addCronJob(String jobId, String cron) { String taskId = redissonClient.getExecutorService(Container.WORKER) .scheduleAsync(new JobDispatchWrapper(jobId), CronSchedule.of(cron)).getTaskId(); redissonClient.<String, String>getListMultimap(Container.TASK_ID).put(jobId, taskId); return taskId; } \",\"removeJob\",\"service.cancelTask 取消任务\",\" public void pauseJob(String jobId) { RListMultimap<String, String> listMap = redissonClient.getListMultimap(Container.TASK_ID); RScheduledExecutorService service = redissonClient.getExecutorService(Container.WORKER); Iterator<String> it = listMap.get(jobId).iterator(); while (it.hasNext()) { String id = it.next(); service.cancelTask(id); it.remove(); } } \",\"triggerJob\",\" public void triggerJob(String jobId) { redissonClient.getExecutorService(Container.WORKER).submit(new JobDispatchWrapper(jobId)); } \",\"dispatcher\",\"public void dispatch(JobExecuteParam param) { JobInfo jobInfo = jobRepository.findJobInfoById(param.getJobId()); if (jobInfo == null) { throw new RuntimeException(String.format(\\\"未查询到任务 %s\\\", param)); } // this.checkDispatch(param); redissonClient.getExecutorService(param.getTopicKey()) .execute(new JobBeanExecuteWrapper(param)); } \"]},\"1014\":{\"h\":\"消息队列\"},\"1015\":{\"h\":\"需求\",\"t\":[\"实现一个可供客户端订阅消息的消息队列服务器broker\",\"协议选择： amqp或mqtt\",\"是否落盘，提供持久化能力\",\"是否提供消息最大保存时间设置\",\"认证模块的实现\",\"用户及队列信息的维护\",\"如何处理客户端的连接、订阅、消息分配\",\"消息消费位点如何处理\"]},\"1016\":{\"h\":\"方案\"},\"1017\":{\"h\":\"基于jmqtt改造\",\"t\":[\"设计文档\"]},\"1018\":{\"h\":\"基于pulsar改造\",\"t\":[\"官方文档\",\"使用oauth2认证\"]},\"1019\":{\"h\":\"基于activemq改造\"},\"1020\":{\"h\":\"基于Hivemq改造\"},\"1021\":{\"h\":\"基于Moquette改造\"},\"1022\":{\"h\":\"基于qpid进行改造\",\"t\":[\"amqp协议\",\"jms\"]},\"1023\":{\"h\":\"基于Eclipse Paho MQTT Broker改造\",\"t\":[\"结合paho client\"]},\"1024\":{\"h\":\"基于rabbitmq进行改造\",\"t\":[\"使用rabbitmq-auth-backend-http插件\",\"rabbit-mqtt插件\",\"rabbitmq_amqp1_0插件\"]},\"1025\":{\"h\":\"rabbitmq配置步骤\",\"t\":[\"常用命令\",\"# 列出插件列表 rabbitmq-pluins list # 启用插件 rabbitmq-plugins enable rabbitmq_auth_backend_http rabbitmq-plugins enable rabbitmq_auth_backend_cache # 查看环境参数 rabbitmqctl environment # 配置参数 vi /etc/rabbitmq/rabbitmq.conf # 重启 service rabbitmq-server restart \",\"配置http插件\",\"# 1、2表示认证顺序 auth_backends.1 = cache auth_cache.cached_backend = http auth_backends.2 = internal # auth_backends.2 = http auth_http.http_method = post auth_http.user_path = http://some-server/auth/user auth_http.vhost_path = http://some-server/auth/vhost auth_http.resource_path = http://some-server/auth/resource auth_http.topic_path = http://some-server/auth/topic auth_cache.cache_ttl = 5000 \"]},\"1026\":{\"h\":\"rabbitmq.conf\",\"t\":[\"#loopback_users.guest = false #listeners.tcp.default = 5672 #default_pass = 123456 #default_user = admin #management.listener.port = 15672 #management.listener.ssl = false #auth_backends.1 = cache # 启用 cache 后，不需要直接指定 http 方式 auth_backends.1 = http auth_backends.2 = internal # 缓存后端指定为 http # auth_cache.cached_backend = http # 认证请求类型 auth_http.http_method = post # 认证和授权地址，官方提供了 Spring Boot 示例 # 根据需要配置下面地址 auth_http.request_timeout = 60000 auth_http.connection_timeout = 60000 auth_http.user_path = http://10.142.52.12:3000/auth/user auth_http.vhost_path = http://10.142.52.12:3000/auth/vhost auth_http.resource_path = http://10.142.52.12:3000/auth/resource auth_http.topic_path = http://10.142.52.12:3000/auth/topic # 缓存时间，单位毫秒 auth_cache.cache_ttl = 1000 mqtt.default_user = test mqtt.default_pass = 123456 mqtt.allow_anonymous = true mqtt.listeners.tcp.default = 1883 \"]},\"1027\":{\"h\":\"用户中心\"},\"1028\":{\"h\":\"认证\",\"t\":[\"客户端获取用户信息，角色，权限，\",\"带着token，角色id,权限编码，用户id\",\"校验token, 角色，api\"]},\"1029\":{\"h\":\"网关\",\"t\":[\"网关作为资源服务器，向auth服务发起token进行校验，\",\"authorizeExchange对角色校验\",\"用户中心进行服务调用获取角色对应api,使用缓存\",\"根据服务名称查询拥有的api进行鉴权\"]},\"1030\":{\"h\":\"角色聚合\",\"t\":[\"用户角色，同一客户端的两个客户端角色，角色的权限相交\"]},\"1031\":{\"h\":\"网关集成权限认证\",\"t\":[\"作为资源服务器\",\"opaqueToken，token提取\",\"认证失败，访问被拒绝处理\",\"使用默认token校验， 向auth服务发起oauth2/introspect请求\",\"从auth服务获取jwkSource来对token进行校验,/oauth2/jwks\",\"配置鉴权管理器进行鉴权\",\"@Slf4j @Configuration @EnableWebFluxSecurity @RequiredArgsConstructor public class CenterResourceServerConfig { private final CenterTokenExtractor centerTokenExtractor; private final CenterOpaqueTokenIntrospector centerOpaqueTokenIntrospector; private final AuthorizationManager authorizationManager; private final CenterAccessDeniedHandler centerAccessDeniedHandler; private final CenterAuthenticationEntryPoint authenticationEntryPoint; private final IgnoreUrlProperties ignoreUrlProperties; @Bean SecurityWebFilterChain securityFilterChain(ServerHttpSecurity httpSecurity) throws Exception{ httpSecurity.authorizeExchange() .pathMatchers(ArrayUtil.toArray(ignoreUrlProperties.getWhites(),String.class)).permitAll() .anyExchange().access(authorizationManager) .and().exceptionHandling() //处理未授权 .accessDeniedHandler(centerAccessDeniedHandler) //未认证 .authenticationEntryPoint(authenticationEntryPoint) .and().csrf().disable(); httpSecurity.oauth2ResourceServer(oauth2 -> oauth2.opaqueToken(token->token.introspector(centerOpaqueTokenIntrospector)) .bearerTokenConverter(centerTokenExtractor) .authenticationEntryPoint(authenticationEntryPoint) .accessDeniedHandler(centerAccessDeniedHandler)); return httpSecurity.build(); } } \"]},\"1032\":{\"h\":\"获取所有接口url\",\"t\":[\"方案\",\"通过集成的swagger实现\",\"通过类加载器加载类路径下的所有类对象，反射获取信息\",\"通过spring上下文来实现\",\"public class SystemRunner implements CommandLineRunner { @Value(\\\"${spring.application.name}\\\") private String serviceName; private final DocumentationCache documentationCache; private final ServiceModelToOpenApiMapper mapper; @Override public void run(String... args){ /*String groupName =Docket.DEFAULT_GROUP_NAME; Documentation documentation = documentationCache.documentationByGroup(groupName); if (documentation == null) { log.info(\\\"接口初始化失败\\\"); } OpenAPI oas = mapper.mapDocumentation(documentation); if (CollectionUtil.isNotEmpty(oas.getPaths())) { Iterator<Map.Entry<String, PathItem>> iterator = oas.getPaths().entrySet().iterator(); while (iterator.hasNext()) { Map.Entry<String,PathItem> entry = iterator.next(); String pathName = entry.getKey(); PathItem pathItem = entry.getValue(); if (pathItem.getGet() != null) { } } }*/ //获取controller包下的class List<Class<?>> classList = getAllClassByPackageName(\\\"com.techease.authcenter.system.controller\\\"); } private List<Class<?>> getAllClassByPackageName(String packageName) { List<Class<?>> classes = new ArrayList<Class<?>>(); String packageDirName = packageName.replace('.', '/'); Enumeration<URL> dirs; try { //获取类路径下的资源 dirs = Thread.currentThread().getContextClassLoader().getResources(packageDirName); while (dirs.hasMoreElements()) { URL url = dirs.nextElement(); String protocol = url.getProtocol(); if (\\\"file\\\".equals(protocol)) { // 获取包的物理路径 String filePath = URLDecoder.decode(url.getFile(), \\\"UTF-8\\\"); // 以文件的方式扫描整个包下的文件 并添加到集合中 findAndAddClassesInPackageByFile(packageName, filePath, recursive, classes); } } } catch (IOException e) { e.printStackTrace(); } return classes; } private static void findAndAddClassesInPackageByFile(String packageName, String packagePath, final boolean recursive, List<Class<?>> classes) { // 获取此包的目录 建立一个File File dir = new File(packagePath); // 如果不存在或者 也不是目录就直接返回 if (!dir.exists() || !dir.isDirectory()) { return; } // 如果存在 就获取包下的所有文件 包括目录 File[] dirFiles = dir.listFiles(new FileFilter() { // 自定义过滤规则 如果可以循环(包含子目录) 或则是以.class结尾的文件(编译好的java类文件) public boolean accept(File file) { return (recursive && file.isDirectory()) || (file.getName().endsWith(\\\".class\\\")); } }); assert dirFiles != null; // 循环所有文件 for (File file : dirFiles) { // 如果是目录 则继续扫描 if (file.isDirectory()) { findAndAddClassesInPackageByFile(packageName + \\\".\\\" + file.getName(), file.getAbsolutePath(), recursive, classes); } else { // 如果是java类文件 去掉后面的.class 只留下类名 String className = file.getName().substring(0, file.getName().length() - 6); try { // 添加到集合中去 classes.add(Class.forName(packageName + '.' + className)); } catch (ClassNotFoundException e) { e.printStackTrace(); } } } } } \"]},\"1033\":{\"h\":\"菜单\"},\"1034\":{\"h\":\"菜单表\",\"t\":[\"字段\",\"id\",\"code\",\"name\",\"parent_id\",\"type 菜单，目录，功能(按钮)\"]},\"1035\":{\"h\":\"删除菜单\",\"t\":[\"递归获取所有菜单id,进行删除\"]},\"1036\":{\"h\":\"buildTree构造菜单树\",\"t\":[\"处理方式\",\"多层循环处理，如果菜单层数适中，推荐使用\",\"递归，多层时采用，但耗时\",\"可以使用工具类进行树的构造 hutool的TreeUtil\",\"tree工具数据结构\",\"treeNode\",\"treeNodeConfig\",\"Tree 以map形式存储treeNode\",\"TreeBuilder \",\"Tree root\",\"Map<id,Tree> idTreeMap\",\"以map构建树\",\"private void buildFromMap() { if (MapUtil.isEmpty(this.idTreeMap)) { return; } final Map<E, Tree<E>> eTreeMap = MapUtil.sortByValue(this.idTreeMap, false); E parentId; for (Tree<E> node : eTreeMap.values()) { if (null == node) { continue; } parentId = node.getParentId(); if (ObjectUtil.equals(this.root.getId(), parentId)) { this.root.addChildren(node); continue; } final Tree<E> parentNode = eTreeMap.get(parentId); if (null != parentNode) { parentNode.addChildren(node); } } } \",\"剪枝 根据节点配置树的深度进行剪枝\",\" /** * 树剪枝叶 * * @param tree 节点 * @param currentDepp 当前层级 * @param maxDeep 最大层级 */ private void cutTree(Tree<E> tree, int currentDepp, int maxDeep) { if (null == tree) { return; } if (currentDepp == maxDeep) { // 剪枝 tree.setChildren(null); return; } final List<Tree<E>> children = tree.getChildren(); if (CollUtil.isNotEmpty(children)) { for (Tree<E> child : children) { cutTree(child, currentDepp + 1, maxDeep); } } } \"]},\"1037\":{\"h\":\"Lindorm\",\"t\":[\"云原生多模数据库\"]},\"1038\":{\"h\":\"引擎\",\"t\":[\"宽表引擎\",\"时序引擎\",\"搜索引擎\",\"计算引擎\",\"向量引擎\",\"AI引擎\"]},\"1039\":{\"h\":\"计算引擎\",\"t\":[\"hive\",\"spark\"]},\"1040\":{\"h\":\"mysql\"},\"1041\":{\"h\":\"使用\"},\"1042\":{\"h\":\"字段添加删除\",\"t\":[\" alter table dev_device_instance drop COLUMN creator_id, drop COLUMN modifier_id, drop COLUMN create_time, drop COLUMN modify_time; alter table dev_device_instance add ( create_by varchar(255) not null COMMENT '创建人', update_by varchar(255) not null COMMENT '修改人', create_time datetime COMMENT '创建时间', update_time datetime COMMENT '修改时间'); \"]},\"1043\":{\"h\":\"xml 特殊字符转义\",\"t\":[\"> &gt; < &lt; >= &gt;= \"]},\"1044\":{\"h\":\"事务隔离级别\",\"t\":[\"读未提交 ru\",\"一个事务读到了另一个事务未提交的数据，会导致脏读\",\"读已提交 rc\",\"读操作时，一个事务只能读取另一事务已提交的数据，解决脏读，导致不可重复读\",\"可重复读 rr\",\"读操作时，解决不可重复读，导致幻读，范围查询时前后结果不一致\",\"串行化 serializable\",\"事务按顺序执行\"]},\"1045\":{\"h\":\"索引\",\"t\":[\"使用B+树组织索引\",\"索引即数据\"]},\"1046\":{\"h\":\"锁\"},\"1047\":{\"h\":\"锁的粒度\",\"t\":[\"表级锁 用于myisam引擎\",\"行级锁 用于innodb引擎\"]},\"1048\":{\"h\":\"锁的类别\",\"t\":[\"读锁\",\"IS 意向共享锁\",\"S 共享锁 在加锁之前会先在表加意向锁\",\"select * from test lock in share mode \",\"写锁\",\"IX 意向排它锁\",\"X 排它锁 在加锁之前会先在表加意向锁\",\"select * from test for update update delete insert \",\"行级锁\",\"record lock 记录锁\",\"间隙锁 GAP lock 在当前读下，使用间隙锁，锁住间隙，解决幻读情况\",\"若当前列是唯一索引或主键， 锁住对应列索引和主键聚簇索引记录\",\"若当前列是普通索引 锁住对应列索引和主键聚簇索引记录以及对应间隙\",\"若当前列是没有索引 升级为表级锁，全表扫描\",\"next-key lock 临键锁 GAP和record的结合\",\"页锁 注意\",\"rc级别下只有record lock\",\"rr级别下有 gap lock record lock next-key(锁住间隙和记录)\",\"next-key用于范围查询、等值查询时，锁住记录和间隙，避免其他线程插入或更新数据，从而避免幻读\"]},\"1049\":{\"h\":\"MVCC多版本并发控制（并发无锁）\",\"t\":[\"参考\",\"参考\",\"为了解决读写冲突，提高并发度，引入版本控制，解决RR级别下的部分幻读问题,并不能完全解决幻读 通过如下方式实现:\",\"通过记录对应的三个隐藏字段(维护了一个记录版本链，最新版本记录了最新值以及修改的事务id)\",\"read view(当前最小事务ID 当前活跃事务ID集 下次事务ID值(当前最大事务ID + 1))\",\"undo log 在事务 select语句前，生成read view，若隔离级别为RC，则每一次查询都会生成read view,RR只会生成一次ReadView\"]},\"1050\":{\"h\":\"当前读与快照读\",\"t\":[\"快照读即select查询，无锁 ，查询undo log 中的记录修改日志\",\"当前读,即加锁 select for update 、select lock in share mode 读取最新记录\",\"在同一事务中同时使用当前读与快照读 ，不能避免幻读，当前读会使快照读失效\"]},\"1051\":{\"h\":\"如何解决幻读\",\"t\":[\"以下两种方式不能混用，否则失效\",\"mvcc和快照读，只能解决部分幻读，范围或等值查询不能避免幻读\",\"next-key和当前读\"]},\"1052\":{\"h\":\"redo log\",\"t\":[\"innodb引擎层，它会存储事务操作的ddl dml语句，不管事务是否提交成功，主要用于服务器宕机的数据恢复\"]},\"1053\":{\"h\":\"undo log\",\"t\":[\"主要用于事务回滚数据\"]},\"1054\":{\"h\":\"bin log\",\"t\":[\"server层 每次sql请求生成对应sql的二进制日志，一般追加存储，存储完新建下一bin log 文件，主要用于主从复制传递数据\"]},\"1055\":{\"h\":\"数据的导入导出\"},\"1056\":{\"h\":\"导出\",\"t\":[\"# 导出整个数据库 mysqldump -u username -p password dbname > dbname.sql； # 导出数据库中的数据表（包括数据表中的数据） mysqldump -u username -p password dbname tablename > tablename.sql； # 导出数据库结构（不包括数据，只有创建数据表语句）添加 -d 参数 mysqldump -u username -p password -d dbname > dbname.sql； \"]},\"1057\":{\"h\":\"导入\",\"t\":[\"# source 命令 source d:/DB/db_jxc.sql \"]},\"1058\":{\"h\":\"高级用法\",\"t\":[\"WITH d AS ( SELECT d1.id, d1.product_id, d1.parent_id, d1.`name`, COALESCE ( d1.pic_url, d2.pic_url ) AS pic_url, COALESCE ( d1.metadata, d2.metadata ) AS metadata, COALESCE ( d1.description, d2.description ) AS description, COALESCE ( d1.registry_time, d2.registry_time ) AS registry_time, COALESCE ( d1.longitude, d2.longitude ) AS longitude, COALESCE ( d1.latitude, d2.latitude ) AS latitude, d1.create_time AS create_time, d1.update_time AS update_time, d1.creator_id AS creator_id, d1.updator_id AS updator_id, d1.is_delete AS is_delete, COALESCE ( d1.device_secret, d2.device_secret ) AS device_secret, COALESCE ( d1.dev_type, d2.dev_type ) AS dev_type, COALESCE ( d1.device_key, d2.device_key ) AS device_key, COALESCE ( d1.is_model_change, d2.is_model_change ) AS is_model_change, COALESCE ( d1.state, d2.state ) AS state, d1.from_share AS from_share, COALESCE ( d1.from_id, d1.id ) AS from_id, COALESCE ( d1.source_user_id, d1.user_id ) AS source_user_id, d1.share_authority AS share_authority, COALESCE ( d1.keep_alive_interval, d2.keep_alive_interval ) AS keep_alive_interval, d1.user_id AS user_id FROM device_info AS d1 LEFT JOIN device_info d2 ON d1.from_id = d2.id ) SELECT d.id, d.product_id, p.NAME AS product_name, d.parent_id, d.NAME, d.pic_url, d.metadata, d.description, d.registry_time, d.longitude, d.latitude, d.create_time, d.update_time, d.creator_id, d.updator_id, d.is_delete, d.device_secret, d.dev_type, d.device_key, d.is_model_change, d.state, d.from_share, d.from_id, d.source_user_id, d.share_authority, d.keep_alive_interval, d.user_id, s.state AS device_state, s.date_ts AS device_state_ts, ( UNIX_TIMESTAMP( NOW())* 1000- ( d.keep_alive_interval * 1000+s.date_ts )) AS expired_ts, REPLACE ( unix_timestamp( CURRENT_TIMESTAMP ( 3 ) ), '.', '' ) AS server_ts FROM d LEFT JOIN device_product p ON d.product_id = p.id LEFT JOIN device_state s ON d.from_id = s.id \"]},\"1059\":{\"h\":\"sql\",\"t\":[\"强制使用索引\",\"FROM wms_order a force index (idx_wo_001) LEFT JOIN wms_order_item b\",\"<Mapper> <select id=\\\"selectByQuery\\\" resultType=\\\"com.saascloud.scms.wms.entity.OrderItem\\\"> </select> <select id=\\\"selectItems\\\" resultMap=\\\"orderItemMap\\\"> </select> <resultMap type=\\\"com.saascloud.api.common.vo.wms.OrderDetailHistoryDto\\\" id=\\\"orderItemHistory\\\"> <result property=\\\"receiverDetailAddress\\\" column=\\\"receiver_detail_address\\\"/> </resultMap> </Mapper> \"]},\"1060\":{\"h\":\"存储\"},\"1061\":{\"h\":\"数据\",\"t\":[\"时序数据\",\"非结构化数据\",\"半结构化数据\",\"结构化数据\"]},\"1062\":{\"h\":\"数据模型\",\"t\":[\"宽表\",\"时序\",\"对象\",\"文件\",\"队列\",\"空间\"]},\"1063\":{\"h\":\"数据库架构\",\"t\":[\"存算分离\"]},\"1064\":{\"h\":\"build\"},\"1065\":{\"h\":\"classpath\",\"t\":[\"maven\",\"如果资源文件放在 maven 工程的 src/main/resources 资源文件夹下，源码文件放在 src/main/java/ 下，两者编译后都会放到 target/classes 中， 因此 Maven 项目的 classpath 路径是：java 文件夹和 resources 文件夹下的根位置。 \",\"gradle\",\"build目录 项目输出路径，包括编译后的.class文件（classes文件夹下），资源文件（resourcer文件夹下）\",\"普通java项目\",\"类路径是module定义的目录或项目输出目录\"]},\"1066\":{\"h\":\"jar包\",\"t\":[\"可执行jar包\",\"META-INF\",\"MANIFEST.MF文件，定义了类路径，依赖jar包路径，启动类\",\"Manifest-Version: 1.0 Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx Start-Class: com.example.learning_research.LearningResearchApplication Spring-Boot-Classes: BOOT-INF/classes/ Spring-Boot-Lib: BOOT-INF/lib/ Spring-Boot-Version: 2.3.2.RELEASE Main-Class: org.springframework.boot.loader.JarLauncher \",\"BOOT-INF\",\"org\",\"普通jar\",\"类文件， com.xxx.xxx\",\"META-INF\"]},\"1067\":{\"h\":\"gradle\"},\"1068\":{\"h\":\"版本冲突\",\"t\":[\"处理优先级\",\"dependency\",\"dependencyManagement\",\"传递过来的依赖，优先使用dependencyManagement中的版本\",\"按版本号排序，使用最高版本\"]},\"1069\":{\"h\":\"shadowJar\"},\"1070\":{\"h\":\"configurations\"},\"1071\":{\"h\":\"task resolveDependencies\"},\"1072\":{\"h\":\"无法打jar包问题\",\"t\":[\"// build.gradle 加入下列配置 jar.enabled = true \"]},\"1073\":{\"h\":\"gradlew\",\"t\":[\"它是gradle的包装，可使用下述命令构建，自动根据gradle文件夹下的配置,下载gradle进行构建,与本地gradle等同\",\" ## 本地 gradle clean bootJar ## gradle 生成gradlew文件 gradle wrapper ## 清理、打包 ./gradlew clean bootJar \"]},\"1074\":{\"h\":\"最新用法3.X\",\"t\":[\"api\",\"和2.x的compile类似,只有使用 apply plugin: \\\"java-library\\\" 才能使用\",\"implementation\",\"和2.x的compile类似，只在本模块使用，不传递\",\"testImplementation\",\"和2.x的testCompile类似,只在单元测试代码的编译以及最终打包测试apk时有效\",\"compileOnly\",\"和2.x的provided类似,只参与编译，不参与打包\",\"runtimeOnly\",\"和2.x的apk类似 ,只在生成apk的时候参与打包，编译时不会参与，很少用。\",\"debugCompile（debugImplementation）\",\"debugCompile 只在debug模式的编译和最终的debug apk打包时有效\",\"releaseCompile（releaseImplementation）\",\"Release compile 仅仅针对Release 模式的编译和最终的Release apk打包。\"]},\"1075\":{\"h\":\"maven\",\"t\":[\"依赖管理\",\"依赖传递\",\"版本管理\",\"项目构建\"]},\"1076\":{\"h\":\"版本冲突\",\"t\":[\"处理优先级\",\"dependency\",\"dependencyManagement\",\"传递过来的依赖，使用dependencyManagement中的版本\",\"最近依赖版本，路径相同优先使用先引用的\"]},\"1077\":{\"h\":\"spring-boot-maven-plugin\",\"t\":[\"用于maven打成可依赖jar包后的再次打包repackage,再次打包为可执行jar包，将pom中依赖的组件jar包也打包到jar中\"]},\"1078\":{\"h\":\"profile的使用\",\"t\":[\"参考\",\"结合springboot的Profile的使用，是我比较推荐的方式，和本文maven的profile使用无关系， 在application.properties都有spring.profiles.active=@profiles.active@去加载对应的application-{xxx}.properties。\",\" <profiles> <profile> <!--不同环境Profile的唯一id--> <id>dev</id> <properties> <!--profiles.active是自定义的字段（名字随便起），自定义字段可以有多个--> <profiles.active>dev</profiles.active> </properties> </profile> <profile> <id>prod</id> <properties> <profiles.active>prod</profiles.active> </properties> <activation> <activeByDefault>true</activeByDefault> </activation> </profile> <profile> <id>test</id> <properties> <profiles.active>test</profiles.active> </properties> </profile> </profiles> \"]},\"1079\":{\"h\":\"激活方式\",\"t\":[\"1、即在使用maven打包时通过-P参数，-P后跟上profile的唯一id，如\",\"mvn clean package -Ptest \",\"2、通过pom文件里的activation属性\",\" <profile> <id>prod</id> <properties> <profiles.active>prod</profiles.active> </properties> <!--activation用来指定激活方式，可以根据jdk环境，环境变量，文件的存在或缺失--> <activation> <!--配置默认激活--> <activeByDefault>true</activeByDefault> <!--通过jdk版本--> <!--当jdk环境版本为1.5时，此profile被激活--> <jdk>1.5</jdk> <!--当jdk环境版本1.5或以上时，此profile被激活--> <jdk>[1.5,)</jdk> <!--根据当前操作系统--> <os> <name>Windows XP</name> <family>Windows</family> <arch>x86</arch> <version>5.1.2600</version> </os> <!--通过系统环境变量，name-value自定义--> <property> <name>env</name> <value>test</value> </property> <!--通过文件的存在或缺失--> <file> <missing>target/generated-sources/axistools/wsdl2java/ com/companyname/group</missing> <exists/> </file> </activation> </profile> \"]},\"1080\":{\"h\":\"Jenkins自动构建\"},\"1081\":{\"h\":\"jenkins集群搭建\",\"t\":[\"参考\"]},\"1082\":{\"h\":\"全局工具自动安装\",\"t\":[\"从官网下载安装\",\"二进制zip\",\"手动下载安装包，配置home路径\"]},\"1083\":{\"h\":\"流水线\",\"t\":[\"脚本化流水线 更加灵活\",\"声明式流水线\"]},\"1084\":{\"h\":\"agent\",\"t\":[\"执行流水线节点\",\"label\",\"none\",\"any\",\"option\"]},\"1085\":{\"h\":\"docker\"},\"1086\":{\"h\":\"使用\"},\"1087\":{\"h\":\"基础命令\",\"t\":[\"docker info docker logs 容器id docker ps -a docker images docker exec -it 容器id /bin/bash #容器过滤命令： docker ps | awk '{print$1\\\"\\\\t\\\"$2}' # 删除镜像 docker rmi 镜像名称 # 批量删除 docker rmi $(docker images | grep \\\"none\\\") ## 查看镜像等占用 docker systen df ## 查看日志最后几行 docker logs 容器id --tail 100 docker ps -a | grep php | awk '{print $1}' | xargs | docker rm -f \"]},\"1088\":{\"h\":\"通信\",\"t\":[\"创建容器会创建evth-pair网络接口对 一端连接容器，一端连接网桥\"]},\"1089\":{\"h\":\"不同网络间容器通信\",\"t\":[\"# 将容器加入到网络中，即容器属于不同局域网 docker network connect 网络名 容器名 \"]},\"1090\":{\"h\":\"默认网络\",\"t\":[\"docker 安装时默认使用docker0网桥（交换机/网关）和此网桥相连的所有容器构成局域网\",\"容器间通信必须使用--link 创建容器链接\"]},\"1091\":{\"h\":\"自定义网络\",\"t\":[\"默认创建dns server,网络中的所有容器可以使用容器名通信\"]},\"1092\":{\"h\":\"安装docker-compose\",\"t\":[\"# 先安装docker-compose curl -L \\\"https://github.com/docker/compose/releases/download/v2.12.2/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose # 赋予权限 chmod u+x /usr/local/bin/docker-compose \"]},\"1093\":{\"h\":\"docker buildx\",\"t\":[\"使用参考参考\",\"支持Moby BuildKit的所有特性；\",\"可以跨CPU架构编译镜像；\",\"可以在跨多节点同时编译镜像。\",\"docker的一个插件\",\"在Windows和macOs上，Docker Desktop已经包含了Docker Buildx，无需额外安装，可通过命令docker buildx version 确认其是否安装成功。\",\"开启docker实验特性\",\"vi ~/.docker/config.json { \\\"experimental\\\": \\\"enabled\\\" } vi /etc/docker/daemon.json { \\\"experimental\\\": true } systemctl daemon-reload systemctl restart docker \",\"安装docker buildx 安装模拟器\",\"# 查看是否已经安装模拟器 docker buildx ls # 安装环境模拟器,linux的系统内核要在4.8以上或centos8系统的需要(否则报无效参数) docker run --privileged --rm tonistiigi/binfmt --install all \",\"Build多平台image\",\"# 构建多平台镜像 --load先将镜像存到本地 --push直接推到仓库 # 直接推送仓库可能网络地址有问题，需先加载到本地--load ,本地再推送 docker buildx build --platform=linux/arm64,linux/amd64 -t wanhongji/nacos:2.1.1 . --load \"]},\"1094\":{\"h\":\"alpine\",\"t\":[\"基础镜像\"]},\"1095\":{\"h\":\"服务启动\",\"t\":[\"查看已启动的服务\",\"systemctl list-units --type=service\",\"查看是否设置开机启动\",\"systemctl list-unit-files | grep enable\",\"设置开机启动\",\"systemctl enable docker.service\",\"关闭开机启动\",\"systemctl disable docker.service\"]},\"1096\":{\"h\":\"镜像地址\",\"t\":[\"vi /etc/docker/daemon.json\",\"sudo systemctl daemon-reload\",\"sudo systemctl restart docker\",\"{ \\\"registry-mirrors\\\": [ \\\"https://w9cgx3yb.mirror.aliyuncs.com\\\", \\\"https://hub-mirror.c.163.com\\\", \\\"https://registry.docker-cn.com\\\", \\\"https://docker.mirrors.ustc.edu.cn\\\" ], \\\"insecure-registries\\\": [ \\\"192.168.3.88:8089\\\" ] } \"]},\"1097\":{\"h\":\"push\",\"t\":[\"docker login 先登录\",\"docker tag local-image:tagname new-repo:tagname docker push new-repo:tagname docker build -t wanhongji/report:1.0 . docker push wanhongji/report:1.0 \"]},\"1098\":{\"h\":\"-v --mount --volume\",\"t\":[\"将容器目录挂载到docker volume 或 宿主机文件系统\",\"mode\",\"默认 文件互相看不到变化 文件夹互相同步\",\"ro 容器只读\",\"rw 互相同步 容器不可删除\"]},\"1099\":{\"h\":\"network\",\"t\":[\"docker网络默认从17段,每新建一个往后退18，19段\",\"创建网络\",\"docker network create jenkins --network jenkins --network-alias docker\"]},\"1100\":{\"h\":\"查看数据卷信息\",\"t\":[\"docker volume inspect 卷名\"]},\"1101\":{\"h\":\"Dockerfile\",\"t\":[\"参考\"]},\"1102\":{\"h\":\"构建过程\",\"t\":[\"基础\",\"每条保留字指令必须为大写字母，且后面至少要跟随一个参数\",\"指令按照从上到下，顺序执行\",\"#表示注释\",\"每条指令都会创建一个新的镜像层，并对镜像进行提交\",\"从应用软件的角度看,DockerFile、Docker镜像与Docker容器分别代表软件的三个不同阶段：\",\"DockerFile是软件的原材料\",\"Docker镜像是软件的交付品\",\"Docker容器则可以认为是软件的运行态。\"]},\"1103\":{\"h\":\"FROM\",\"t\":[\"基础镜像\",\"在Dockerfile中，每使用一个FROM指令，都表示一个新的构建阶段开始。每个构建阶段都是相互独立的，有自己的环境变量和文件系统。\",\"当使用FROM指令时，可以通过设置ENV指令来定义环境变量，并且这些环境变量只在当前阶段有效。每个构建阶段的环境变量是相互独立的，不会继承上一个阶段的环境变量。\"]},\"1104\":{\"h\":\"MAINTAINER\",\"t\":[\"镜像作者 姓名+邮箱\"]},\"1105\":{\"h\":\"ENV\",\"t\":[\"用来在构建镜像过程中设置环境变量,这个环境变量可以在后续的任何RUN指令中使用\",\"ENV MY_PATH /usr/mytest WORKDIR $MY_PATH \"]},\"1106\":{\"h\":\"VOLUME\",\"t\":[\"容器数据卷，用于数据保存和持久化工作\"]},\"1107\":{\"h\":\"WORKDIR\",\"t\":[\"设置工作目录，即容器运行的目录\"]},\"1108\":{\"h\":\"RUN\",\"t\":[\"执行shell命令\"]},\"1109\":{\"h\":\"EXPOSE\",\"t\":[\"参考\",\"1、在dockerfile文件中指定要暴露的端口\",\"2、dockerfile不明确指定要暴露的容器端口号，直接使用-p命令，对内部暴露端口重写，隐式暴露端口\",\"# -p 和-P的区别 # 大写的P,表示随机映射宿主机的端口到已暴露容器端口 # 小写p 表示映射宿主机指定端口到容器端口 \"]},\"1110\":{\"h\":\"COPY\",\"t\":[\"COPY src desc COPY [\\\"SRC\\\",\\\"dest\\\"] \"]},\"1111\":{\"h\":\"COPY --from\",\"t\":[\"Dockerfile中的COPY --from指令用于从另一个容器中复制文件或目录到当前镜像的文件系统中。 使用该指令的语法格式如下：\",\"COPY --from=<source-container> <source-path> <destination-path> # --from参数指定了要复制文件或目录所在的源容器。该参数可以是源容器的名称或ID。 # <source-path>指定了要复制的文件或目录在源容器中的路径。 # <destination-path>指定了要将文件或目录复制到当前镜像的文件系统中的路径。 \"]},\"1112\":{\"h\":\"ADD\",\"t\":[\"将宿主机目录下的文件拷贝进镜像，且 ADD命令会自动处理URL和解压tar文件\"]},\"1113\":{\"h\":\"CMD\",\"t\":[\"容器运行要执行的命令，只有最后一个会生效，可被替代。\",\"FROM centos CMD [\\\"ls\\\",\\\"-a\\\"] # 想追加一个命令 -l 成为ls -al,报错 docker run cmd-test:0.1 -l \"]},\"1114\":{\"h\":\"ENTRYPOINT\",\"t\":[\"容器运行要执行的命令，可追加命令\",\"FROM centos ENTRYPOINT [\\\"ls\\\",\\\"-a\\\"] # 我们的命令，是直接拼接在我们得ENTRYPOINT命令后面的 docker run entrypoint-test:0.1 -l \"]},\"1115\":{\"h\":\"mysql容器初始化数据\",\"t\":[\"参考\",\"当Mysql容器首次启动时，会在 /docker-entrypoint-initdb.d目录下扫描 .sh，.sql，.sql.gz类型的文件。 如果这些类型的文件存在，将执行它们来初始化一个数据库。这些文件会按照字母的顺序执行。\",\"如果你的启动命令没有指定数据库那么就必须在数据库DDL脚本中声明并指定使用该数据库。否则就会实现下面的异常：\",\"FROM mysql:8.0.19 MAINTAINER wan_hongji@163.com ENV TZ=Asia/Shanghai RUN ln -sf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone COPY ./baiyin.sql /docker-entrypoint-initdb.d \"]},\"1116\":{\"h\":\"baiyin\",\"t\":[\"FROM anapsix/alpine-java:8_server-jre_unlimited MAINTAINER wan_hongji@163.com RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUN mkdir -p /app WORKDIR /app EXPOSE 8089 ADD ./target/bai-yin-1.0.jar ./ CMD java $JVM_OPTS -Dfile.encoding=utf-8 -Djava.security.egd=file:/dev/./urandom -jar bai-yin-1.0.jar $JAVA_OPTS \"]},\"1117\":{\"h\":\"docker-compose\",\"t\":[\"默认情况下，Compose会为我们的应用创建一个网络，这些容器都会被加入app_default网络中。 这样，容器就可被该网络中的其他容器访问，不仅如此，该容器还能以服务名称作为hostname被其他容器访问。\"]},\"1118\":{\"h\":\"安装及配置\",\"t\":[\"安装\",\"curl -L \\\"https://github-do.panbaidu.cn//https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\\\" -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose \",\".bashrc\",\".bashrc是home目录下的一个shell文件，用于储存用户的个性化设置。在bash每次启动时都会加载.bashrc文件中的内容，并根据内容定制当前bash的配置和环境。\",\"补充： .bash_profile和.bashrc的区别？\",\"两者在登陆bash时都会被bash执行，但是.bash_profile只在会话开始时被读取，而.bashrc在每次打开新的终端时都会被读取。\",\"添加别名\",\"cd vi ~/.bashrc alias dc='docker-compose' source：使当前shell读入路径为filepath的shell文件并依次执行文件中的所有语句，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录 source .bashrc \"]},\"1119\":{\"h\":\"使用\",\"t\":[\"参考\",\"docker-compose up -d docker-compose down docker-compose rm -sf \"]},\"1120\":{\"h\":\"compose配置文件示例\",\"t\":[\"version: '2' services: baiyin-mysql: build: context: ./db environment: MYSQL_ROOT_PASSWORD: root restart: always container_name: baiyin-mysql image: baiyin-mysql command: --character-set-server=utf8mb4 --collation-server=utf8mb4_0900_ai_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --max_allowed_packet=128M ports: - \\\"3309:3306\\\" networks: - techsel_net baiyin: build: context: . environment: ## 这里配置容器系统变量，会覆盖项目配置文件的配置项与 -D键=值 作用相同 JAVA_OPTS: --app.id=techsel --app.secret=techsel123 --app.domain=dataapi.dev.techsel.net --platform.username=test --platform.password=123456 --platform.baseurl=http://10.142.52.15:18808 --platform.bureauCode=P --platform.stationCode=QIP JVM_OPTS: -DMYSQL-HOST=bai-yin-mysql -DMYSQL-PORT=3306 restart: always container_name: baiyin image: baiyin ports: - \\\"8089:8089\\\" networks: - techsel_net networks: techsel_net: external: true \"]},\"1121\":{\"h\":\"environment\",\"t\":[\"docker-compose.yml > ./application.yml > resoures/application.yml\",\"这里配置容器系统变量，会覆盖项目配置文件的配置项与 -D键=值 作用相同\",\"map格式\",\"environment: JAVA_OPTS: --app.id=techsel --app.secret=techsel123 --app.domain=dataapi.dev.techsel.net --platform.username=test --platform.password=123456 --platform.baseurl=http://10.142.52.15:18808 --platform.bureauCode=P --platform.stationCode=QIP JVM_OPTS: -DMYSQL-HOST=bai-yin-mysql -DMYSQL-PORT=3306 #也可拆分写 app.id: techsel app.secret: techsel123 \",\"数组格式\",\"environment: - JAVA_OPTS=--app.id=techsel --app.secret=techsel123 --app.domain=dataapi.dev.techsel.net --platform.username=test --platform.password=123456 --platform.baseurl=http://10.142.52.15:18808 --platform.bureauCode=P --platform.stationCode=QIP - JVM_OPTS=-DMYSQL-HOST=bai-yin-mysql -DMYSQL-PORT=3306 \"]},\"1122\":{\"h\":\"network\",\"t\":[\"docker network create 网络名\",\"外部网络 使不同compose中的容器可以通信\",\"# 服务中必须指定要使用的网络 services: usercenter-api: image: techease/usercenter-api container_name: usercenter-api environment: - TZ=Asia/Shanghai privileged: true restart: always ports: - 9201:8080 networks: - app_net networks: app_net: external: true \",\"使用已存在网络\",\"networks: default: external: name: my-pre-existing-network \",\"networks: alise_net: external: # 外部网络的名称 name: service-net \",\"复杂网络，可连接外部网络容器\",\"custom-driver-1并不能直接使用，你应该替换为host, bridge, overlay等选项中的一种\",\"networks: frontend: external: true driver: custom-driver-1 #自定义网络名称 name: frontend backend: driver: custom-driver-2 name: backend \",\"配置默认网络\",\"networks: default: # Use a custom driver driver: custom-driver-1 \"]},\"1123\":{\"h\":\"wms样例\",\"t\":[\"cd /data/214master #启动所有服务 dc -f mid.yml up -d dc -f opms.yml up -d dc -f scms.yml up -d dc -f ui.yml up -d # 拉取scms里的所有镜像 scms-oms scms-wms scms-edi scms-bi scms-bms gateway dc -f scms.yml pull dc -f scms.yml rm -sf dc -f scms.yml up -d # 只升级wms #### 拉取 dc -f scms.yml pull scms-wms #### 停止并删除 dc -f scms.yml rm -sf scms-wms #### 启动 dc -f scms.yml up -d scms-wms # 拉取opms里的所有镜像 opms-auth opms-idg opms-dict opms-admin dc -f opms.yml pull dc -f opms.yml rm -sf dc -f opms.yml up -d #### 升级前端 dc -f ui.yml pull dc -f ui.yml rm -sf dc -f ui.yml up -d docker commit docker build 生成的镜像存在本地docker服务器上 docker-compose 基于docker 来运行 \"]},\"1124\":{\"h\":\"docker容器启动命令\"},\"1125\":{\"h\":\"rabbitmq\",\"t\":[\"docker run -d --name rabbit -p 5672:5672 -p 15762:15672 -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=123456 arm64v8/rabbitmq:3-management \"]},\"1126\":{\"h\":\"kafka\",\"t\":[\"参考\",\"参考\",\"参考\",\"docker run -d --name zookeeper-server --network app-tier -e ALLOW_ANONYMOUS_LOGIN=yes bitnami/zookeeper:latest # KAFKA_ADVERTISED_HOST_NAME当前主机IP或地址 docker run -d --name kafka-server --network app-tier -p 9092:9092 -e ALLOW_PLAINTEXT_LISTENER=yes \\\\ -e KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper-server:2181 \\\\ -e KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://10.138.108.127:9092 \\\\ bitnami/kafka:latest docker run -d --name kafka-map --network app-tier -p 9001:8080 -e DEFAULT_USERNAME=admin -e DEFAULT_PASSWORD=admin \\\\ --restart always dushixiang/kafka-map:latest \"]},\"1127\":{\"h\":\"gitlab\",\"t\":[\"安装配置\",\"安装参考\",\"配置文件参考\",\"密码 wanhongji/whj123456\",\"# 查看root初始密码 docker exec -it 容器名字或容器ID grep 'Password:' /etc/gitlab/initial_root_password # linux export GITLAB_HOME=/srv/gitlab # mac export GITLAB_HOME=$HOME/gitlab # 社区 docker run --detach \\\\ --publish 443:443 --publish 8087:80 --publish 22:22 \\\\ --name gitlab \\\\ --restart always \\\\ --volume $GITLAB_HOME/config:/etc/gitlab \\\\ --volume $GITLAB_HOME/logs:/var/log/gitlab \\\\ --volume $GITLAB_HOME/data:/var/opt/gitlab \\\\ --shm-size 256m \\\\ gitlab/gitlab-ce:latest # 官方 docker run --detach \\\\ --publish 443:443 --publish 80:80 --publish 22:22 \\\\ --name gitlab \\\\ --restart always \\\\ --volume $GITLAB_HOME/config:/etc/gitlab \\\\ --volume $GITLAB_HOME/logs:/var/log/gitlab \\\\ --volume $GITLAB_HOME/data:/var/opt/gitlab \\\\ --shm-size 256m \\\\ registry.gitlab.cn/omnibus/gitlab-jh:latest \"]},\"1128\":{\"h\":\"gitlab runner\",\"t\":[\"嵌套逻辑\",\"非容器安装runner，可直接使用docker.sock,安装容器 容器安装需挂载进来docker.sock，安装启用容器（容器内部又要使用docker.sock,挂载进，不挂载就需安装docker in docker） \",\"共享runner配置\",\"runner\",\"参考\",\"参考\",\"参考\",\"docker run -d --name gitlab-runner --restart always \\\\ -v /var/run/docker.sock:/var/run/docker.sock \\\\ -v $GITLAB_HOME/gitlab-runner/config:/etc/gitlab-runner \\\\ gitlab/gitlab-runner:latest # 注册 # 注册时配置默认镜像，可在yml文件配置新的镜像 sudo docker exec -it gitlab-runner gitlab-ci-multi-runner register \"]},\"1129\":{\"h\":\"harbor\",\"t\":[\"安装\",\"下载\",\"密码 Harbor12345\",\"使用超级管理员执行sudo\",\"推送时需登录 docker login -u root -p passwd 地址\",\"步骤\",\"tar -zxvf harbor-offline-installer-v2.5.1.tgz cp harbor.yml.tmpl harbor.yml # 更改hostname 注释掉https 要不然安装报错 修改文件位置 sudo ./install.sh \",\"docker 配置\",\"{ \\\"insecure-registries\\\": [ \\\"192.168.3.88:8089\\\" ] } \"]},\"1130\":{\"h\":\"jenkins\",\"t\":[\"安装配置\",\"配置git\",\"# 进入容器执行 ssh-keygen -t rsa -C \\\"git邮箱\\\" # -t 使用的算法 # -C commit记录，标识 # 配置GitHub公钥 # 配置jenkins凭据，设置用户名（设置邮箱名）和私钥 ## 配置主机密钥 ssh-keyscan -H <Githup服务器ip> >> /var/jenkins_home/.ssh/known_hosts \",\"maven、gradle配置\",\"可通过挂载宿主机maven或gradle的目录到jenkins,在jenkins配置maven、gradle\",\"可使用 .gradlew clean bootJar 来构建，即gradle的包装，可自动下载gradle,jenkins中有权限问题，暂未解决\",\"也可直接配置自动安装,在使用时手动设置环境变量，而不是使用tools处理\",\"#!/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin export JAVA_HOME=/var/jenkins_home/tools/hudson.model.JDK/jdk8 export PATH=$JAVA_HOME/bin:$PATH export MAVEN_HOME=/var/jenkins_home/tools/hudson.tasks.Maven_MavenInstallation/maven export PATH=$MAVEN_HOME/bin:$PATH \",\"时区问题\",\"scriptConsole加以下脚本 System.setProperty('org.apache.commons.jelly.tags.fmt.timeZone', 'Asia/Shanghai')\",\"docker in docker问题\",\"和宿主机共用docker\",\"-v /var/run/docker.sock:/var/run/docker.sock 和宿主公用一个docker的方式启动 chmod 777 /var/run/docker.sock 将权限赋给所有用户 在jenkins单节点上映射宿主机的docker.sock和客户端命令 -v /var/run/docker.sock:/var/run/docker.sock \\\\ -v /usr/local/bin/docker:/usr/bin/docker \\\\ docker run -d \\\\ -u root \\\\ --name jenkins \\\\ --privileged=true \\\\ --restart=always \\\\ -p 8080:8080 \\\\ -p 50000:50000 \\\\ -v jenkins-data:/var/jenkins_home \\\\ -v /var/run/docker.sock:/var/run/docker.sock \\\\ -v /usr/local/bin/docker:/usr/bin/docker \\\\ jenkins/jenkins:lts-jdk11 docker run \\\\ -u root \\\\ --rm \\\\ -d \\\\ -p 8080:8080 \\\\ -p 50000:50000 \\\\ --name jenkins \\\\ -v jenkins-data:/var/jenkins_home:rw \\\\ -v /var/run/docker.sock:/var/run/docker.sock:rw \\\\ -v /usr/local/bin/docker:/usr/bin/docker:rw \\\\ jenkins/jenkins:lts-jdk11 docker run \\\\ -u root \\\\ -d \\\\ -p 8080:8080 \\\\ -p 50000:50000 \\\\ --name jenkins \\\\ -v jenkins-data:/var/jenkins_home:rw \\\\ -v /var/run/docker.sock:/var/run/docker.sock:rw \\\\ -v /usr/bin/docker:/usr/bin/docker:rw \\\\ jenkins/jenkins:jdk11 /usr/local/bin/docker -v /var/run/docker.sock:/var/run/docker.sock \\\\ \",\"使用docker dind\",\"docker run --name jenkins-docker --rm --detach \\\\ --privileged --network jenkins --network-alias docker \\\\ --env DOCKER_TLS_CERTDIR=/certs \\\\ --volume jenkins-docker-certs:/certs/client \\\\ --volume jenkins-data:/var/jenkins_home \\\\ --publish 3000:3000 --publish 2376:2376 \\\\ docker:dind --storage-driver overlay2 //Dockerfile FROM jenkins/jenkins:lts-jdk11 USER root RUN apt-get update && apt-get install -y lsb-release RUN curl -fsSLo /usr/share/keyrings/docker-archive-keyring.asc \\\\ https://download.docker.com/linux/debian/gpg RUN echo \\\"deb [arch=$(dpkg --print-architecture) \\\\ signed-by=/usr/share/keyrings/docker-archive-keyring.asc] \\\\ https://download.docker.com/linux/debian \\\\ $(lsb_release -cs) stable\\\" > /etc/apt/sources.list.d/docker.list RUN apt-get update && apt-get install -y docker-ce-cli USER jenkins RUN jenkins-plugin-cli --plugins \\\"blueocean:1.25.6 docker-workflow:1.29\\\" //构建自定义镜像 docker build -t myjenkins-blueocean:lts . --volume \\\"$HOME\\\":/home \\\\ --env JAVA_OPTS=\\\"-Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true\\\" \\\\ --restart=on-failure \\\\ docker run --name jenkins --detach \\\\ --network jenkins --env DOCKER_HOST=tcp://docker:2376 \\\\ --env DOCKER_CERT_PATH=/certs/client --env DOCKER_TLS_VERIFY=1 \\\\ --publish 8080:8080 --publish 50000:50000 \\\\ --volume jenkins-data:/var/jenkins_home \\\\ --volume jenkins-docker-certs:/certs/client:ro \\\\ --volume \\\"$HOME\\\":/home \\\\ --env JAVA_OPTS=\\\"-Dhudson.plugins.git.GitSCM.ALLOW_LOCAL_CHECKOUT=true\\\" \\\\ --restart=on-failure \\\\ jenkins/jenkins:lts-jdk11 // mac docker run --name jenkins-docker --rm -d --privileged --network jenkins --network-alias docker -e DOCKER_TLS_CERTDIR=/certs -v /Users/wanhongji/data/jenkins-docker-certs:/certs/client -v /Users/wanhongji/data/jenkins_home:/var/jenkins_home -p 2376:2376 docker:dind --storage-driver overlay2 docker run --name jenkins -d --network jenkins -e DOCKER_HOST=tcp://docker:2376 -e DOCKER_CERT_PATH=/certs/client -e DOCKER_TLS_VERIFY=1 -v /Users/wanhongji/data/jenkins_home:/var/jenkins_home -v /Users/wanhongji/data/jenkins-docker-certs:/certs/client:ro -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts-jdk11 \",\"docker run --rm -u root -p 8080:8080 --name jenkins -v /mydata/jenkins-data:/var/jenkins_home -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock jenkinsci/blueocean ## mac docker run -d --name jenkins -v /Users/wanhongji/data/jenkins_home:/var/jenkins_home -p 8080:8080 -p 50000:50000 jenkins/jenkins -v /etc/localtime:/etc/localtime 让容器使用和服务器同样的时间设置 -v /var/run/docker.sock:/var/run/docker.sock 和宿主公用一个docker的方式启动 \"]},\"1131\":{\"h\":\"minio\",\"t\":[\"docker run -p 9000:9000 -p 9001:9001 --name minio1 -v D:\\\\volume\\\\minio\\\\data:/data -e \\\"MINIO_ROOT_USER=minio-admin\\\" -e \\\"MINIO_ROOT_PASSWORD=minio-admin\\\" quay.io/minio/minio server /data --console-address \\\":9001\\\" \"]},\"1132\":{\"h\":\"nacos\",\"t\":[\"docker run --restart=always --name nacos-quick -e MODE=standalone -p 8848:8848 -p 9848:9848 -d nacos/nacos-server:latest docker run --restart=always --name nacos-quick -e MODE=standalone -e MYSQL_SERVICE_HOST=192.168.3.90 -e MYSQL_SERVICE_DB_NAME=nacos -e MYSQL_SERVICE_USER=root -e MYSQL_SERVICE_PASSWORD=123456 -e SPRING_DATASOURCE_PLATFORM=mysql -p 8848:8848 -p 9848:9848 -d wanhongji/nacos:v2.1.2 \"]},\"1133\":{\"h\":\"nacos集群及配置\",\"t\":[\"参考\",\"使用nginx转发注册\",\"version: \\\"3.8\\\" services: nacos1: hostname: nacos1 container_name: nacos1 image: wanhongji/nacos:v2.1.2 volumes: - /data/cluster-logs/nacos1:/home/nacos/logs ports: - \\\"8849:8848\\\" - \\\"9849:9848\\\" - \\\"9555:9555\\\" env_file: - ./env/nacos-hostname.env nacos2: hostname: nacos2 image: wanhongji/nacos:v2.1.2 container_name: nacos2 volumes: - /data/cluster-logs/nacos2:/home/nacos/logs ports: - \\\"8850:8848\\\" - \\\"9850:9848\\\" env_file: - ./env/nacos-hostname.env nacos3: hostname: nacos3 image: wanhongji/nacos:v2.1.2 container_name: nacos3 volumes: - /data/cluster-logs/nacos3:/home/nacos/logs ports: - \\\"8851:8848\\\" - \\\"9851:9848\\\" env_file: - ./env/nacos-hostname.env \"]},\"1134\":{\"h\":\"seata\",\"t\":[\"docker run -d --name seata -p 8091:8091 -e SEATA_IP=172.172.172.21 -e SEATA_CONFIG_NAME=file:/seata-server/resources/registry -v /Users/dzl/opt/seata-config/resources:/seata-server/resources seataio/seata-server:1.4.0 \"]},\"1135\":{\"h\":\"redis\",\"t\":[\"docker run --restart=always --name redis -d -p 6379:6379 redis --requirepass 123456 \"]},\"1136\":{\"h\":\"rocketMq配置\",\"t\":[\"服务\",\"docker run --restart=always -d --name rocketmq -p 9876:9876 foxiswho/rocketmq:server docker run --restart=always -d -p 10911:10911 -p 10909:10909 -v /Users/dzl/opt/broker.conf:/etc/rocketmq/broker.conf --name rmqbroker --link rocketmq:namesrv -e \\\"NAMESRV_ADDR=namesrv:9876\\\" -e \\\"JAVA_OPTS=-Duser.home=/opt\\\" -e \\\"JAVA_OPT_EXT=-server -Xms512m -Xmx512m -Xmn256m\\\" foxiswho/rocketmq:broker \",\"broker.conf\",\"brokerClusterName = DefaultCluster brokerName = broker-a brokerId = 0 deleteWhen = 04 fileReservedTime = 48 brokerRole = ASYNC_MASTER flushDiskType = ASYNC_FLUSH sendMessageThreadPoolNums=64 useReentrantLockWhenPutMessage=true waitTimeMillsInSendQueue=30000 osPageCacheBusyTimeOutMills=5000 \",\"图形界面\",\"docker run --restart=always -d --name rcng --link rocketmq:namesrv -e \\\"JAVA_OPTS=-Drocketmq.namesrv.addr=namesrv:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false\\\" -p 8099:8080 -t styletang/rocketmq-console-ng \",\"配置idea jvm参数 -Dcom.rocketmq.sendMessageWithVIPChannel=false 本地开发若出现 172.17.0.xxx:10911发送消息失败 则修改brokerIP1 本地开发若出现 no route xxx 则修改autoCreateTopicEnable=true docker exec -it xxx(容器id) bash cd /etc/rocketmq/ echo 'autoCreateTopicEnable=true' >> broker.conf echo 'brokerIP1 = 172.172.172.98' >> broker.conf exit \"]},\"1137\":{\"h\":\"elasticsearch配置\",\"t\":[\"启动命令中有内网IP自行修改 docker run -d --restart=always --name es -p 9200:9200 -e http.port=9200 -e http.cors.enabled=true -e http.cors.allow-origin=http://localhost:1358,http://127.0.0.1:1358,http://172.172.172.212:1358 -e http.cors.allow-headers=X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization -e http.cors.allow-credentials=true -e TZ=\\\"Asia/Shanghai\\\" -e \\\"discovery.type=single-node\\\" registry.cn-hangzhou.aliyuncs.com/hrsoft/elasticsearch:6.7.2 -- 搜索引擎数据查询工具 dejavu docker run --restart=always -p 1358:1358 -d appbaseio/dejavu -- 搜索引擎管理工具 cerebro docker run -d -p 9000:9000 --restart=unless-stopped --name cerebro lmenezes/cerebro -Djava.security.egd=file:/dev/./urandom -Xmx1G -Xms1G -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -DNACOS_HOST=127.0.0.1 -DMYSQL_HOST=172.172.172.xxx -DMYSQL_PORT=3306 -DMYSQL_PASSWORD=123456 -DMONITOR_HOST=127.0.0.1 -Dspring.cloud.nacos.discovery.metadata.region=dzl 本地开发，若出现connect time out xx.xx.xx.xx(docker 虚拟机IP)：8511 即注册服务的时候IP错位，需要注册自己本地使用的网络IP -Dspring.cloud.inetutils.preferredNetworks=172.172 Operating Platform Managent System \"]},\"1138\":{\"h\":\"cerebro\",\"t\":[\"docker run --name cerebro --restart always -d -p 9001:9000 lmenezes/cerebro:0.9.4 \"]},\"1139\":{\"h\":\"es和kibana\",\"t\":[\"8.0版本默认开启security，配置繁琐\",\"# 以下镜像支持arm64版本 version: '2' services: redis: image: redis:alpine container_name: jetlinks-ce-redis ports: - \\\"6379:6379\\\" volumes: - \\\"redis-volume:/data\\\" command: redis-server --appendonly yes environment: - TZ=Asia/Shanghai elasticsearch: image: elasticsearch:7.17.7 container_name: jetlinks-ce-elasticsearch environment: ES_JAVA_OPTS: -Djava.net.preferIPv4Stack=true -Xms512m -Xmx512m transport.host: 0.0.0.0 network.host: 0.0.0.0 network.publish_host: 10.142.51.108 http.port: 9200 transport.port: 9300 discovery.type: single-node bootstrap.memory_lock: \\\"true\\\" discovery.seed_hosts: elasticsearch ports: - \\\"9200:9200\\\" - \\\"9300:9300\\\" kibana: image: kibana:7.17.7 container_name: jetlinks-ce-kibana environment: ELASTICSEARCH_URL: http://elasticsearch:9200 links: - elasticsearch:elasticsearch ports: - \\\"5601:5601\\\" depends_on: - elasticsearch postgres: image: postgres:alpine container_name: jetlinks-ce-postgres ports: - \\\"5432:5432\\\" volumes: - \\\"postgres-volume:/var/lib/postgresql/data\\\" environment: POSTGRES_PASSWORD: jetlinks POSTGRES_DB: jetlinks TZ: Asia/Shanghai volumes: postgres-volume: redis-volume: \"]},\"1140\":{\"h\":\"mysql\",\"t\":[\"5.7加密方式mysql_native_password 加密插件\",\"8.0以上版本使用另一种加密方式caching_sha2_password\",\"8以后使用外部挂载必须配置mysql-files挂载 -v /mydata/mysql/mysql-files:/var/lib/mysql-files/\",\"docker run -p 3306:3306 --name mysql-8.0.20 -v /mydata/mysql/mysql-files:/var/lib/mysql-files/ -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20 docker run -p 3306:3306 --name mysql-5.7 -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 docker run --restart=always -v /data/mysql/conf:/etc/mysql/conf.d -v /data/mysql/data:/var/lib/mysql --name mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:latest select host,user,plugin from user; \"]},\"1141\":{\"h\":\"access denied\",\"t\":[\"方案1\",\"# 容器启动添加配置 # --default-authentication-plugin=mysql_native_password docker run -p 3306:3306 --name mysql-8.0.20 -v /mydata/mysql/mysql-files:/var/lib/mysql-files/ -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.20 \",\"方案2\",\"#不设密码登录 docker run -p 3306:3306 --name mysql-8.0.20 -v /mydata/mysql/mysql-files:/var/lib/mysql-files/ -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -d mysql:8.0.20 --default-authentication-plugin=mysql_native_password #切换数据库 use mysql; #设置密码 #PASSWORD EXPIRE NEVER 密码永不过期 #mysql_native_password 加密插件 ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456' PASSWORD EXPIRE NEVER; ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '123456'; ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY '123456'; 刷新权限 flush privileges \",\"方案3\",\"使用配置文件跳过检查 mysql8之前的是在my.ini文件中【mysqld】中加一句的 mysql8的话是：在管理员打开的cmd 进入到mysql的bin目录下输入 mysqld --console --skip-grant-tables --shared-memory 再设置加密方式和密码 #my.cnf文件的存放路径根据自己需求自定义即可 vim /root/data/mysql/my.cnf #编辑内容 在vi编辑器中输入以下内容 [mysqld] default_authentication_plugin=mysql_native_password #保存并退出vi编辑器 如何使用vi编辑器请自行百度 这里不再赘述 \"]},\"1142\":{\"h\":\"nexus\",\"t\":[\"搭建maven私有仓库\",\"docker run -d --name nexus -v /data/nexus:/nexus-data -e NEXUS_CONTEXT=nexus -p 8081:8081 sonatype/nexus3:latest \"]},\"1143\":{\"h\":\"git\"},\"1144\":{\"h\":\"初始化仓库\",\"t\":[\"mkdir 文件夹 git init 把目录变为仓库 git add 文件名 文件放入暂存区 git commit -m \\\"提交描述\\\" 拉取远程仓库： git remote add origin git@github.com:michaelliao/learngit.git 推送到远程仓库并关联，加-u推送并关联仓库 git push -u origin master/main 克隆 git clone git@github.com:michaelliao/gitskills.git 拉取提交记录 git pull origin main git branch -a 全部 git branch 本地 git branch -r 远程 -d/D 删除分支/强制删除 -m/M 移动重命名/强制 git remote set-url origin url 更改地址 \"]},\"1145\":{\"h\":\"ssh\",\"t\":[\"客户端生成ssh key\",\"github配置ssh公钥key\",\"ssh-keygen -t rsa -C \\\"youremail@example.com\\\" # -t 使用的算法 # -C 邮箱名（并不一定是github账户邮箱）commit记录，标识 \"]},\"1146\":{\"h\":\"git配置\",\"t\":[\"git config -l # 邮箱名和用户名可任意配置，和github账户邮箱并无关联 git config --global user.name \\\"Your Name\\\" git config --global user.email \\\"email@example.com\\\" # git获取配置信息 git config user.name git config user.email \"]},\"1147\":{\"h\":\"git的使用\",\"t\":[\"idea自动执行git add 命令将文件提交到暂存区 git remote -v 查看远程分支信息 git status 查看当前仓库状态 git log --pretty=oneline 查看提交记录 git reset --hard HEAD^ 回到过去 git reflog 查看命令历史 git reset --hard commitid 回到未来 git diff HEAD --文件名 git checkout -- readme.txt 丢及工作区的修改 git reset HEAD <file> 回到最新版本 git rm 文件名 删除文件 git commit -m \\\"remove test.txt\\\" git推送时需输入token作为密码 \"]},\"1148\":{\"h\":\"git分支\",\"t\":[\"git checkout -b dev 创建并切换分支 等同如下两条命令 git branch dev 创建 git checkout dev 切换 git branch查看当前分支 git merge dev 开发分支合并到当前分支 git branch -d dev 删除开发分支 git switch -c dev 创建并切换分支 等同如下两条命令 \"]},\"1149\":{\"h\":\"git rev-parse\",\"t\":[\"操作git目录相关\",\"git rev-parse --git-dir //显示版本库.git命令所在的位置 git rev-parse --show-toplevel //显示工作区根目录 git rev-parse HEAD //显示HEAD提交的SHA1值 git rev-parse ---short HEAD //显示HEAD提交的简短SHA1值 \"]},\"1150\":{\"h\":\"git checkout\",\"t\":[\"检出 参考\",\"# 表示核查工作区相对于版本库修改过的文件 git checkout # 表示以当前分支的commitID提交节点创建新的分支并切换到新分支。此时工作区的内容和切换分之前commitID提交节点的内容一样 git checkout -b 分支名 commitID # 以指定的提交节点创建了一个临时性分支，此临时性分支可用于做实验性修改 # 如果想把这临时性分支上的改动反映到原分支上，可以通过git checkout -b 新分支名 命令 # 以临时性分支的当前状态创建一个永久性分支，再把这个分支合并到原先的分支，然后再删除这个分支即可。 git checkout commitID \"]},\"1151\":{\"h\":\"git工作区和暂存区\",\"t\":[\"你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区\",\"工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\",\"Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。\",\"每次修改，如果不用git add到暂存区，那就不会加入到commit中\",\"命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：\",\"一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；\",\"一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。\",\"总之，就是让这个文件回到最近一次git commit或git add时的状态。\",\"git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令\",\"Git同样告诉我们，用命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区：\",\"把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。\",\"由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\"]},\"1152\":{\"h\":\"jvm\"},\"1153\":{\"h\":\"常用命令\",\"t\":[\"# 显示jvm进程 jps # jstack # jmap # 查看gc情况 jstat -gc [pid] [刷新频率ms] # 获取dump文件,内存、gc情况 jmap -dump:file=[文件名] [pid] jmap -dump:live,format=b,file=/heap.hprof 1 # 命令行分析 jhat heap.hprof top -Hp [pid] 展示该进程所有线程 # 查看栈信息 线程转储信息 jstack pid jstack -l pid jstack -m [pid] > 文件目录 保存该进程下的jstack文件 # 总gc情况 jstat -gcutil PID # 查看堆信息 jmap –heap pid jmap –histo pid \"]},\"1154\":{\"h\":\"gc分析\",\"t\":[\"使用jdk自带的jvisualvm和jvisualgc插件对gc进行分析\"]},\"1155\":{\"h\":\"gc是否优化\",\"t\":[\"如果各项参数设置合理，系统没有超时日志出现，GC频率不高，GC耗时不高，那么没有必要进行GC优化；如果GC时间超过1〜3 秒，或者频繁G C ,则必须优化。\",\"如果满足下面的指标，则一般不需要进行GC:\",\"Minor GC执行时间不到50ms;\",\"Minor GC执行不频繁，约10秒一次；\",\"Full GC执行时间不到1s;\"]},\"1156\":{\"h\":\"java启动参数分析\",\"t\":[\"参考\"]},\"1157\":{\"h\":\"k8s\",\"t\":[\"它是生产级别的容器编排系统\",\"资源\",\"master\",\"nodes\"]},\"1158\":{\"h\":\"k8s搭建\",\"t\":[\"搭建\"]},\"1159\":{\"h\":\"常用命令\",\"t\":[\"以下是一些常用的Kubernetes（k8s）命令：\",\"kubectl get pods：获取当前命名空间下的所有Pod。\",\"kubectl get deployments：获取当前命名空间下的所有部署。\",\"kubectl get services：获取当前命名空间下的所有服务。\",\"kubectl get nodes：获取集群中的所有节点。\",\"kubectl describe pod <pod-name>：获取有关特定Pod的详细信息。\",\"kubectl describe deployment <deployment-name>：获取有关特定部署的详细信息。\",\"kubectl describe service <service-name>：获取有关特定服务的详细信息。\",\"kubectl logs <pod-name>：查看特定Pod的日志。\",\"kubectl exec -it <pod-name> -- <command>：在特定Pod中执行命令。\",\"kubectl create -f <filename>：使用YAML或JSON文件创建资源。\",\"kubectl apply -f <filename>：使用YAML或JSON文件创建或更新资源。\",\"kubectl delete pod <pod-name>：删除特定的Pod。\",\"kubectl delete deployment <deployment-name>：删除特定的部署。\",\"kubectl delete service <service-name>：删除特定的服务。\",\"kubectl scale deployment <deployment-name> --replicas=<replica-count>：调整部署的副本数。\",\"可以通过运行kubectl --help命令来查看所有可用的kubectl命令及其选项。\"]},\"1160\":{\"h\":\"命名空间\",\"t\":[\"Kubernetes中的命名空间（Namespace）是用于对集群资源进行逻辑隔离和组织的一种机制。它允许将集群内的资源划分为多个独立的虚拟集群，每个命名空间都有自己的一组资源。\"]},\"1161\":{\"h\":\"pod\",\"t\":[\"在Kubernetes（简称为K8s）中，Pod是最小的可调度和可部署的单元。它是Kubernetes中运行和管理容器化应用程序的基本对象。\",\"Pod可以看作是一个或多个相关容器的组合，它们共享相同的网络命名空间、存储卷和其他资源。这些容器在Pod中运行在同一个节点上，并且它们可以相互之间通过本地的网络进行通信。\",\"以下是一些关于Pod的要点：\",\"容器组合：Pod可以包含一个或多个容器。这些容器通常是相互关联、相互协作的应用程序组件，它们共享相同的生命周期和资源。\",\"共享命名空间：Pod中的所有容器共享相同的网络命名空间。它们可以通过localhost相互通信，使用localhost:port进行服务之间的通信。\",\"共享存储卷：Pod中的容器可以挂载共享的存储卷。这样，它们可以共享文件和数据，实现数据的持久化和共享。\",\"生命周期和调度：Pod作为一个整体具有生命周期，它可以被创建、启动、停止和销毁。Pod通过调度器（Scheduler）被分配到集群中的某个节点上运行。\",\"稳定的网络标识：每个Pod都有一个唯一的IP地址，用于在集群内部进行通信。这个IP地址与Pod的生命周期绑定，可以确保Pod中的容器能够可靠地被其他容器或服务访问。\",\"灵活性和弹性：Pod是可扩展的，可以根据需要进行水平伸缩。通过复制Pod，可以创建多个相同配置的副本，并使它们在集群中的不同节点上运行，以增加应用程序的可用性和负载均衡能力。\",\"Pod是Kubernetes中的核心概念，它提供了一个逻辑上相关的容器组合，并为这些容器共享资源和环境。通过Pod，Kubernetes实现了对容器化应用程序的高效调度、资源管理和服务发现。\"]},\"1162\":{\"h\":\"pod工作原理\",\"t\":[\"在Kubernetes中，Master节点并不直接发送命令给Nodes节点来创建Pod中的容器。实际上，Master节点负责整体的集群管理和控制，而Nodes节点承担实际的容器创建和管理任务。\",\"下面是Pod的创建和管理的基本流程：\",\"用户通过Kubernetes API或命令行工具向Master节点提交Pod的描述文件（通常是YAML或JSON格式）。\",\"Master节点的API Server接收到用户提交的Pod描述后，会进行验证和处理。如果描述文件合法，API Server将存储Pod的描述信息到etcd中的集群配置存储中。\",\"Scheduler组件（运行在Master节点上）负责根据集群的资源情况、调度策略等因素，决定将Pod调度到哪个Nodes节点上运行。Scheduler会将Pod绑定到一个合适的Nodes节点。\",\"Kubelet组件（运行在每个Nodes节点上）定期向Master节点的API Server汇报节点的状态和可用资源情况。\",\"Kubelet在接收到来自Master节点的调度指令后，会根据指令在本地节点上创建并运行Pod中的容器。Kubelet会与容器运行时（如Docker、containerd等）进行交互，实际创建和管理容器。\",\"一旦Pod中的容器成功创建并运行，Kubelet会将容器的状态信息反馈给Master节点，Master节点会更新集群状态和监控信息。\",\"总结起来，Master节点通过Scheduler将Pod调度到适合的Nodes节点，而Nodes节点上的Kubelet负责具体的容器创建和管理。这种分工协作的方式确保了Pod在集群中的正确创建和运行。\"]},\"1163\":{\"h\":\"pod可以理解为一个配置文件吗？\",\"t\":[\"Pod在Kubernetes中不是一个配置文件，而是一个运行和管理容器化应用程序的基本单位。Pod可以通过配置文件（通常使用YAML或JSON格式）来定义其规范和属性，但Pod本身不是一个配置文件。\",\"配置文件包含Pod的描述信息，例如容器镜像、资源需求、环境变量、存储卷挂载等。这些配置文件可以通过Kubernetes API服务器进行创建、更新和删除操作，从而实现对Pod的管理和控制。\"]},\"1164\":{\"h\":\"pod与docker-compose\",\"t\":[\"Pod更适用于分布式环境中的容器编排和管理，而Docker Compose更适用于单个主机上的容器编排和管理。\",\"Pod具有更丰富的功能和可扩展性，适用于在大规模集群中管理容器化应用程序。\"]},\"1165\":{\"h\":\"pod的ip与容器内部ip\"},\"1166\":{\"h\":\"同一个 Pod 中的所有容器 IP 地址都相同？\"},\"1167\":{\"h\":\"容器组和控制器\",\"t\":[\"用户应该始终使用控制器来创建 Pod，而不是直接创建 Pod，控制器可以提供如下特性：\",\"水平扩展（运行 Pod 的多个副本）\",\"rollout（版本更新）\",\"self-healing（故障恢复）\",\"例如：当一个节点出现故障，控制器可以自动地在另一个节点调度一个配置完全一样的 Pod，以替换故障节点上的 Pod。\",\"在 Kubernetes 中，广泛使用的控制器有：\",\"Deployment\",\"StatefulSet\",\"DaemonSet 控制器通过其中配置的 Pod Template 信息来创建 Pod。\"]},\"1168\":{\"h\":\"pod容器\",\"t\":[\"在Kubernetes中，Pod中的容器的/etc/hosts文件通常会包含Pod的IP地址和Pod名称的映射关系。\",\"当容器运行在Pod中时，Kubernetes会自动在每个容器的/etc/hosts文件中添加一条记录，将Pod的IP地址映射到Pod的名称。这使得容器可以通过Pod的名称来解析和访问其他容器或服务\"]},\"1169\":{\"h\":\"网络命名空间与虚拟网络设备对veth pair\",\"t\":[\"veth-pair 主要用于不同命名空间的通信\"]},\"1170\":{\"h\":\"pod中容器共享pause容器的网络命名空间和虚拟网络设备veth pair?\",\"t\":[\"在 Kubernetes 中，Pod 是最小的可调度单元，通常由一个或多个容器组成。每个 Pod 都有自己的网络命名空间，这意味着每个 Pod 内的容器都有自己的网络栈，IP 地址和网络设备\",\"为了实现 Pod 内容器之间的网络通信，Kubernetes 使用了一个特殊的容器，称为 Pause 容器（也称为 Infra 容器）。\",\"Pause 容器是 Pod 中的第一个容器，它负责创建 Pod 的网络命名空间和虚拟网络设备。其他容器在启动时会共享该网络命名空间和虚拟网络设备。\",\"这种共享的方式是通过共享 Linux 系统的网络命名空间和虚拟网络设备（veth pair）实现的。\",\"具体来说，当一个 Pod 创建时，Kubernetes 会为该 Pod 创建一个网络命名空间，并在该命名空间中创建一个 Pause 容器。\",\"Pause 容器会分配一个虚拟网络设备（veth pair），其中一个端点连接到 Pause 容器内部，另一个端点连接到宿主机的网络命名空间中。\",\"随后，其他容器将会在同一网络命名空间中启动，并共享 Pause 容器创建的网络命名空间和虚拟网络设备。这意味着这些容器可以通过共享的网络命名空间和虚拟网络设备进行通信，\",\"它们具有相同的网络视图和相同的 IP 地址空间。\",\"这种设计使得 Pod 内的容器可以像在同一主机上运行的进程一样进行网络通信，而无需通过网络协议栈的封装和解封装来实现。\",\"这种共享网络命名空间和虚拟网络设备的机制使得容器之间的网络通信更加高效和快速。\"]},\"1171\":{\"h\":\"service配置\",\"t\":[\"在Kubernetes中，Service是用于公开和暴露应用程序的网络服务的抽象。ports字段是Service对象中用于定义要公开的端口和与之相关的配置的部分。下面是对ports字段配置的解释：\",\"ports: - name: http protocol: TCP port: 80 targetPort: 8080 \",\"name（可选）：为端口指定一个可读性强的名称，用于标识该端口的用途。这个字段是可选的，但推荐使用，特别是在有多个端口的情况下，可以更好地理解和维护Service配置。\",\"protocol（可选）：指定端口使用的协议，可以是TCP或UDP。如果不指定，默认为TCP。根据应用程序的需要，可以选择合适的协议类型。\",\"port：指定Service将公开的端口号。这是其他服务或客户端用于与Service通信的端口。在上述示例中，Service将公开端口号为80，以便其他组件可以通过该端口与Service进行通信。\",\"targetPort：指定将流量转发到的Pod中容器的端口号。这是Service将请求转发给后端Pod的目标端口。在上述示例中，流量将转发到Pod中容器的端口号8080。\",\"ports字段可以包含多个端口定义，使得一个Service可以公开多个端口，以便处理不同类型的流量或服务。\",\"需要注意的是，Service配置的ports字段只是定义了Service的端口映射规则，实际上需要通过使用Kubernetes提供的网络插件来实现流量的转发和负载均衡。这样，其他组件和客户端可以通过Service的IP地址和端口来访问后端Pod中运行的应用程序。\",\"希望这个解释对你有所帮助！\"]},\"1172\":{\"h\":\"kuboard\"},\"1173\":{\"h\":\"kuber operator\",\"t\":[\"custom resource crd文件\",\"控制循环\"]},\"1174\":{\"h\":\"通信\",\"t\":[\"iptables(NAT地址转换)\",\"pod中容器使用同一网络命名空间，可使用localhost进行通信\"]},\"1175\":{\"h\":\"linux\"},\"1176\":{\"h\":\"命令\",\"t\":[\"# 多命令 ls;ls #查看文件位置 find / -name \\\"my.cnf\\\" \"]},\"1177\":{\"h\":\"用户、组、权限\",\"t\":[\"组名称在 /etc/group 文件中，这是一个存储系统中所有组信息的文本文件。每行代表一个组，格式为 groupname:password:GID:list_of_members 如 hj❌1000:\",\"用户信息在 /etc/passwd中 格式为 用户名:密码:用户标识号:主组标识:用户信息:用户家目录:/bin/bash(登录shell路径) 如 hj❌1000:1000::/home/hj:/bin/bash\",\"# 文件夹及文件添加权限 # -u -g -o rwx 777 chmod -R 777 /test useradd -u 1001 -G root hj # 改变文件或文件夹用户及所属组 chown -R 1001:root /test \"]},\"1178\":{\"h\":\"编译相关命令\",\"t\":[\"cmake、make、make install、./configure,参考\"]},\"1179\":{\"h\":\"free\",\"t\":[\"free -m 查看内存\",\"free：系统真正的剩余内存\",\"available：系统可以提供给程序使用的剩余内存，available粗略为free + buff + cache\",\"cache：页面缓存，比如执行\\\"ls -l\\\"命令第一次后，操作系统会将结果进行缓存，再次执行\\\"ls -l\\\"，操作系统直接从页面缓存获取\",\"buff：磁盘缓冲区，用于暂缓内存数据，以便稍后一次性刷入磁盘。\"]},\"1180\":{\"h\":\"根据端口查看服务\",\"t\":[\"netstat -anp | grep 端口号 netstat -anp|grep :25 ls -l /proc/9293 \"]},\"1181\":{\"h\":\"解压\",\"t\":[\"tar -zxvf 压缩文件 \"]},\"1182\":{\"h\":\"设置环境变量\",\"t\":[\"vi /etc/profile # 追加环境变量 export NODE_HOME=/usr/local/文件夹名 export PATH=$PATH:$NODE_HOME/bin #使变量立即生效 source /etc/profile \"]},\"1183\":{\"h\":\"sed\",\"t\":[\"sed -i 's/8.0.19/latest/g' ./db/Dockerfile # s 替换, 单独使用替换每行的第一个 # g 替换所有 # -i 立即修改 \"]},\"1184\":{\"h\":\"ln\",\"t\":[\"用于建立软链接，类似快捷方式\",\"ln -sf 实体文件 软链接文件 -s 创建软链接 -f 强制执行 \"]},\"1185\":{\"h\":\"ip\",\"t\":[\"curl ip.sb # 只显示ipv4 curl cip.cc #显示ipv4和地址信息 ifconfig -a apt-get install vim \"]},\"1186\":{\"h\":\"source\",\"t\":[\"source ~/.bashrc\",\"source：使当前shell读入路径为filepath的shell文件并依次执行文件中的所有语句，通常用于重新执行刚修改的初始化文件，使之立即生效，而不必注销并重新登录\"]},\"1187\":{\"h\":\"查看日志\",\"t\":[\"1、进入vim编辑模式：vim filename 2、输入“/关键字”,按enter键查找 3、查找下一个，按“n”即可 退出：按ESC键后，接着再输入:号时，vi会在屏幕的最下方等待我们输入命令 wq! 保存退出 q! 不保存退出 tail -n +/行数 文件名 显示文件最后行数的内容 tail -n 5 文件名 显示文件最后几行 tail -n +5 文件名 从第5行开始到文件最后 tail -100f test.log 实时监控100行日志 等同于 tail -n 100 -f 文件名 tail notes.log # 默认显示最后 10 行 head -n100 catalina.log # 查询日志文件中的头10行日志; sed -n “92,112p” catalina.log sed -n “开始行,结束行p” 文件名 查看文件多少行到多少行内容 head与之相反 grep '搜索词' 文件名 vi 文件名 | grep '搜索词' more/ cat 文件名 日期查询日志 sed -n '/2014-12-17 16:17:20/,/2014-12-17 16:17:36/p' test.log tail -100 文件名 查看log ##文本操作 sed \\\"s/查找字段/替换字段/g\\\" 全局替换 \"]},\"1188\":{\"h\":\"export\",\"t\":[\"export 设置环境变量 export -p 查看 设置path变量 以:分隔 export PATH=\\\"/var/jenkins_home/tools/hudson.tasks.Maven_MavenInstallation/maven/bin:/var/jenkins_home/tools/hudson.model.JDK/jdk8/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\\\" windows中通过set命令设置环境变量 \"]},\"1189\":{\"h\":\"curl\",\"t\":[\"参考\",\"# http请求shell命令 # 将响应数据写道文件中 curl -o 文件名 请求资源地址 \"]},\"1190\":{\"h\":\"进程\",\"t\":[\"# 查看进程信息 ps -aux | grep 端口号 # 查看tcp、udp等网络端口号、pid信息 netstat -tunlp | 端口号 ps -ef top \"]},\"1191\":{\"h\":\"kill\",\"t\":[\"kill -1/hub pid 重新加载进程 kill -9/kill pid 强制杀掉进程 kill -15 pid 正常停止进程 \"]},\"1192\":{\"h\":\"sh文件格式\",\"t\":[\"#! /bin/bash ls pwd \"]},\"1193\":{\"h\":\"系统相关\",\"t\":[\"service systemctl # service 重启mysql service mysqld/mysql restart # /etc/init.d/mysqld restart \"]},\"1194\":{\"h\":\"重启宝塔\",\"t\":[\"#停止 /etc/init.d/bt stop #启动 /etc/init.d/bt start #重启 /etc/init.d/bt restart \"]},\"1195\":{\"h\":\"linux系统\",\"t\":[\"参考\"]},\"1196\":{\"h\":\"命名空间与虚拟化\"},\"1197\":{\"h\":\"磁盘与分区挂载\",\"t\":[\"参考\",\"参考\",\"在LVM中PE(Physical Extend)是卷的最小单位，默认4M大小，就像我们的数据是以页的形式存储一样，\",\"卷就是以PE的形式存储。PV(Physical Volume)是物理卷，如果要使用逻辑卷，首先第一步操作就是将物理磁盘或者物理分区格式化成PV，\",\"格式化之后PV就可以为逻辑卷提供PE了。VG(Volume Group)是卷组，VG就是将很多PE组合在一起生成一个卷组，当然这里的PE是可以跨磁盘的，\",\"如果当前服务器磁盘空间不足就可以增加一个新磁盘对当前系统不会产生任何影响。LV(Logical Volume)是逻辑卷，逻辑卷最终是给用户使用的，\",\"前面几个都是为创建逻辑卷做的准备，创建逻辑卷的大小只要不超过VG剩余空间就可以。\",\"磁盘 物理分区 逻辑分区\",\"lvm逻辑卷 PE(Physical Extend)卷的最小单位 PV(Physical Volume)是物理卷 VG(Volume Group)是卷组 LV(Logical Volume)是逻辑卷\",\"Linux LVM（逻辑卷管理器）\",\"gpt与mbr\",\"使用逻辑卷\",\"将物理设备（可以是物理磁盘/dev/sdb、也可以是物理分区/dev/sdb1）格式化为PV（物理卷）\",\"# 使用 pvcreate 命令将/dev/sdb1和/dev/sdc格式化成PV： pvcreate /dev/sdb1 /dev/sdc # 如果创建时报错磁盘不存在，执行partprobe partprobe # 使用 pvremove 命令删除物理卷： pvremove /dev/sdc pvs 展示卷信息 pvdisplay 展示卷信息 # 使用 vgcreate 命令来创建VG（卷组） # vgcreate是创建命令myvg是这个VG组的名称，/dev/sdb1是指将这个已经初始化成PV的设备添加套这个卷组中，如果需要添加多个设备使用空格分隔。 vgcreate myvg /dev/sdb1 # 使用 vgdisplay 或者 vgs 命令查看卷组信息： vgdisplay # vgremove 命令删除卷组 vgremove myvg # 使用 lvcreate -n 逻辑卷名称 -l 逻辑卷PE数 卷组名 命令来创建逻辑卷： lvcreate -n mylv -l 5119 myvg # 使用 lvdisplay 或者 lvs 命令查看逻辑卷信息： lvdisplay # lvremove /dev/myvg/mylv 命令删除逻辑卷 # 逻辑卷在操作系统中映射的文件的据对路径为\\\"/dev/myvg/mylv\\\"，但是一般逻辑卷会在\\\"/dev/mapper\\\"目录下面创建一个软连接\\\"/dev/mapper/myvg-mylv\\\"，软连接名称为卷组名称加-再加上逻辑卷名称。 lvremove /dev/myvg/mylv # 格式化分区和挂载分区与上面fdisk分区中的方法一样: # 这个逻辑卷和物理分区一样，需要先格式化成合适的文件系统，然后挂载到某一个目录上就可以了，格式化分区和挂载分区与上面fdisk分区中的方法一样: mkfs -t xfs /dev/myvg/mylv mount /dev/myvg/mylv /data/ \"]},\"1198\":{\"h\":\"配置网络\",\"t\":[\"service network restart/status/start/stop systemctl start network vi /etc/sysconfig/network-scripts/ifcfg-ens160/0/33 TYPE=Ethernet PROXY_METHOD=none BROWSER_ONLY=no BOOTPROTO=static # 设置IP地址获取方式 dhcp/static DEFROUTE=yes IPV4_FAILURE_FATAL=no IPV6INIT=yes IPV6_AUTOCONF=yes IPV6_DEFROUTE=yes IPV6_FAILURE_FATAL=no NAME=ens160 UUID=cd004d8e-b7ca-4d5d-93b9-c18c1459c602 DEVICE=ens160 ONBOOT=yes 开启网络 IPADDR=192.168.3.91 # 配置静态ip GATEWAY=192.168.3.1 # 网关 NETMASK=255.255.255.0 DNS1=192.168.3.1 \"]},\"1199\":{\"h\":\"maven库搭建\",\"t\":[\"参考\"]},\"1200\":{\"h\":\"docker搭建\",\"t\":[\"docker pull sonatype/nexus3 mkdir /home/data/nexus chown -R 777 /home/data/nexus docker run -itd \\\\ -p 8081:8081 \\\\ --name nexus \\\\ -e NEXUS_CONTEXT=nexus \\\\ -v /home/data/nexus:/nexus-data \\\\ 镜像ID # 命令讲解 : # 8081:8081表示宿主机端口和容器端口映射 # NEXUS_CONTEXT=nexus表示在访问Nexus后台web时，需要带上nexus进行访问，如http://ip:8081/nexus # 本地若不存在sonatype/nexus3镜像，则会去下载，下载完毕后直接启动 \"]},\"1201\":{\"h\":\"仓库说明\",\"t\":[\"maven-central : maven 中央库，默认从 https://repo1.maven.org/maven2/ 拉取 jar\",\"maven-releases : 私库发行版 jar，初次安装请将 Deployment policy 设置为 Allow redeploy\",\"maven-snapshots : 私库快照（调试版本）jar\",\"maven-public : 仓库分组，把上面三个仓库组合在一起对外提供服务，在本地 maven 基础配置 settings.xml 或项目 pom.xml 中使用\"]},\"1202\":{\"h\":\"xml\",\"t\":[\"<!-- 1 : 配置远程仓库的Nexus的登录面,第一个是用户 , 第二个是仓库--> <servers> <server> <!-- 记住这个ID , 一会要用到--> <id>releases</id> <username>admin</username> <password>czgj-88888888</password> </server> <server> <!-- 记住这个ID , 一会要用到--> <id>snapshots</id> <username>admin</username> <password>czgj-88888888</password> </server> </servers> <!-- 2. 配置仓库地址 : 远程仓库的地址 --> <mirrors> <mirror> <id>releases</id> <mirrorOf>*</mirrorOf> <name>成长轨迹仓库</name> <url>http://#{ip}:8081/nexus/repository/maven-public/</url> </mirror> </mirrors> <profiles> <!-- 3 : 配置JDK--> <profile> <id>jdk-1.8</id> <activation> <activeByDefault>true</activeByDefault> <jdk>1.8</jdk> </activation> <properties> <maven.compiler.source>1.8</maven.compiler.source> <maven.compiler.target>1.8</maven.compiler.target> <maven.compiler.compilerVersion>1.8</maven.compiler.compilerVersion> </properties> </profile> <!-- 4 : 配置默认从远程仓库下载依赖--> <profile> <id>nexus-pr</id> <!-- 远程仓库列表 --> <repositories> <repository> <id>nexus</id> <name>Nexus Central</name> <!-- 虚拟的URL形式,指向镜像的URL--> <url>http://#{ip}:8081/nexus/repository/maven-public/</url> <layout>default</layout> <!-- 表示可以从这个仓库下载releases版本的构件--> <releases> <enabled>true</enabled> </releases> <!-- 表示可以从这个仓库下载snapshot版本的构件 --> <snapshots> <enabled>true</enabled> </snapshots> </repository> </repositories> <!-- 插件仓库列表 --> <pluginRepositories> <pluginRepository> <id>nexus</id> <name>Nexus Central</name> <url>http://#{ip}:8081/nexus/repository/maven-public/</url> <layout>default</layout> <snapshots> <enabled>true</enabled> </snapshots> <releases> <enabled>true</enabled> </releases> </pluginRepository> </pluginRepositories> </profile> </profiles> <!-- 5 : 激活相应的配置--> <activeProfiles> <activeProfile>nexus-pr</activeProfile> <activeProfile>jdk-1.8</activeProfile> </activeProfiles> \"]},\"1203\":{\"h\":\"发布\",\"t\":[\" <!-- 使用成长轨迹的maven库--> <distributionManagement> <repository> <!-- 这个ID就是刚才setting.xml文件中的id --> <id>releases</id> <url>http://#{ip}:8081/nexus/repository/maven-releases/</url> </repository> <!-- 仓库的路径--> <snapshotRepository> <!-- 这个ID就是刚才setting.xml文件中的id --> <id>snapshots</id> <url>http://#{ip}:8081/nexus/repository/maven-snapshots/</url> </snapshotRepository> </distributionManagement> \"]},\"1204\":{\"h\":\"nginx\"},\"1205\":{\"h\":\"常用命令\",\"t\":[\"# 重新加载配置 nginx -s reload nginx -s quit nginx -s stop # 使用systemctl去启停service systemctl status nginx systemctl stop nginx systemctl start nginx \"]},\"1206\":{\"h\":\"参数调优\",\"t\":[\"# 设置进程句柄数 shell会话期间生效 ulimit -n 10000 # 查看系统最大句柄 sysctl -n -e fs.file-max # 查看单进程最大句柄上限 sysctl -n -e fs.nr_open # 编辑用户资源配置 永久性 vi /etc/security/limits.conf # 编辑系统配置 vi /etc/sysctl.conf # 查看 pid ps -ef #查看进程参数，最大文件描述符 cat /proc/28952/limits \"]},\"1207\":{\"h\":\"基于nginx的waf实现\",\"t\":[\"第一层 Nginx：作为入口点，处理 SSL 终止、DDoS 防护、基本的访问控制等。\",\"第二层 Nginx：实现更细粒度的安全策略，如 SQL 注入防护、XSS 防护等。\",\"第三层 Nginx：负责负载均衡和路由到后端应用服务器\"]},\"1208\":{\"h\":\"配置\"},\"1209\":{\"h\":\"location路径配置\",\"t\":[\"参考1\",\"参考2\"]},\"1210\":{\"h\":\"nginx.conf\",\"t\":[\"user root; # worker进程数 worker_processes auto; #worker进程能打开的文件描述符 #worker_rlimit_nofile 500000; error_log logs/error.log; #error_log logs/error.log notice; #error_log logs/error.log info; #pid logs/nginx.pid; events { # worker 进程能处理的最大连接 worker_connections 4096; use epoll; } http { include mime.types; default_type application/octet-stream; #log_format main '$remote_addr - $remote_user [$time_local] \\\"$request\\\" ' # '$status $body_bytes_sent \\\"$http_referer\\\" ' # '\\\"$http_user_agent\\\" \\\"$http_x_forwarded_for\\\"'; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; # another virtual host using mix of IP-, name-, and port-based configuration # #server { # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / { # root html; # index index.html index.htm; # } #} # HTTPS server # #server { # listen 443 ssl; # server_name localhost; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_cache shared:SSL:1m; # ssl_session_timeout 5m; # ssl_ciphers HIGH:!aNULL:!MD5; # ssl_prefer_server_ciphers on; # location / { # root html; # index index.html index.htm; # } #} # 加载文件夹中代理服务器配置 include /etc/nginx/conf.d/*.conf; map $http_upgrade $connection_upgrade { default upgrade; '' close; } upstream gateway{ server 10.142.51.101:1000; } upstream emqserver{ server 10.142.62.50:8083; } server { listen 8002; server_name localhost; #charset koi8-r; # access_log /var/log/nginx/host.access.log main; # underscores_in_headers on; location ^~ /api/ { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:1000/; } location ^~ /rule/ { proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:8001/; } location ^~ /oss/ { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://10.142.51.141:9000/; } location ^~ /ws/ { proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_pass http://gateway/; proxy_connect_timeout 60s; proxy_read_timeout 7200s; proxy_send_timeout 60s; } location ^~ /mqttws/ { proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_pass http://emqserver/; proxy_connect_timeout 60s; proxy_read_timeout 7200s; proxy_send_timeout 60s; } location ^~ /openapi/ { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://10.142.51.107:8007/; } location / { proxy_redirect off; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://localhost:18002/; } error_page 500 502 503 504 /50x.html; location = /50x.html { root /usr/share/nginx/html; } } } \"]},\"1211\":{\"h\":\"conf.d/hunter.conf\",\"t\":[\"# ssl加密通信,监听子域名，证书配置 server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name hunter.lzyue.shop; ssl_certificate /etc/nginx/cert/lzyue.shop.crt; ssl_certificate_key /etc/nginx/cert/lzyue.shop.pem; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; ssl_ciphers PROFILE=SYSTEM; ssl_prefer_server_ciphers on; location ^~ /ws/ { proxy_pass http://localhost:3000; proxy_http_version 1.1; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \\\"upgrade\\\"; proxy_connect_timeout 60s; proxy_read_timeout 7200s; proxy_send_timeout 60s; } location / { proxy_pass http://localhost:3000/; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } \"]},\"1212\":{\"h\":\"npm\"},\"1213\":{\"h\":\"pipeline\",\"t\":[\"参考\",\"详解\"]},\"1214\":{\"h\":\"jenkins\",\"t\":[\"agent 指示 Jenkins 为整个流水线分配一个执行器（在 Jenkins 环境中的任何可用代理/节点上）和工作区\",\"node 与上面的 agent 做了同样的事情。\"]},\"1215\":{\"h\":\"声明式\",\"t\":[\"在声明式流水线语法中, pipeline 块定义了整个流水线中完成的所有的工作。\",\"agent\",\"tools\",\"The tool name must be pre-configured in Jenkins under Manage Jenkins → Global Tool Configuration\",\"pipeline { agent any tools { maven 'apache-maven-3.0.1' } stages { stage('Example') { steps { sh 'mvn --version' } } } } \",\"environment\",\"parameters\",\"options\",\"triggers\",\"dir\",\"切换工作目录\",\"pipeline { agent any stages { stage('Build') { steps { // } } stage('Test') { steps { // } } stage('Deploy') { steps { // } } } } \",\"pipeline样例\",\"# linux docker hub pipeline { agent any environment { DOCKER_HUB=credentials(\\\"dockerhub\\\") } tools { maven 'maven-3.6.3' } stages { stage('拉取代码') { steps { echo 'Hello World' // 删除文件夹文件夹文件夹文内容 sh 'rm -rf *' dir(\\\"jimureport\\\") { git credentialsId: 'ewrwt345433535', url: 'https://gitee.com/wanhongji/JimuReport.git' } sh 'pwd' echo \\\"${workspace}\\\" } } stage('打包') { steps { sh 'mvn --version' sh 'docker -v' dir(\\\"jimureport/jimureport-example\\\") { sh 'mvn clean package' sh \\\"docker build -t wanhongji/mysql:report.2.0 ./db\\\" sh \\\"docker build -t wanhongji/report:2.0 .\\\" sh \\\"docker login -u ${DOCKER_HUB_USR} -p ${DOCKER_HUB_PSW}\\\" sh \\\"docker push wanhongji/report:2.0\\\" sh \\\"docker push wanhongji/mysql:report.2.0\\\" } } } } } # mac harbor pipeline { agent any environment { HARBOR=credentials(\\\"harbor\\\") HARBOR_HOST='192.168.3.88:8089' } tools { maven 'maven3.6.3' } stages { stage('拉取代码') { steps { echo 'Hello World' // 删除文件夹文件夹文件夹文内容 sh 'rm -rf *' dir(\\\"jimureport\\\") { git credentialsId: '5436576587', url: 'https://gitee.com/wanhongji/JimuReport.git' sh 'pwd' sh 'ls -a' } } } stage(\\\"打包\\\") { steps { dir(\\\"jimureport/jimureport-example\\\") { sh \\\"sed -i 's/8.0.19/latest/g' ./db/Dockerfile\\\" sh 'mvn clean package' sh \\\"docker build -t ${HARBOR_HOST}/report/mysql:report.2.0 ./db\\\" sh \\\"docker build -t ${HARBOR_HOST}/report/report:2.0 .\\\" sh \\\"docker login -u ${HARBOR_USR} -p ${HARBOR_PSW} ${HARBOR_HOST}\\\" sh \\\"docker push ${HARBOR_HOST}/report/report:2.0\\\" sh \\\"docker push ${HARBOR_HOST}/report/mysql:report.2.0\\\" } } } } } \"]},\"1216\":{\"h\":\"脚本化流水线\",\"t\":[\"node { stage('Build') { // } stage('Test') { // } stage('Deploy') { // } } \"]},\"1217\":{\"h\":\"shell脚本\",\"t\":[\"#！/bin/bash 定义执行脚本的shell解释器\"]},\"1218\":{\"h\":\"注释\",\"t\":[\"使用 #\"]},\"1219\":{\"h\":\"变量操作\",\"t\":[\"创建普通变量： name=“test” （=两边不可有空格）\",\"创建只可函数体中使用的局部变量： local name=“test” （使用local修饰的变量在函数体外无法访问，并且local只能在函数体内使用）\",\"使用变量： echo $name 或者 echo ${name} （推荐使用大括号版）\",\"变量重新赋值： name=“new_test” （将原值覆盖）\",\"只读变量： name=“only_read” -> readonly name （使用readonly标识后的变量，不可被修改）\",\"删除变量： unset name; （删除之后不可访问，删除不掉只读变量）\"]},\"1220\":{\"h\":\"参数传递\",\"t\":[\"获取变量\",\"${变量名}\",\"获取参数值：\",\"$0 ： 固定，代表执行的文件名\",\"$1 ： 代表传入的第1个参数\",\"$n ： 代表传入的第n个参数\",\"$#：参数个数\",\"$： 以一个单字符串显示所有向脚本传递的参数。如\\\"$“用「”」括起来的情况、以\\\"$1 $2 … $n\\\"的形式输出所有参数\",\"$@：与$*相同，但是使用时加引号，并在引号中返回每个参数。\",\"$$：脚本运行的当前进程号\",\"$！：后台运行的最后一个进程的ID\",\"$?： 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\",\"$* 与 $@ 区别\",\"相同点：都是引用所有参数。\",\"不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 \\\" * \\\" 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。\"]},\"1221\":{\"h\":\"函数\",\"t\":[\"funWithParam(){ echo \\\"第一个参数为 $1 !\\\" echo \\\"第二个参数为 $2 !\\\" echo \\\"第十个参数为 $10 !\\\" echo \\\"第十个参数为 ${10} !\\\" echo \\\"第十一个参数为 ${11} !\\\" echo \\\"参数总数有 $# 个!\\\" echo \\\"作为一个字符串输出所有参数 $* !\\\" } funWithParam 1 2 3 4 5 6 7 8 9 34 73 echo $? \\\\# 判断执行是否成功 \"]},\"1222\":{\"h\":\"比较\",\"t\":[\" ： 中括号旁边和运算符两边必须添加空格 （可以使用，不推荐）\",\"[[ ]]：中括号旁边和运算符两边必须添加空格 （字符串验证时，推荐使用）\",\"(()) ： 中括号旁边和运算符两边必须添加空格 （数字验证时，推荐使用）\",\"[[]] 和 (()) 分别是[ ]的针对数学比较表达式和字符串表达式的加强版。\",\"使用[[ … ]]条件判断结构，而不是[ … ]，能够防止脚本中的许多逻辑错误。 比如，&&、||、<和> 操作符能够正常存在于[[ ]]条件判断结构中，但是如果出现在[ ]结构中的话，会报错。 比如可以直接使用if [[ $a != 1 && $a != 2 ]], 如果不适用双括号, 则为if [ $a -ne 1] && [ $a != 2 ]或者if [ $a -ne 1 -a $a != 2 ]。\",\"数字比较\",\"-eq ：检测两个数是否相等，相等返回 true。 [ $a -eq $b ] 返回 false。\",\"-ne： 检测两个数是否不相等，不相等返回 true。 [ $a -ne $b ] 返回 true。\",\"-gt： 检测左边的数是否大于右边的，如果是，则返回 true。 [ $a -gt $b ] 返回 false。\",\"-lt ： 检测左边的数是否小于右边的，如果是，则返回 true。 [ $a -lt $b ] 返回 true。\",\"-ge： 检测左边的数是否大于等于右边的，如果是，则返回 true。 [ $a -ge $b ] 返回 false。\",\"-le ： 检测左边的数是否小于等于右边的，如果是，则返回 true。 [ $a -le $b ] 返回 true。\",\"字符串比较\",\"= ：检测两个字符串是否相等，相等返回 true。 [ $a = $b ] 返回 false。\",\"!= ：检测两个字符串是否相等，不相等返回 true。 [ $a != $b ] 返回 true。\",\"-z ：检测字符串长度是否为0，为0返回 true。 [ -z $a ] 返回 false。\",\"-n ：检测字符串长度是否为0，不为0返回 true。 [ -n “$a” ] 返回 true。\",\"$ ：检测字符串是否为空，不为空返回 true。 [ $a ] 返回 true。\"]},\"1223\":{\"h\":\"布尔运算符\",\"t\":[\"! ：非运算，表达式为 true 则返回 false，否则返回 true。 [ ! false ] 返回 true。 -o ：或运算，有一个表达式为 true 则返回 true。 [ $a -lt 20 -o $b -gt 100 ] 返回 true。 -a ：与运算，两个表达式都为 true 才返回 true。 [ $a -lt 20 -a $b -gt 100 ] 返回 false。\"]},\"1224\":{\"h\":\"逻辑运算符\",\"t\":[\"&&、||\"]},\"1225\":{\"h\":\"算数运算\",\"t\":[\"$[ ] : 加减乘除,不必添加空格 $(( )) ：加减乘除等,不必添加空格\"]},\"1226\":{\"h\":\"条件循环\",\"t\":[\"if condition1 then command1 elif condition2 then command2 else commandN fi for var in item1 item2 ... itemN do command1 command2 ... commandN done while condition do command done \"]},\"1227\":{\"h\":\"文件运算符\",\"t\":[\"-b file ：检测文件是否是块设备文件，如果是，则返回 true。 [ -b $file ] 返回 false。\",\"-c file ：检测文件是否是字符设备文件，如果是，则返回 true。 [ -c $file ] 返回 false。\",\"-d file ：检测文件是否是目录，如果是，则返回 true。 [ -d $file ] 返回 false。\",\"-f file ：检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。 [ -f $file ] 返回 true。\",\"-g file ：检测文件是否设置了 SGID 位，如果是，则返回 true。 [ -g $file ] 返回 false。\",\"-k file ：检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。 [ -k $file ] 返回 false。\",\"-p file ：检测文件是否是有名管道，如果是，则返回 true。 [ -p $file ] 返回 false。\",\"-u file ：检测文件是否设置了 SUID 位，如果是，则返回 true。 [ -u $file ] 返回 false。\",\"-r file ：检测文件是否可读，如果是，则返回 true。 [ -r $file ] 返回 true。\",\"-w file ：检测文件是否可写，如果是，则返回 true。 [ -w $file ] 返回 true。\",\"-x file ：检测文件是否可执行，如果是，则返回 true。 [ -x $file ] 返回 true。\",\"-s file ：检测文件是否为空（文件大小是否大于0），不为空返回 true。 [ -s $file ] 返回 true。\",\"-e file ：检测文件（包括目录）是否存在，如果是，则返回 true。 [ -e $file ] 返回 true。\"]},\"1228\":{\"h\":\"线上问题处理\",\"t\":[\"重点：详细分析日志\"]},\"1229\":{\"h\":\"分析步骤\",\"t\":[\"仔细分析日志(客户端、服务端)，包括状态码、响应信息\",\"若线上日志无法分析，可以尝试添加日志\",\"若开发环境允许，则在本地debug调试\",\"本地自测，避免重复修改\",\"在提交前过一遍业务逻辑，避免遗漏\"]},\"1230\":{\"h\":\"docker 线上问题分析\",\"t\":[\"参考\",\"top # 查看主进程下的线程 top -H -p pid docker stats # 进入容器 docker exec -it {容器id} /bin/bash # 查看Java进程 jps # 打印dump日志 生成Java应用程序的线程转储信息 jstack -l 1 > pid.dump \"]},\"1231\":{\"h\":\"mysql 崩溃恢复\",\"t\":[\"参考\",\"在mysql的配置文件my.cnf里找到 mysqld字段下，添加 innodb_force_recovery=1\"]},\"1232\":{\"h\":\"架构设计\"},\"1233\":{\"h\":\"架构演进\",\"t\":[\"架构服务化\",\"单体分层架构\",\"面向服务架构 SOA\",\"微服务架构\",\"云原生架构\",\"容器编排化\",\"容器\",\"kubernetes\"]},\"1234\":{\"h\":\"云原生架构\",\"t\":[\"云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用；\",\"云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。\"]},\"1235\":{\"h\":\"Service Mesh 服务网格\"},\"1236\":{\"h\":\"架构的模式\",\"t\":[\"事务补偿模式，数据一致性\",\"熔断和降级\"]},\"1237\":{\"h\":\"TOGAF架构设计工具\",\"t\":[\"业务架构\",\"数据架构\",\"应用架构\",\"技术架构\"]},\"1238\":{\"h\":\"业务架构\",\"t\":[\"L1能力域\",\"L2能力组\",\"L3能力\",\"L4流程/子流程（业务项）\",\"L5 活动/任务\",\"架构融合拉通\",\"能力---流程---业务对象---服务---应用系统\"]},\"1239\":{\"h\":\"信息架构\",\"t\":[\"L1主题域分组\",\"L2 主题域\",\"L3 主题子域\",\"L4 业务对象\",\"L5 逻辑实体\"]},\"1240\":{\"h\":\"应用架构\",\"t\":[\"L1 应用域 产品\",\"L2 应用组 子产品\",\"L3 应用系统\",\"L4 服务\",\"L5 功能需求 非功能需求\",\"服务类别\",\"功能类\",\"流程类\",\"数据类\",\"服务拆分原则\",\"合并原则，耦合度较高\",\"拆分原则，服务变更频率较高\",\"技术栈\",\"资源占用\",\"数据一致性\"]},\"1241\":{\"h\":\"技术架构\",\"t\":[\"技术能力识别\",\"技术需求----解决方案----技术能力\",\"微服务治理能力\",\"devops能力\",\"容器化\",\"API管理\",\"数据持久化与访问\",\"认证与授权\",\"技术能力分析\",\"技术能力分析\",\"方案对比\",\"技术组件选取\"]},\"1242\":{\"h\":\"frame\"},\"1243\":{\"h\":\"mysql\",\"t\":[\"设置mysql最大连接数 set Global max_connections = 1000\",\"批量更新\",\"UPDATE wms_sn_stock3 a JOIN wms_sn_binding_container3 b on a.item_sn = b.item_sn set a.container_code = b.container_code where b.warehouse_id = '3' and b.tenant_id = '3'; select a.item_sn,b.item_sn from wms_sn_stock3 a JOIN wms_sn_binding_container3 b on a.item_sn = b.item_sn where b.warehouse_id = '3' and b.tenant_id = '3'; \",\"sharding不支持批量更新，嵌套查询 alibaba Coding代码规范检查 mysql-connector-java(jdbc) druid数据库连接池 使用额外工具处理数据后保存到redis中，供查询\"]},\"1244\":{\"h\":\"framework\",\"t\":[\"基础业务泛型(mapper接口，实体类)抽象类BusinessBiz(提供可以对基础信息赋值的更新插入方法)继承基础泛型抽象类BaseBiz(注入了mapper接口，提供了基本查询，更新方法)\",\"通用mapper接口commonMapper(继承了mapper接口，提供了基础查询和更新方法)\",\"基础控制层泛型<业务类，实体，路径中数据类型>类BaseController（注入业务层，提供基础新增，删除，查询接口）\",\"通用响应泛型类objectResponse(包含泛型data属性)继承基础响应对象baseResponse(定义status和message属性)，可以将tableobjectResponse合并到objectResponse中定义内部TableData类，定义rows,total属性\",\"对集合分组处理CollectionUtil.split(new ArrayList<>(custReffIds), 50);\",\"自定义内部类进行数据结构的组织：\",\"@Data public class PackBO { EntryOrder entryOrder; List<EntryOrderItem> entryOrderItemList = new ArrayList<>(); } \",\"手动事务\",\"注入platformtransactionManager类型txManager，调用getTransaction(new DefaultTransactionDefinition())获取事务状态TransactionStatus，手动txManager.commit(),txmanager.rollback\"]},\"1245\":{\"h\":\"message\",\"t\":[\"使用自定义消息类MqContent，封装消息数据（消息的用户信息MqUserInfo，消息体setBody)，使用fastjson转string\",\"自定义MessageSender(注入rocketmqTemplate,进行同步或异步消息发送) rocketMQTemplate.syncSendOrderly，rocketMQTemplate.syncSend，rocketMQTemplate.asyncSend\",\"@RocketMQMessageListener(topic = \\\"DELETE-DELIVERY-ORDER\\\", consumerGroup = \\\"DELETE-DELIVERY-ORDER\\\", consumeMode = ConsumeMode.ORDERLY)\",\"消费者实现RocketMQListener，重写onMessage方法：\",\"MqContent mqContent = JSONObject.parseObject(message.getBody(), MqContent.class); List<String> deliveryIds = JSONObject.parseArray(mqContent.getBody().toString(), String.class); \"]},\"1246\":{\"h\":\"redis\",\"t\":[\"根据id查询商品信息放在redis缓存中，若修改，清除缓存，修改数据\",\"redissonClient.getLock(id)， 多个锁实例创建多锁实例，RedissonMultiLock lock = new RedissonMultiLock(locks.toArray(new RLock[]{})); tryLock lock.newCondition()线程通信，signal await signalAll return commandExecutor.evalWriteAsync(getName(), LongCodec.INSTANCE, command, \\\"if (redis.call('exists', KEYS[1]) == 0) then \\\" + \\\"redis.call('hset', KEYS[1], ARGV[2], 1); \\\" + \\\"redis.call('pexpire', KEYS[1], ARGV[1]); \\\" + \\\"return nil; \\\" + \\\"end; \\\" + \\\"if (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then \\\" + \\\"redis.call('hincrby', KEYS[1], ARGV[2], 1); \\\" + \\\"redis.call('pexpire', KEYS[1], ARGV[1]); \\\" + \\\"return nil; \\\" + \\\"end; \\\" + \\\"return redis.call('pttl', KEYS[1]);\\\", Collections.<Object>singletonList(getName()), internalLockLeaseTime, getLockName(threadId)); \",\"内部使用hash结构，hset设置值\"]},\"1247\":{\"h\":\"beanUtils:\",\"t\":[\" //通过class获取Bean public static <T> T getBean(Class<T> clazz) { return getApplicationContext().getBean(clazz); } \"]},\"1248\":{\"h\":\"es\",\"t\":[\"BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery(); IndexParam indexParam = new IndexParam(); indexParam.setParam(\\\"tenantId\\\", BaseContextHandler.getTargetTenantId() != null ? BaseContextHandler.getTargetTenantId() : BaseContextHandler.getTenantID()); MetaData metaData = IndexTools.getIndexType(DailyStock.class, indexParam); SearchRequest searchRequest = new SearchRequest(metaData.getSearchIndexNames()); SearchSourceBuilder searchSourceBuilder = new SearchSourceBuilder(); searchSourceBuilder.query(boolQueryBuilder); searchSourceBuilder.from(currentPage); searchSourceBuilder.size(pageSize); searchSourceBuilder.sort(SortBuilders.fieldSort(\\\"month\\\").order(SortOrder.DESC)); searchRequest.source(searchSourceBuilder); SearchResponse searchResponse = els.search(searchRequest); SearchHits hits = searchResponse.getHits(); SearchHit[] searchHits = hits.getHits(); for (SearchHit hit : searchHits) { DailyStock dailyStock = JsonUtils.string2Obj(hit.getSourceAsString(), DailyStock.class); resultList.add(dailyStock); } // 查询总数 long count = els.count(boolQueryBuilder, DailyStock.class, indexParam); \",\"操作es的api接口ElasticsearchTemplate，核心RestHighLevelClient client;包含saveAndRefresh, deleteById,deleteByCondition,scroll查询，原始查询search可分页\",\"elasticsearch-rest-high-level-client-6.7.2.jar\",\"使用索引名称，构建查询请求SearchRequest，如SearchRequest searchRequest = new SearchRequest(metaData.getSearchIndexNames());\",\"构建查询来源SearchSourceBuilder，支持分页查询：searchSourceBuilder.query(boolQueryBuilder);searchSourceBuilder.from(currentPage);searchSourceBuilder.size(pageSize);\",\"查询请求设置设置查询来源searchRequest.source(searchSourceBuilder);\",\"SearchResponse searchResponse = els.search(searchRequest); SearchHits hits = searchResponse.getHits(); SearchHit[] searchHits = hits.getHits(); for (SearchHit hit : searchHits) { DailyStock dailyStock = JsonUtils.string2Obj(hit.getSourceAsString(), DailyStock.class); resultList.add(dailyStock); } \",\"查询总数 long count = els.count(boolQueryBuilder, DailyStock.class, indexParam);\",\"查询json:\",\"{ \\\"query\\\": { \\\"bool\\\": { \\\"must\\\": [ { \\\"term\\\": { \\\"warehouseId\\\": { \\\"value\\\": \\\"69\\\", \\\"boost\\\": 1 } } }, { \\\"term\\\": { \\\"id\\\": { \\\"value\\\": \\\"479968903020281856\\\", \\\"boost\\\": 1 } } }, { \\\"terms\\\": { \\\"customerId\\\": [ \\\"142\\\", \\\"141\\\" ], \\\"boost\\\": 1 } }, { \\\"range\\\": { \\\"crtTime\\\": { \\\"from\\\": \\\"2022-02-16T00:00:00.000Z\\\", \\\"to\\\": null, \\\"include_lower\\\": true, \\\"include_upper\\\": true, \\\"boost\\\": 1 } } } ], \\\"adjust_pure_negative\\\": true, \\\"boost\\\": 1 } } } \",\"es查询命令\",\"curl -X POST 'http://192.168.1.39:8081/entryorderitem-58-2021/_search' -H 'content-Type:application/json' -d '\",\"{ \\\"query\\\": { \\\"match\\\": { \\\"entryCatalogId\\\": \\\"20211204\\\" } } } \",\"删除命令\",\"curl -X POST 'http://192.168.1.39:9200/forum/_delete_by_query' -H 'content-Type:application/json' -d '\",\"{ \\\"query\\\": { \\\"match\\\": { \\\"name\\\": \\\"测试\\\" } } } \"]},\"1249\":{\"h\":\"cache\",\"t\":[\"<dependency> <groupId>com.sun.mail</groupId> <artifactId>javax.mail</artifactId> <version>1.6.2</version> </dependency> \",\"private static final TimedCache<String, CustomerVO> CUSTOMER_CACHE = CacheUtil.newTimedCache(DateUnit.SECOND.getMillis() * 120); @PostConstruct public void init() { ITEM_CACHE.schedulePrune(10); ORDER_CACHE.schedulePrune(10); ORDER_ITEM_CACHE.schedulePrune(10); PICK_TASK_CACHE.schedulePrune(10); PICK_LOCATION_CACHE.schedulePrune(10); ITEM_STOCK_CACHE.schedulePrune(10); CUSTOMER_CACHE.schedulePrune(10); WAREHOUSE_CACHE.schedulePrune(10); LOCATION_CACHE.schedulePrune(10); USER_CACHE.schedulePrune(10); } 使用hutool的CacheUtil的定时缓存 并开启定时清除任务 \"]},\"1250\":{\"h\":\"日志\",\"t\":[\"MDC Threadlocal\"]},\"1251\":{\"h\":\"事务一致\",\"t\":[\"params.put(\\\"replId\\\", replenishmentTask.getReplId()); // 应补数量 > 存储储位可用库存，则存储储位可用库存有多少补多少，否则，补到应补数量 params.put(\\\"shouldReplQuantity\\\", allocateItemStock.getAllocateQty()); params.put(\\\"oldVersion\\\", replenishmentTask.getVersion()); int flag = updateQuantity(params); if (0 == flag) { log.info(\\\"补货任务并发,事物回滚\\\"); throw new BusinessException(\\\"补货任务并发\\\"); } \"]},\"1252\":{\"h\":\"try catch finally\",\"t\":[\"try { // 执行上架操作 shelveOperator.service(shelveSubmitDTO); } finally { redisDistributedLock.delete(orderId); } \",\"库存分配锁定库存 已订单明细维度，一条明细对应多条实时库存明细 根据分配请求AllocateRequest和AllocateResponse构建拣货请求 一个拣货明细对应一条库存明细，可用量减少，锁定量增加 生成拣货明细 库存交易日志 更新发货单明细已分配数量 更新发货单状态 \",\"DefaultRocketMQListenerContainer\",\"AuthClientRunner\",\"AuthServerRunner\"]},\"1253\":{\"h\":\"design pattern\"},\"1254\":{\"h\":\"概述\",\"t\":[\"设计模式是一套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。\",\"总体来说，设计模式分为三大类：\",\"创建型模式：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式\",\"结构型模式：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式\",\"行为型模式：共11种：策略模式、模板方法模式、观察者模式、责任链模式、访问者模式、中介者模式、迭代器模式、命令模式、状态模式、备忘录模式、解释器模式\"]},\"1255\":{\"h\":\"单例设计模式(singleton pattern)\"},\"1256\":{\"h\":\"使用\",\"t\":[\"核心是双重检查，私有化构造方法，volatile修饰静态变量\",\"懒汉式\",\"饿汉式，类加载完成已经创建好对象\",\"package com.example.learning_research.java.designpatterns; /** * Author: wanhongji * Date: 2022/6/1216:38 */ //懒汉式 public class TestSingleton { private static volatile TestSingleton testSingleton = null; private TestSingleton () { } public static TestSingleton getInstance() { if (testSingleton == null) { synchronized(TestSingleton.class) { if (testSingleton == null) { testSingleton = new TestSingleton(); } } } return testSingleton; } } \",\"使用枚举来创建单例对象\",\"枚举实例默认被public static final修饰，static代码块中实例化\",\"只有一个实例，可用作单例对象；私有化构造器\",\"public class TestSingleton implements Serializable { private static volatile TestSingleton testSingleton = null; private static final Person person; static { person = new Person(\\\"FD\\\",18,new Car(\\\"fds\\\",2)); } } public enum Singleton { INSTANCE; public static void test() { System.out.println(\\\"test\\\"); } public static void main(String[] args) { test(); System.out.println(Singleton.INSTANCE == Singleton.INSTANCE); } } \"]},\"1257\":{\"h\":\"缺点\",\"t\":[\"反射和序列化会破坏单例，创建多个对象\",\"//使用反射 public static void main(String[] args) { try { Constructor<TestSingleton> constructor = TestSingleton.class.getDeclaredConstructor(); constructor.setAccessible(true); TestSingleton testSingleton1 = constructor.newInstance(); TestSingleton testSingleton2 = TestSingleton.getInstance(); System.out.println(testSingleton1 == testSingleton2); }catch (Exception e) { } } //设用序列化破坏单例 public static void main(String[] args) { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); try { ObjectOutputStream outputStream = new ObjectOutputStream(byteArrayOutputStream); outputStream.writeObject(TestSingleton.getInstance()); ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray()); ObjectInputStream inputStream = new ObjectInputStream(byteArrayInputStream); TestSingleton testSingleton1 =(TestSingleton)inputStream.readObject(); System.out.println(testSingleton1 == TestSingleton.getInstance()); } catch (IOException | ClassNotFoundException e) { } } \"]},\"1258\":{\"h\":\"适配器模式\"},\"1259\":{\"h\":\"使用\",\"t\":[\"Adapter\",\"AbstractHandlerMethodAdapter\",\"handlerFunctionMethodAdapter\",\"httpRequesthandlerAdapter\",\"simpleControllerhandlerAdapter\",\"simpleServletHandlerAdapter\",\"springmvc在处理请求时使用的就是适配器模式\",\"dispatcherServlet找到handlerMapping,再根据handler找到合适的适配器，最终找到对应的handlerMethod\",\"doDispatch\",\"protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { HttpServletRequest processedRequest = request; HandlerExecutionChain mappedHandler = null; boolean multipartRequestParsed = false; WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request); try { ModelAndView mv = null; Exception dispatchException = null; try { processedRequest = checkMultipart(request); multipartRequestParsed = (processedRequest != request); // Determine handler for the current request. mappedHandler = getHandler(processedRequest); if (mappedHandler == null) { noHandlerFound(processedRequest, response); return; } // Determine handler adapter for the current request. HandlerAdapter ha = getHandlerAdapter(mappedHandler.getHandler()); // Process last-modified header, if supported by the handler. String method = request.getMethod(); boolean isGet = \\\"GET\\\".equals(method); if (isGet || \\\"HEAD\\\".equals(method)) { long lastModified = ha.getLastModified(request, mappedHandler.getHandler()); if (new ServletWebRequest(request, response).checkNotModified(lastModified) && isGet) { return; } } //执行拦截器的prehandle方法 if (!mappedHandler.applyPreHandle(processedRequest, response)) { return; } // Actually invoke the handler. //执行处理器方法，即接口方法 mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); if (asyncManager.isConcurrentHandlingStarted()) { return; } applyDefaultViewName(processedRequest, mv); mappedHandler.applyPostHandle(processedRequest, response, mv); } catch (Exception ex) { dispatchException = ex; } catch (Throwable err) { // As of 4.3, we're processing Errors thrown from handler methods as well, // making them available for @ExceptionHandler methods and other scenarios. dispatchException = new NestedServletException(\\\"Handler dispatch failed\\\", err); } processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException); } catch (Exception ex) { triggerAfterCompletion(processedRequest, response, mappedHandler, ex); } catch (Throwable err) { triggerAfterCompletion(processedRequest, response, mappedHandler, new NestedServletException(\\\"Handler processing failed\\\", err)); } finally { if (asyncManager.isConcurrentHandlingStarted()) { // Instead of postHandle and afterCompletion if (mappedHandler != null) { mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response); } } else { // Clean up any resources used by a multipart request. if (multipartRequestParsed) { cleanupMultipart(processedRequest); } } } } \",\"​\",\"doDispatch的getHandler\",\"protected HandlerExecutionChain getHandler(HttpServletRequest request) throws Exception { if (this.handlerMappings != null) { for (HandlerMapping mapping : this.handlerMappings) { //处理器执行器包含handler和拦截器 HandlerExecutionChain handler = mapping.getHandler(request); if (handler != null) { return handler; } } } return null; } \",\"doDispatch的getHandlerAdapter\",\"protected HandlerAdapter getHandlerAdapter(Object handler) throws ServletException { if (this.handlerAdapters != null) { for (HandlerAdapter adapter : this.handlerAdapters) { if (adapter.supports(handler)) { return adapter; } } } throw new ServletException(\\\"No adapter for handler [\\\" + handler + \\\"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler\\\"); } \"]},\"1260\":{\"h\":\"装饰器模式\"},\"1261\":{\"h\":\"责任链模式\"},\"1262\":{\"h\":\"使用\",\"t\":[\"springcloudGateway网关的应用\",\"核心\",\"入口ReactorhttphandlerAdapter的apply方法，使用httpwebhandlerAdapter的handle方法处理，创建serverwebchang网关上下文\",\"httpwebhandlerAdapter的handle方法会找到dispatchhandler被FilteringWebHandler(web)装饰，FilteringWebHandler被ExceptionHandlingWebHandler装饰，ExceptionHandlingWebHandler被httpwebhandlerAdapter装饰，可以和请求经过过滤器到达dispatchServlet类比\",\"dispatchhandler会根据handlerMappings找到predicateRoutehandlerMapping找到处理器处理请求\",\"handler找到适配器处理\",\"请求上下文ServerWebchange最终经过filterwebhandler的handle方法处理\",\"handle方法会将全局过滤器装饰为有序网关过滤器和默认网关过滤器DefaultGatewayFilterAdapter合并到集合中\",\"根据过滤器集创建网关过滤器链gatewayFilterChain,设置要执行的过滤器索引和过滤器集\",\"调用filter方法对请求进行处理\"]},\"1263\":{\"h\":\"模板方法模式\"},\"1264\":{\"h\":\"emqx\"},\"1265\":{\"h\":\"集群\",\"t\":[\"主题树 节点间同步\",\"路由表 节点间同步\",\"订阅表 维护在本地(直接连接)节点中\"]},\"1266\":{\"h\":\"订阅\",\"t\":[\"普通订阅\",\"共享订阅 \",\"队列\",\"分组\"]},\"1267\":{\"h\":\"发布\"},\"1268\":{\"h\":\"物联网(iot)\"},\"1269\":{\"h\":\"概念\",\"t\":[\"产品\",\"一组具有相同功能的设备集合，可配置设备接入网关\",\"设备\",\"1、网关设备\",\"可以绑定网关子设备，代替子设备接入物联网平台\",\"2、网关子设备\",\"不能直接接入物联网平台的设备\",\"3、直连设备\",\"可直接接入物联网平台的设备\",\"设备接入网关\",\"聚合了设备接入物联网平台所需的网络组件和协议等相关配置信息，由网络组件和协议组成了传输特定格式数据的网络通道，以便设备接入物联网平台\",\"网络组件\",\"管理设备与平台通信的网络组件，构建设备和平台的传输通道\",\"协议\",\"设备和平台约定的在网络通道中传输数据的格式\"]},\"1270\":{\"h\":\"协议\"},\"1271\":{\"h\":\"MQTT\",\"t\":[\"参考链接 它是一种基于TCP/IP协议上传输的轻量级通信协议。\",\"基于发布/订阅，包含发布者、订阅者、broker等身份。其中，消息的发布者和订阅者都是客户端，消息代理是服务器，消息发布者可以同时是订阅者。\",\"MQTT传输的消息分为：主题（Topic）和负载（payload）两部分：\",\"（1）Topic，可以理解为消息的类型，订阅者订阅（Subscribe）后，就会收到该主题的消息内容（payload）；\",\"（2）payload，可以理解为消息的内容，是指订阅者具体要使用的内容。\"]},\"1272\":{\"h\":\"订阅、主题、会话\",\"t\":[\"一、订阅（Subscription）\",\"订阅包含主题筛选器（Topic Filter）和最大服务质量（QoS）。订阅会与一个会话（Session）关联。一个会话可以包含多个订阅。每一个会话中的每个订阅都有一个不同的主题筛选器。\",\"二、会话（Session）\",\"每个客户端与服务器建立连接后就是一个会话，客户端和服务器之间有状态交互。会话存在于一个网络之间，也可能在客户端和服务器之间跨越多个连续的网络连接。\",\"三、主题名（Topic Name）\",\"连接到一个应用程序消息的标签，该标签与服务器的订阅相匹配。服务器会将消息发送给订阅所匹配标签的每个客户端。\",\"四、主题筛选器（Topic Filter）\",\"一个对主题名通配符筛选器，在订阅表达式中使用，表示订阅所匹配到的多个主题。\",\"五、负载（Payload）\",\"消息订阅者所具体接收的内容。\"]},\"1273\":{\"h\":\"服务质量Qos\",\"t\":[\"0 至多一次\",\"1 至少一次\",\"2 只有一次\"]},\"1274\":{\"h\":\"通信过程\"},\"1275\":{\"h\":\"qos2\",\"t\":[\"发送方 发送一个带有 QoS 2 标记的 PUBLISH 消息给 代理服务器。\",\"代理服务器 收到消息后，向 发送方 发送 PUBREC 消息作为初步确认。\",\"发送方 收到 PUBREC 后，向 代理服务器 发送 PUBREL 消息请求释放消息。\",\"代理服务器 收到 PUBREL 后，将消息发布给所有订阅了该主题的客户端，并向 发送方 发送 PUBCOMP 消息确认消息已经成功处理。\",\"订阅客户端 收到消息后，向 代理服务器 发送 PUBCOMP 消息确认接收到消息。\",\"代理服务器 收到所有订阅客户端的 PUBCOMP 消息后，整个 QoS 2 通信过程完成。\",\"注意点\",\"代理服务器 并不需要等待所有订阅客户端发送 PUBCOMP 消息后才向发送方发送 PUBCOMP 消息。 代理服务器发送 PUBCOMP 给发送方是为了确认消息已经被代理服务器成功处理并发送给了订阅客户端。而订阅客户端发送 PUBCOMP 到代理服务器则是为了确认他们已经成功收到了消息\"]},\"1276\":{\"h\":\"MODBUS\",\"t\":[\"MODBUS可以在基于串行链路和以太 TCP/IP 网络的 MODBUS 上可以进行通信。也就是说，可以使用串口线或者网线链接两端设备，双方约定使用modbus协议去通信。\",\"它在连接至不同类型总线或网络的设备之间提供客户机/服务器通信，主要用于工业自动化设备通信。\"]},\"1277\":{\"h\":\"寄存器\"},\"1278\":{\"h\":\"功能码\",\"t\":[\"占一个字节\",\"1 读线圈寄存器\",\"2 读离散输入寄存器\",\"3 读保持寄存器\",\"4 读输入寄存器\",\"5 写单个线圈寄存器\",\"6 写单个保持寄存器\",\"15 写入多个线圈寄存器\",\"16 写入多个保持寄存器\"]},\"1279\":{\"h\":\"串口\",\"t\":[\"串口协议报文格式如下：（PDU包括功能码和数据）\",\"地址域\\\\功能码\\\\数据\\\\CRC校验\",\"其中这个CRC校验为2个字节，还有这个数据长度是不固定的，根据不同的功能码有不同的数据长度。\"]},\"1280\":{\"h\":\"网口\",\"t\":[\"TCP报文\",\"TCP协议和串口协议类似，只是多了一个MBAP报文头和少了CRC校验，MBAP报文头包括有事务处理标识符、协议标识符、长度、单元标识符，一共为7个字节长度，\"]},\"1281\":{\"h\":\"jetlinks\"},\"1282\":{\"h\":\"功能脑图\"},\"1283\":{\"h\":\"容器启动命令\",\"t\":[\"jetlinks前端\",\"docker run --name=jetlinks-ui -d -p 9000:80 -e \\\"API_BASE_PATH=http://10.138.108.5:8848/\\\" registry.cn-shenzhen.aliyuncs.com/jetlinks/jetlinks-ui-pro:2.0.0 \"]},\"1284\":{\"h\":\"事件驱动，消息总线\",\"t\":[\"在JetLinks中大量使用到事件驱动来实现功能解耦。主要由Spring Event和事件总线(EventBus)组成。\",\"由于Spring Event不支持更细粒度的订阅。例如: 订阅某一个设备的消息。平台还提供了事件总线来实现粒度更细的事件支持。\"]},\"1285\":{\"h\":\"Spring Event\",\"t\":[\"为了支持响应式订阅，对事件event进行了封装\",\"@EventListener\",\"ApplicationEventPublisher\"]},\"1286\":{\"h\":\"BrokerEventBus EventBus\",\"t\":[\"publish\",\"subscribe\"]},\"1287\":{\"h\":\"SpringMessageBroker\",\"t\":[\"@Subscribe\",\"后置处理添加订阅主题信息到TopicInfo\"]},\"1288\":{\"h\":\"设备接入网关\",\"t\":[\"MQTT服务直连\",\"设备直接通过Mqtt协议与平台交互\",\"MQTT的Broker直连\",\"设备作为客户端与MQTT服务器连接，发布和订阅消息，平台也作为客户端订阅和发布相应消息\",\"http连接\",\"udp连接\"]},\"1289\":{\"h\":\"设备接入协议\",\"t\":[\"MQTT 3.0/3.1协议\",\"jetlinks官方协议\"]},\"1290\":{\"h\":\"类库\",\"t\":[\"javassist 用于编辑方法字符串为一个Method对象\",\"vertx\",\"guava工具包\"]},\"1291\":{\"h\":\"r2dbc-spi\",\"t\":[\"r2dbc-spi数据库规范接口（类似于JDBC），各大数据库厂商实现接口\"]},\"1292\":{\"h\":\"easy-orm\",\"t\":[\"响应式关系映射框架，用于构造sql语句操作数据库，以及将结果集封装到对应实体\",\"使用exists语句构造自定义查询条件\",\"select * from test a where exists (select 1 from test b b.device_id = a.device_id ) \"]},\"1293\":{\"h\":\"EasyormConfiguration\",\"t\":[\"EasyormProperties\",\"EntityFactory\",\"RDBDatabaseMetadata包含执行器SyncSqlExecutor、ReactiveSqlExecutor\",\"DatabaseOperator包含RDBDatabaseMetadata\",\"DefaultIdGenerator\"]},\"1294\":{\"h\":\"EntityTableMetadataParserConfiguration\",\"t\":[\"DefaultEntityResultWrapperFactory\",\"EntityManager\",\"CompositeEntityTableMetadataResolver实现EntityTableMetadataResolver 包含下方多个EntityTableMetadataParser\",\"JpaEntityTableMetadataParser实现EntityTableMetadataParser\"]},\"1295\":{\"h\":\"ReactiveSqlExecutor\",\"t\":[\"DefaultR2dbcExecutor 继承 R2dbcReactiveSqlExecutor 实现 ReactiveSqlExecutor\",\"注入ConnectionFactory\",\"设置是否自定义占位符，设置自定义占位符\",\"getConnection()获取数据库连接\",\"使用@Trasactional实现事务\"]},\"1296\":{\"h\":\"ReactiveRepositoryFactoryBean\",\"t\":[\"获取对应类型的实体仓库\",\"DatabaseOperator\",\"EntityTableMetadataResolver\",\"EntityResultWrapperFactory\",\"entityType在EasyormRepositoryRegistrar构造beanDefinition时设置实体类型\",\"getObject获取实例\",\"public ReactiveRepository<E, PK> getObject() { return new DefaultReactiveRepository<>(operator, resolver.resolve(entityType), entityType, wrapperFactory.getWrapper(entityType)); } \"]},\"1297\":{\"h\":\"EasyormRepositoryRegistrar\",\"t\":[\"注册即ReactiveRepositoryFactoryBean，生产实体repository\",\"scanEntities获取实体类名\",\"registerBeanDefinitions注册实体bean类型的repository工厂bean，即ReactiveRepositoryFactoryBean\",\"RootBeanDefinition definition = new RootBeanDefinition(); definition.setTargetType(repositoryType); definition.setBeanClass(ReactiveRepositoryFactoryBean.class); definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE); definition.getPropertyValues().add(\\\"entityType\\\", realType); registry.registerBeanDefinition(realType.getSimpleName().concat(\\\"ReactiveRepository\\\"), definition); \"]},\"1298\":{\"h\":\"RDBDatabaseMetadata\"},\"1299\":{\"h\":\"RDBSchemaMetadata\",\"t\":[\"metaRepository存放RDBTableMetadata\",\"MysqlSchemaMetadata包含RDBDatabaseMetadata\",\"PostgresqlSchemaMetadata包含RDBDatabaseMetadata\"]},\"1300\":{\"h\":\"RDBTableMetadata\",\"t\":[\"包含RDBSchemaMetadata信息，在构建repository时，使用解析器获取RDBTableMetadata数据\"]},\"1301\":{\"h\":\"DefaultDatabaseOperator\",\"t\":[\"RDBDatabaseMetadata\",\"implements实现DatabaseOperator, DMLOperator, SQLOperator, DDLOperator\",\"构建可执行operator,如ExecutableDeleteOperator、ExecutableUpdateOperator\",\"DeleteOperator\",\"ExecutableDeleteOperator\",\"DefaultDeleteResultOperator\",\"InsertOperator\",\"InsertResultOperator\",\"DefaultInsertResultOperator真正执行查询语句\",\"UpdateOperator\",\"ExecutableUpdateOperator\",\"DefaultUpdateResultOperator\",\"UpsertOperator QueryOperator\",\"ExecutableQueryOperator\",\"DefaultQueryResultOperator\"]},\"1302\":{\"h\":\"r2dbc-driver\",\"t\":[\"mysql dev.miku:r2dbc-mysql:0.8.2.RELEASE\",\"h2\",\"mssql\",\"postgres\"]},\"1303\":{\"h\":\"表\"},\"1304\":{\"h\":\"产品与设备\",\"t\":[\"dev_product\",\"network_way ? 入网方式\",\"project_name\",\"project_id 产品表 关联网关，协议，物模型，以及协议相关配置\",\"dev_product_category\",\"产品分类信息表 包含产品类别等信息\",\"dev_product_category\",\"org_id 机构ID ？ 设备信息表 关联激活时间，设备物模型 父级设备id 产品名称 设备特性 设备状态 运行状态的读取？\",\"dev_device_tags\",\"设备标签表\",\"dev_metadata_mapping ?\",\"设备物模型映射\"]},\"1305\":{\"h\":\"网关、网络、协议及证书\",\"t\":[\"device_gateway\",\"设备网关\",\"dev_protocol\",\"协议表 协议包类型 位置\",\"network_config\",\"网络组件配置表\",\"certificate_info证书\",\"证书信息表\"]},\"1306\":{\"h\":\"通道配置\"},\"1307\":{\"h\":\"流媒体服务\"},\"1308\":{\"h\":\"告警与规则引擎\",\"t\":[\"alarm_config\",\"alarm_record\",\"s_alarm_rule_bind\",\"alarm_handle_history\",\"alarm_level\",\"rule_scene\",\"rule_instance\"]},\"1309\":{\"h\":\"alarm_record\",\"t\":[\"source和target字段 ？\",\"sceneData中包含这些数据\",\"targetXXX 根据告警配置alarm_config的类型(产品、设备、其他)获取告警目标实例AlarmTarget 告警目标记录设备信息deviceId和deviceName type device\",\"sourceXXX 反应 产品、设备信息\",\"targetKey targetId-targetType拼接后，MD5加密\"]},\"1310\":{\"h\":\"rule_instance 规则实例\"},\"1311\":{\"h\":\"rule_scene\",\"t\":[\"terms 触发条件 ？ trigger 触发器配置 设备触发、定时触发、手动触发\",\"设备触发\",\"定时触发\",\"手动触发\",\"{ \\\"type\\\": \\\"timer\\\", \\\"timer\\\": { \\\"trigger\\\": \\\"week\\\", \\\"when\\\": [ 1, 2 ], \\\"mod\\\": \\\"once\\\", \\\"once\\\": { \\\"time\\\": \\\"21:35:43\\\" } } } \",\"branch 动作分支\",\"when \",\"type \\\"and\\\"\",\"termType \\\"eq\\\"\",\"options 对执行条件的直观描述\",\"terms 这是对options解析的结果\",\"防抖\",\"then 满足条件后操作 \",\"是否并行 parallel\",\"执行动作 actions \",\"executor\",\"terms\",\"options\",\"条件\",\" [ { \\\"when\\\": [ { \\\"type\\\": \\\"and\\\", \\\"termType\\\": \\\"eq\\\", \\\"options\\\": [ ], \\\"terms\\\": [ { \\\"type\\\": \\\"and\\\", \\\"termType\\\": \\\"eq\\\", \\\"options\\\": [ ], \\\"terms\\\": [ ] } ] } ], \\\"shakeLimit\\\": { \\\"enabled\\\": false, \\\"time\\\": 0, \\\"threshold\\\": 0, \\\"alarmFirst\\\": false }, \\\"then\\\": [ { \\\"parallel\\\": false, \\\"actions\\\": [ { \\\"executor\\\": \\\"alarm\\\", \\\"alarm\\\": { \\\"mode\\\": \\\"trigger\\\" }, \\\"options\\\": { } } ] } ] } ] \",\"options 扩展配置\",\"描述触发规则\",\"{ \\\"trigger\\\": { \\\"time\\\": \\\"21:35:43 执行1次\\\", \\\"when\\\": \\\"每星期一,星期二\\\" }, \\\"when\\\": [ { \\\"terms\\\": [ { \\\"terms\\\": [ ] } ] } ] } \",\"actions 执行动作\"]},\"1312\":{\"h\":\"通知与订阅\",\"t\":[\"notify_config \",\"provider\",\"type\",\"notify_template\",\"notify_history\",\"notify_subscribers 通知订阅者信息 \",\"topic_provider 主题提供者\",\"subscriber_type 订阅者类型\",\"notify_notification 通知记录 \",\"data_id ?\"]},\"1313\":{\"h\":\"国际化\",\"t\":[\"消息源MessageSource\",\"LocaleUtil工具对消息进行转换\",\"过滤器设置当前语言环境\"]},\"1314\":{\"h\":\"响应式事务\"},\"1315\":{\"h\":\"业务逻辑\"},\"1316\":{\"h\":\"设备\"},\"1317\":{\"h\":\"设备的启停\",\"t\":[\"1、设备状态分为在线online、离线offline、禁用notActive\",\"2、启动设备时，会将对应的设备注册到设备注册器当中，缓存设备操作器DeviceOperator，设置相关配置(metaData物模型、产品id、协议、产品版本)到本地缓存、redis缓存，并改变设备状态\",\"设备操作器会缓存设备当前状态，在注册时，会使用状态检查器checkState获取设备最新状态，并更新数据库设备实例状态，并设置激活时不触发实体事件\",\"3、从设备注册器获取设备operator时，先从缓存读取，若不存在，则创建DeviceOperator并存放到内存缓存中\",\"4、注销设备时，会先改变数据库设备装态，清空一级和二级缓存配置\"]},\"1318\":{\"h\":\"项目启动\",\"t\":[\"启动设备网关、启动设备协议加载\"]},\"1319\":{\"h\":\"DeviceGatewayEventHandler网关事件处理器\",\"t\":[\"网关的获取及启动\",\"1、在项目启动时，启动设备网关\",\"2、查询已启用的设备网关，根据设备网关id启用网关\",\"3、获取缓存的设备网关，不存在，则创建新的的设备网关\",\"通过设备网关属性管理器(即设备网关service)，获取网关配置\",\"根据网关配置的provider，找到DeviceGatewayProvider创建设备网关，\",\"4、DeviceGatewayProvider通过NetworkManager获取网络，若没有网络则创建网络，构造网关实例(初始化网关id,设备注册器，sessionManger、网络、消息处理器)\",\"5、启动网关，即对网络组件进行订阅\",\"网络的获取\",\"1、NetworkManager根据网络类型，和网络组件id创建网络\",\"2、根据网络类型找到对应NetworkProvider,创建对应类型配置\",\"3、根据网络组件id通过网络配置管理器查询网络配置，判断是否启用\",\"4、若启用，则使用NetworkProvider创建network\"]},\"1320\":{\"h\":\"默认网络管理器 DefaultNetworkManager\",\"t\":[\"1、在项目启动时，每隔一段时间对网络状态进行检查,若网络状态不活跃，则重新加载网络组件\",\"public void run(String... args) { //定时检查网络组件状态 Flux.interval(Duration.ofSeconds(10)) .subscribe(t -> this.checkNetwork()); } \"]},\"1321\":{\"h\":\"PersistenceDeviceSessionManager AbstractDeviceSessionManager\",\"t\":[\"1、在bean初始化时执行init方法，同时对localSession进行订阅，主要用于维护低功率的设备，无法保持长时间会话，对会话持久化，每次启动加载恢复会话 2、通过加载设备会话文件，恢复设备会话 3、在实例化DeviceMessageConnector时通过向DeviceSessionManager中注册事件监听器对，对相应设备事件进行处理，如设备会话注册事件\"]},\"1322\":{\"h\":\"DeviceCategoryService\",\"t\":[\"初始化产品种类数据\"]},\"1323\":{\"h\":\"DeviceProductDeployHandler\",\"t\":[\"监听其他服务器物模型数据变更\"]},\"1324\":{\"h\":\"LazyInitManagementProtocolSupports\",\"t\":[\"加载协议配置到容器\"]},\"1325\":{\"h\":\"sceneService\",\"t\":[\"项目启动时启用场景,做内置处理，启动SceneTaskExecutor、DelayTaskExecutor、timerTaskExecutor等执行器\"]},\"1326\":{\"h\":\"产品的部署和取消部署\",\"t\":[\"部署\",\"向设备注册中心存入设备产品操作器Map=key:value，缓存相应物模型、协议，变更数据库状态，\",\"取消部署\",\"变更数据库状态\"]},\"1327\":{\"h\":\"设备的部署和取消部署\",\"t\":[\"部署\",\"发布设备到设备注册中心 Map=key:value 缓存相应物模型、协议，产品和设备的绑定关系(存入redis中)\",\"会话管理器判断是否在线!!!\",\"变更设备在线状态和数据库状态 state字段维护3个状态，禁用，离线，在线 批量更新\"]},\"1328\":{\"h\":\"设备的上线与离线\",\"t\":[\"1、平台作为客户端，对mqtt broker进行消息订阅\",\"当收到订阅的消息时，会对设备消息使用消息解码器进行解码，并对设备消息使用DeviceGatewayHelper、DeviceMessageConnector进行处理\",\"发布消息到事件总线，进行数据存储，创建DeviceSession并添加到session管理器中，触发DeviceSessionEvent,发布设备已上线消息到eventbus\",\"DeviceStatusMeasurementProvider中的方法对上线消息进行处理，统计相关数量\",\"DeviceMessageBusinessHandler在初始化时对上线topic进行了订阅，处理设备上线消息，变更数据库设备状态\"]},\"1329\":{\"h\":\"设备数据上报\",\"t\":[\"与设备上线类似，都是发布消息到消息总线eventbus，订阅者对消息处理\"]},\"1330\":{\"h\":\"数据流流转\",\"t\":[\"下发 回复\",\"1、DeviceMessageSender DeviceOperationBroker ClusterSendToDeviceMessageHandler(DeviceMessageConnector实现DecodedClientMessageHandler) DeviceSession mqtt客户端/服务器\",\"2、DeviceMessageConnector eventbus\",\"上报\",\"1、DeviceGateway DeviceGatewayHelper(DeviceMessageConnector实现DecodedClientMessageHandler) DeviceMessageConnector(处理消息) eventbus\"]},\"1331\":{\"h\":\"下发指令到设备\",\"t\":[\"1、根据设备id获取设备操作器DeviceOperator，使用设备操作器中的DeviceMessageSender(DeviceOperationBroker,interceptor,DeviceRegistry.DeviceOperator)，实例化ReadPropertyMessageSender\",\"2、ReadPropertyMessageSender通过send方法将消息交给DeviceMessageSender处理\",\"3、做前置操作，当前设备所连接的服务器id(先读取本地缓存，再读redis缓存)、MessageSenderInterceptor、父网关id,设备回复\",\"4、设备若有上级网关，则向上级网关发送消息\",\"5、向对应服务节点发送消息，通过判断当前设备是否连接的当前服务器，发送消息进行处理\",\"发送消息到DeviceOperationBroker的已维护的发布器sink中\",\"ClusterSendToDeviceMessageHandler(包含DeviceMessageConnector,对DeviceOperationBroker的发送消息发布器进行订阅 到设备会话的相应客户端)处理消息的发送\",\"6、通过DeviceMessageConnector、及消息处理器DeviceOperationBroker内部的replyProcessor(在发送时缓存了消息id，对应的sink)\",\"7、当收到回复消息后，DeviceMessageConnector的doReply将消息给sink，传给对应订阅者进行处理\"]},\"1332\":{\"h\":\"存储\",\"t\":[\"TimeSeriesMessageWriterConnector订阅消息总线中所有设备消息存储到es中\"]},\"1333\":{\"h\":\"场景\"},\"1334\":{\"h\":\"ruleEngine规则引擎\"},\"1335\":{\"h\":\"DefaultRuleEngine实现RuleEngine接口\",\"t\":[\"SceneRule转换为规则模型RuleModel \",\"RuleModel\",\"RuleNodeModel\",\"ScheduleJobCompiler 根据场景实例id和规则模型生成ScheduleJob\",\"Scheduler调度器接口，管理调度多个任务，localScheduler本地调度器，具体实现, \",\"schedule方法根据ScheduleJob调度任务，并返回任务执行器，启动任务执行器\",\"Worker用于创建任务，创建执行上下文 ，包含Map=执行器名:TaskExecutorProvider\",\"workers缓存 workerId:worker\",\"WorkerSelector\",\"executors缓存 Map结构=实例id:(节点id:task)\",\"TaskExecutorProvider 内部包含静态任务执行器类，用于创建任务执行器 \",\"AlarmTaskExecutorProvider\",\"DelayTaskExecutorProvider\",\"Task 包含可直接执行的任务执行器 \",\"TaskExecutor AbstractTaskExecutor FunctionTaskExecutor\",\"DelayTaskExecutor\",\"tasks\",\"使用reactorQl处理实时数据，并流转到下一Rule节点\"]},\"1336\":{\"h\":\"功能\"},\"1337\":{\"h\":\"设备管理\"},\"1338\":{\"h\":\"设备实例\",\"t\":[\"socket netty vertx vertx-mqtt subscribe\",\"项目启动时，创建并启动设备网关，开启订阅，若有消息，则创建设备会话deviceSession\"]},\"1339\":{\"h\":\"DeviceGatewayEventHandler 实现CommandLineRunner 项目启动执行，启动设备网关\"},\"1340\":{\"h\":\"DeviceMessageBusinessHandler\"},\"1341\":{\"h\":\"DeviceRegistry 接口\",\"t\":[\"启用设备网关、ClusterDeviceRegistry\"]},\"1342\":{\"h\":\"ClusterDeviceRegistry 实现DeviceRegistry\",\"t\":[\"属性 \",\"operatorCache 以设备id和DeviceOperator为键值对的Map集合，缓存DeviceOperator\",\"productOperatorMap 以设备id和DeviceProductOperator为键值对的Map集合，缓存DeviceProductOperator\",\"ProtocolSupports 协议支持 LazyProtocolSupports\",\"DeviceOperationBroker 设备指令的发送 RpcDeviceOperationBroker\",\"ConfigStorageManager 配置管理器 EventBusStorageManager\",\"clusterManager 集群管理 RedisClusterManager\",\"方法 \",\"getDevice 获取设备操作器DeviceOperator\",\"getProduct 获取设备产品操作器\",\"createOperator 创建设备操作器\",\"networkManager\",\"获取设备网络，并以网关id和网络为键值缓存\",\"DeviceGatewayManager\",\"获取设备网关，并以网关id和设备网关为键值缓存\",\"deviceRepository、DeviceRegistry\",\"先从设备注册器查询，查询不到，再查询数据库中已上线的设备实例，再创建DeviceOperator\",\"DeviceOperator、DeviceMessageSender\",\"若有上级网关设备则通过父级设备发送消息到网关子设备\",\"DeviceSessionManager 设备是否在线或离线\",\"包含connection等信息用于发送设备消息\",\"通过设备id查询本地的设备session会话\"]},\"1343\":{\"h\":\"协议管理\"},\"1344\":{\"h\":\"thingsComponent\",\"t\":[\"ThingsConfiguration\",\"DefaultThingsDataRepository ThingsDataRepository ThingsDataContext 根据物模型数据查询对应存储策略，使用存储策略进行数据操作\",\"ThingsDataRepositoryStrategy集合\",\"ThingsDataCustomizer集\",\"ThingsRegistry\",\"ElasticSearchThingDataConfiguration 配置数据存储策略\",\"ElasticSearchColumnModeStrategy继承ThingsDataRepositoryStrategy\",\"ElasticSearchRowModeStrategy继承ThingsDataRepositoryStrategy \",\"ThingsRegistry 包含物模型信息\",\"ElasticSearchService 操作es数据\",\"AggregationService\",\"ElasticSearchIndexManager 索引管理\",\"ThingsRegistry\",\"DefaultThingsRegistry\",\"AutoRegisterThingsRegistry\",\"ThingsRegistrySupport\",\"DeviceThingsRegistrySupport 包含deviceRegistry,clusterDeviceRegistry\",\"ThingsDataRepositoryStrategy 行列存储\",\"TDengineColumnModeStrategy\",\"ElasticSearchColumnModeStrategy\",\"ElasticSearchRowModeStrategy service restClient \",\"createForQuery ElasticSearchRowModeQueryOperations\",\"createForDDL\",\"NoneThingsDataRepositoryStrategy\",\"ThingsDataCustomizer\",\"DeviceThingsDataCustomizer\",\"ThingsBridgingDeviceDataService 继承 DeviceDataService\",\"查询物模型属性信息、根据产品或设备聚合属性信息、查询事件，保存设备消息\",\"ThingsDataRepository\",\"thingType\"]},\"1345\":{\"h\":\"authorization\",\"t\":[\"AuthorizationController\",\"ReactiveAuthenticationManager 包含AuthenticationManagerProvider\",\"ReactiveAuthenticationManagerProvider\",\"UserTokenManager 包含tokenStorage和userStorage\",\"ReactiveAuthenticationHolder 包含Supplier\",\"ReactiveAuthenticationSupplier 包含UserTokenManager和ReactiveAuthenticationManager\",\"UserTokenHolder mvc\",\"UserTokenWebFilter reactive\",\"若token不带认证信息，响应式通过用户id查询Authentication放入本地缓存(使用guaua谷歌工具)和redis缓存中，下次从缓存中取\",\"若token带认证信息，直接解析返回。\",\"UserTokenWebFilter\",\"实现webFilter、BeanPostProcessor,在bean初始化时添加token解析器和产生器\",\"包含授权成功事件监听器，根据tokenGenerator产生token返回，保存到userTokenManager, token解析处理\",\"@Component @Slf4j public class UserTokenWebFilter implements WebFilter, BeanPostProcessor { private final List<ReactiveUserTokenParser> parsers = new ArrayList<>(); private final Map<String, ReactiveUserTokenGenerator> tokenGeneratorMap = new HashMap<>(); @Autowired private UserTokenManager userTokenManager; @Override @NonNull public Mono<Void> filter(@NonNull ServerWebExchange exchange, WebFilterChain chain) { return Flux .fromIterable(parsers) .flatMap(parser -> parser.parseToken(exchange)) .next() .map(token -> chain .filter(exchange) .subscriberContext(Context.of(ParsedToken.class, token))) .defaultIfEmpty(chain.filter(exchange)) .flatMap(Function.identity()) .subscriberContext(ReactiveLogger.start(\\\"requestId\\\", exchange.getRequest().getId())); // return chain.filter(exchange) // .subscriberContext(ContextUtils.acceptContext(ctx -> // Flux.fromIterable(parsers) // .flatMap(parser -> parser.parseToken(exchange)) // .subscribe(token -> ctx.put(ParsedToken.class, token))) // ) // .subscriberContext(ReactiveLogger.start(\\\"requestId\\\", exchange.getRequest().getId())) } @EventListener public void handleUserSign(AuthorizationSuccessEvent event) { ReactiveUserTokenGenerator generator = event.<String>getParameter(\\\"tokenType\\\") .map(tokenGeneratorMap::get) .orElseGet(() -> tokenGeneratorMap.get(\\\"default\\\")); if (generator != null) { GeneratedToken token = generator.generate(event.getAuthentication()); event.getResult().putAll(token.getResponse()); if (StringUtils.hasText(token.getToken())) { event.getResult().put(\\\"token\\\", token.getToken()); long expires = event.getParameter(\\\"expires\\\") .map(String::valueOf) .map(Long::parseLong) .orElse(token.getTimeout()); event.getResult().put(\\\"expires\\\", expires); event.async(userTokenManager .signIn(token.getToken(), token.getType(), event .getAuthentication() .getUser() .getId(), expires) .doOnNext(t -> log.debug(\\\"user [{}] sign in\\\", t.getUserId())) .then()); } } } @Override public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException { if (bean instanceof ReactiveUserTokenGenerator) { ReactiveUserTokenGenerator generator = ((ReactiveUserTokenGenerator) bean); tokenGeneratorMap.put(generator.getTokenType(), generator); } if (bean instanceof ReactiveUserTokenParser) { parsers.add(((ReactiveUserTokenParser) bean)); } return bean; } } \",\"本地缓存\"]},\"1346\":{\"h\":\"network-component\"},\"1347\":{\"h\":\"network-core\",\"t\":[\"NetworkManager\",\"NetworkConfigManager\",\"NetworkProvider \",\"DefaultHttpServerProvider\",\"DefaultTCPServerProvider\",\"DefaultVertxMqttServerProvider\",\"MqttClientProvider\",\"NetWork \",\"VertxMqttClient\",\"VertxMqttServer实现MqttServer\"]},\"1348\":{\"h\":\"DefaultNetworkManager\",\"t\":[\"实现NetworkManager，是bean处理器，包含 NetworkConfigManager， NetworkProvider\",\"postProcessAfterInitialization调用register\",\"register 注册NetworkProvider\"]},\"1349\":{\"h\":\"VertxMqttConnection实现MqttConnection\",\"t\":[\"使用MqttEndpoint和客户端进行通信\",\"init配置发布处理器，处理客户端传来的消息\",\"MqttEndpoint\",\"publish发布消息\",\"reject拒绝连接\"]},\"1350\":{\"h\":\"mqtt-component\",\"t\":[\"vertx vertx-mqtt\"]},\"1351\":{\"h\":\"MqttClientProvider\"},\"1352\":{\"h\":\"createNetwork\",\"t\":[\"public Mono<Network> createNetwork(@Nonnull MqttClientProperties properties) { VertxMqttClient mqttClient = new VertxMqttClient(properties.getId()); return initMqttClient(mqttClient, properties); } \"]},\"1353\":{\"h\":\"initMqttClient\",\"t\":[\"mqtt是基于tcp协议的，若不主动断开，会一直保持连接\",\"MqttClient.create(vertx, options)，使用vertx-mqtt创建客户端\",\"连接客户端\",\"返回网络对象VertxMqttClient,实现MqttClient、Network接口\",\"public Mono<Network> initMqttClient(VertxMqttClient mqttClient, MqttClientProperties properties) { return convert(properties) .map(options -> { mqttClient.setTopicPrefix(properties.getTopicPrefix()); mqttClient.setLoading(true); MqttClient client = MqttClient.create(vertx, options); mqttClient.setClient(client); client.connect(properties.getRemotePort(), properties.getRemoteHost(), result -> { mqttClient.setLoading(false); if (!result.succeeded()) { log.warn(\\\"connect mqtt [{}@{}:{}] error\\\", properties.getClientId(), properties.getRemoteHost(), properties.getRemotePort(), result.cause()); } else { log.debug(\\\"connect mqtt [{}] success\\\", properties.getId()); } }); return mqttClient; }); } \"]},\"1354\":{\"h\":\"protocol-component\",\"t\":[\"从集群读取协议改变的消息，进行协议管理\",\"项目启动，读取协议jar包生成协议，由协议管理器进行管理\"]},\"1355\":{\"h\":\"ProtocolSupportManager 接口\",\"t\":[\"ClusterProtocolSupportManager包含ClusterManager\"]},\"1356\":{\"h\":\"ClusterProtocolSupportManager\"},\"1357\":{\"h\":\"ProtocolSupportLoader\",\"t\":[\"SpringProtocolSupportLoader包含ProtocolSupportLoaderProvider\",\"ProtocolSupportLoaderProvider 读取jar包文件，并注册到容器 \",\"JarProtocolSupportLoader\",\"LocalProtocolSupportLoader\",\"AutoDownloadJarProtocolSupportLoader\",\"ProtocolSupportProvider \",\"JetLinksProtocolSupportProvider\"]},\"1358\":{\"h\":\"ProtocolSupportHandler\",\"t\":[\"协议事件处理类，在对协议增删改查时，发布对应事件，事件监听器进行处理将配置添加到redis缓存中\",\"handleCreated\",\"handleSaved\",\"handleModify\",\"handleProtocolDelete\",\"reloadProtocol 重新加载协议\"]},\"1359\":{\"h\":\"gateway-component\",\"t\":[\"DeviceGatewayProvider\",\"DeviceGatewayManager \",\"store ReactiveCacheContainer<String, DeviceGateway>\",\"providers Map<String, DeviceGatewayProvider>\",\"DeviceGatewayPropertiesManager 即DeviceGatewayConfigService 包含DeviceGatewayService\",\"DeviceGatewayService\",\"DeviceGatewayController包含DeviceGatewayService\",\"DeviceGateway \",\"MqttClientDeviceGateway\",\"MqttServerDeviceGateway\",\"HttpServerDeviceGateway\",\"TcpServerDeviceGateway\",\"MqttClientDeviceGateway\"]},\"1360\":{\"h\":\"MqttServerDeviceGateway\",\"t\":[\"doStart方法，启动网关，并对连接进行订阅\",\"decodeAndHandleMessage消息解码并处理消息，并生成设备会话到设备会话管理器\"]},\"1361\":{\"h\":\"DeviceGatewayHelper\",\"t\":[\"处理设备消息，生成设备消息Session到设备会话管理器中，被用作平台对设备下发指令\"]},\"1362\":{\"h\":\"DeviceMessageConnector\",\"t\":[\"真正处理设备消息的地方，将设备消息发布到事件总线evenBus，事件总线根据订阅表发送消息给下游订阅者进行处理\"]},\"1363\":{\"h\":\"TimeSeriesMessageWriterConnector\",\"t\":[\"订阅所有设备消息，保存设备数据到时序数据库\"]},\"1364\":{\"h\":\"ClusterSendToDeviceMessageHandler\",\"t\":[\"处理设备消息，通过设备会话管理器找到设备对应的会话，进行消息发送\"]},\"1365\":{\"h\":\"cluster\"},\"1366\":{\"h\":\"ClusterManager接口\",\"t\":[\"RedisClusterManager\"]},\"1367\":{\"h\":\"RedisClusterManager\"},\"1368\":{\"h\":\"ScalecubeRpcManager实现RpcManager接口\",\"t\":[\"根据设备所注册的服务器节点，将设备指令发送到对应服务节点进行处理\"]},\"1369\":{\"h\":\"cache\"},\"1370\":{\"h\":\"RedisClusterCache实现ClusterCache\"},\"1371\":{\"h\":\"事件的触发\",\"t\":[\"通过EasyormConfigurationautoRegisterFeature方法将eventlistener（CompositeEventListener）添加到RDBDatabaseMetadata的Feature,在sql执行时触发相应事件\"]},\"1372\":{\"h\":\"CompositeEventListener\",\"t\":[\"对一下事件进行组合处理\",\"CreatorEventListener\",\"EntityEventListener\",\"ValidateEventListener\"]},\"1373\":{\"h\":\"事件上报\",\"t\":[\"/{productId}/{deviceId}/event/{eventId} /1627005615119679488/1627005926735495168/event/ev1\",\"{ \\\"timestamp\\\":1601196762389, \\\"messageId\\\":\\\"43436457\\\", \\\"data\\\": \\\"{\\\"evp\\\":12,\\\"evp2\\\":3}\\\" } \"]},\"1374\":{\"h\":\"modbus\",\"t\":[\"https://blog.csdn.net/zhouhangzooo/article/details/124966221\",\"https://blog.csdn.net/qq_36958104/article/details/124193794\"]},\"1375\":{\"h\":\"vertx\"},\"1376\":{\"h\":\"vertx-mqtt\",\"t\":[\"参考\"]},\"1377\":{\"h\":\"mqtt server\",\"t\":[\"服务器的创建\",\"处理订阅、取消订阅\",\"处理mqtt报文消息\"]},\"1378\":{\"h\":\"mqtt client\"},\"1379\":{\"h\":\"apache-http-client\"},\"1380\":{\"h\":\"asyncClient\"},\"1381\":{\"h\":\"核心注意点\",\"t\":[\"连接池中的连接有过期时间和空闲最大存活时间60s\",\"注意多层异步回调\",\"在收到响应后，handler的responseCompleted()释放连接\",\"DefaultClientExchangeHandlerImpl是核心，和connection关联，处理请求和响应\",\"在conn、ExchangeHandler之间进行交互\"]},\"1382\":{\"h\":\"pool\",\"t\":[\"连接池，用于管理连接远程端点的连接(socket)\",\"IOSessionImpl\",\"InternalDispatch派发事件\",\"HttpAsyncRequestExecutor处理派发的事件，交给conn连接中的exchangeHandler处理\",\"BaseIOReactor\",\"DefaultConnectingIOReactor \",\"processEvents的processSessionRequests处理要添加通道的session请求，注册socketChannel到BaseIOReactor的selector中\",\"processEvents处理连接完成事件，并将socketChannel注册到BaseIOReactor的selector中，并移除DefaultConnectingIOReactor的选择器selector中的channel\",\"IOReactor\"]},\"1383\":{\"h\":\"DefaultNHttpClientConnection\",\"t\":[\"produceOutput\",\"处理写事件\",\"是否有需写入的数据，没有执行requestReady方法，获取连接绑定的exchangeHandler构造请求，提交请求，即写数据到outbuf，等待输出到channel,并设置连接状态\",\"内容编码器是否存在，存在调用outputReady方法处理\",\"写数据到通道 注意： 在执行requestReady和outputReady过程中，需判断连接状态，改变连接socketChannel所绑定的selectionkey中的interestOps,忽略写事件，关注读事件\",\" public void produceOutput(final NHttpClientEventHandler handler) { try { if (this.status == ACTIVE) { if (this.contentEncoder == null && !this.outbuf.hasData()) { handler.requestReady(this); } if (this.contentEncoder != null) { handler.outputReady(this, this.contentEncoder); if (this.contentEncoder.isCompleted()) { resetOutput(); } } } if (this.outbuf.hasData()) { final int bytesWritten = this.outbuf.flush(this.session.channel()); if (bytesWritten > 0) { this.outTransportMetrics.incrementBytesTransferred(bytesWritten); } } if (!this.outbuf.hasData()) { if (this.status == CLOSING) { this.session.close(); this.status = CLOSED; resetOutput(); } } } catch (final Exception ex) { handler.exception(this, ex); } finally { // Finally set the buffered output flag this.hasBufferedOutput = this.outbuf.hasData(); } } \"]},\"1384\":{\"h\":\"请求\",\"t\":[\"DefaultClientExchangeHandlerImpl\",\"从连接池获取连接，并在连接的上下文设置DefaultClientExchangeHandlerImpl的实例handler\",\"设置连接conn的感兴趣事件\"]},\"1385\":{\"h\":\"响应\"},\"1386\":{\"h\":\"netty\",\"t\":[\"事件处理\"]},\"1387\":{\"h\":\"服务器实现\"},\"1388\":{\"h\":\"客户端实现\",\"t\":[\"参考\"]},\"1389\":{\"h\":\"原理\"},\"1390\":{\"h\":\"缓存区分配\"},\"1391\":{\"h\":\"类或接口\",\"t\":[\"ByteBufAllocator\",\"RecvByteBufAllocator\",\"RecvByteBufAllocator.Handle\",\"NioSocketChannelConfig DefaultChannelConfig DefaultChannelConfig、ChannelConfig\",\"NioByteUnsafe NioByteUnsafe\",\"NioSocketChannel AbstractNioByteChannel AbstractNioChannel AbstractChannel\"]},\"1392\":{\"h\":\"初始化\",\"t\":[\"缓存分配器\",\"缓存分配策略\"]},\"1393\":{\"h\":\"FixedRecvByteBufAllocator\"},\"1394\":{\"h\":\"AdaptiveRecvByteBufAllocator\"},\"1395\":{\"h\":\"核心类维护\",\"t\":[\"eventLoop维护SocketChannel\",\"SocketChannel维护Pipeline、UnSafe\",\"Pipeline维护handlerContext\",\"handlerContext维护channelHandler\"]},\"1396\":{\"h\":\"pipeline如何维护带有channelHandler的Context\",\"t\":[\"pipeline自带HeadContext和TailContext\",\"维护了自带头尾的上下文链表,pipeline初始化handler就是创建带有channelHandler的Context，并插入到链表头部\",\"pipeline处理消息时，从尾部上下文到头部上下文执行channelHandler,最终写入到channel\"]},\"1397\":{\"h\":\"NioUnsafe extends Unsafe 的作用\",\"t\":[\"定义了处理读取、连接、写入事件的接口方法\",\"public interface NioUnsafe extends Unsafe { /** * Return underlying */ SelectableChannel ch(); /** * Finish connect */ void finishConnect(); /** * Read from underlying */ void read(); void forceFlush(); } \"]},\"1398\":{\"h\":\"connect连接事件的触发\",\"t\":[\"触发条件\",\"连接有了结果，可能连接上，也可能没连上\",\"连接过程有了错误\",\"处理流程\",\"需要主动判断连接结果，若失败，则直接抛出异常\",\"设置SelectionKey的感兴趣事件，去除连接事件，增加读写事件\"]},\"1399\":{\"h\":\"感兴趣事件分析\",\"t\":[\"补码运算\",\"符号位参与逻辑运算\",\"00000000 00000000 00000000 00001000 连接 11111111 11111111 11111111 11110111 取反 00000000 00000000 00000000 00001000 连接 00000000 00000000 00000000 00000100 写 00000000 00000000 00000000 00000001 读 00000000 00000000 00000000 00010000 客户端连接 \"]},\"1400\":{\"h\":\"读取事件处理流程\",\"t\":[\"NioEventLoop的processSelectedKey方法\",\"AbstractNioChannel.NioUnsafe的read方法 \",\"从channel获取ChannelConfig、ChannelPipeline\",\"从ChannelConfig获取ByteBufAllocator、RecvByteBufAllocator\",\"每次读取创建RecvByteBufAllocator.Handle对象，重置读取字节数和消息数\",\"分配缓存，读取数据\",\"交给pipeline处理\"]},\"1401\":{\"h\":\"写出事件处理流程\",\"t\":[\"channel维护了ChannelOutBoundBuffer\",\"ChannelOutBoundBuffer维护了写出数据Entry队列\",\"调用channel的write方法，经过pipeline的handler后增加到ChannelOutBoundBuffer\",\"当channel有写出事件后，将Entry中的数据写入到javaChannel中\",\"可控制写出的消息数\"]},\"1402\":{\"h\":\"flush分析\",\"t\":[\"当调用flush时就是将ChannelOutBoundBuffer数据写入到javaChannel中,数据转移\",\"当javaChannel有空间，则直接写入数据，否则让socketChannel的感兴趣事件包含写事件\",\"触发可写事件，继续写数据到javaChannel\",\"直到javaChannel有空间写入，或ChannelOutBoundBuffer缓存区没有数据，取消感兴趣事件\"]},\"1403\":{\"h\":\"FlushConsolidationHandler\",\"t\":[\"控制flush次数，即向底层写数据(系统调用)次数\"]},\"1404\":{\"h\":\"客户端初始化\"},\"1405\":{\"h\":\"服务端初始化\",\"t\":[\"channel注册到eventLoop\"]},\"1406\":{\"h\":\"websocket\"},\"1407\":{\"h\":\"web客户端样例\",\"t\":[\"参考\",\"<!DOCTYPE html> <html lang=\\\"en\\\" xmlns:th=\\\"http://www.thymeleaf.org\\\"> <head> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge,chrome=1\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, maximum-scale=1\\\"> <meta charset=\\\"utf-8\\\"/> <title>首页</title> </head> <body> <input type=\\\"button\\\" value=\\\"发送\\\" onclick=\\\"send()\\\"> <div id=\\\"title\\\"> </div> <!-- js部分 --> <script type=\\\"text/javascript\\\" th:src=\\\"@{/jquery-3.2.1.min.js}\\\"></script> <script> var ws; openWebSocket(); function openWebSocket(){ if (\\\"WebSocket\\\" in window) { //如果已经有连接，则断开并重新连接 if (ws != null) { ws.close(); ws = null; } // 创建一个 websocket var UUID = 123; ws = new WebSocket(\\\"ws://localhost:8080/websocket/\\\"+UUID); ws.onopen = function () { console.log('WebSocket连接已建立') }; //获得消息事件 ws.onmessage = function (evt) { $(\\\"#title\\\").html('<p>接收：'+evt.data+'</p>'); }; ws.onclose = function () { console.log('WebSocket连接已断开') }; } else { // 浏览器不支持 WebSocket console.log('您的浏览器不支持 WebSocket!'); } } function send(){ ws.send(\\\"发送一条消息\\\"); }</script> </body> </html> \"]},\"1408\":{\"h\":\"如何携带附加信息进行验证？\",\"t\":[\"参考\",\"参考\",\"1、通过子协议，传入token等信息，后端使用request.getHeaders.get(\\\"Set-WebSocket-protocol\\\")方式获取信息\",\"在使用http握手时，响应必须带上上述请求头，否则握手失败\",\"2、通过在路径中携带附加信息，使用@PathParam从路径中获取信息进行校验\"]},\"1409\":{\"h\":\"@ServerEndpoint\"},\"1410\":{\"h\":\"ServerEndpointExporter\"},\"1411\":{\"h\":\"registerEndpoint方法\",\"t\":[\"//找到ServerEndpoint注解的bean String[] endpointBeanNames = context.getBeanNamesForAnnotation(ServerEndpoint.class); for (Class<?> endpointClass : endpointClasses) { registerEndpoint(endpointClass); } \"]},\"1412\":{\"h\":\"getServerContainer,initServletContext\",\"t\":[\" @Nullable protected ServerContainer getServerContainer() { return this.serverContainer; } protected void initServletContext(ServletContext servletContext) { if (this.serverContainer == null) { this.serverContainer = (ServerContainer) servletContext.getAttribute(\\\"javax.websocket.server.ServerContainer\\\"); } } \"]},\"1413\":{\"h\":\"WsServerContainer,ServerContainer\",\"t\":[\"从上下文ServletContext获取serverContainer\",\"serverContainer.addEndpoint(endpointClass);\",\"实例化时添加过滤器WsFilter处理websocket连接\"]},\"1414\":{\"h\":\"addEndpoint\",\"t\":[\" ServerEndpoint annotation = pojo.getAnnotation(ServerEndpoint.class); if (annotation == null) { throw new DeploymentException( sm.getString(\\\"serverContainer.missingAnnotation\\\", pojo.getName())); } String path = annotation.value(); \"]},\"1415\":{\"h\":\"addEndpoint(ServerEndpointConfig sec, boolean fromAnnotatedPojo)\",\"t\":[\"路径path\",\"PojoMethodMapping方法映射，getOnOpen，getOnClose\",\"路径参数\",\"configTemplateMatchMap\",\"templateMatches\",\"String path = sec.getPath(); PojoMethodMapping methodMapping = new PojoMethodMapping(sec.getEndpointClass(), sec.getDecoders(), path, getInstanceManager(Thread.currentThread().getContextClassLoader())); UriTemplate uriTemplate = new UriTemplate(path); TemplatePathMatch newMatch = new TemplatePathMatch(sec, uriTemplate, fromAnnotatedPojo); TemplatePathMatch oldMatch = templateMatches.putIfAbsent(uriTemplate.getNormalizedPath(), newMatch); \"]},\"1416\":{\"h\":\"configurator\",\"t\":[\"ServerEndpoint注解中配置的配置器\"]},\"1417\":{\"h\":\"ServerEndpointConfig\",\"t\":[\"Configurator\",\"Builder 使用ServerEndpointConfig.builder构建端点配置\"]},\"1418\":{\"h\":\"NioEndpoint下的SocketProcessor\",\"t\":[\"协议升级请求\"]},\"1419\":{\"h\":\"AbstractProtocol下的ConnectHandler的process方法\",\"t\":[\" HttpUpgradeHandler httpUpgradeHandler = upgradeToken.getHttpUpgradeHandler(); // Release the Http11 processor to be re-used release(processor); // Create the upgrade processor processor = getProtocol().createUpgradeProcessor(wrapper, upgradeToken); if (upgradeToken.getInstanceManager() == null) { httpUpgradeHandler.init((WebConnection) processor); } else { ClassLoader oldCL = upgradeToken.getContextBind().bind(false, null); try { //!!!! httpUpgradeHandler.init((WebConnection) processor); } finally { upgradeToken.getContextBind().unbind(false, oldCL); } } \"]},\"1420\":{\"h\":\"WsHttpUpgradeHandler\"},\"1421\":{\"h\":\"init方法、\",\"t\":[\" wsRemoteEndpointServer = new WsRemoteEndpointImplServer(socketWrapper, upgradeInfo, webSocketContainer); wsSession = new WsSession(wsRemoteEndpointServer, webSocketContainer, handshakeRequest.getRequestURI(), handshakeRequest.getParameterMap(), handshakeRequest.getQueryString(), handshakeRequest.getUserPrincipal(), httpSessionId, negotiatedExtensions, subProtocol, pathParameters, secure, serverEndpointConfig); ep = wsSession.getLocal(); wsFrame = new WsFrameServer(socketWrapper, upgradeInfo, wsSession, transformation, applicationClassLoader); // WsFrame adds the necessary final transformations. Copy the // completed transformation chain to the remote end point. wsRemoteEndpointServer.setTransformation(wsFrame.getTransformation()); ep.onOpen(wsSession, serverEndpointConfig); webSocketContainer.registerSession(serverEndpointConfig.getPath(), wsSession); \"]},\"1422\":{\"h\":\"wsFilter\",\"t\":[\"实例化时添加过滤器WsFilter处理websocket连接\",\"//发起改变socket请求状态的action的操作 UpgradeUtil.doUpgrade(sc, req, resp, mappingResult.getConfig(), mappingResult.getPathParams()); \"]},\"1423\":{\"h\":\"WebSocketHttpRequestHandler\"},\"1424\":{\"h\":\"protocol\"},\"1425\":{\"h\":\"websocket\",\"t\":[\"WebSocket 是 HTML5 的重要特性，它实现了基于浏览器的远程 socket，它使浏览器和服务器可以进行全双工通信， 许多浏览器（Firefox、Google Chrom e 和 Safari）都已对此做了支持。\",\"在 WebSocket 出现之前，为了实现即时通信，采用的技术都是 “轮询”，即在特定的时间间隔内，由浏览器对服务器发出 HTTP Request， 服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询” 使得浏览器需要对服务器不断发出请求，这样会占用大量带宽。\",\"WebSocket 采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态 你可以使用 JavaScript 来向连接写入或从中接收数据，就像在使用一个常规的 TCP Socket 一样。它解决了 Web 实时化的问题，相比传统 HTTP 有如下好处：\",\"一个 Web 客户端只建立一个 TCP 连接\",\"Websocket 服务端可以推送 (push) 数据到 web 客户端.\",\"有更加轻量级的头，减少数据传送量\",\"WebSocket URL 的起始输入是 ws:// 或是 wss://（在 SSL 上）\",\"WebSocket 的协议颇为简单，在第一次 handshake 通过以后，连接便建立成功，其后的通讯数据都是以 ”\\\\x00″ 开头，以 ”\\\\xFF” 结尾。在客户端，这个是透明的，WebSocket 组件会自动将原始数据 “掐头去尾”。\"]},\"1426\":{\"h\":\"kerberos认证协议\",\"t\":[\"参考\",\"和Oauth2授权码认证类似，在通信过程加了密钥处理\"]},\"1427\":{\"h\":\"network\"},\"1428\":{\"h\":\"概念\"},\"1429\":{\"h\":\"网关和路由\",\"t\":[\"网关主要用于连接异构网络，路由器、交换机、pc、手机都可以作为网关\",\"路由器主要用于不同网络间的数据转发，处于网络层\"]},\"1430\":{\"h\":\"集线器、交换机\",\"t\":[\"交换机的不同端口间可以隔离冲突域，保证两个主机间能正常通信，处于数据链路层\",\"集线器主要用于将多个pc连接通信，存在冲突域，影响通信，处于物理层\"]},\"1431\":{\"h\":\"vpn、手机热点\"},\"1432\":{\"h\":\"windows共享网络\",\"t\":[\"pc有无线和有线两个网卡，通过共享pc无线网络，即将pc的有线网卡作为其他pc的网关，让连接pc的局域网设备能够访问外网\"]},\"1433\":{\"h\":\"网络通信判断连接、读取、写超时猜想\",\"t\":[\"1、业务线程执行异步操作，获取异步操作对象，缓存到共享内存中，并阻塞\",\"2、判断超时线程，若对象存在，对共享内存中进行超时判断，设置超时结果\",\"3、读写线程获取到结果，设置到共享内存的异步对象中，并删除异步操作对象\"]},\"1434\":{\"h\":\"长轮询\",\"t\":[\"不断发送请求到服务器\",\"若请求得到数据，则立即返回，若请求不到数据，则在超时时间内挂起等待，直到有数据或超时返回\"]},\"1435\":{\"h\":\"网络通信\"},\"1436\":{\"h\":\"IO流\"},\"1437\":{\"h\":\"channel通道\"},\"1438\":{\"h\":\"buffer缓存区\"},\"1439\":{\"h\":\"IO通信模型\"},\"1440\":{\"h\":\"Reactor模型\",\"t\":[\"分类\",\"单线程模型、多线程模型、主从多线程模型\",\"运行机制\",\"连接注册、事件轮询（select）、事件分发(io事件)、任务处理（非io事件）\"]},\"1441\":{\"h\":\"框架\"},\"1442\":{\"h\":\"netty\"},\"1443\":{\"h\":\"执行流程\"},\"1444\":{\"h\":\"channel\",\"t\":[\"AbstractChannel、AbstractNioChannel\",\"AbstractNioByteChannel、NIOSocketChannel\",\"AbstractNioMessageChannel、NioServerSocketChannel\",\"AbstractChannel的内部抽象AbstractUnsafe的register,register0,\",\"AbstractNioChannel的doregister方法\",\"完成channel的注册\"]},\"1445\":{\"h\":\"NioEventLoop\",\"t\":[\"继承链\",\"NioEventLoop、SingleThreadEventLoop 、SingleThreadEventExecutor、AbstractScheduledEventExecutor、AbstractEventExecutor\",\"NioEventLoop\",\"NioEventLoop本身是Executor,内部有executor成员（子executor，只是一个线程工厂，用于创建线程与eventloop绑定，进行事件循环）,此executor并非线程池，\",\"EventLoop 本身只是一个线程驱动，在其生命周期内只会绑定一个线程，让该线程处理一个 Channel 的所有 IO 事件。\",\"channel与eventloop绑定，eventloop与thread绑定\",\"io.netty.channel.AbstractChannel.AbstractUnsafe#register\",\"在注册channel时，根据选择器选择合适的eventloop，将channel注册到eventloop的选择器中，并将eventloop绑定一个线程并启动\",\"register和execute是两个核心方法，用于注册channel、添加任务\",\"SingleThreadEventLoop\",\"tailTasks\",\"SingleThreadEventExecutor\",\"addTaskWakesUp 默认false\",\"maxPendingTasks DEFAULT_MAX_PENDING_EXECUTOR_TASKS;\",\"taskQueue\",\"thread 已绑定的线程\",\"rejectedExecutionHandler\",\"executor\",\"//装饰给定的Executor并确保currentExecutor()在执行过程中从可运行对象内部调用时将返回eventExecutor ThreadExecutorMap.apply(executor, this); public static Executor apply(final Executor executor, final EventExecutor eventExecutor) { ObjectUtil.checkNotNull(executor, \\\"executor\\\"); ObjectUtil.checkNotNull(eventExecutor, \\\"eventExecutor\\\"); return new Executor() { @Override public void execute(final Runnable command) { executor.execute(apply(command, eventExecutor)); } }; } public static Runnable apply(final Runnable command, final EventExecutor eventExecutor) { ObjectUtil.checkNotNull(command, \\\"command\\\"); ObjectUtil.checkNotNull(eventExecutor, \\\"eventExecutor\\\"); return new Runnable() { @Override public void run() { setCurrentEventExecutor(eventExecutor); try { command.run(); } finally { setCurrentEventExecutor(null); } } }; } //Set the current EventExecutor that is used by the Thread. //mappings是线程局部变量 private static void setCurrentEventExecutor(EventExecutor executor) { mappings.set(executor); } \",\"execute方法\",\"private void execute(Runnable task, boolean immediate) { boolean inEventLoop = inEventLoop(); //添加任务到任务对列 addTask(task); //判断eventLoop是否与线程绑定 if (!inEventLoop) { //创建线程任务，启动线程任务，并绑定线程到eventLoop //执行EventLoop中的run方法 startThread(); if (isShutdown()) { boolean reject = false; try { if (removeTask(task)) { reject = true; } } catch (UnsupportedOperationException e) { // The task queue does not support removal so the best thing we can do is to just move on and // hope we will be able to pick-up the task before its completely terminated. // In worst case we will log on termination. } if (reject) { reject(); } } } if (!addTaskWakesUp && immediate) { wakeup(inEventLoop); } } \",\"doStartThread方法，创建线程任务执行，绑定线程到eventLoop\",\"private void doStartThread() { assert thread == null; executor.execute(new Runnable() { @Override public void run() { thread = Thread.currentThread(); if (interrupted) { thread.interrupt(); } boolean success = false; updateLastExecutionTime(); try { SingleThreadEventExecutor.this.run(); success = true; } catch (Throwable t) { logger.warn(\\\"Unexpected exception from an event executor: \\\", t); } finally { for (;;) { int oldState = state; if (oldState >= ST_SHUTTING_DOWN || STATE_UPDATER.compareAndSet( SingleThreadEventExecutor.this, oldState, ST_SHUTTING_DOWN)) { break; } } // Check if confirmShutdown() was called at the end of the loop. if (success && gracefulShutdownStartTime == 0) { if (logger.isErrorEnabled()) { logger.error(\\\"Buggy \\\" + EventExecutor.class.getSimpleName() + \\\" implementation; \\\" + SingleThreadEventExecutor.class.getSimpleName() + \\\".confirmShutdown() must \\\" + \\\"be called before run() implementation terminates.\\\"); } } try { // Run all remaining tasks and shutdown hooks. At this point the event loop // is in ST_SHUTTING_DOWN state still accepting tasks which is needed for // graceful shutdown with quietPeriod. for (;;) { if (confirmShutdown()) { break; } } // Now we want to make sure no more tasks can be added from this point. This is // achieved by switching the state. Any new tasks beyond this point will be rejected. for (;;) { int oldState = state; if (oldState >= ST_SHUTDOWN || STATE_UPDATER.compareAndSet( SingleThreadEventExecutor.this, oldState, ST_SHUTDOWN)) { break; } } // We have the final set of tasks in the queue now, no more can be added, run all remaining. // No need to loop here, this is the final pass. confirmShutdown(); } finally { try { cleanup(); } finally { // Lets remove all FastThreadLocals for the Thread as we are about to terminate and notify // the future. The user may block on the future and once it unblocks the JVM may terminate // and start unloading classes. // See https://github.com/netty/netty/issues/6596. FastThreadLocal.removeAll(); STATE_UPDATER.set(SingleThreadEventExecutor.this, ST_TERMINATED); threadLock.countDown(); int numUserTasks = drainTasks(); if (numUserTasks > 0 && logger.isWarnEnabled()) { logger.warn(\\\"An event executor terminated with \\\" + \\\"non-empty task queue (\\\" + numUserTasks + ')'); } terminationFuture.setSuccess(null); } } } } }); } \",\"AbstractScheduledEventExecutor AbstractEventExecutor\",\"parent EventExecutorGroup\",\"一、任务队列\",\"普通任务队列\",\"收尾任务队列\",\"二、SelectorProvider,jvm中维护的唯一对象\",\"NIO中的provider，其用于创建selector与channel。并且是单例的\",\"三、核心方法NioEventLoop中的run方法\",\"@Override protected void run() { int selectCnt = 0; for (;;) { try { int strategy; try { //返回就绪channel的个数 strategy = selectStrategy.calculateStrategy(selectNowSupplier, hasTasks()); switch (strategy) { case SelectStrategy.CONTINUE: continue; case SelectStrategy.BUSY_WAIT: // fall-through to SELECT since the busy-wait is not supported with NIO case SelectStrategy.SELECT: long curDeadlineNanos = nextScheduledTaskDeadlineNanos(); if (curDeadlineNanos == -1L) { curDeadlineNanos = NONE; // nothing on the calendar } nextWakeupNanos.set(curDeadlineNanos); try { if (!hasTasks()) { strategy = select(curDeadlineNanos); } } finally { // This update is just to help block unnecessary selector wakeups // so use of lazySet is ok (no race condition) nextWakeupNanos.lazySet(AWAKE); } // fall through default: } } catch (IOException e) { // If we receive an IOException here its because the Selector is messed up. Let's rebuild // the selector and retry. https://github.com/netty/netty/issues/8566 rebuildSelector0(); selectCnt = 0; handleLoopException(e); continue; } selectCnt++; cancelledKeys = 0; needsToSelectAgain = false; final int ioRatio = this.ioRatio; boolean ranTasks; if (ioRatio == 100) { try { if (strategy > 0) { processSelectedKeys(); } } finally { // Ensure we always run tasks. ranTasks = runAllTasks(); } } else if (strategy > 0) { final long ioStartTime = System.nanoTime(); try { //处理io读写或连接操作 processSelectedKeys(); } finally { // Ensure we always run tasks. final long ioTime = System.nanoTime() - ioStartTime; ranTasks = runAllTasks(ioTime * (100 - ioRatio) / ioRatio); } } else { ranTasks = runAllTasks(0); // This will run the minimum number of tasks } if (ranTasks || strategy > 0) { if (selectCnt > MIN_PREMATURE_SELECTOR_RETURNS && logger.isDebugEnabled()) { logger.debug(\\\"Selector.select() returned prematurely {} times in a row for Selector {}.\\\", selectCnt - 1, selector); } selectCnt = 0; } else if (unexpectedSelectorWakeup(selectCnt)) { // Unexpected wakeup (unusual case) selectCnt = 0; } } catch (CancelledKeyException e) { // Harmless exception - log anyway if (logger.isDebugEnabled()) { logger.debug(CancelledKeyException.class.getSimpleName() + \\\" raised by a Selector {} - JDK bug?\\\", selector, e); } } catch (Error e) { throw (Error) e; } catch (Throwable t) { handleLoopException(t); } finally { // Always handle shutdown even if the loop processing threw an exception. try { if (isShuttingDown()) { closeAll(); if (confirmShutdown()) { return; } } } catch (Error e) { throw (Error) e; } catch (Throwable t) { handleLoopException(t); } } } } \",\"四、processSelectedKey处理IO事件\",\"private void processSelectedKey(SelectionKey k, AbstractNioChannel ch) { 、//获取NioServerSocketchannel或NioSocketChannel的内部类对象NioByteUnSafe、NioMessageUnsafe final AbstractNioChannel.NioUnsafe unsafe = ch.unsafe(); if (!k.isValid()) { final EventLoop eventLoop; try { eventLoop = ch.eventLoop(); } catch (Throwable ignored) { // If the channel implementation throws an exception because there is no event loop, we ignore this // because we are only trying to determine if ch is registered to this event loop and thus has authority // to close ch. return; } // Only close ch if ch is still registered to this EventLoop. ch could have deregistered from the event loop // and thus the SelectionKey could be cancelled as part of the deregistration process, but the channel is // still healthy and should not be closed. // See https://github.com/netty/netty/issues/5125 if (eventLoop == this) { // close the channel if the key is not valid anymore unsafe.close(unsafe.voidPromise()); } return; } try { int readyOps = k.readyOps(); // We first need to call finishConnect() before try to trigger a read(...) or write(...) as otherwise // the NIO JDK channel implementation may throw a NotYetConnectedException. if ((readyOps & SelectionKey.OP_CONNECT) != 0) { // remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking // See https://github.com/netty/netty/issues/924 int ops = k.interestOps(); ops &= ~SelectionKey.OP_CONNECT; k.interestOps(ops); unsafe.finishConnect(); } // Process OP_WRITE first as we may be able to write some queued buffers and so free memory. if ((readyOps & SelectionKey.OP_WRITE) != 0) { // Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write ch.unsafe().forceFlush(); } // Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead // to a spin loop //处理都事件或accept事件 if ((readyOps & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0 || readyOps == 0) { //调用channel内部的pipeline的fireChannelread和fireChannelReadComplete方法 //处理，即交给pipeline中的handler进行处理 unsafe.read(); } } catch (CancelledKeyException ignored) { unsafe.close(unsafe.voidPromise()); } } \"]},\"1446\":{\"h\":\"NioEventLoopGroup\",\"t\":[\"NioEventLoopGroup本身是Executor,在初始化时，会创建一个executor（也可初始化时传入,用于传到eventLoop中），此executor不是线程池\",\"创建多个NioEventLoop，默认数量是cpu核心数的两倍。\",\"继承链\",\"NioEventLoopGroup、MultiThreadEventLoopGroup、MultiThreadEventExecutorGroup\",\"MultithreadEventLoopGroup\",\"//next方法选取eventLoop，将channel注册到eventLoop中 public ChannelFuture register(Channel channel) { return next().register(channel); } \"]},\"1447\":{\"h\":\"ChannelInitializer\",\"t\":[\"用于将自定义的handler加入到channel的pipeline中，对channel中的信息进行链式处理\",\"使用场景：\",\"在ServerBootstrap初始化时，为监听端口accept事件的Channel添加ServerBootstrapAcceptor\",\"在有新链接进入时，为监听客户端read/write事件的Channel添加用户自定义的ChannelHandler\"]},\"1448\":{\"h\":\"channelPipeline\",\"t\":[\"pendingHandlerCallbackHead、head属性 解决channel还未注册到eventloop问题\"]},\"1449\":{\"h\":\"任务处理机制\",\"t\":[\"netty中eventloop即处理任务队列中的任务，也处理Io事件\"]},\"1450\":{\"h\":\"serverbootstrap\",\"t\":[\"服务器端的快速配置类\",\"配置线程组\",\"//2.创建服务端启动引导/辅助类：ServerBootstrap ServerBootstrap b = new ServerBootstrap(); //3.给引导类配置两大线程组,确定了线程模型 b.group(bossGroup, workerGroup) // (非必备)打印日志 .handler(new LoggingHandler(LogLevel.INFO)) // 4.指定 IO 模型 .channel(NioServerSocketChannel.class) .childHandler(new ChannelInitializer<SocketChannel>() { @Override public void initChannel(SocketChannel ch) { ChannelPipeline p = ch.pipeline(); //5.可以自定义客户端消息的业务处理逻辑 p.addLast(new HelloServerHandler()); } }); \",\"AbstractBootstrap\",\"initAndRegister\",\"final ChannelFuture initAndRegister() { Channel channel = null; try { channel = channelFactory.newChannel(); //channel初始化 init(channel); } catch (Throwable t) { //........ } //config().group()获取bossgroup,调用register方法获取eventlooop, //再调用eventloop的register方法完成注册 ChannelFuture regFuture = config().group().register(channel); //..... } \",\"serverbootstrap的init(channel)\",\"void init(Channel channel) { setChannelOptions(channel, newOptionsArray(), logger); setAttributes(channel, newAttributesArray()); ChannelPipeline p = channel.pipeline(); //定义wocker局部变量信息 final EventLoopGroup currentChildGroup = childGroup; final ChannelHandler currentChildHandler = childHandler; final Entry<ChannelOption<?>, Object>[] currentChildOptions = newOptionsArray(childOptions); final Entry<AttributeKey<?>, Object>[] currentChildAttrs = newAttributesArray(childAttrs); //这里若channel没有注册到eventloop，则在channel的pipeline //暂存channelInitializer,注册成功后执行pipeline.invokeHandlerAddedIfNeeded(); //将自定义handler添加到pipeline中 p.addLast(new ChannelInitializer<Channel>() { @Override public void initChannel(final Channel ch) { final ChannelPipeline pipeline = ch.pipeline(); ChannelHandler handler = config.handler(); if (handler != null) { pipeline.addLast(handler); } //添加serversocketChannel的handler ch.eventLoop().execute(new Runnable() { @Override public void run() { pipeline.addLast(new ServerBootstrapAcceptor( ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs)); } }); } }); } \",\"ServerBootstrapAcceptor\",\"serverSocketChannel的处理器，创建socketchannel并注册到childGroup的eventloop中\",\"public void channelRead(ChannelHandlerContext ctx, Object msg) { final Channel child = (Channel) msg; child.pipeline().addLast(childHandler); setChannelOptions(child, childOptions, logger); setAttributes(child, childAttrs); try { //如果eventloop已绑定线程，则不会创建新的线程。 childGroup.register(child).addListener(new ChannelFutureListener() { @Override public void operationComplete(ChannelFuture future) throws Exception { if (!future.isSuccess()) { forceClose(child, future.cause()); } } }); } catch (Throwable t) { forceClose(child, t); } } \"]},\"1451\":{\"h\":\"handler\",\"t\":[\"多handler需要在channelread的方法尾部添加ctx.fireChannelRead(msg);链式调用\",\"public class DiscardServerHandler extends ChannelInboundHandlerAdapter { @Override public void channelRead(ChannelHandlerContext ctx, Object msg) { // (2) ByteBuf in = (ByteBuf) msg; try { while (in.isReadable()) { // (1) System.out.print((char) in.readByte()); System.out.flush(); } //多handler链式调用 ctx.fireChannelRead(msg); } finally { ReferenceCountUtil.release(msg); // (2) } } @Override public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) { // (4) // Close the connection when an exception is raised. cause.printStackTrace(); ctx.close(); } } \"]},\"1452\":{\"h\":\"C-WMS\",\"t\":[\"租户、仓库、货主、权限表的设计\",\"租户、仓库、货主、权限表的设计，菜单表，按钮元素表\",\"1、用户表、租户表的关系\",\"​ 创建租户后，再创建对应用户，并更新租户表中的owner字段表示用户是租户管理员，\",\"​ 同时创建租户所属的角色或组\",\"2、仓库和货主，使用关系表维护仓库货主间的多对多关系\",\"​ 租户账号登录企业中台创建仓库和货主，货主绑定仓库\",\"3、菜单表和权限表，通过authority_id区分权限是可下发的还是租户所属角色权限还是租户模板权限\",\"​ base_app_authority存放应用下发权限、base_resource_authority存放用户或租户权限，以group_id标识\",\"4、租户模板修改的仍然是租户初始的角色权限，即租户所属的组权限\",\"5、租户所属组以租户维护的编码和税号唯一标识,以角色或组id标识用户拥有的权限\",\"6、登录时，判断是超级租户或租户管理员或用户，从base_resource_authority获取权限\",\"递归获取子元素id或父元素id\",\"getParentId() { 查询父元素 不为null 添加 getParentid() } getAllNode() { 不为null return 添加元素 getALLNOde（左） getALLNOde（右） } \"]},\"1453\":{\"h\":\"report\"},\"1454\":{\"h\":\"积木报表\",\"t\":[\"优点\",\"功能齐全\",\"使用方便\",\"缺点\",\"不是开源项目\",\"无法实现定制功能开发\"]},\"1455\":{\"h\":\"使用\",\"t\":[\"使用sql数据源，并配置报表参数，以${name} 格式拼凑在sql中\",\"预览\",\"预览保存链接，拼接报表参数\",\"http://localhost:8085/jmreport/view/726396234906161152?name=zhansan \",\"导出\",\"使用报表参数拼接导出请求\",\"POST http://localhost:8085/jmreport/exportAllExcelStream Content-Type: application/json { \\\"excelConfigId\\\":\\\"726396234906161152\\\", \\\"queryParam\\\":{ \\\"name\\\":\\\"zhansan\\\", //报表查询参数 \\\"pageNo\\\":\\\"1\\\", \\\"pageSize\\\":10, \\\"currentPageNo\\\":\\\"1\\\", \\\"currentPageSize\\\":10 } } \",\"token 鉴权\",\"自定义鉴权类对token进行处理，JimuReportTokenService implements JmReportTokenServiceI\",\"请求路径格式 {项目前缀}/jmreport/list?token=${token}\",\"报表预览鉴权，使用拦截器进行处理 https://bootapi.jeecg.com/jmreport/view/1331429368098066432?token=???\"]},\"1456\":{\"h\":\"注意事项\",\"t\":[\"不可横向展示列表数据，使用横向分组也有问题，无法实现\",\"需使用api解析获取字段明细，进行报表设计\",\"带参报表，若未传参数，会使用默认值,需注意设置参数必传,也可不设默认值，作为可选参数\"]},\"1457\":{\"h\":\"部署\"},\"1458\":{\"h\":\"linux\",\"t\":[\"环境\",\"docker\",\"docker-compose\",\"maven\",\"jdk\",\"配置路径\",\"vi /etc/profile export MAVEN_HOME=/usr/local/apache-maven-3.6.3 export PATH=$PATH:$MAVEN_HOME/bin export JAVA_HOME=/usr/local/jdk1.8.0_341 export CLASSPATH=$JAVA_HOME/lib/ export PATH=$PATH:$JAVA_HOME/bin source /etc/profile git clone https://gitee.com/jeecg/JimuReport.git cd JimuReport/jimureport-example mvn clean package docker-compose up -d \",\"访问\",\"http://localhost:8085/jmreport/list\"]},\"1459\":{\"h\":\"ajReport\",\"t\":[\"优点\",\"开源报表平台\",\"可操作性强,便于二次开发\",\"缺点\",\"功能并不齐全\",\"相较于积木平台，并不好用，有点繁琐\",\"无法带参查询展示\",\"数据格式问题\",\"分页\"]},\"1460\":{\"h\":\"使用\",\"t\":[\"使用sql数据源，并配置报表参数，以${name} 格式拼凑在sql中\",\"预览 导出\"]},\"1461\":{\"h\":\"部署\"},\"1462\":{\"h\":\"工控机\"},\"1463\":{\"h\":\"表结构梳理\",\"t\":[\"主页信息\",\"项目 安装 软件包 内联查询 installid\",\"历史记录\",\"授权码 查到安装信息 生成安装记录 安装id 时间\",\"根据项目id查询安装信息 安装记录\"]},\"1464\":{\"h\":\"软件包\",\"t\":[\"CREATE TABLE `software_package` ( `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键id', `software_package_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '软件包名称', `software_package_version` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '软件包版本号', `software_version_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '软件版本列表', //存放软件版本id `remarks` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '备注', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='软件包'; \"]},\"1465\":{\"h\":\"软件版本\",\"t\":[\"CREATE TABLE `software_version` ( `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键', `software_name_id` bigint NOT NULL COMMENT '软件名称id', `version_number` varchar(50) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '版本号', `software_version_identification` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '标识', `remarks` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '备注', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=160 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='软件版本'; \"]},\"1466\":{\"h\":\"软件名称\",\"t\":[\"CREATE TABLE `software_name` ( `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键', `software_type_id` bigint DEFAULT NULL COMMENT '软件类型id', `software_name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '软件名称', `software_identification` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '标识', `remarks` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '备注', `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=77 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='软件名称管理'; \"]},\"1467\":{\"h\":\"安装表\",\"t\":[\"CREATE TABLE `installation` ( `id` bigint NOT NULL AUTO_INCREMENT COMMENT '主键', `customer_id` bigint NOT NULL COMMENT '客户id', `project_id` bigint NOT NULL COMMENT '项目id', `software_package_id` bigint NOT NULL COMMENT '软件包id', //关联软件包 `installation_mode` varchar(1) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '安装方式 1：安装；2：更新', `authorization_code` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '授权码', `remarks` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci DEFAULT NULL COMMENT '备注', `installation_time` datetime DEFAULT NULL COMMENT '安装时间', `operation_num` int unsigned NOT NULL COMMENT '操作次数', `hdcode` varchar(255) DEFAULT NULL, `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (`id`) USING BTREE, UNIQUE KEY `idx_uni_code` (`authorization_code`) USING BTREE ) ENGINE=InnoDB AUTO_INCREMENT=120 DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC COMMENT='安装信息表'; \"]},\"1468\":{\"h\":\"安装历史表 左连接\",\"t\":[\"CREATE TABLE `installation_history` ( `installation_id` bigint DEFAULT NULL COMMENT '关联安装表主键', `operation_time` datetime NOT NULL COMMENT '操作时间' ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 ROW_FORMAT=DYNAMIC; \"]},\"1469\":{\"h\":\"温州节能管理平台对接\",\"t\":[\"文档编写人：万洪吉\"]},\"1470\":{\"h\":\"项目负责人\",\"t\":[\"后端：万洪吉\",\"业务：\",\"需求：\"]},\"1471\":{\"h\":\"项目介绍\",\"t\":[\"每天定时推送前一天的间隔为1小时的能耗数据到节能管理平台\"]},\"1472\":{\"h\":\"技术实现方式\",\"t\":[\"定制开发，使用spingboot组件、Java作为实现方式\",\"推送\",\"点位数据以表格形式维护在项目的类路径下，项目启动时加载\",\"定时任务查询设备点位id，调用能管接口查询点位数据\",\"构造信息数据推送到节能管理平台\"]},\"1473\":{\"h\":\"部署\"},\"1474\":{\"h\":\"步骤\",\"t\":[\"进入项目根目录\",\"cd wenzhou \",\"构建镜像\",\"docker-compose -f docker-compose.yml build \",\"拉取镜像启动容器\",\"docker-compsoe -f docker-compose.yml up -d \"]},\"1475\":{\"h\":\"配置\",\"t\":[\"docker-compose.yml\",\"version: '2' services: wenzhou: build: context: . environment: JAVA_OPTS: --app.domain=http://115.223.38.13:8004 --platform.key=2845a410fb4b --platform.platformName=CHINT --platform.secret=fff0fd7a21b94569a46299a96c0c068e --platform.baseurl=http://121.40.61.197:9120 restart: always container_name: wenzhou image: wenzhou ports: - \\\"8089:8089\\\" networks: - techsel_net networks: techsel_net: external: true \",\"docker-compose.yml文件说明\",\"JAVA_OPTS: --app.domain=http://115.223.38.13:8004 --platform.key=2845a410fb4b --platform.platformName=CHINT --platform.secret=fff0fd7a21b94569a46299a96c0c068e --platform.baseurl=http://121.40.61.197:9120 \",\"# 能效平台域名 --app.domain=http://115.223.38.13:8004 # 节能管理平台 --platform.key=2845a410fb4b --platform.platformName=CHINT --platform.secret=fff0fd7a21b94569a46299a96c0c068e # 节能管理平台ip --platform.baseurl=http://121.40.61.197:9120 \"]},\"1476\":{\"h\":\"白银高铁\"},\"1477\":{\"h\":\"方案\",\"t\":[\"导入\",\"以设备运行信息为基准，新增运行信息，同时新增设备基础信息\",\"在导入设备时进行推送，同时保证设备名称唯一性，以导入的excel表信息作为最终的维护信息\",\"对设备进行新增，删除，更新\",\"表\",\"建立运行信息表，基础信息表\",\"照明信息表 可直接以照明区域为基准\",\"空调信息表,可在新增空调运行信息，使用区域字段，新增区域及点位信息\",\"运行状态等信息存放映射的点位id\"]},\"1478\":{\"h\":\"物联网平台问题\",\"t\":[\"eventbus转换为同步或异步实现，去除响应式\",\"reactorQL的替换，或者参考转换\",\"网络组件的替换\",\"demo样例编写\"]},\"1479\":{\"h\":\"任务\",\"t\":[\" 写一个tfdb的spring-start，名字暂定为tfdb-spring-boot-starter。基于tcp方式调用tfdb，用户可以直接spring进行集成。数据调用方式咨询胡涛\",\" netty网络框架\",\" Alink 物模型 通讯关联\",\" 正泰协议处理\",\" 单位接口\",\" 物模型接口及实现类处理\",\" 相应属性的查询\",\" 设备运行状态、物模型\",\" tfdb驱动集成http\",\" 属性值根据物模型进行格式化 添加property,propertyname,timeString, formatvalue unit type\",\" 查询事件1，属性值1，属性值2 格式化 时间戳 timeString\"]},\"1480\":{\"h\":\"存储\",\"t\":[\"deviceKey获取deviceId\",\"遍历params对象\",\"deviceid + 属性标识 获取PropertyMetadata进行校验\",\"public void isValid(String deviceId,JSONObject) { params.foreach((k,v) ->{ //从redis中取到属性json,构造PropertyMetadata PropertyMetadata metaData = getPropertyMetadata(deviceId,k); }); } public DefultPropertyMetadata getPropertyMetadata(String deviceId,String identifier) { //缓存取属性对应的json String jsonString = redisService.getMetada(deviceId,identifier); return new DefultPropertyMetadata(JSON.parseobject(jsonString)); } \"]},\"1481\":{\"h\":\"通信\"},\"1482\":{\"h\":\"物模型\",\"t\":[\"Measurement 接口 获取对应属性值\",\"StaticMeasurement\",\"DevicePropertiesMeasurement \",\"DeviceMetadata\",\"DeviceDataService\",\"productId\",\"DashboardObject 接口 获取Measurement\",\"DeviceDashboardObject \",\"id 产品id\",\"name 产品名称\",\"DeviceProductOperator\",\"DeviceDataService\",\"DeviceDashboard\",\"DeviceDynamicDashboard 获取DashboardObject \",\"productService\",\"DeviceRegistry\",\"DeviceDataService\"]},\"1483\":{\"h\":\"metadata\",\"t\":[\"metadata\",\"ThingMetadata\",\"DefaultThingsMetadata\",\"PropertyMetadata\",\"EventMetadata\"]},\"1484\":{\"h\":\"jetlinks\",\"t\":[\"{ \\\"events\\\": [ { \\\"expands\\\": { \\\"level\\\": \\\"ordinary\\\" }, \\\"valueType\\\": { \\\"type\\\": \\\"object\\\", \\\"expands\\\": {}, \\\"properties\\\": [ { \\\"valueType\\\": { \\\"expands\\\": {}, \\\"type\\\": \\\"int\\\", \\\"unit\\\": \\\"meter\\\" }, \\\"id\\\": \\\"evp\\\", \\\"name\\\": \\\"事件参数1\\\" } ] }, \\\"id\\\": \\\"ev1\\\", \\\"name\\\": \\\"事件1\\\", \\\"sortsIndex\\\": 0 } ], \\\"properties\\\": [ { \\\"valueType\\\": { \\\"type\\\": \\\"double\\\", \\\"expands\\\": {}, \\\"scale\\\": 2, \\\"unit\\\": \\\"celsiusDegrees\\\" }, \\\"expands\\\": { \\\"type\\\": [ \\\"write\\\", \\\"read\\\", \\\"report\\\" ], \\\"metrics\\\": [ { \\\"id\\\": \\\"cszb\\\", \\\"name\\\": \\\"指标1\\\", \\\"value\\\": [ 4 ] } ], \\\"source\\\": \\\"device\\\", \\\"storageType\\\": \\\"direct\\\" }, \\\"id\\\": \\\"temp\\\", \\\"name\\\": \\\"温度\\\", \\\"sortsIndex\\\": 0 } ], \\\"functions\\\": [ { \\\"inputs\\\": [ { \\\"valueType\\\": { \\\"expands\\\": {}, \\\"type\\\": \\\"int\\\", \\\"unit\\\": \\\"meter\\\" }, \\\"id\\\": \\\"fp1\\\", \\\"name\\\": \\\"功能参数\\\" } ], \\\"output\\\": { \\\"type\\\": \\\"int\\\", \\\"expands\\\": {}, \\\"unit\\\": \\\"meter\\\" }, \\\"id\\\": \\\"fuc1\\\", \\\"name\\\": \\\"函数1\\\", \\\"async\\\": true, \\\"sortsIndex\\\": 0 } ], \\\"tags\\\": [ { \\\"valueType\\\": { \\\"type\\\": \\\"string\\\", \\\"expands\\\": { \\\"maxLength\\\": 45 } }, \\\"expands\\\": { \\\"type\\\": [ \\\"read\\\", \\\"write\\\", \\\"report\\\" ], \\\"metrics\\\": [] }, \\\"id\\\": \\\"ta1\\\", \\\"name\\\": \\\"标签1\\\", \\\"description\\\": \\\"435363\\\", \\\"sortsIndex\\\": 0 } ] } \"]},\"1485\":{\"h\":\"alinks\"},\"1486\":{\"h\":\"techLinks\",\"t\":[\"{ \\\"profile\\\": { \\\"version\\\": \\\"1.0\\\", \\\"productKey\\\": \\\"当前产品的ProductKey\\\" }, \\\"properties\\\": [{ \\\"identifier\\\": \\\"属性唯一标识符（物模型模块下唯一）。\\\", \\\"name\\\": \\\"属性名称\\\", \\\"desc\\\": \\\"属性描述。\\\", \\\"accessMode\\\": \\\"属性读写类型：只读（r）或读写（rw）。\\\", \\\"required\\\": \\\"是否是标准功能的必选属性：是（true），否（false）。\\\", \\\"dataType\\\": { \\\"type\\\": \\\"属性类型: int（原生）、float（原生）、double（原生）、text（原生）、date（String类型UTC毫秒）、bool（0或1的int类型）、enum（int类型，枚举项定义方法与bool类型定义0和1的值方法相同）、struct（结构体类型，可包含前面7种类型，下面使用\\\\\\\"specs\\\\\\\":[{}]描述包含的对象）、array（数组类型，支持int、double、float、text、struct）。\\\", \\\"specs\\\": { \\\"min\\\": \\\"参数最小值（int、float、double类型特有）。\\\", \\\"max\\\": \\\"参数最大值（int、float、double类型特有）。\\\", \\\"unit\\\": \\\"属性单位（int、float、double类型特有，非必填）。\\\", \\\"unitName\\\": \\\"单位名称（int、float、double类型特有，非必填）。\\\", \\\"size\\\": \\\"数组元素的个数，最大512（array类型特有）。\\\", \\\"step\\\": \\\"步长（text、enum类型无此参数）。\\\", \\\"length\\\": \\\"数据长度，最大10240（text类型特有）。\\\", \\\"0\\\": \\\"0的值（bool类型特有）。\\\", \\\"1\\\": \\\"1的值（bool类型特有）。\\\", \\\"item\\\": { \\\"type\\\": \\\"数组元素的类型（array类型特有）。\\\" } } } }], \\\"events\\\": [{ \\\"identifier\\\": \\\"事件唯一标识符（物模型模块下唯一，其中post是默认生成的属性上报事件）。\\\", \\\"name\\\": \\\"事件名称。\\\", \\\"desc\\\": \\\"事件描述。\\\", \\\"type\\\": \\\"事件类型（info、alert、error）。\\\", \\\"required\\\": \\\"是否是标准功能的必选事件：是（true），否（false）。\\\", \\\"outputData\\\": [{ \\\"identifier\\\": \\\"参数唯一标识符。\\\", \\\"name\\\": \\\"参数名称。\\\", \\\"dataType\\\": { \\\"type\\\": \\\"属性类型: int（原生）、float（原生）、double（原生）、text（原生）、date（String类型UTC毫秒）、bool（0或1的int类型）、enum（int类型，枚举项定义方法与bool类型定义0和1的值方法相同）、struct（结构体类型，可包含前面7种类型，下面使用\\\\\\\"specs\\\\\\\":[{}]描述包含的对象）、array（数组类型，支持int、double、float、text、struct）。\\\", \\\"specs\\\": { \\\"min\\\": \\\"参数最小值（int、float、double类型特有）。\\\", \\\"max\\\": \\\"参数最大值（int、float、double类型特有）。\\\", \\\"unit\\\": \\\"属性单位（int、float、double类型特有，非必填）。\\\", \\\"unitName\\\": \\\"单位名称（int、float、double类型特有，非必填）。\\\", \\\"size\\\": \\\"数组元素的个数，最大512（array类型特有）。\\\", \\\"step\\\": \\\"步长（text、enum类型无此参数）。\\\", \\\"length\\\": \\\"数据长度，最大10240（text类型特有）。\\\", \\\"0\\\": \\\"0的值（bool类型特有）。\\\", \\\"1\\\": \\\"1的值（bool类型特有）。\\\", \\\"item\\\": { \\\"type\\\": \\\"数组元素的类型（array类型特有）。\\\" } } } }] }], \\\"services\\\": [{ \\\"identifier\\\": \\\"服务唯一标识符（物模型模块下唯一，其中set/get是根据属性的accessMode默认生成的服务）。\\\", \\\"name\\\": \\\"服务名称。\\\", \\\"desc\\\": \\\"服务描述。\\\", \\\"required\\\": \\\"是否是标准功能的必选服务：是（true），否（false）。\\\", \\\"callType\\\": \\\"async（异步调用）或sync（同步调用）。\\\", \\\"inputData\\\": [{ \\\"identifier\\\": \\\"入参唯一标识符。\\\", \\\"name\\\": \\\"入参名称。\\\", \\\"dataType\\\": { \\\"type\\\": \\\"属性类型: int（原生）、float（原生）、double（原生）、text（原生）、date（String类型UTC毫秒）、bool（0或1的int类型）、enum（int类型，枚举项定义方法与bool类型定义0和1的值方法相同）、struct（结构体类型，可包含前面7种类型，下面使用\\\\\\\"specs\\\\\\\":[{}]描述包含的对象）、array（数组类型，支持int、double、float、text、struct）。\\\", \\\"specs\\\": { \\\"min\\\": \\\"参数最小值（int、float、double类型特有）。\\\", \\\"max\\\": \\\"参数最大值（int、float、double类型特有）。\\\", \\\"unit\\\": \\\"属性单位（int、float、double类型特有，非必填）。\\\", \\\"unitName\\\": \\\"单位名称（int、float、double类型特有，非必填）。\\\", \\\"size\\\": \\\"数组元素的个数，最大512（array类型特有）。\\\", \\\"step\\\": \\\"步长（text、enum类型无此参数）。\\\", \\\"length\\\": \\\"数据长度，最大10240（text类型特有）。\\\", \\\"0\\\": \\\"0的值（bool类型特有）。\\\", \\\"1\\\": \\\"1的值（bool类型特有）。\\\", \\\"item\\\": { \\\"type\\\": \\\"数组元素的类型（array类型特有）。\\\" } } } }], \\\"outputData\\\": [{ \\\"identifier\\\": \\\"出参唯一标识符。\\\", \\\"name\\\": \\\"出参名称。\\\", \\\"dataType\\\": { \\\"type\\\": \\\"属性类型: int（原生）、float（原生）、double（原生）、text（原生）、date（String类型UTC毫秒）、bool（0或1的int类型）、enum（int类型，枚举项定义方法与bool类型定义0和1的方法相同）、struct（结构体类型，可包含前面7种类型，下面使用\\\\\\\"specs\\\\\\\":[{}]描述包含的对象）、array（数组类型，支持int、double、float、text、struct）。\\\", \\\"specs\\\": { \\\"min\\\": \\\"参数最小值（int、float、double类型特有）。\\\", \\\"max\\\": \\\"参数最大值（int、float、double类型特有）。\\\", \\\"unit\\\": \\\"属性单位（int、float、double类型特有，非必填）。\\\", \\\"unitName\\\": \\\"单位名称（int、float、double类型特有，非必填）。\\\", \\\"size\\\": \\\"数组元素的个数，最大512（array类型特有）。\\\", \\\"step\\\": \\\"步长（text、enum类型无此参数）。\\\", \\\"length\\\": \\\"数据长度，最大10240（text类型特有）。\\\", \\\"0\\\": \\\"0的值（bool类型特有）。\\\", \\\"1\\\": \\\"1的值（bool类型特有）。\\\", \\\"item\\\": { \\\"type\\\": \\\"数组元素的类型（array类型特有）。\\\" } } } }] }] } \"]},\"1487\":{\"h\":\"cap服务\",\"t\":[\"根据不同服务使用redisConnectionFactory获取不同的redisTemplate,从而做一些redis的操作\"]},\"1488\":{\"h\":\"设备调试服务\",\"t\":[\"mqtt客户端池 ws客户端连接\"]},\"1489\":{\"h\":\"南向网关\",\"t\":[\"不能使用共享订阅订阅所有属性值设置\",\"在sdk重启后,新的mqtt客户端，所有订阅消失,无法下控\",\"项目启动获取订阅组绑定的所有产品进行通配符订阅，或获取产品和设备信息进行精确订阅\"]},\"1490\":{\"h\":\"用户中心\"},\"1491\":{\"h\":\"协议\",\"t\":[\"oidc\",\"基于oauth2返回的信息包含accesstoken, id_token id_token表示用户的唯一签名，存放在第三方，用于身份校验\",\"saml2\",\"idp、sp\",\"SAML协议的核心是: IDP和SP通过用户的浏览器的重定向访问来实现交换数据。\",\"通过浏览器转发请求到idp,返回身份信息保存在浏览器端， 下一次请求将saml信息到应用端使用密钥进行f认证，访问资源\",\"ldap\",\"轻型目录访问协议，用于身份认证和单点登录\",\"过滤器\",\"读写比例 7：1\",\"根据用户名和口令获取信息\",\"{SSHA}a4rkme1V5tMSWq7ZHepPVgsrnvQKcZxW \"]},\"1492\":{\"h\":\"需求分析\"},\"1493\":{\"h\":\"租户管理\"},\"1494\":{\"h\":\"平台管理\",\"t\":[\"根据用户角色获取用户的应用 用户的角色id clientRoleId\"]},\"1495\":{\"h\":\"管理平台\",\"t\":[\"新建用户绑定租户001 最大的租户,拥有管理员应用权限 用户有新建租户的权限,新建用户的权限，给用户绑定租户,分配角色权限\",\"用户登录根据角色获取对应的角色权限 新建租户下的子用户，分配权限,租户隔离数据\"]},\"1496\":{\"h\":\"个人登录平台oauth2登录页\",\"t\":[\"登录后展示所拥有应用,点击应用登录跳转,弹出登录授权页\",\"若直接登录应用则弹出登录、授权页面\"]},\"1497\":{\"h\":\"用户中心技术文档\"},\"1498\":{\"h\":\"项目负责人\",\"t\":[\"前端：陈晰、李婷妍\",\"后端：胡丽芳、万洪吉\",\"业务： 王玉廷\",\"需求 ：王玉廷\"]},\"1499\":{\"h\":\"项目介绍\"},\"1500\":{\"h\":\"项目背景\",\"t\":[\"在分布式系统中每一个服务都有一套账号，不通用，容易引起混乱和管理不便。基于该问题，需要独立的认证授权系统。支持多租户管理、多组织管理的多领域集成应用，为业务系统提供统一的用户资源和权限资源进行集中的管理\"]},\"1501\":{\"h\":\"项目技术\",\"t\":[\"持久层框架： Apache Mybatis & Mybatis Plus\",\"API 网关：Spring Cloud Gateway\",\"服务注册&发现和配置中心: Alibaba Nacos\",\"服务消费：Spring Cloud OpenFeign & RestTemplate\",\"负载均衡：Spring Cloud Loadbalancer\",\"服务熔断&降级&限流：Alibaba Sentinel（暂时未用）\",\"服务监控：Spring Boot Admin\",\"数据缓存： Redis ，Redission\",\"数据库： MySQL\",\"JSON 序列化：Jackson & FastJson\",\"文件服务： Minio\"]},\"1502\":{\"h\":\"功能概述\",\"t\":[\"提供统一用户认证，租户管理、平台管理、菜单管理、API管理、用户管理、角色权限管理、日志管理等功能。支持应用自定义权限管理。\",\"租户之间数据相互隔离，对不同租户来说，只能操作属于自身的数据，而不能越界操作其他租户的数据，对不同租户的数据存储进行隔离，来保证不同租户的数据安全性。\"]},\"1503\":{\"h\":\"内置功能\",\"t\":[\"**租户管理：**被赋予服务使用权的企业租户（客户）。租户信息的创建、状态、有效时间等的维护\",\"**用户管理：**用户是系统操作者，该功能主要完成系统用户配置。包含第三方登录用户信息的管理，租户间的数据是完全隔离的。\",\"**租户角色管理：**平台角色的组合，为用户分配角色来授权用户可访问的平台\",\"**平台管理：**结合 OAuth2 机制，创建应用信息，申请 APP_KEY，Token 有效时间，权限范围等信息。\",\"**菜单管理：**可为每个平台创建平台所需的菜单（页面、功能、数据等）,绑定API接口\",\"**平台角色管理：**创建用户角色，为角色权限分配，设置角色菜单权限划分。\",\"**权限管理：**支持RBAC、ABAC的权限管理，可通过用户访问的路径进行鉴权。\",\"**API管理：**集成swagger，自动将服务接口持久化。同时支持手动添加API接口。\"]},\"1504\":{\"h\":\"技术实现方式\"},\"1505\":{\"h\":\"登录流程\"},\"1506\":{\"h\":\"用户面板\",\"t\":[\"用户在浏览器打开的后台登录地址{{gateway-host}}/auth/login,在登陆成功之后默认跳转到用户面板\",\"用户面板的入口地址需要配在用户中心管理平台的redirect_uri中，如http://10.142.51.100:9200/panel/index\",\"用户点击具体的应用，则跳转到三方应用（为用户设置的重定向地址第一个），第三方应用需\",\"发起{{gateway-host}}/auth/oauth2/authorize?response_type=code&client_id=客户端ID&redirect_uri=重定向地址，如何跳转，详见2.3.1.3单点登录时序图\"]},\"1507\":{\"h\":\"前端处理\"},\"1508\":{\"h\":\"授权码模式\",\"t\":[\"当前前端登录采用授权码模式，流程如下：\"]},\"1509\":{\"h\":\"单点登录说明\"},\"1510\":{\"h\":\"前端\"},\"1511\":{\"h\":\"后端\",\"t\":[\"采用微服务架构，分为auth认证服务、gateway网关服务、system用户系统服务。\"]},\"1512\":{\"h\":\"配置\"},\"1513\":{\"h\":\"网关服务\",\"t\":[\"spring: main: allow-bean-definition-overriding: true jackson: date-fromat: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 cloud: gateway: enabled: true routes: # 认证中心 - id: center-auth uri: lb://center-auth predicates: - Path=/auth/** filters: - StripPrefix=1 # 验证码处理 # - ValidateCodeGatewayFilter # 前端密码解密 #- PasswordDecoderFilter - id: center-system uri: lb://center-system predicates: - Path=/admin/** filters: - StripPrefix=1 security: default: domain: user.techease.com ignore: # 白名单 whites: - /auth/** - / # 忽略鉴权路径 auth: - serviceName: center-system method: GET uri: /user/v1/info - serviceName: center-system method: PUT uri: /user/v1/currentUserInfo - serviceName: center-system method: PUT uri: /user/v1/updateMail - serviceName: center-system method: PUT uri: /user/v1/updatePhone - serviceName: center-system method: GET uri: /notify/v1/send_code - serviceName: center-system method: GET uri: /loginLog/v1/page/current - serviceName: center-system method: GET uri: /client/v1/list - serviceName: center-system method: GET uri: /menu/v1/router - serviceName: center-system method: GET uri: /anyone/v1/userApis - serviceName: center-system method: GET uri: /anyone/v1/client/roles - serviceName: center-system method: GET uri: /menu/v1/menu/{clientId} - serviceName: center-system method: POST uri: /sysApi/v1/batch # 网关作为资源服务器的相关配置 techease: endpoint: gatewayUri: http://10.142.51.100:9100 jwkSetUri: http://10.142.51.100:9209/oauth2/jwks loginUri: http://10.142.51.100:9100/auth/login \"]},\"1514\":{\"h\":\"认证服务\",\"t\":[\"server: servlet: session: timeout: 2h cookie: name: CENTER-TICKET # Spring spring: # session: # store-type: redis thymeleaf: prefix: classpath:templates/ suffix: .html enabled: true mode: HTML #redis配置 redis: host: 10.142.51.100 password: redis_Techsel2o19 port: 1090 jackson: date-fromat: yyyy-MM-dd HH:mm:ss time-zone: GMT+8 management: endpoints: web: exposure: include: '*' # jwk配置 techease: oauth2: jwk: # STANDARD CUSTOM certificate: CUSTOM jksKeyStore: cert/techease.pfx jksKeyPassword: 123456 jksStorePassword: 123456 jksKeyAlias: techease # 端点配置 endpoint: gatewayServiceUri: http://10.142.51.100:9100 issuerUri: http://10.142.51.100:9100/auth tokenIntrospectionEndpoint: /token/check defaultClientId: a54efaae-56f3-441d-998e-542f9f57db9d # defaultRedirectUri: http://10.142.52.25:3100/%23/panel/index defaultRedirectUri: http://10.142.51.100:9200/%23/panel/index # 用户密码解密密钥 rsa: privateKey: | MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMb7baWJFLLZUVNc wF0SewQZWgbhMQnWIrBDkVPLKUt5TMEqD2b7jSoNACr0oupwMhK0DKWYebptdYzv +Z9faljuaNeJkSN5TKaHT8Oflc2Hi04Ix7uqW5HHyObNVfW8aRxAWd51t3NSqDV5 DJw9S/nZCx7r4Odi3MAWkfkv56QhAgMBAAECgYBzRxau4EvtkZlcAlAvm5VJOqa9 dZlDaZuPIpX/RaQW5Z9iCUwDDZkq031VZYU87OMVktoA1eUv7Fo93Ilxm4WwGXL7 ZxWkAma7ES+mVfutRtPxPxAIlqfwNK0qCNNqpJZWTkFEmA7Z0NsE6IGfc5seAN4z 7C0jQ6tzDqH0+i28AQJBAPX/mY7v+pk0/NvoHadkb4W+kokWBxtlBcX5/0iUJP7c acjSV5Pg9hTmDoZ9PqU5IQmNzI0xj80/LywS+Abc+akCQQDPEnk+zYgUV4uEfuZW CP98qs2112ltu313TsBRULvB91E8XCPJAIzHKlNe0+yADYzILeO4+T5xYFpCtVoU axG5AkAXHklBHJ5xbYBh7kNzKsYsTIea6H4Mfgb33xG1sW50oSQz4kimthqKRkCR NQ4BGwhWzIOvtTutb0Wwn6u9gWDZAkA5EbBUvLR6Vr5e39J/d69iHnjfWuT1lyy3 Cv856fQ1OwIqjoJWTU5/PY0In4OYryNTsEIIoriw6os1w2F2KyQRAkEAst903EQx Z9iMM4X3D5c9QjhBdcflObA3cDoQ8j7F/G42RT/O+bZSCPMVfeUEs/1J9GruNRXJ KaTXlVoLzNhrMQ== \"]},\"1515\":{\"h\":\"用户系统服务\",\"t\":[\"spring: redis: host: 10.142.51.100 password: redis_Techsel2o19 port: 1090 #数据库配置 datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://10.142.51.100:1170/usercenter?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=Asia/Shanghai username: root password: mysql_Techsel2o19 druid: initial-size: 2 max-active: 10 min-idle: 1 max-wait: 60000 time-between-log-stats-millis: 60000 min-evictable-idle-time-millis: 300000 pool-prepared-statements: true max-pool-prepared-statement-per-connection-size: 20 validation-query: SELECT 1 FROM DUAL test-on-borrow: false test-on-return: false test-while-idle: true time-between-eviction-runs-millis: 60000 max-open-prepared-statements: 20 filters: stat,wall stat-view-servlet: url-pattern: \\\"/druid/*\\\" #allow: 127.0.0.1,192.168.163.1 #deny: 192.168.1.73 reset-enable: false login-username: admin login-password: 123456 mybatis-plus: type-aliases-package: com.techease.authcenter.system.pojo.model,com.techease.authcenter.system.pojo.vo mapper-locations: classpath*:/mapper/*.xml configuration: jdbc-type-for-null: null map-underscore-to-camel-case: true log-impl: org.apache.ibatis.logging.stdout.StdOutImpl global-config: banner: false management: endpoints: web: exposure: include: '*' oss: type: 1 minioEndpoint: http://10.142.51.100:9000 minioAccessKey: minio minioSecretKey: minio123456 minioBucketName: usercenter # 身份证加解密密钥，密钥只能是16/24/32个字符 aes: secret: keys_techsel123$ # 用户密码解密密钥 rsa: privateKey: | MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMb7baWJFLLZUVNc wF0SewQZWgbhMQnWIrBDkVPLKUt5TMEqD2b7jSoNACr0oupwMhK0DKWYebptdYzv +Z9faljuaNeJkSN5TKaHT8Oflc2Hi04Ix7uqW5HHyObNVfW8aRxAWd51t3NSqDV5 DJw9S/nZCx7r4Odi3MAWkfkv56QhAgMBAAECgYBzRxau4EvtkZlcAlAvm5VJOqa9 dZlDaZuPIpX/RaQW5Z9iCUwDDZkq031VZYU87OMVktoA1eUv7Fo93Ilxm4WwGXL7 ZxWkAma7ES+mVfutRtPxPxAIlqfwNK0qCNNqpJZWTkFEmA7Z0NsE6IGfc5seAN4z 7C0jQ6tzDqH0+i28AQJBAPX/mY7v+pk0/NvoHadkb4W+kokWBxtlBcX5/0iUJP7c acjSV5Pg9hTmDoZ9PqU5IQmNzI0xj80/LywS+Abc+akCQQDPEnk+zYgUV4uEfuZW CP98qs2112ltu313TsBRULvB91E8XCPJAIzHKlNe0+yADYzILeO4+T5xYFpCtVoU axG5AkAXHklBHJ5xbYBh7kNzKsYsTIea6H4Mfgb33xG1sW50oSQz4kimthqKRkCR NQ4BGwhWzIOvtTutb0Wwn6u9gWDZAkA5EbBUvLR6Vr5e39J/d69iHnjfWuT1lyy3 Cv856fQ1OwIqjoJWTU5/PY0In4OYryNTsEIIoriw6os1w2F2KyQRAkEAst903EQx Z9iMM4X3D5c9QjhBdcflObA3cDoQ8j7F/G42RT/O+bZSCPMVfeUEs/1J9GruNRXJ KaTXlVoLzNhrMQ== \"]},\"1516\":{\"h\":\"认证服务\",\"t\":[\"基于Spring Authorization Server组件，对客户端验证授权，用户认证后，签发token。\"]},\"1517\":{\"h\":\"客户端认证\",\"t\":[\"调用spring组件中ClientSecretAuthenticationProvider的authenticate方法，对客户端进行认证。\",\"public final class ClientSecretAuthenticationProvider implements AuthenticationProvider { public Authentication authenticate(Authentication authentication) throws AuthenticationException { OAuth2ClientAuthenticationToken clientAuthentication = (OAuth2ClientAuthenticationToken) authentication; return new OAuth2ClientAuthenticationToken(registeredClient, clientAuthentication.getClientAuthenticationMethod(), clientAuthentication.getCredentials()); } } \"]},\"1518\":{\"h\":\"用户认证\",\"t\":[\"调用CenterUserDetailsAuthenticationProvider中的authenticate、additionalAuthenticationChecks方法，查询用户信息，校验用户密码\",\"public class CenterUserDetailsAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider { protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException { if (authentication.getCredentials() == null) { this.logger.debug(\\\"Failed to authenticate since no credentials provided\\\"); throw new BadCredentialsException(this.messages.getMessage(\\\"AbstractUserDetailsAuthenticationProvider.badCredentials\\\", \\\"Bad credentials\\\")); } else { String presentedPassword = authentication.getCredentials().toString(); //使用私钥对密码进行解密 try { presentedPassword = RSAUtil.decryptByPrivate(presentedPassword, userDetailsService.getPrivateKey()); } catch (Exception e) { throw new BadCredentialsException(this.messages.getMessage(\\\"AbstractUserDetailsAuthenticationProvider.badCredentials\\\", \\\"Bad credentials\\\")); } if(userDetails instanceof CenterUser){ String salt = ((CenterUser) userDetails).getSalt(); presentedPassword = presentedPassword+salt; } if (!this.passwordEncoder.matches(presentedPassword, userDetails.getPassword())) { this.logger.debug(\\\"Failed to authenticate since password does not match stored value\\\"); throw new BadCredentialsException(this.messages.getMessage(\\\"AbstractUserDetailsAuthenticationProvider.badCredentials\\\", \\\"Bad credentials\\\")); } } } } \"]},\"1519\":{\"h\":\"Token签发\",\"t\":[\"调用spring组件中OAuth2AuthorizationCodeAuthenticationProvider方法对授权码code，重定向uri校验后，使用自定义token构造器构造token\",\"public final class OAuth2AuthorizationCodeAuthenticationProvider implements AuthenticationProvider { public Authentication authenticate(Authentication authentication) throws AuthenticationException { //.... OAuth2TokenContext tokenContext = tokenContextBuilder.tokenType(OAuth2TokenType.ACCESS_TOKEN).build(); OAuth2Token generatedAccessToken = this.tokenGenerator.generate(tokenContext); //.... } } \",\"public class CenterJwtGenerator implements OAuth2TokenGenerator<Jwt> { public Jwt generate(OAuth2TokenContext context) { } } \"]},\"1520\":{\"h\":\"网关服务\",\"t\":[\"基于Spring Cloud Gateway、spring security、Spring Cloud Loadbalancer组件，拦截用户请求。对用户访问的路径鉴权，校验token后，将请求转发到对应的服务。\"]},\"1521\":{\"h\":\"Token校验\",\"t\":[\"调用CenterOpaqueTokenIntrospector的introspect方法，对请求头中的token解析校验。\",\"public class CenterOpaqueTokenIntrospector implements ReactiveOpaqueTokenIntrospector { public Mono<OAuth2AuthenticatedPrincipal> introspect(String token) { if(StringUtils.isBlank(token)){ return Mono.error(new InvalidBearerTokenException(\\\"token为空\\\")); } String tokenType = this.judgeTokenType(token); if(StringUtils.isBlank(tokenType)){ return Mono.error(new InvalidBearerTokenException(\\\"token格式有误\\\")); } //TODO 若是jwt在这做解析，无法做登出，当前统一从数据库获取 CenterUser user = null; switch(tokenType){ case TOKEN_TYPE_SELF: user = this.dealJwt(token); break; case TOKEN_TYPE_REF: user = this.dealRef(token); break; default: break; } if(user == null){ throw new InvalidBearerTokenException(\\\"token 无效\\\"); } return Mono.just(user); } } \"]},\"1522\":{\"h\":\"鉴权管理器\",\"t\":[\"调用AuthorizationManager的checkUri方法对用户路径鉴权，根据白名单忽略鉴权。\",\"public class AuthorizationManager implements ReactiveAuthorizationManager<AuthorizationContext> { private boolean checkUri(ServerWebExchange exchange,Authentication auth){ ServerHttpRequest request = exchange.getRequest(); String method= request.getMethodValue(); ServerWebExchangeUtils.addOriginalRequestUrl(exchange, request.getURI()); String rawPath = request.getURI().getRawPath(); String newPath = \\\"/\\\" + Arrays.stream(StringUtils.tokenizeToStringArray(rawPath, \\\"/\\\")).skip(1L) .collect(Collectors.joining(\\\"/\\\")); CenterUser centerUser = (CenterUser)auth.getPrincipal(); SecurityContextHolder.setUserId(centerUser.getUserId()); SecurityContextHolder.setTenantId(centerUser.getTenantId()); SecurityContextHolder.setUsername(centerUser.getUsername()); String[] urlArray = rawPath.split(\\\"/\\\"); String path = urlArray[1]; String serviceName = initService.getServiceByPath(path); if(urlProperties.isIgnoreAuth(serviceName,method,newPath)){ if(log.isInfoEnabled()){ log.info(\\\"白名单地址：service:{},path:{},method:{}\\\",serviceName,newPath,method); } return true; } Future<Result<Boolean>> resultFuture = anyoneApi.checkUri(centerUser.getUserId(),method,newPath,serviceName); Result<Boolean> result = null; try{ result = resultFuture.get(); }catch(Exception e){ log.error(\\\"Exception:\\\",e); throw new InvalidBearerTokenException(\\\"鉴权失败\\\"); } if(result.getCode()!= BizCodeEnum.SUCCESS.getCode()){ log.error(\\\"鉴权失败：service:{},path:{},method:{},userId:{}\\\",serviceName,newPath,method,centerUser.getUserId()); return false; } return result.getData(); } } \"]},\"1523\":{\"h\":\"用户信息写入请求头\",\"t\":[\"使用全局过滤器将token解析得到的用户信息写入到要转发的请求头中\",\"public class AuthGlobalFilter implements GlobalFilter, Ordered { @Override public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) { ServerHttpRequest request = exchange.getRequest(); ServerHttpRequest.Builder mutate = request.mutate(); String username = SecurityContextHolder.getUsername(); String userId = SecurityContextHolder.getUserId(); String tenantId = SecurityContextHolder.getTenantId(); //把信息写到头部 addHeader(mutate, SecurityConstants.DETAILS_USER_ID,userId); addHeader(mutate, SecurityConstants.DETAILS_TENANT_ID,tenantId); addHeader(mutate, SecurityConstants.DETAILS_USERNAME,username); SecurityContextHolder.remove(); return chain.filter(exchange.mutate().request(mutate.build()).build()); } private void addHeader(ServerHttpRequest.Builder mutate, String name, Object value) { if (value == null) { return; } String valueStr = value.toString(); mutate.header(name, valueStr); } @Override public int getOrder() { return 0; } } \"]},\"1524\":{\"h\":\"用户系统服务\",\"t\":[\"基于springboot、 Apache Mybatis 、Mybatis Plus、mysql等技术，提供租户管理、平台管理、菜单管理、API管理、用户管理、角色权限管理、日志管理等功能\"]},\"1525\":{\"h\":\"请求头拦截器\",\"t\":[\"通过拦截器HeaderInterceptor，获取用户信息存放到上下文中\",\"public class HeaderInterceptor implements AsyncHandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { if (!(handler instanceof HandlerMethod)) { return true; } SecurityContextHolder.setUserId(WebUtils.getHeader(request, SecurityConstants.DETAILS_USER_ID)); SecurityContextHolder.setUsername(WebUtils.getHeader(request,SecurityConstants.DETAILS_USERNAME)); SecurityContextHolder.setTenantId(WebUtils.getHeader(request,SecurityConstants.DETAILS_TENANT_ID)); //SecurityContextHolder.setTenantId(\\\"19264ac3de444b30bab436397daf900a\\\"); //SecurityContextHolder.setUserId(\\\"43b59399d55346dca94a80e9e77838f6\\\"); return true; } } \"]},\"1526\":{\"h\":\"全局异常处理器\",\"t\":[\"自定义全局异常处理器CustomExceptionHandler对参数异常、业务异常、系统异常统一处理\",\"@ControllerAdvice public class CustomExceptionHandler { @ExceptionHandler(value= BindException.class) @ResponseBody public Result bindExceptionHandler(HttpServletRequest request, Exception e){ log.error(\\\"[参数校验异常] \\\",e); BindException ex = (BindException)e; List<ObjectError> errors = ex.getAllErrors(); ObjectError error= errors.get(0); String msg = error.getDefaultMessage(); return Result.buildCodeAndMsg(BizCodeEnum.PARAM_ERROR.getCode(),msg); } @ExceptionHandler(value= BizException.class) @ResponseBody public Result bizExceptionHandle(BizException e){ log.error(\\\"[业务异常] \\\",e); return Result.buildCodeAndMsg(e.getCode(),e.getMsg()); } @ExceptionHandler(value= Exception.class) @ResponseBody public Result exceptionHandle(Exception e){ log.error(\\\"[系统异常] \\\",e); return Result.buildResult(BizCodeEnum.INNER_ERROR); } } \"]},\"1527\":{\"h\":\"后端接口\"},\"1528\":{\"h\":\"Auth管理\"},\"1529\":{\"h\":\"接口功能\",\"t\":[\"token获取\",\"token校验\",\"用户登出\",\"获取用户指定平台角色信息\",\"获取用户可以访问地址\"]},\"1530\":{\"h\":\"接口信息\"},\"1531\":{\"h\":\"1、token获取\",\"t\":[\"注：刷新令牌也是该接口，将grant_type改为refresh_token 客户端模式，将grant_type改为client_credentials\",\"请求路径\",\"/auth/oauth2/token POST \",\"请求头\",\"ContentType：`application/x-www-form-urlencoded` \",\"名称\",\"必填\",\"描述\",\"示例值\",\"Authorization\",\"是\",\"base64(clientId:clientSecret)\",\"Basic Y2xpZW50SWQ6MTIzNDU2\",\"请求参数：Body Parameter\",\"名称\",\"必填\",\"类型\",\"描述\",\"示例值\",\"grant_type\",\"是\",\"string\",\"认证方式：authorization_code，refresh_token，client_credentials\",\"authorization_code/refresh_token\",\"code\",\"否\",\"string\",\"授权码模式必须，登陆成功后回调地址上携带的code，5分钟有效\",\"TyT5ED77aD8DLh4oqd27bXTg1KJ-yWU_ V3VuvsxpL2I4O-AqklVMkjxnmWWy69o NvkKXP4QMszCfQeDxQUpbSRNRHYys- G8r1nz670DASwqdL89AljK_EKMZDtgCQbxZ\",\"redirect_uri\",\"否\",\"string\",\"授权码模式必须，回调地址\",\"refresh_token\",\"否\",\"string\",\"grant_type为refresh_token时必须\",\"响应参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"code\",\"Integer\",\"是\",\"0\",\"msg\",\"string\",\"是\",\"SUCCESS\",\"data\",\"string\",\"是\",\"access_token\",\"string\",\"是\",\"token,后续请求都需要携带的值\",\"expire_in\",\"string\",\"是\",\"token时效，单位S\",\"36000\",\"refresh_token\",\"string\",\"否\",\"刷新令牌，若支持，在token过期用其获取新的token\",\"scope\",\"string\",\"否\",\"授权范围\",\"read write\",\"token_type\",\"string\",\"是\",\"令牌类型\",\"Bearer\",\"响应示例\",\"{ \\\"code\\\": \\\"0\\\", \\\"msg\\\": \\\"SUCCESS\\\", \\\"data\\\": { \\\"access_token\\\": \\\"\\\", \\\"expire_in\\\": \\\"36000\\\", \\\"refresh_token\\\": \\\"atmTBbVonrhL5efPJyzO8Lh_06tbdBuwKNiCAFO1uVMdVS3uvuwTRr3h6mrvQMxY21omigDLuef81QwckA0jQKat5iLJE-BqmbrTK_Je7XmpkzA2wJazChr57UFJ8jUV\\\", \\\"scope\\\": \\\"read write\\\", \\\"token_type\\\": \\\"Bearer\\\" } } \"]},\"1532\":{\"h\":\"2、token校验\",\"t\":[\"请求路径\",\"/auth/token/check GET \",\"请求头\",\"ContentType：application/x-www-form-urlencoded \",\"请求参数: Query Parameter\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"token\",\"string\",\"是\",\"令牌\",\"响应参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"code\",\"number\",\"是\",\"有效，返回0;其他返回401\",\"0\",\"data\",\"object\",\"是\",\"accessToken\",\"object\",\"是\",\"令牌相关信息\",\"tokenValue\",\"string\",\"是\",\"令牌值\",\"tokenType\",\"string\",\"是\",\"令牌类型\",\"Bearer\",\"issuedAt\",\"string\",\"是\",\"生成时间\",\"2022-08-26 14:30:27\",\"expiresAt\",\"string\",\"是\",\"过期时间\",\"2022-08-27 00:30:27\",\"scopes\",\"array\",\"是\",\"[“read”,“write”]\",\"refreshToken\",\"object\",\"是\",\"刷新令牌\",\"tokenValue\",\"string\",\"是\",\"issuedAt\",\"string\",\"是\",\"2022-08-26 14:30:27\",\"expiresAt\",\"string\",\"是\",\"2022-08-30 18:30:27\",\"claims\",\"object\",\"是\",\"sub\",\"string\",\"是\",\"admin\",\"aud\",\"array\",\"是\",\"[“clientId”]\",\"nbf\",\"string\",\"是\",\"2022-08-26T06:30:27.060Z\",\"scope\",\"array\",\"是\",\"[“read”,“write”]\",\"iss\",\"string\",\"是\",\"http://127.0.0.1:9000/auth\",\"exp\",\"string\",\"是\",\"2022-08-26T16:30:27.060Z\",\"iat\",\"string\",\"是\",\"2022-08-26T06:30:27.060Z\",\"user\",\"object\",\"是\",\"username\",\"string\",\"是\",\"admin\",\"accountNonExpired\",\"boolean\",\"是\",\"true\",\"accountNonLocked\",\"boolean\",\"是\",\"false\",\"credentialsNonExpired\",\"boolean\",\"是\",\"true\",\"enabled\",\"boolean\",\"是\",\"true\",\"userId\",\"string\",\"是\",\"用户ID\",\"tenantId\",\"string\",\"是\",\"租户ID\",\"phone\",\"object\",\"是\",\"手机号\",\"null\",\"email\",\"object\",\"是\",\"邮箱\",\"null\",\"name\",\"string\",\"是\",\"姓名\",\"admin\",\"attributes\",\"object\",\"是\",\"msg\",\"string\",\"是\",\"SUCCESS\",\"响应示例\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"accessToken\\\": { \\\"tokenValue\\\": \\\"\\\", \\\"tokenType\\\": \\\"Bearer\\\", \\\"issuedAt\\\": \\\"2022-08-26 14:30:27\\\", \\\"expiresAt\\\": \\\"2022-08-27 00:30:27\\\", \\\"scopes\\\": [ \\\"read\\\", \\\"write\\\" ] }, \\\"refreshToken\\\": { \\\"tokenValue\\\": \\\"atmTBbVonrhL5efPJyzO8Lh_06tbdBuwKNiCAFO1uVMdVS3uvuwTRr3h6mrvQMxY21omigDLuef81QwckA0jQKat5iLJE-BqmbrTK_Je7XmpkzA2wJazChr57UFJ8jUV\\\", \\\"issuedAt\\\": \\\"2022-08-26 14:30:27\\\", \\\"expiresAt\\\": \\\"2022-08-30 18:30:27\\\" }, \\\"claims\\\": { \\\"sub\\\": \\\"admin\\\", \\\"aud\\\": [ \\\"clientId\\\" ], \\\"nbf\\\": \\\"2022-08-26T06:30:27.060Z\\\", \\\"scope\\\": [ \\\"read\\\", \\\"write\\\" ], \\\"iss\\\": \\\"http://127.0.0.1:9000/auth\\\", \\\"exp\\\": \\\"2022-08-26T16:30:27.060Z\\\", \\\"iat\\\": \\\"2022-08-26T06:30:27.060Z\\\", \\\"user\\\": { \\\"username\\\": \\\"admin\\\", \\\"accountNonExpired\\\": true, \\\"accountNonLocked\\\": false, \\\"credentialsNonExpired\\\": true, \\\"enabled\\\": true, \\\"userId\\\": \\\"\\\", \\\"tenantId\\\": \\\"\\\", \\\"phone\\\": \\\"null\\\", \\\"email\\\": \\\"null\\\", \\\"name\\\": \\\"admin\\\", \\\"attributes\\\": {} } } }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1533\":{\"h\":\"3、用户退出\",\"t\":[\"请求路径\",\"/auth/token/logout DELETE \",\"请求头\",\"ContentType：application/x-www-form-urlencoded \",\"名称\",\"必填\",\"描述\",\"示例值\",\"Authorization\",\"是\",\"token令牌\",\"Bearer eyJraWQiOiI5NmIxZWIyZi0xMzci9.eyJzd\",\"请求参数\",\"响应参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"code\",\"number\",\"是\",\"0\",\"data\",\"boolean\",\"是\",\"true\",\"msg\",\"string\",\"是\",\"SUCCESS\",\"响应示例\",\"{ \\\"code\\\": 0, \\\"data\\\": true, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1534\":{\"h\":\"4、获取用户指定平台角色信息\",\"t\":[\"请求路径\",\" /admin/anyone/v1/client/roles GET \",\"请求头\",\"ContentType：application/x-www-form-urlencoded \",\"名称\",\"必填\",\"描述\",\"示例值\",\"Authorization\",\"是\",\"Access_Token\",\"Bearer Y2xpZW50SWQ6MTIzNDU2\",\"请求参数：Query\",\"名称\",\"必填\",\"类型\",\"描述\",\"示例值\",\"clientId\",\"是\",\"string\",\"客户端ID\",\"响应参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"code\",\"string\",\"是\",\"0\",\"msg\",\"string\",\"是\",\"SUCCESS\",\"data\",\"string\",\"是\",\"响应示例\",\"{ \\\"code\\\": \\\"0\\\", \\\"msg\\\": \\\"SUCCESS\\\", \\\"data\\\": [ \\\"USERCORE_SUPER_ADMIN\\\" ] } \"]},\"1535\":{\"h\":\"5、获取用户可以访问的地址\",\"t\":[\"请求路径\",\"/admin/anyone/v1/userApis GET \",\"请求头\",\"ContentType：application/x-www-form-urlencoded \",\"名称\",\"必填\",\"描述\",\"示例值\",\"Authorization\",\"是\",\"Access_Token\",\"Bearer Y2xpZW50SWQ6MTIzNDU2\",\"请求参数\",\"响应参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"code\",\"Number\",\"是\",\"0\",\"msg\",\"string\",\"是\",\"SUCCESS\",\"data\",\"Array\",\"是\",\"uri\",\"string\",\"地址\",\"/menu/v1/menu/{id}\",\"serviceName\",\"string\",\"服务名称\",\"center-system\",\"method\",\"string\",\"请求方式\",\"GET\",\"响应示例\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"uri\\\": \\\"/menu/v1/menu/{id}\\\", \\\"serviceName\\\": \\\"center-system\\\", \\\"method\\\": \\\"GET\\\" } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1536\":{\"h\":\"租户管理\"},\"1537\":{\"h\":\"接口功能\",\"t\":[\"新增租户时创建默认用户，绑定默认租户角色\",\"租户信息增删改查\",\"重置租户默认用户密码\"]},\"1538\":{\"h\":\"接口信息\"},\"1539\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/tenant/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"name\",\"string\",\"是\",\"租户名称\",\"code\",\"string\",\"是\",\"租户编码\",\"status\",\"string\",\"是\",\"租户状态，启用1 禁用0\",\"tenantDomain\",\"string\",\"是\",\"租户域名\",\"startTime\",\"string\",\"是\",\"租户开始时间（yyyy-MM-dd HH:mm:ss）\",\"endTime\",\"string\",\"是\",\"租户结束时间（yyyy-MM-dd HH:mm:ss）\",\"username\",\"string\",\"是\",\"租户默认用户名\",\"password\",\"string\",\"是\",\"租户密码\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1540\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/tenant/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"name\",\"string\",\"否\",\"租户名称\",\"code\",\"string\",\"否\",\"租户编码\",\"status\",\"string\",\"否\",\"租户状态，启用1 禁用0\",\"tenantDomain\",\"string\",\"否\",\"租户域名\",\"startTime\",\"string\",\"否\",\"租户开始时间（yyyy-MM-dd HH:mm:ss）\",\"endTime\",\"string\",\"否\",\"租户结束时间（yyyy-MM-dd HH:mm:ss）\",\"username\",\"string\",\"否\",\"租户默认用户名\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1541\":{\"h\":\"3、分页查询\",\"t\":[\"请求路径\",\"/admin/tenant/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"name\",\"string\",\"否\",\"租户名称\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 2, \\\"list\\\": [ { \\\"id\\\": \\\"1587041627729911810\\\", \\\"name\\\": \\\"whtest\\\", \\\"code\\\": \\\"whtest\\\", \\\"tenantDomain\\\": \\\"www.baidu.com\\\", \\\"startTime\\\": \\\"2022-10-01 00:00:00\\\", \\\"endTime\\\": \\\"2023-10-07 23:59:59\\\", \\\"status\\\": \\\"1\\\", \\\"username\\\": \\\"whtest\\\", \\\"logoUri\\\": null }, { \\\"id\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"name\\\": \\\"泰易云\\\", \\\"code\\\": \\\"default_tenant\\\", \\\"tenantDomain\\\": \\\"user.techease.com\\\", \\\"startTime\\\": \\\"2022-07-20 16:57:26\\\", \\\"endTime\\\": \\\"2030-12-31 23:59:59\\\", \\\"status\\\": \\\"1\\\", \\\"username\\\": \\\"admin\\\", \\\"logoUri\\\": null } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1542\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/tenant/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1543\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/tenant/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"string\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1544\":{\"h\":\"6、修改租户默认密码\",\"t\":[\"请求路径\",\"/admin/tenant/v1/updateDefaultPwd PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"租户id\",\"currentPassword\",\"string\",\"是\",\"当前用户密码\",\"password\",\"string\",\"是\",\"用户密码\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1545\":{\"h\":\"用户管理\"},\"1546\":{\"h\":\"接口功能\",\"t\":[\"用户信息增删改查\",\"用户绑定角色，角色绑定用户\",\"修改密码，个人基本信息\"]},\"1547\":{\"h\":\"接口信息\"},\"1548\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/user/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"username\",\"string\",\"是\",\"账号名\",\"password\",\"string\",\"是\",\"账号密码\",\"nickName\",\"string\",\"否\",\"昵称\",\"realName\",\"string\",\"否\",\"用户姓名\",\"phone\",\"string\",\"否\",\"手机号\",\"email\",\"string\",\"否\",\"邮箱\",\"idCard\",\"string\",\"否\",\"身份证号\",\"gender\",\"string\",\"否\",\"性别\",\"lockFlag\",\"string\",\"否\",\"用户是否锁定\",\"avatarUrl\",\"string\",\"否\",\"用户头像uri\",\"idExtra\",\"string\",\"否\",\"身份附加信息\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1549\":{\"h\":\"2、修改用户基本信息\",\"t\":[\"请求路径\",\"/admin/user/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"userId\",\"string\",\"是\",\"唯一id\",\"username\",\"string\",\"否\",\"账号名\",\"nickName\",\"string\",\"否\",\"昵称\",\"realName\",\"string\",\"否\",\"用户姓名\",\"phone\",\"string\",\"否\",\"手机号\",\"email\",\"string\",\"否\",\"邮箱\",\"idCard\",\"string\",\"否\",\"身份证号\",\"gender\",\"string\",\"否\",\"性别\",\"lockFlag\",\"string\",\"否\",\"用户是否锁定\",\"avatarUrl\",\"string\",\"否\",\"用户头像uri\",\"idExtra\",\"string\",\"否\",\"身份附加信息\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1550\":{\"h\":\"3、分页获取用户数据\",\"t\":[\"请求路径\",\"/admin/user/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"username\",\"string\",\"否\",\"账号名\",\"phone\",\"string\",\"否\",\"手机号\",\"email\",\"string\",\"否\",\"邮箱\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 1, \\\"list\\\": [ { \\\"userId\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"username\\\": \\\"admin\\\", \\\"phone\\\": \\\"17356475181\\\", \\\"email\\\": \\\"3204835798@qq.com\\\", \\\"idCard\\\": \\\"7dbc56c6fad129761a06b84b7f5e811076b0da9d99cf7cffe832fdee7a7c2b46\\\", \\\"idExtra\\\": \\\"江苏省南京市\\\", \\\"nickName\\\": \\\"橘子皮\\\", \\\"realName\\\": \\\"王五\\\", \\\"avatarUrl\\\": \\\"http://10.142.51.100:9000/usercenter/user/2022/09/27/510af772b398499d84e910b82ef000dc.jpg\\\", \\\"gender\\\": 1, \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"lockFlag\\\": \\\"0\\\", \\\"createTime\\\": \\\"2022-07-28 15:50:45\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1551\":{\"h\":\"4、删除用户\",\"t\":[\"请求路径\",\"/admin/user/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id(拼在路径中)\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1552\":{\"h\":\"5、修改用户状态\",\"t\":[\"请求路径\",\"/admin/user/v1/changeStatus PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"userId\",\"string\",\"是\",\"用户id\",\"status\",\"string\",\"是\",\"锁定状态\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1553\":{\"h\":\"6、修改密码\",\"t\":[\"请求路径\",\"/admin/user/v1/changePwd PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"oldPwd\",\"string\",\"是\",\"原密码\",\"newPwd\",\"string\",\"是\",\"新密码\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1554\":{\"h\":\"7、修改个人基本信息\",\"t\":[\"请求路径\",\"/admin/user/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"nickName\",\"string\",\"否\",\"昵称\",\"realName\",\"string\",\"否\",\"用户姓名\",\"idCard\",\"string\",\"否\",\"身份证号\",\"gender\",\"string\",\"否\",\"性别\",\"avatarUrl\",\"string\",\"否\",\"用户头像uri\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1555\":{\"h\":\"8、用户角色绑定\",\"t\":[\"请求路径\",\"/admin/user/v1/roleBind PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"userId\",\"string\",\"是\",\"用户id\",\"roleIdList\",\"list\",\"是\",\"角色id列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1556\":{\"h\":\"租户角色管理\"},\"1557\":{\"h\":\"接口功能\",\"t\":[\"租户角色增删改查\",\"获取所属租户所有客户端角色数据\",\"获取指定组合角色已绑定的客户端角色\",\"租户角色绑定客户端角色\"]},\"1558\":{\"h\":\"接口信息\"},\"1559\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"roleName\",\"string\",\"是\",\"角色名称\",\"roleCode\",\"string\",\"是\",\"角色编码\",\"roleDesc\",\"string\",\"否\",\"角色描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1560\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"roleId\",\"string\",\"是\",\"角色id\",\"roleName\",\"string\",\"否\",\"角色名称\",\"roleCode\",\"string\",\"否\",\"角色编码\",\"roleDesc\",\"string\",\"否\",\"角色描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1561\":{\"h\":\"3、分页查询租户角色\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"roleName\",\"string\",\"否\",\"角色名称\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 3, \\\"list\\\": [ { \\\"roleId\\\": \\\"1554767453009256449\\\", \\\"roleName\\\": \\\"管理员\\\", \\\"roleCode\\\": \\\"DEAULT_ADMIN\\\", \\\"roleDesc\\\": \\\"角色描述：admin用户管理员\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"roleId\\\": \\\"1572030862742589442\\\", \\\"roleName\\\": \\\"默认租户管理员\\\", \\\"roleCode\\\": \\\"TENANT_DEFAULT_ADMIN\\\", \\\"roleDesc\\\": \\\"租户默认用户中心平台管理员\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"roleId\\\": \\\"1585533634798510081\\\", \\\"roleName\\\": \\\"陈晰测试啊\\\", \\\"roleCode\\\": \\\"陈晰测试啊\\\", \\\"roleDesc\\\": \\\"陈晰测试啊\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"defaultFlag\\\": \\\"0\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1562\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1563\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"list\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1564\":{\"h\":\"6、获取所属租户所有客户端角色数据\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1/clientRole/list GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"clientId\\\": \\\"a54efaae-56f3-441d-998e-542f9f57db9d\\\", \\\"clientName\\\": \\\"用户中心\\\", \\\"roleList\\\": [ { \\\"id\\\": \\\"1572039569111060481\\\", \\\"name\\\": \\\"超级管理员\\\", \\\"code\\\": \\\"USERCORE_SUPER_ADMIN\\\", \\\"desc\\\": \\\"用户中心管理员\\\", \\\"createBy\\\": \\\"\\\", \\\"updateBy\\\": \\\"\\\", \\\"createTime\\\": \\\"2022-09-20 09:46:55\\\", \\\"updateTime\\\": \\\"2022-10-11 16:15:04\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": null, \\\"clientName\\\": null, \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"id\\\": \\\"1572045774676103169\\\", \\\"name\\\": \\\"默认租户管理员\\\", \\\"code\\\": \\\"DEFAULT_TENANT_ADMIN\\\", \\\"desc\\\": \\\"默认租户用户拥有的用户中心权限\\\", \\\"createBy\\\": \\\"\\\", \\\"updateBy\\\": \\\"\\\", \\\"createTime\\\": \\\"2022-09-20 10:11:35\\\", \\\"updateTime\\\": \\\"2022-10-11 16:15:10\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": null, \\\"clientName\\\": null, \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"id\\\": \\\"1585534221669720065\\\", \\\"name\\\": \\\"陈晰测试\\\", \\\"code\\\": \\\"陈晰测试\\\", \\\"desc\\\": \\\"陈晰测试\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateBy\\\": \\\"\\\", \\\"createTime\\\": \\\"2022-10-27 15:29:51\\\", \\\"updateTime\\\": \\\"2022-10-28 10:00:58\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": null, \\\"clientName\\\": null, \\\"defaultFlag\\\": \\\"0\\\" } ] } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1565\":{\"h\":\"7、获取指定组合角色已绑定的客户端角色\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1/bound/list/{id} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"a54efaae-56f3-441d-998e-542f9f57db9d\\\": [ { \\\"id\\\": \\\"1572039569111060481\\\", \\\"name\\\": \\\"超级管理员\\\", \\\"code\\\": \\\"USERCORE_SUPER_ADMIN\\\", \\\"desc\\\": \\\"用户中心管理员\\\", \\\"createBy\\\": \\\"\\\", \\\"updateBy\\\": \\\"\\\", \\\"createTime\\\": \\\"2022-09-20 09:46:55\\\", \\\"updateTime\\\": \\\"2022-10-11 16:15:04\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": \\\"a54efaae-56f3-441d-998e-542f9f57db9d\\\", \\\"clientName\\\": \\\"用户中心\\\", \\\"defaultFlag\\\": \\\"1\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1566\":{\"h\":\"8、租户端角色绑定客户端角色\",\"t\":[\"请求路径\",\"/admin/tenant/role/v1/binding POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"roleId\",\"string\",\"是\",\"租户角色id\",\"clientRoleIdList\",\"list\",\"是\",\"平台角色id列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1567\":{\"h\":\"平台管理\"},\"1568\":{\"h\":\"接口功能\",\"t\":[\"平台信息增删改查\",\"用户id获取关联平台\",\"修改平台密码\"]},\"1569\":{\"h\":\"接口信息\"},\"1570\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/client/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"clientId\",\"string\",\"是\",\"平台id\",\"clientSecret\",\"string\",\"是\",\"平台密钥\",\"clientSecretExpiresAt\",\"string\",\"是\",\"密钥过期时间（yyyy-MM-dd HH:mm:ss）\",\"clientName\",\"string\",\"是\",\"平台名称\",\"clientAuthenticationMethods\",\"string\",\"是\",\"认证方式(多个以英文，分隔)\",\"basic,client_secret_basic\",\"authorizationGrantTypes\",\"string\",\"是\",\"授权方式(多个以英文，分隔)\",\"authorization_code,client_credentials\",\"redirectUris\",\"string\",\"是\",\"重定向地址(多个以英文，分隔)\",\"accessTokenTimeToLive\",\"number\",\"是\",\"访问令牌时间（单位s）\",\"36000\",\"refreshTokenTimeToLive\",\"number\",\"是\",\"刷新令牌时间(单位s)\",\"72000\",\"metaJson\",\"string\",\"否\",\"meta信息\",\"scopes\",\"string\",\"否\",\"访问范围\",\"info,write,read\",\"jwkSetUrl\",\"string\",\"否\",\"jwkSetUrl\",\"tokenEndpointAuthenticationSigningAlgorithm\",\"string\",\"否\",\"签名算法\",\"RS256\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1571\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/client/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"id\",\"string\",\"是\",\"唯一id\",\"clientId\",\"string\",\"是\",\"平台标识\",\"clientSecret\",\"string\",\"是\",\"平台密钥\",\"clientSecretExpiresAt\",\"string\",\"是\",\"密钥过期时间（yyyy-MM-dd HH:mm:ss）\",\"clientName\",\"string\",\"是\",\"平台名称\",\"clientAuthenticationMethods\",\"string\",\"是\",\"认证方式(多个以英文，分隔)\",\"basic,client_secret_basic\",\"authorizationGrantTypes\",\"string\",\"是\",\"授权方式(多个以英文，分隔)\",\"authorization_code,client_credentials\",\"redirectUris\",\"string\",\"是\",\"重定向地址(多个以英文，分隔)\",\"accessTokenTimeToLive\",\"number\",\"是\",\"访问令牌时间（单位s）\",\"36000\",\"refreshTokenTimeToLive\",\"number\",\"是\",\"刷新令牌时间(单位s)\",\"72000\",\"metaJson\",\"string\",\"否\",\"meta信息\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1572\":{\"h\":\"3、分页查询\",\"t\":[\"请求路径\",\"/admin/tenant/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"clientName\",\"string\",\"否\",\"平台名称\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 1, \\\"list\\\": [ { \\\"id\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": \\\"a54efaae-56f3-441d-998e-542f9f57db9d\\\", \\\"clientName\\\": \\\"用户中心\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"imageUri\\\": \\\"http://10.142.51.100:9000/usercenter/client/2022/09/30/8198c1fd3f6e4a4e9683d6aa24e1496e.png\\\", \\\"redirectUris\\\": null } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1573\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/tenant/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1574\":{\"h\":\"5、获取指定用户关联平台\",\"t\":[\"请求路径\",\"/admin/client/v1/list/{id} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"id(拼在路径中)\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"id\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"clientId\\\": \\\"a54efaae-56f3-441d-998e-542f9f57db9d\\\", \\\"clientName\\\": \\\"用户中心\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"imageUri\\\": \\\"http://10.142.51.100:9000/usercenter/client/2022/09/30/8198c1fd3f6e4a4e9683d6aa24e1496e.png\\\", \\\"redirectUris\\\": \\\"http://10.142.51.100:9200/#/app/index\\\" } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1575\":{\"h\":\"6、修改平台密码\",\"t\":[\"请求路径\",\"/admin/tenant/v1/updateDefaultPwd PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"password\",\"string\",\"是\",\"当前用户密码\",\"clientSecret\",\"string\",\"是\",\"平台密钥\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1576\":{\"h\":\"平台菜单管理\"},\"1577\":{\"h\":\"接口功能\",\"t\":[\"平台菜单增删改查\",\"平台标识clientId查询菜单树\",\"平台标识clientId查询前端路由信息\",\"获取当前用户下指定平台菜单权限编码\",\"获取指定平台服务列表\",\"获取接口列表\"]},\"1578\":{\"h\":\"接口信息\"},\"1579\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/menu/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"clientId\",\"string\",\"是\",\"平台标识\",\"code\",\"string\",\"是\",\"平台菜单编码\",\"name\",\"string\",\"否\",\"路由标识\",\"clientName\",\"string\",\"是\",\"平台名称\",\"title\",\"string\",\"是\",\"菜单名称\",\"menuType\",\"string\",\"是\",\"菜单类型\",\"stateFlag\",\"string\",\"是\",\"状态 0或1\",\"parentId\",\"string\",\"是\",\"父菜单ID\",\"path\",\"string\",\"是\",\"路径\",\"/user\",\"component\",\"string\",\"是\",\"组件\",\"/user/index\",\"permission\",\"string\",\"否\",\"权限编码\",\"openType\",\"string\",\"否\",\"打开方式\",\"redirect\",\"string\",\"否\",\"重定向地址\",\"metaJson\",\"string\",\"否\",\"meta信息\",\"sortOrder\",\"string\",\"否\",\"排序值\",\"apiList\",\"lisy\",\"否\",\"菜单列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1580\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/menu/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"id\",\"string\",\"是\",\"唯一id\",\"clientId\",\"string\",\"否\",\"平台标识\",\"code\",\"string\",\"否\",\"平台菜单编码\",\"name\",\"string\",\"否\",\"路由标识\",\"clientName\",\"string\",\"否\",\"平台名称\",\"title\",\"string\",\"否\",\"菜单名称\",\"menuType\",\"string\",\"否\",\"菜单类型\",\"stateFlag\",\"string\",\"否\",\"状态 0或1\",\"parentId\",\"string\",\"否\",\"父菜单ID\",\"path\",\"string\",\"否\",\"路径\",\"/user\",\"component\",\"string\",\"否\",\"组件\",\"/user/index\",\"permission\",\"string\",\"否\",\"权限编码\",\"openType\",\"string\",\"否\",\"打开方式\",\"redirect\",\"string\",\"否\",\"重定向地址\",\"metaJson\",\"string\",\"否\",\"meta信息\",\"sortOrder\",\"string\",\"否\",\"排序值\",\"apiList\",\"lisy\",\"否\",\"菜单列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1581\":{\"h\":\"3、删除\",\"t\":[\"请求路径\",\"/admin/menu/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"菜单唯一id（拼在路径中）\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1582\":{\"h\":\"4、通过平台标识查询菜单树\",\"t\":[\"请求路径\",\"/admin/menu/v1/tree GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"clientId\",\"string\",\"否\",\"平台标识\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"id\\\": \\\"ef5ff8974c5d4282aed566ad83d25dfc\\\", \\\"parentId\\\": \\\"\\\", \\\"weight\\\": 1, \\\"name\\\": \\\"plateformManager\\\", \\\"sortOrder\\\": 1, \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"createTime\\\": \\\"2022-08-02 16:39:27\\\", \\\"updateBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-08-03 09:49:03\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"code\\\": \\\"plateformManager\\\", \\\"permission\\\": \\\"\\\", \\\"path\\\": \\\"/plateformManager\\\", \\\"icon\\\": \\\"\\\", \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"01\\\", \\\"component\\\": \\\"\\\", \\\"title\\\": \\\"平台管理\\\", \\\"openType\\\": \\\"01\\\", \\\"redirect\\\": \\\"\\\", \\\"generalFlag\\\": \\\"0\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"metaJson\\\": null, \\\"description\\\": null, \\\"apiList\\\": [ ], \\\"parentName\\\": null, \\\"children\\\": [] }, { \\\"id\\\": \\\"61cbc5c662dd4d6cbbd2eec8de49376a\\\", \\\"parentId\\\": \\\"\\\", \\\"weight\\\": 2, \\\"name\\\": \\\"userManager\\\", \\\"sortOrder\\\": 2, \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"createTime\\\": \\\"2022-08-02 16:54:50\\\", \\\"updateBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-11-01 14:03:07\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"code\\\": \\\"userManager\\\", \\\"permission\\\": \\\"userManager\\\", \\\"path\\\": \\\"/userManager\\\", \\\"icon\\\": \\\"\\\", \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"01\\\", \\\"component\\\": \\\"\\\", \\\"title\\\": \\\"用户管理\\\", \\\"openType\\\": \\\"01\\\", \\\"redirect\\\": \\\"\\\", \\\"generalFlag\\\": \\\"0\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"metaJson\\\": \\\"{}\\\", \\\"description\\\": null, \\\"apiList\\\": [ ], \\\"parentName\\\": null, \\\"children\\\": [] }, { \\\"id\\\": \\\"76cb66dcb3614a9995ec3d0a5aaa2916\\\", \\\"parentId\\\": \\\"\\\", \\\"weight\\\": 3, \\\"name\\\": \\\"systemManager\\\", \\\"sortOrder\\\": 3, \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"createTime\\\": \\\"2022-08-02 16:54:50\\\", \\\"updateBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-08-03 09:48:58\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"code\\\": \\\"systemManager\\\", \\\"permission\\\": \\\"\\\", \\\"path\\\": \\\"/systemManager\\\", \\\"icon\\\": \\\"\\\", \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"01\\\", \\\"component\\\": \\\"\\\", \\\"title\\\": \\\"系统监控\\\", \\\"openType\\\": \\\"01\\\", \\\"redirect\\\": \\\"\\\", \\\"generalFlag\\\": \\\"0\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"metaJson\\\": null, \\\"description\\\": null, \\\"apiList\\\": [ ], \\\"parentName\\\": null, \\\"children\\\": [] }, { \\\"id\\\": \\\"6ddf18b38a46401bb304fbaae1549c66\\\", \\\"parentId\\\": \\\"\\\", \\\"weight\\\": 4, \\\"name\\\": \\\"backManager\\\", \\\"sortOrder\\\": 4, \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"createTime\\\": \\\"2022-08-02 16:54:50\\\", \\\"updateBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-08-03 09:48:57\\\", \\\"delFlag\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"code\\\": \\\"backManager\\\", \\\"permission\\\": \\\"\\\", \\\"path\\\": \\\"/backManager\\\", \\\"icon\\\": \\\"\\\", \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"01\\\", \\\"component\\\": \\\"\\\", \\\"title\\\": \\\"后台管理\\\", \\\"openType\\\": \\\"01\\\", \\\"redirect\\\": \\\"\\\", \\\"generalFlag\\\": \\\"0\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"metaJson\\\": null, \\\"description\\\": null, \\\"apiList\\\": [ ], \\\"parentName\\\": null, \\\"children\\\": [] } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1583\":{\"h\":\"5、通过平台标识查询前端路由信息\",\"t\":[\"请求路径\",\"/admin/menu/v1/router GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"clientId\",\"string\",\"是\",\"平台标识\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"path\\\": \\\"/plateformManager\\\", \\\"component\\\": \\\"\\\", \\\"children\\\": [ { \\\"path\\\": \\\"/app\\\", \\\"component\\\": \\\"/app/index\\\", \\\"children\\\": [], \\\"meta\\\": { \\\"hideMenu\\\": true, \\\"orderNo\\\": 11, \\\"icon\\\": \\\"ion:documents-outline\\\", \\\"hideChildrenInMenu\\\": false, \\\"title\\\": \\\"平台列表\\\" }, \\\"name\\\": \\\"App\\\" }, { \\\"path\\\": \\\"/information\\\", \\\"component\\\": \\\"/information/index\\\", \\\"children\\\": [], \\\"meta\\\": { \\\"hideMenu\\\": \\\"false\\\", \\\"orderNo\\\": 12, \\\"icon\\\": \\\"ion:documents-outline\\\", \\\"hideChildrenInMenu\\\": false, \\\"title\\\": \\\"平台信息\\\" }, \\\"name\\\": \\\"Information\\\" }, { \\\"path\\\": \\\"/menu\\\", \\\"component\\\": \\\"/menu/index\\\", \\\"children\\\": [], \\\"meta\\\": { \\\"hideMenu\\\": \\\"false\\\", \\\"orderNo\\\": 13, \\\"icon\\\": \\\"ion:menu\\\", \\\"hideChildrenInMenu\\\": false, \\\"title\\\": \\\"菜单管理\\\" }, \\\"name\\\": \\\"Menu\\\" }, { \\\"path\\\": \\\"/interface\\\", \\\"component\\\": \\\"/interface/index\\\", \\\"children\\\": [], \\\"meta\\\": { \\\"hideMenu\\\": \\\"false\\\", \\\"orderNo\\\": 14, \\\"icon\\\": \\\"ion:layers-outline\\\", \\\"hideChildrenInMenu\\\": false, \\\"title\\\": \\\"接口管理\\\" }, \\\"name\\\": \\\"Interface\\\" }, { \\\"path\\\": \\\"/PlatformRole\\\", \\\"component\\\": \\\"/PlatformRole/index\\\", \\\"children\\\": [], \\\"meta\\\": { \\\"hideMenu\\\": \\\"false\\\", \\\"orderNo\\\": 15, \\\"icon\\\": \\\"ion:person-outline\\\", \\\"hideChildrenInMenu\\\": false, \\\"title\\\": \\\"角色管理\\\" }, \\\"name\\\": \\\"PlatformRole\\\" } ], \\\"meta\\\": { }, \\\"name\\\": \\\"plateformManager\\\" }, { \\\"path\\\": \\\"/userManager\\\", \\\"component\\\": \\\"\\\", \\\"children\\\": [], \\\"meta\\\": { }, \\\"name\\\": \\\"userManager\\\" }, { \\\"path\\\": \\\"/systemManager\\\", \\\"component\\\": \\\"\\\", \\\"children\\\": [], \\\"meta\\\": { }, \\\"name\\\": \\\"systemManager\\\" }, { \\\"path\\\": \\\"/backManager\\\", \\\"component\\\": \\\"\\\", \\\"children\\\": [], \\\"meta\\\": { }, \\\"name\\\": \\\"backManager\\\" } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1584\":{\"h\":\"6、获取当前用户下指定平台菜单权限编码\",\"t\":[\"请求路径\",\"/admin/menu/v1/{id} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"平台标识(拼在路径中)\",\"响应\",\"{\\\"code\\\":0,\\\"data\\\":[\\\"Information\\\",\\\"tenant:add\\\",\\\"tenant:update\\\",\\\"tenant:list\\\",\\\"tenant:delete\\\",\\\"client:add\\\",\\\"client:delete\\\",\\\"menu:add\\\",\\\"menu:delete\\\",\\\"menu:update\\\",\\\"api:import\\\",\\\"api:delete\\\",\\\"api:update\\\",\\\"clientRole:add\\\",\\\"clientRole:delete\\\",\\\"clientRole:update\\\",\\\"clientRole:bindMenu\\\",\\\"api:add\\\",\\\"user:add\\\",\\\"user:update\\\",\\\"user:delete\\\",\\\"user:roleBind\\\",\\\"role:add\\\",\\\"role:update\\\",\\\"role:delete\\\",\\\"client:modifySecret\\\",\\\"client:update\\\",\\\"Dic\\\",\\\"role:auth\\\",\\\"role:bind\\\",\\\"loginLog:delete\\\",\\\"operationLog:delete\\\",\\\"currentTenant:update\\\",\\\"dict:add\\\",\\\"dict:update\\\",\\\"dict:delete\\\",\\\"Menu\\\",\\\"Role\\\",\\\"Rolebind\\\",\\\"userManager\\\",\\\"backManager\\\",\\\"SignIn\\\",\\\"systemManager\\\",\\\"PlatformRole\\\",\\\"User\\\",\\\"Tenant\\\",\\\"Currency\\\",\\\"App\\\",\\\"LoginConfiguration\\\",\\\"Interface\\\",\\\"Operation\\\",\\\"plateformManager\\\"], \\\"msg\\\":\\\"SUCCESS\\\"} \"]},\"1585\":{\"h\":\"7、获取指定平台服务列表\",\"t\":[\"请求路径\",\"/admin/menu/v1//serviceList/{id} GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"平台标识(拼在路径中)\",\"响应\",\"{ \\\"code\\\":0, \\\"data\\\":[\\\"center-system\\\"], \\\"msg\\\":\\\"SUCCESS\\\" } \"]},\"1586\":{\"h\":\"8、获取接口列表\",\"t\":[\"请求路径\",\"/admin/menu/v1/api/list GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"springApplicationName\",\"string\",\"是\",\"服务名称\",\"clientId\",\"string\",\"是\",\"平台标识\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"AuthClientMenuController\\\": [ { \\\"id\\\": \\\"1572827147032805387\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"修改菜单\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/menu/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147032805391\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"获取当前用户下指定平台菜单\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/menu/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914250\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"获取接口列表\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/api/list\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914256\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"通过id删除菜单\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/menu/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914261\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"通过用户角色id查询菜单Api信息\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/menuApi/{roleId}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914268\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"通过平台标识查询前端路由信息\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/router\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023119\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"通过平台标识查询菜单树\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/tree\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023122\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"获取指定平台服务列表\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/serviceList/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023123\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"新增菜单\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/menu/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"SysTenantController\\\": [ { \\\"id\\\": \\\"1572827147032805388\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"修改租户信息\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/tenant/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023118\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"新增租户\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/tenant/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023121\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"删除单个租户\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/tenant/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1575729752687902727\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"修改租户默认用户密码\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/tenant/v1/updateDefaultPwd\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1578938556401487888\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"修改当前租户\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/tenant/v1/currentTenant\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1578983949508558855\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"获取当前租户\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/tenant/v1/currentTenant\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"SysLoginLogController\\\": [ { \\\"id\\\": \\\"1572827147099914254\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysLoginLogController\\\", \\\"name\\\": \\\"删除登录日志\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/loginLog/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914283\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysLoginLogController\\\", \\\"name\\\": \\\"分页获取登录日志\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/loginLog/v1/page\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1578938556464402456\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysLoginLogController\\\", \\\"name\\\": \\\"批量删除登录日志\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/loginLog/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"AuthClientRoleController\\\": [ { \\\"id\\\": \\\"1572827147099914241\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"角色绑定菜单\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/role/v1/bindingMenu\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914245\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"删除平台角色\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/role/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914251\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"获取用户指定平台的角色列表\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/role/v1/byClientId\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914252\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"增加平台角色\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/role/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914267\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"分页获取角色数据\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/role/v1/page\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914271\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"批量删除平台角色\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/role/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023111\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"修改平台角色信息\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/role/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023115\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"获取指定角色绑定的菜单\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/role/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"SysDictItemController\\\": [ { \\\"id\\\": \\\"1572827147032805389\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysDictItemController\\\", \\\"name\\\": \\\"新增或修改字典条目\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/itemDict/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914257\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysDictItemController\\\", \\\"name\\\": \\\"批量删除字典条目\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/itemDict/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914274\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysDictItemController\\\", \\\"name\\\": \\\"分页获取字条目\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/itemDict/v1/page\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914279\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysDictItemController\\\", \\\"name\\\": \\\"获取字典条目\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/itemDict/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"AuthUserController\\\": [ { \\\"id\\\": \\\"1572827147099914253\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"用户角色绑定\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/user/v1/roleBind\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914259\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"获取当前用户信息\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/user/v1/info\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914260\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"删除用户\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/user/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914266\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"修改用户基本信息\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/user/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147099914281\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"分页获取用户数据\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/user/v1/page\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023107\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"修改用户状态\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/user/v1/changeStatus\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023114\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"角色绑定用户\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/user/v1/bindingUser\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023120\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"修改密码\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/user/v1/changePwd\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1575672738339278852\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"用户增加\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/user/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1583352964332478468\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"AuthUserController\\\", \\\"name\\\": \\\"通过用户ID获取用户基础信息\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/user/v1/info/{userId}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"SysOperationLogController\\\": [ { \\\"id\\\": \\\"1572827147099914244\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysOperationLogController\\\", \\\"name\\\": \\\"删除单个操作日志\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/operationLog/v1/{id}\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1572827147167023112\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysOperationLogController\\\", \\\"name\\\": \\\"分页获取操作日志\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/operationLog/v1/page\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null }, { \\\"id\\\": \\\"1578938556401487877\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"SysOperationLogController\\\", \\\"name\\\": \\\"批量删除操作日志\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/operationLog/v1\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ], \\\"UploadController\\\": [ { \\\"id\\\": \\\"1578667242197569556\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": null, \\\"controllerName\\\": \\\"UploadController\\\", \\\"name\\\": \\\"上传文件\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/oss/v1/uploadFile\\\", \\\"createTime\\\": null, \\\"createBy\\\": null, \\\"updateTime\\\": null, \\\"updateBy\\\": null, \\\"type\\\": null } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1587\":{\"h\":\"平台接口管理\"},\"1588\":{\"h\":\"接口功能\",\"t\":[\"平台接口的增删改查\",\"获取系统服务列表\",\"服务名称获取系统接口列表\",\"批量导入系统接口\"]},\"1589\":{\"h\":\"接口信息\"},\"1590\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/api/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"springApplicationName\",\"string\",\"是\",\"服务名称\",\"clientId\",\"string\",\"是\",\"平台标识\",\"controllerName\",\"string\",\"是\",\"控制器名称\",\"name\",\"string\",\"是\",\"接口名称\",\"requestMethod\",\"string\",\"是\",\"请求方法\",\"uri\",\"string\",\"是\",\"接口地址\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1591\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/api/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"springApplicationName\",\"string\",\"否\",\"服务名称\",\"clientId\",\"string\",\"否\",\"平台标识\",\"controllerName\",\"string\",\"否\",\"控制器名称\",\"name\",\"string\",\"否\",\"接口名称\",\"requestMethod\",\"string\",\"否\",\"请求方法\",\"uri\",\"string\",\"否\",\"接口地址\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1592\":{\"h\":\"3、分页查询\",\"t\":[\"请求路径\",\"/admin/api/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"name\",\"string\",\"否\",\"接口名称\",\"springApplicationName\",\"string\",\"否\",\"服务名称\",\"requestMethod\",\"string\",\"否\",\"请求方式\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 80, \\\"list\\\": [ { \\\"id\\\": \\\"1572827147032805387\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"修改菜单\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/menu/v1\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:11:58\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147032805388\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"SysTenantController\\\", \\\"name\\\": \\\"修改租户信息\\\", \\\"requestMethod\\\": \\\"PUT\\\", \\\"uri\\\": \\\"/tenant/v1\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:19:28\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147032805389\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"SysDictItemController\\\", \\\"name\\\": \\\"新增或修改字典条目\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/itemDict/v1\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:20:28\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147032805390\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"Oauth2RegisteredClientController\\\", \\\"name\\\": \\\"删除平台\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/client/v1/{id}\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:52:21\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147032805391\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthClientMenuController\\\", \\\"name\\\": \\\"获取当前用户下指定平台菜单\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/menu/v1/menu/{id}\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:11:58\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147032805393\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthRoleController\\\", \\\"name\\\": \\\"获取指定组合角色已绑定的客户端角色\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/tenant/role/v1/bound/list/{id}\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:13:00\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147099914241\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"角色绑定菜单\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/role/v1/bindingMenu\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:20:00\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147099914242\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthClientApiController\\\", \\\"name\\\": \\\"批量导入系统接口\\\", \\\"requestMethod\\\": \\\"POST\\\", \\\"uri\\\": \\\"/api/v1/importApi\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:12:31\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147099914244\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"SysOperationLogController\\\", \\\"name\\\": \\\"删除单个操作日志\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/operationLog/v1/{id}\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:20:57\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" }, { \\\"id\\\": \\\"1572827147099914245\\\", \\\"springApplicationName\\\": \\\"center-system\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"controllerName\\\": \\\"AuthClientRoleController\\\", \\\"name\\\": \\\"删除平台角色\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/role/v1/{id}\\\", \\\"createTime\\\": \\\"2022-09-22 13:56:28\\\", \\\"createBy\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"updateTime\\\": \\\"2022-09-22 14:20:00\\\", \\\"updateBy\\\": \\\"\\\", \\\"type\\\": \\\"0\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1593\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/api/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1594\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/api/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"string\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1595\":{\"h\":\"6、获取系统服务列表\",\"t\":[\"请求路径\",\"/admin/api/v1/sysApi/serviceList GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{\\\"code\\\":0,\\\"data\\\":[\\\"center-auth\\\",\\\"center-system\\\"],\\\"msg\\\":\\\"SUCCESS\\\"} \"]},\"1596\":{\"h\":\"7、批量导入系统接口\",\"t\":[\"请求路径\",\"/admin/api/v1/importApi GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"clientId\",\"string\",\"是\",\"平台标识\",\"idList\",\"array\",\"是\",\"系统接口id列表\",\"响应\",\"{\\\"code\\\":0,\\\"data\\\":null,\\\"msg\\\":\\\"SUCCESS\\\"} \"]},\"1597\":{\"h\":\"8、服务名称获取系统接口列表\",\"t\":[\"请求路径\",\"/admin/api/v1/sysApi/list/{name} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"NotifyController\\\": [ { \\\"id\\\": \\\"1574584764235517956\\\", \\\"springApplicationName\\\": \\\"center-auth\\\", \\\"controllerName\\\": \\\"NotifyController\\\", \\\"name\\\": \\\"发送验证码\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/notify/v1/send_code\\\", \\\"createTime\\\": \\\"2022-09-27 10:20:36\\\" } ], \\\"TokenController\\\": [ { \\\"id\\\": \\\"1574584764189380609\\\", \\\"springApplicationName\\\": \\\"center-auth\\\", \\\"controllerName\\\": \\\"TokenController\\\", \\\"name\\\": \\\"获取在线用户\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/token/page\\\", \\\"createTime\\\": \\\"2022-09-27 10:20:36\\\" }, { \\\"id\\\": \\\"1574584764235517953\\\", \\\"springApplicationName\\\": \\\"center-auth\\\", \\\"controllerName\\\": \\\"TokenController\\\", \\\"name\\\": \\\"删除指定token\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/token/{token}\\\", \\\"createTime\\\": \\\"2022-09-27 10:20:36\\\" }, { \\\"id\\\": \\\"1574584764235517954\\\", \\\"springApplicationName\\\": \\\"center-auth\\\", \\\"controllerName\\\": \\\"TokenController\\\", \\\"name\\\": \\\"退出\\\", \\\"requestMethod\\\": \\\"DELETE\\\", \\\"uri\\\": \\\"/token/logout\\\", \\\"createTime\\\": \\\"2022-09-27 10:20:36\\\" }, { \\\"id\\\": \\\"1574584764235517955\\\", \\\"springApplicationName\\\": \\\"center-auth\\\", \\\"controllerName\\\": \\\"TokenController\\\", \\\"name\\\": \\\"token校验\\\", \\\"requestMethod\\\": \\\"GET\\\", \\\"uri\\\": \\\"/token/check\\\", \\\"createTime\\\": \\\"2022-09-27 10:20:36\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1598\":{\"h\":\"平台角色管理\"},\"1599\":{\"h\":\"接口功能\",\"t\":[\"平台角色增删改查\",\"平台角色绑定菜单\",\"获取指定角色绑定的菜单\"]},\"1600\":{\"h\":\"接口信息\"},\"1601\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/role/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"name\",\"string\",\"是\",\"角色名称\",\"code\",\"string\",\"是\",\"角色编码\",\"desc\",\"string\",\"否\",\"角色描述\",\"clientId\",\"string\",\"是\",\"客户端标识\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1602\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/role/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"角色id\",\"name\",\"string\",\"否\",\"角色名称\",\"code\",\"string\",\"否\",\"角色编码\",\"desc\",\"string\",\"否\",\"角色描述\",\"clientId\",\"string\",\"是\",\"客户端标识\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1603\":{\"h\":\"3、分页查询\",\"t\":[\"请求路径\",\"/admin/role/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"name\",\"string\",\"否\",\"角色名称\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 3, \\\"list\\\": [ { \\\"id\\\": \\\"1572039569111060481\\\", \\\"name\\\": \\\"超级管理员\\\", \\\"code\\\": \\\"USERCORE_SUPER_ADMIN\\\", \\\"desc\\\": \\\"用户中心管理员\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"id\\\": \\\"1572045774676103169\\\", \\\"name\\\": \\\"默认租户管理员\\\", \\\"code\\\": \\\"DEFAULT_TENANT_ADMIN\\\", \\\"desc\\\": \\\"默认租户用户拥有的用户中心权限\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"defaultFlag\\\": \\\"1\\\" }, { \\\"id\\\": \\\"1585534221669720065\\\", \\\"name\\\": \\\"陈晰测试\\\", \\\"code\\\": \\\"陈晰测试\\\", \\\"desc\\\": \\\"陈晰测试\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"defaultFlag\\\": \\\"0\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1604\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/role/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1605\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/role/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1606\":{\"h\":\"6、角色绑定菜单\",\"t\":[\"请求路径\",\"/admin/role/v1/bindingMenu POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"roleId\",\"string\",\"是\",\"角色id\",\"menuIdList\",\"string\",\"是\",\"菜单id列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1607\":{\"h\":\"7、获取指定角色绑定的菜单\",\"t\":[\"请求路径\",\"/admin/role/v1/{id} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": [ { \\\"id\\\": \\\"1574296975522275330\\\", \\\"code\\\": \\\"client:add\\\", \\\"name\\\": \\\"\\\", \\\"permission\\\": \\\"client:add\\\", \\\"path\\\": \\\"\\\", \\\"parentId\\\": \\\"d4cf75467d78407992c66ef72731b0bd\\\", \\\"icon\\\": null, \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"sortOrder\\\": 1000, \\\"createBy\\\": null, \\\"createTime\\\": null, \\\"updateBy\\\": null, \\\"updateTime\\\": null, \\\"delFlag\\\": null, \\\"title\\\": \\\"新增平台\\\", \\\"description\\\": null }, { \\\"id\\\": \\\"1578949678068305921\\\", \\\"code\\\": \\\"role:bind\\\", \\\"name\\\": \\\"\\\", \\\"permission\\\": \\\"role_bind\\\", \\\"path\\\": \\\"\\\", \\\"parentId\\\": \\\"45c8d78ce9854edc93c9ccba15a3d097\\\", \\\"icon\\\": null, \\\"keepAlive\\\": \\\"1\\\", \\\"menuType\\\": \\\"0\\\", \\\"registeredClientId\\\": \\\"1fbba06130d44dc98584f83bd224aced\\\", \\\"sortOrder\\\": 1000, \\\"createBy\\\": null, \\\"createTime\\\": null, \\\"updateBy\\\": null, \\\"updateTime\\\": null, \\\"delFlag\\\": null, \\\"title\\\": \\\"角色绑定\\\", \\\"description\\\": null } ], \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1608\":{\"h\":\"字典管理\"},\"1609\":{\"h\":\"接口功能\",\"t\":[\"字典项增删改查\",\"通过字典编码获取字典子项\",\"复制字典\"]},\"1610\":{\"h\":\"接口信息\"},\"1611\":{\"h\":\"1、新增\",\"t\":[\"请求路径\",\"/admin/dict/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"name\",\"string\",\"是\",\"名称\",\"code\",\"string\",\"是\",\"标识\",\"remark\",\"string\",\"是\",\"备注\",\"stateFlag\",\"string\",\"是\",\"状态\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1612\":{\"h\":\"2、修改\",\"t\":[\"请求路径\",\"/admin/dict/v1 PUT \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"id\",\"string\",\"是\",\"唯一id\",\"name\",\"string\",\"否\",\"名称\",\"code\",\"string\",\"否\",\"标识\",\"remark\",\"string\",\"否\",\"备注\",\"stateFlag\",\"string\",\"否\",\"状态\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1613\":{\"h\":\"3、分页查询\",\"t\":[\"请求路径\",\"/admin/dict/v1/page GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"name\",\"string\",\"否\",\"字典名称\",\"code\",\"string\",\"否\",\"字典标识\",\"响应\",\"{ \\\"code\\\":0, \\\"data\\\":{ \\\"records\\\":[ { \\\"id\\\":\\\"1562612461360189442\\\", \\\"sortOrder\\\":1, \\\"createBy\\\":\\\"\\\", \\\"createTime\\\":\\\"2022-08-25 09:26:57\\\", \\\"updateBy\\\":\\\"\\\", \\\"updateTime\\\":\\\"2022-08-25 09:33:07\\\", \\\"delFlag\\\":\\\"0\\\", \\\"code\\\":\\\"TEST\\\", \\\"name\\\":\\\"测试\\\", \\\"remark\\\":\\\"【0：白盒 1：黑盒】\\\", \\\"stateFlag\\\":\\\"1\\\" }, { \\\"id\\\":\\\"0bb8b9a955324dcca1dcba7d1d5238d0\\\", \\\"sortOrder\\\":1, \\\"createBy\\\":\\\"\\\", \\\"createTime\\\":\\\"2022-08-03 16:50:20\\\", \\\"updateBy\\\":\\\"\\\", \\\"updateTime\\\":\\\"2022-08-24 11:07:39\\\", \\\"delFlag\\\":\\\"0\\\", \\\"code\\\":\\\"GLOBAL_OPEN_TYPE\\\", \\\"name\\\":\\\"打开方式\\\", \\\"remark\\\":\\\"[01-组件 02-内链 03-外链]\\\", \\\"stateFlag\\\":\\\"1\\\" } ], \\\"total\\\":9, \\\"size\\\":10, \\\"current\\\":1, \\\"orders\\\":[ ], \\\"optimizeCountSql\\\":true, \\\"hitCount\\\":false, \\\"countId\\\":null, \\\"maxLimit\\\":null, \\\"searchCount\\\":true, \\\"pages\\\":1 }, \\\"msg\\\":\\\"SUCCESS\\\" } \"]},\"1614\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/dict/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1615\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/dict/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"number\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1616\":{\"h\":\"6、通过分类获取页面Label绑定信息\",\"t\":[\"请求路径\",\"/admin/dict/v1/label/{code} GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"AUTHENTICATION_METHOD\\\": [ { \\\"label\\\": \\\"关键字JWT认证\\\", \\\"text\\\": \\\"关键字JWT认证\\\", \\\"value\\\": \\\"private_key_jwt\\\" }, { \\\"label\\\": \\\"无\\\", \\\"text\\\": \\\"无\\\", \\\"value\\\": \\\"none\\\" }, { \\\"label\\\": \\\"POST认证\\\", \\\"text\\\": \\\"POST认证\\\", \\\"value\\\": \\\"post\\\" }, { \\\"label\\\": \\\"客户端密码BASIC认证\\\", \\\"text\\\": \\\"客户端密码BASIC认证\\\", \\\"value\\\": \\\"client_secret_basic\\\" }, { \\\"label\\\": \\\"BASIC认证\\\", \\\"text\\\": \\\"BASIC认证\\\", \\\"value\\\": \\\"basic\\\" }, { \\\"label\\\": \\\"客户端密码POST认证\\\", \\\"text\\\": \\\"客户端密码POST认证\\\", \\\"value\\\": \\\"client_secret_post\\\" }, { \\\"label\\\": \\\"客户端密码JWT认证\\\", \\\"text\\\": \\\"客户端密码JWT认证\\\", \\\"value\\\": \\\"client_secret_jwt\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1617\":{\"h\":\"7、复制字典\",\"t\":[\"请求路径\",\"/admin/dict/v1/copy/{id} GET \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1618\":{\"h\":\"字典子项管理\"},\"1619\":{\"h\":\"接口功能\",\"t\":[\"字典子项增删改查\"]},\"1620\":{\"h\":\"接口信息\"},\"1621\":{\"h\":\"1、新增或修改字典子项\",\"t\":[\"请求路径\",\"/admin/itemDict/v1 POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"insertList\",\"array\",\"否\",\"新增子典子项列表\",\"updateList\",\"array\",\"否\",\"修改字典子项列表\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1622\":{\"h\":\"2、分页查询字典子项\",\"t\":[\"请求路径\",\"/admin/itemDict/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"name\",\"string\",\"否\",\"字典子项名称\",\"code\",\"string\",\"否\",\"字典子项标识\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"records\\\": [ { \\\"id\\\": \\\"995ac19a1d234748bda597f99117794e\\\", \\\"sortOrder\\\": 3, \\\"createBy\\\": \\\"\\\", \\\"createTime\\\": \\\"2022-08-03 17:21:22\\\", \\\"updateBy\\\": \\\"\\\", \\\"updateTime\\\": \\\"2022-08-03 17:21:22\\\", \\\"delFlag\\\": \\\"0\\\", \\\"code\\\": \\\"03\\\", \\\"name\\\": \\\"外链\\\", \\\"remark\\\": \\\"\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"dictId\\\": \\\"0bb8b9a955324dcca1dcba7d1d5238d0\\\" } ], \\\"total\\\": 1, \\\"size\\\": 10, \\\"current\\\": 1, \\\"orders\\\": [ ], \\\"optimizeCountSql\\\": true, \\\"hitCount\\\": false, \\\"countId\\\": null, \\\"maxLimit\\\": null, \\\"searchCount\\\": true, \\\"pages\\\": 1 }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1623\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/itemDict/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1624\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/itemDict/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1625\":{\"h\":\"登录日志管理\"},\"1626\":{\"h\":\"接口功能\",\"t\":[\"登录日志删改查\"]},\"1627\":{\"h\":\"接口信息\"},\"1628\":{\"h\":\"1、分页查询\",\"t\":[\"请求路径\",\"/admin/loginLog/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"userName\",\"string\",\"否\",\"登录账号\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 671, \\\"list\\\": [ { \\\"id\\\": \\\"7b05f1694587866e2fe6cb76690bbb18\\\", \\\"userName\\\": \\\"admin\\\", \\\"userId\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"action\\\": \\\"登录\\\", \\\"nickName\\\": null, \\\"realName\\\": null, \\\"requestIp\\\": \\\"10.142.52.25\\\", \\\"browser\\\": \\\"Chrome107.0.0.0\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"createTime\\\": \\\"2022-11-02 14:02:35\\\", \\\"createBy\\\": \\\"admin\\\", \\\"updateBy\\\": \\\"admin\\\", \\\"updateTime\\\": \\\"2022-11-02 14:02:34\\\", \\\"delFlag\\\": \\\"0\\\", \\\"exception\\\": null }, { \\\"id\\\": \\\"cfe22bdf9e3446fb8c0ddd080903f23e\\\", \\\"userName\\\": \\\"admin\\\", \\\"userId\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"action\\\": \\\"登录\\\", \\\"nickName\\\": null, \\\"realName\\\": null, \\\"requestIp\\\": \\\"10.142.52.13\\\", \\\"browser\\\": \\\"MSEdge103.0.1264.71\\\", \\\"stateFlag\\\": \\\"1\\\", \\\"createTime\\\": \\\"2022-11-01 14:33:59\\\", \\\"createBy\\\": \\\"admin\\\", \\\"updateBy\\\": \\\"admin\\\", \\\"updateTime\\\": \\\"2022-11-01 14:33:58\\\", \\\"delFlag\\\": \\\"0\\\", \\\"exception\\\": null } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1629\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/loginLog/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1630\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/loginLog/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1631\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/itemDict/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1632\":{\"h\":\"操作日志管理\"},\"1633\":{\"h\":\"接口功能\",\"t\":[\"操作日志删改查\"]},\"1634\":{\"h\":\"接口信息\"},\"1635\":{\"h\":\"1、分页查询\",\"t\":[\"请求路径\",\"/admin/operationLog/v1 GET \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"pageNum\",\"number\",\"是\",\"当前页\",\"pageSize\",\"number\",\"是\",\"每页大小\",\"userName\",\"string\",\"否\",\"登录账号\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"totalSize\\\": 184, \\\"list\\\": [ { \\\"id\\\": \\\"2fa8840945b56abc8ba90054788f5ea0\\\", \\\"action\\\": \\\"INSERT\\\", \\\"title\\\": \\\"用户角色绑定\\\", \\\"userId\\\": \\\"43b59399d55346dca94a80e9e77838f6\\\", \\\"username\\\": \\\"admin\\\", \\\"requestIp\\\": \\\"251.201.0.5\\\", \\\"tenantId\\\": \\\"19264ac3de444b30bab436397daf900a\\\", \\\"browser\\\": \\\"MSEdge103.0.1264.71\\\", \\\"logType\\\": \\\"INFO\\\", \\\"params\\\": \\\" request: UserBindingRoleRequest(userId=43b59399d55346dca94a80e9e77838f6, roleIdList=[1554767453009256449])\\\", \\\"time\\\": 13294, \\\"method\\\": \\\"com.techease.authcenter.system.controller.AuthUserController.UserRoleBind()\\\", \\\"exceptionDetail\\\": null, \\\"createTime\\\": \\\"2022-11-01 10:56:11\\\", \\\"createBy\\\": null, \\\"updateBy\\\": null, \\\"updateTime\\\": \\\"2022-11-01 10:56:11\\\", \\\"delFlag\\\": \\\"0\\\" } ] }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1636\":{\"h\":\"4、删除\",\"t\":[\"请求路径\",\"/admin/operationLog/v1/{id} DELETE \",\"请求头\",\"Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1637\":{\"h\":\"5、批量删除\",\"t\":[\"请求路径\",\"/admin/operationLog/v1 DELETE \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"ids\",\"array\",\"是\",\"id列表\",\"响应参数\",\"名称\",\"类型\",\"描述\",\"code\",\"number\",\"响应编码 0 或其他编码\",\"data\",\"object\",\"响应数据\",\"msg\",\"string\",\"响应描述\",\"响应\",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \",\"{ code: 0, data: null, msg: \\\"SUCCESS\\\" } \"]},\"1638\":{\"h\":\"OSS管理\"},\"1639\":{\"h\":\"接口功能\",\"t\":[\"文件上传\"]},\"1640\":{\"h\":\"接口信息\"},\"1641\":{\"h\":\"1、分页查询\",\"t\":[\"请求路径\",\"/admin/oss/v1/uploadFile POST \",\"请求头\",\"Content-Type: application/json;charset=UTF-8 Authorization: token值 \",\"请求参数\",\"名称\",\"类型\",\"必填\",\"描述\",\"示例值\",\"file\",\"file\",\"是\",\"文件\",\"type\",\"string\",\"是\",\"文件类型\",\"client或tenant或user\",\"响应\",\"{ \\\"code\\\": 0, \\\"data\\\": { \\\"url\\\": \\\"http://10.142.51.100:9000/usercenter/client/2022/11/02/4a46bd5905f24e94b4426802a15a4021.png\\\" }, \\\"msg\\\": \\\"SUCCESS\\\" } \"]},\"1642\":{\"h\":\"用户中心问题\"},\"1643\":{\"h\":\"用户中心租户间共享问题\",\"t\":[\"admin最大的租户\",\"绑定用户中心等应用\",\"subAdmin 租户\",\"未绑定应用\",\"也要访问用户中心\",\"租户需绑定初始用户来登录\",\"新增用户时绑定租户，该用户要绑定用户中心的聚合角色和客户端角色\"]},\"1644\":{\"h\":\"接口问题\",\"t\":[\"菜单表 菜单接口表记录菜单id 可使用关联保证数据与接口管理最新\",\"接口管理表 维护在租户的平台下，可导入，可新增\",\"系统接口表，每次启动服务变为最新，可同时更新，若在最新中，则保留，若没有则删除。\"]},\"1645\":{\"h\":\"项目环境信息\"},\"1646\":{\"h\":\"微服务用户管理\",\"t\":[\"https://svn.techsel.cn/svn/微服务用户管理/\"]},\"1647\":{\"h\":\"mysql\",\"t\":[\"10.138.63.39:1170\",\"root mysql_Techsel2o19\"]},\"1648\":{\"h\":\"redis\",\"t\":[\"10.138.63.39:1090\",\"redis_Techsel2o19\"]},\"1649\":{\"h\":\"nacos\",\"t\":[\"http://10.138.63.39:8848/nacos nacos nacos\",\"10.138.63.39:9848\",\"10.138.63.39:9555\",\"使用空间 cloud\"]},\"1650\":{\"h\":\"minio\",\"t\":[\"http://10.138.63.39:9000 minio minio123456\",\"使用bucket：usercenter\"]},\"1651\":{\"h\":\"xxl-job\",\"t\":[\"http://10.138.63.39:1200/xxl-job-admin admin 123456\"]},\"1652\":{\"h\":\"开发架构\",\"t\":[\"MVC\"]},\"1653\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1654\":{\"h\":\"Note\"},\"1655\":{\"h\":\"AI\"},\"1656\":{\"h\":\"Algorithm\"},\"1657\":{\"h\":\"C Sharp\"},\"1658\":{\"h\":\"Go\"},\"1659\":{\"h\":\"Java\"},\"1660\":{\"h\":\"Rust\"},\"1661\":{\"h\":\"Security\"},\"1662\":{\"h\":\"Spring\"},\"1663\":{\"h\":\"Web\"},\"1664\":{\"h\":\"中间件\"},\"1665\":{\"h\":\"前端\"},\"1666\":{\"h\":\"大数据\"},\"1667\":{\"h\":\"应用方案\"},\"1668\":{\"h\":\"数据库\"},\"1669\":{\"h\":\"服务器环境\"},\"1670\":{\"h\":\"架构\"},\"1671\":{\"h\":\"物联网\"},\"1672\":{\"h\":\"网络通信\"},\"1673\":{\"h\":\"Cwms\"},\"1674\":{\"h\":\"Business\"},\"1675\":{\"h\":\"Techsel\"},\"1676\":{\"h\":\"Iot\"},\"1677\":{\"h\":\"用户中心\"}},\"dirtCount\":0,\"index\":[[\"黑盒\",{\"1\":{\"1613\":1}}],[\"王五\",{\"1\":{\"1550\":1}}],[\"王玉廷\",{\"1\":{\"1498\":2}}],[\"橘子皮\",{\"1\":{\"1550\":1}}],[\"江苏省南京市\",{\"1\":{\"1550\":1}}],[\"昵称\",{\"1\":{\"1548\":1,\"1549\":1,\"1554\":1}}],[\"账号密码\",{\"1\":{\"1548\":1}}],[\"账号名\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1}}],[\"泰易云\",{\"1\":{\"1541\":1}}],[\"唯一id\",{\"1\":{\"1540\":1,\"1542\":1,\"1549\":1,\"1551\":1,\"1562\":1,\"1571\":1,\"1573\":1,\"1575\":1,\"1580\":1,\"1591\":1,\"1593\":1,\"1612\":1}}],[\"唯一的方式是创建一个全新的元素\",{\"1\":{\"970\":1}}],[\"令牌值\",{\"1\":{\"1532\":1}}],[\"令牌相关信息\",{\"1\":{\"1532\":1}}],[\"令牌\",{\"1\":{\"1532\":1}}],[\"令牌类型\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"拦截用户请求\",{\"1\":{\"1520\":1}}],[\"拦截器进行拦截处理\",{\"1\":{\"853\":1}}],[\"拦截器\",{\"0\":{\"853\":1}}],[\"身份附加信息\",{\"1\":{\"1548\":1,\"1549\":1}}],[\"身份证号\",{\"1\":{\"1548\":1,\"1549\":1,\"1554\":1}}],[\"身份证加解密密钥\",{\"1\":{\"1515\":1}}],[\"身份认证授权方式\",{\"1\":{\"723\":1}}],[\"端点配置\",{\"1\":{\"1514\":1}}],[\"端口号\",{\"0\":{\"19\":1},\"1\":{\"19\":1,\"1180\":1,\"1190\":2}}],[\"申请\",{\"1\":{\"1503\":1}}],[\"机制\",{\"1\":{\"1503\":1}}],[\"机构id\",{\"1\":{\"1304\":1}}],[\"限流\",{\"1\":{\"1501\":1}}],[\"限制分组记录数\",{\"1\":{\"782\":1}}],[\"限制桶数量\",{\"1\":{\"782\":1}}],[\"胡丽芳\",{\"1\":{\"1498\":1}}],[\"李婷妍\",{\"1\":{\"1498\":1}}],[\"陈晰测试\",{\"1\":{\"1564\":3,\"1603\":3}}],[\"陈晰测试啊\",{\"1\":{\"1561\":3}}],[\"陈晰\",{\"1\":{\"1498\":1}}],[\"弹出登录授权页\",{\"1\":{\"1496\":1}}],[\"拥有管理员应用权限\",{\"1\":{\"1495\":1}}],[\"轻型目录访问协议\",{\"1\":{\"1491\":1}}],[\"轻量级的\",{\"1\":{\"729\":1}}],[\"南向网关\",{\"0\":{\"1489\":1}}],[\"南昌大学\",{\"1\":{\"479\":1}}],[\"步长\",{\"1\":{\"1486\":4}}],[\"步骤\",{\"0\":{\"1474\":1},\"1\":{\"1129\":1}}],[\"否\",{\"1\":{\"1486\":3,\"1531\":5,\"1540\":7,\"1541\":1,\"1548\":9,\"1549\":10,\"1550\":3,\"1554\":5,\"1559\":1,\"1560\":3,\"1561\":1,\"1570\":4,\"1571\":1,\"1572\":1,\"1579\":7,\"1580\":16,\"1582\":1,\"1591\":6,\"1592\":3,\"1601\":1,\"1602\":3,\"1603\":1,\"1612\":4,\"1613\":2,\"1621\":2,\"1622\":2,\"1628\":1,\"1635\":1}}],[\"否则握手失败\",{\"1\":{\"1408\":1}}],[\"否则让socketchannel的感兴趣事件包含写事件\",{\"1\":{\"1402\":1}}],[\"否则返回\",{\"1\":{\"1223\":1}}],[\"否则就会实现下面的异常\",{\"1\":{\"1115\":1}}],[\"否则报无效参数\",{\"1\":{\"1093\":1}}],[\"否则报错\",{\"1\":{\"552\":1,\"801\":1}}],[\"否则失效\",{\"1\":{\"1051\":1}}],[\"否则重启之后将会消费此前的数据\",{\"1\":{\"798\":1}}],[\"否则不会提交\",{\"1\":{\"798\":2}}],[\"否则不存在\",{\"1\":{\"154\":1}}],[\"否则在容器启动后执行\",{\"1\":{\"919\":1}}],[\"否则在下一个配置对象查找\",{\"1\":{\"593\":1}}],[\"否则在依赖注入时根据工厂bean生成\",{\"1\":{\"438\":1}}],[\"否则使用默认application\",{\"1\":{\"593\":1}}],[\"否则使用默认\",{\"1\":{\"593\":1}}],[\"否则会出现类型不匹配\",{\"1\":{\"312\":1}}],[\"否则会导致编译错误\",{\"1\":{\"124\":1}}],[\"否则都用\",{\"1\":{\"283\":1}}],[\"否则缓冲区一满\",{\"1\":{\"190\":1}}],[\"否则所有的协程都会共享同一个线程\",{\"1\":{\"186\":1}}],[\"否则递归将陷入无限循环中\",{\"1\":{\"155\":1}}],[\"否则\",{\"1\":{\"131\":1,\"1251\":1}}],[\"否则编译不过\",{\"1\":{\"128\":1}}],[\"否则编译报错\",{\"1\":{\"117\":1}}],[\"温度\",{\"1\":{\"1484\":1}}],[\"温州节能管理平台对接\",{\"0\":{\"1469\":1}}],[\"照明信息表\",{\"1\":{\"1477\":1}}],[\"白盒\",{\"1\":{\"1613\":1}}],[\"白名单地址\",{\"1\":{\"1522\":1}}],[\"白名单\",{\"1\":{\"1513\":1}}],[\"白名单路径移除请求头认证信息\",{\"1\":{\"422\":1}}],[\"白银高铁\",{\"0\":{\"1476\":1}}],[\"点位数据以表格形式维护在项目的类路径下\",{\"1\":{\"1472\":1}}],[\"点击应用登录跳转\",{\"1\":{\"1496\":1}}],[\"点击\",{\"1\":{\"45\":1}}],[\"点击页面顶部的\",{\"1\":{\"45\":1}}],[\"万洪吉\",{\"1\":{\"1469\":1,\"1470\":1,\"1498\":1}}],[\"万物皆对象\",{\"1\":{\"998\":1}}],[\"客户\",{\"1\":{\"1503\":1}}],[\"客户id\",{\"1\":{\"1467\":1}}],[\"客户端密码jwt认证\",{\"1\":{\"1616\":2}}],[\"客户端密码post认证\",{\"1\":{\"1616\":2}}],[\"客户端密码basic认证\",{\"1\":{\"1616\":2}}],[\"客户端标识\",{\"1\":{\"1601\":1,\"1602\":1}}],[\"客户端模式\",{\"1\":{\"1531\":1}}],[\"客户端认证\",{\"0\":{\"1517\":1}}],[\"客户端只建立一个\",{\"1\":{\"1425\":1}}],[\"客户端初始化\",{\"0\":{\"1404\":1}}],[\"客户端连接\",{\"1\":{\"1399\":1}}],[\"客户端实现\",{\"0\":{\"1388\":1}}],[\"客户端\",{\"1\":{\"1229\":1,\"1425\":1}}],[\"客户端生成ssh\",{\"1\":{\"1145\":1}}],[\"客户端获取用户信息\",{\"1\":{\"1028\":1}}],[\"客户端侧依赖\",{\"0\":{\"862\":1}}],[\"客户端判断broker是否存活\",{\"1\":{\"845\":1}}],[\"客户端id\",{\"1\":{\"801\":1,\"802\":1,\"1534\":1}}],[\"客户端和服务器之间有状态交互\",{\"1\":{\"1272\":1}}],[\"客户端和\",{\"1\":{\"652\":1}}],[\"客户端的\",{\"1\":{\"616\":1}}],[\"客户端配置的客户端信息存放在clientregistrationrepository\",{\"1\":{\"345\":1}}],[\"客户端程序需要先导入这个包\",{\"1\":{\"116\":1}}],[\"备注\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1611\":1,\"1612\":1}}],[\"备忘录模式\",{\"1\":{\"1254\":1}}],[\"便于二次开发\",{\"1\":{\"1459\":1}}],[\"鉴权失败\",{\"1\":{\"1522\":2}}],[\"鉴权管理器\",{\"0\":{\"1522\":1}}],[\"鉴权\",{\"1\":{\"1455\":1}}],[\"积木报表\",{\"0\":{\"1454\":1}}],[\"右\",{\"1\":{\"1452\":1}}],[\"左连接\",{\"0\":{\"1468\":1}}],[\"左\",{\"1\":{\"1452\":1}}],[\"左侧的变量不应该是已经被声明过的\",{\"1\":{\"124\":1}}],[\"货主绑定仓库\",{\"1\":{\"1452\":1}}],[\"货主\",{\"1\":{\"1452\":2}}],[\"货主的查询功能\",{\"1\":{\"911\":1}}],[\"辅助类\",{\"1\":{\"1450\":1}}],[\"辅助的地址\",{\"1\":{\"200\":1}}],[\"完成channel的注册\",{\"1\":{\"1444\":1}}],[\"完成代办任务\",{\"1\":{\"583\":1}}],[\"掐头去尾\",{\"1\":{\"1425\":1}}],[\"轮询\",{\"1\":{\"1425\":2}}],[\"许多浏览器\",{\"1\":{\"1425\":1}}],[\"您的浏览器不支持\",{\"1\":{\"1407\":1}}],[\"您已经进入过滤器\",{\"1\":{\"421\":2}}],[\"获得消息事件\",{\"1\":{\"1407\":1}}],[\"获取在线用户\",{\"1\":{\"1597\":1}}],[\"获取系统服务列表\",{\"0\":{\"1595\":1},\"1\":{\"1588\":1}}],[\"获取字典条目\",{\"1\":{\"1586\":1}}],[\"获取接口列表\",{\"0\":{\"1586\":1},\"1\":{\"1577\":1,\"1586\":1}}],[\"获取指定角色绑定的菜单\",{\"0\":{\"1607\":1},\"1\":{\"1586\":1,\"1599\":1}}],[\"获取指定平台服务列表\",{\"0\":{\"1585\":1},\"1\":{\"1577\":1,\"1586\":1}}],[\"获取指定用户关联平台\",{\"0\":{\"1574\":1}}],[\"获取指定组合角色已绑定的客户端角色\",{\"0\":{\"1565\":1},\"1\":{\"1557\":1,\"1592\":1}}],[\"获取指定区间范围内的值\",{\"1\":{\"910\":1}}],[\"获取所属租户所有客户端角色数据\",{\"0\":{\"1564\":1},\"1\":{\"1557\":1}}],[\"获取所有接口url\",{\"0\":{\"1032\":1}}],[\"获取所有实例\",{\"1\":{\"872\":1}}],[\"获取用户指定平台的角色列表\",{\"1\":{\"1586\":1}}],[\"获取用户指定平台角色信息\",{\"0\":{\"1534\":1},\"1\":{\"1529\":1}}],[\"获取用户可以访问的地址\",{\"0\":{\"1535\":1}}],[\"获取用户可以访问地址\",{\"1\":{\"1529\":1}}],[\"获取用户信息存放到上下文中\",{\"1\":{\"1525\":1}}],[\"获取dashboardobject\",{\"1\":{\"1482\":1}}],[\"获取dump文件\",{\"1\":{\"1153\":1}}],[\"获取measurement\",{\"1\":{\"1482\":1}}],[\"获取对应属性值\",{\"1\":{\"1482\":1}}],[\"获取对应类型的实体仓库\",{\"1\":{\"1296\":1}}],[\"获取propertymetadata进行校验\",{\"1\":{\"1480\":1}}],[\"获取bossgroup\",{\"1\":{\"1450\":1}}],[\"获取nioserversocketchannel或niosocketchannel的内部类对象niobyteunsafe\",{\"1\":{\"1445\":1}}],[\"获取异步操作对象\",{\"1\":{\"1433\":1}}],[\"获取异步上下文\",{\"1\":{\"406\":1}}],[\"获取连接绑定的exchangehandler构造请求\",{\"1\":{\"1383\":1}}],[\"获取设备网关\",{\"1\":{\"1342\":1}}],[\"获取设备网络\",{\"1\":{\"1342\":1}}],[\"获取设备产品操作器\",{\"1\":{\"1342\":1}}],[\"获取设备操作器deviceoperator\",{\"1\":{\"1342\":1}}],[\"获取设备名称\",{\"1\":{\"649\":1}}],[\"获取网关配置\",{\"1\":{\"1319\":1}}],[\"获取缓存的设备网关\",{\"1\":{\"1319\":1}}],[\"获取缓存失败\",{\"1\":{\"911\":1}}],[\"获取告警目标实例alarmtarget\",{\"1\":{\"1309\":1}}],[\"获取数据库连接\",{\"1\":{\"1295\":1}}],[\"获取事务状态transactionstatus\",{\"1\":{\"1244\":1}}],[\"获取参数值\",{\"1\":{\"1220\":1}}],[\"获取变量\",{\"1\":{\"1220\":1}}],[\"获取有关特定服务的详细信息\",{\"1\":{\"1159\":1}}],[\"获取有关特定部署的详细信息\",{\"1\":{\"1159\":1}}],[\"获取有关特定pod的详细信息\",{\"1\":{\"1159\":1}}],[\"获取集群中的所有节点\",{\"1\":{\"1159\":1}}],[\"获取当前用户信息\",{\"1\":{\"1586\":1}}],[\"获取当前用户下指定平台菜单\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"获取当前用户下指定平台菜单权限编码\",{\"0\":{\"1584\":1},\"1\":{\"1577\":1}}],[\"获取当前用户下所有产品id\",{\"1\":{\"786\":1}}],[\"获取当前租户\",{\"1\":{\"1586\":1}}],[\"获取当前命名空间下的所有服务\",{\"1\":{\"1159\":1}}],[\"获取当前命名空间下的所有部署\",{\"1\":{\"1159\":1}}],[\"获取当前命名空间下的所有pod\",{\"1\":{\"1159\":1}}],[\"获取此包的目录\",{\"1\":{\"1032\":1}}],[\"获取包的物理路径\",{\"1\":{\"1032\":1}}],[\"获取类路径下的资源\",{\"1\":{\"1032\":1}}],[\"获取controller包下的class\",{\"1\":{\"1032\":1}}],[\"获取执行器\",{\"1\":{\"1013\":1}}],[\"获取执行结果\",{\"1\":{\"648\":1}}],[\"获取公众号订阅用户的的openid\",{\"0\":{\"1007\":1}}],[\"获取的是旧值\",{\"1\":{\"1002\":1}}],[\"获取匹配的路由对象\",{\"1\":{\"973\":1}}],[\"获取路由中的参数\",{\"1\":{\"973\":1}}],[\"获取目的路由参数\",{\"1\":{\"973\":1}}],[\"获取一个或多个值\",{\"1\":{\"910\":1}}],[\"获取一些统计数据\",{\"1\":{\"890\":1}}],[\"获取以更新的配置id\",{\"1\":{\"880\":1}}],[\"获取配置\",{\"1\":{\"880\":1}}],[\"获取配置服务nacosconfigservice\",{\"1\":{\"878\":1}}],[\"获取配置中心配置\",{\"1\":{\"744\":1}}],[\"获取命名空间对应组下service列表\",{\"1\":{\"892\":1}}],[\"获取命名服务\",{\"1\":{\"869\":1}}],[\"获取命令参数\",{\"1\":{\"162\":1}}],[\"获取kafkalistenercontainerfactory\",{\"1\":{\"811\":1}}],[\"获取被\",{\"1\":{\"811\":1}}],[\"获取被允许客户端\",{\"1\":{\"471\":1}}],[\"获取applicationconfig\",{\"1\":{\"744\":1}}],[\"获取aop通知拦截器\",{\"1\":{\"383\":1}}],[\"获取模型中moduledeployer\",{\"1\":{\"744\":1}}],[\"获取loader优先查找当前对象\",{\"1\":{\"736\":1}}],[\"获取servletcontext\",{\"1\":{\"676\":1}}],[\"获取serverhttprequest的建造器\",{\"1\":{\"471\":1}}],[\"获取完整列表\",{\"1\":{\"672\":1}}],[\"获取该网页的最后一次访问时间\",{\"1\":{\"652\":1}}],[\"获取与该域相关的\",{\"1\":{\"652\":1}}],[\"获取初始化参数\",{\"1\":{\"652\":1}}],[\"获取初始化父\",{\"1\":{\"330\":1}}],[\"获取上报javascript对象\",{\"1\":{\"649\":1}}],[\"获取标准物模型属性map\",{\"1\":{\"649\":1}}],[\"获取标准物模型属性值\",{\"1\":{\"649\":1}}],[\"获取topic\",{\"1\":{\"649\":1}}],[\"获取token\",{\"1\":{\"343\":1,\"346\":1,\"467\":1}}],[\"获取tokengranter\",{\"1\":{\"343\":1}}],[\"获取token相关的配置器\",{\"1\":{\"338\":1}}],[\"获取时间戳\",{\"1\":{\"649\":1}}],[\"获取时区偏移量\",{\"1\":{\"649\":1}}],[\"获取时区的utc偏移量\",{\"1\":{\"649\":2}}],[\"获取姓名\",{\"1\":{\"602\":1}}],[\"获取登录名\",{\"1\":{\"602\":1}}],[\"获取登录授权页面\",{\"1\":{\"345\":1}}],[\"获取jar包中指定资源的路径\",{\"1\":{\"592\":1}}],[\"获取jar包路径\",{\"1\":{\"592\":1}}],[\"获取项目路径\",{\"1\":{\"592\":1}}],[\"获取项目目录的方式\",{\"0\":{\"592\":1}}],[\"获取订阅者\",{\"1\":{\"556\":1}}],[\"获取flux中第一个元素\",{\"1\":{\"556\":1}}],[\"获取factories文件和import文件中配置类名称\",{\"1\":{\"494\":1}}],[\"获取factories和imports文件中的配置类\",{\"1\":{\"491\":1}}],[\"获取非简单属性\",{\"1\":{\"496\":1}}],[\"获取候选自动配置autoconfiguration\",{\"1\":{\"494\":1}}],[\"获取和校验token的时机\",{\"0\":{\"469\":1}}],[\"获取操作对象\",{\"1\":{\"468\":1}}],[\"获取认证对象\",{\"1\":{\"466\":1}}],[\"获取认证成功得到授权客户端信息\",{\"1\":{\"345\":1}}],[\"获取容器上下文\",{\"1\":{\"455\":1}}],[\"获取web\",{\"1\":{\"446\":1}}],[\"获取web请求中的异步管理器\",{\"1\":{\"406\":1}}],[\"获取websecurityconfigurer列表\",{\"1\":{\"329\":1}}],[\"获取代理对象\",{\"1\":{\"383\":1}}],[\"获取校验结果\",{\"0\":{\"353\":1},\"1\":{\"353\":1}}],[\"获取管理平台用户信息\",{\"1\":{\"349\":1}}],[\"获取不到会报clientauthorizationrequiredexception\",{\"1\":{\"345\":1}}],[\"获取已在服务器端注册的客户端信息\",{\"1\":{\"345\":1}}],[\"获取httpsecurity所有配置器configurers\",{\"1\":{\"334\":1}}],[\"获取元素索引\",{\"1\":{\"279\":1}}],[\"获取服务注册列表\",{\"1\":{\"213\":1}}],[\"获取锁\",{\"1\":{\"212\":2}}],[\"获取这两个数据\",{\"1\":{\"190\":1}}],[\"获取\",{\"1\":{\"146\":1,\"252\":1,\"652\":1,\"909\":1}}],[\"符号位参与逻辑运算\",{\"1\":{\"1399\":1}}],[\"符合与不符合\",{\"1\":{\"767\":1}}],[\"感兴趣事件分析\",{\"0\":{\"1399\":1}}],[\"真正处理设备消息的地方\",{\"1\":{\"1362\":1}}],[\"具体实现\",{\"1\":{\"1335\":1}}],[\"具体来说\",{\"1\":{\"1170\":1}}],[\"场景\",{\"0\":{\"1333\":1}}],[\"离线\",{\"1\":{\"1327\":1}}],[\"离线offline\",{\"1\":{\"1317\":1}}],[\"变更数据库设备状态\",{\"1\":{\"1328\":1}}],[\"变更数据库状态\",{\"1\":{\"1326\":2}}],[\"变更设备在线状态和数据库状态\",{\"1\":{\"1327\":1}}],[\"变量重新赋值\",{\"1\":{\"1219\":1}}],[\"变量操作\",{\"0\":{\"1219\":1}}],[\"变量名\",{\"1\":{\"985\":2,\"1220\":1}}],[\"变量遮蔽\",{\"0\":{\"285\":1}}],[\"变量在离开作用域后\",{\"1\":{\"264\":1}}],[\"变量的值\",{\"1\":{\"143\":1}}],[\"变量的地址是\",{\"1\":{\"143\":1}}],[\"变量的地址\",{\"1\":{\"141\":1}}],[\"变量储存的指针地址\",{\"1\":{\"143\":1}}],[\"变量是一种使用方便的占位符\",{\"1\":{\"141\":1}}],[\"变量自增\",{\"1\":{\"139\":1}}],[\"变量声明\",{\"0\":{\"123\":1}}],[\"变量\",{\"0\":{\"122\":1},\"1\":{\"116\":2,\"139\":1,\"140\":1,\"146\":1,\"584\":1,\"706\":1}}],[\"恢复设备会话\",{\"1\":{\"1321\":1}}],[\"恢复计数\",{\"1\":{\"129\":1}}],[\"禁用0\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"禁用\",{\"1\":{\"1327\":1}}],[\"禁用notactive\",{\"1\":{\"1317\":1}}],[\"禁用内联\",{\"1\":{\"983\":1}}],[\"国际化\",{\"0\":{\"1313\":1}}],[\"星期二\",{\"1\":{\"1311\":1}}],[\"满足条件后操作\",{\"1\":{\"1311\":1}}],[\"动作分支\",{\"1\":{\"1311\":1}}],[\"动态\",{\"1\":{\"860\":1}}],[\"动态生成html\",{\"1\":{\"651\":1}}],[\"动态获取触发时间\",{\"1\":{\"657\":1}}],[\"动态获取对象\",{\"1\":{\"479\":1}}],[\"动态获取远程代码包\",{\"1\":{\"173\":1}}],[\"动态路由配置\",{\"0\":{\"468\":1}}],[\"动态数组\",{\"0\":{\"301\":1},\"1\":{\"277\":1}}],[\"告警目标记录设备信息deviceid和devicename\",{\"1\":{\"1309\":1}}],[\"告警与规则引擎\",{\"0\":{\"1308\":1}}],[\"告白气球\",{\"1\":{\"479\":1}}],[\"平台接口的增删改查\",{\"1\":{\"1588\":1}}],[\"平台接口管理\",{\"0\":{\"1587\":1}}],[\"平台信息\",{\"1\":{\"1583\":1}}],[\"平台信息增删改查\",{\"1\":{\"1568\":1}}],[\"平台列表\",{\"1\":{\"1583\":1}}],[\"平台菜单编码\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"平台菜单增删改查\",{\"1\":{\"1577\":1}}],[\"平台菜单管理\",{\"0\":{\"1576\":1}}],[\"平台标识clientid查询前端路由信息\",{\"1\":{\"1577\":1}}],[\"平台标识clientid查询菜单树\",{\"1\":{\"1577\":1}}],[\"平台标识\",{\"1\":{\"1571\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1596\":1}}],[\"平台名称\",{\"1\":{\"1570\":1,\"1571\":1,\"1572\":1,\"1579\":1,\"1580\":1}}],[\"平台密钥\",{\"1\":{\"1570\":1,\"1571\":1,\"1575\":1}}],[\"平台id\",{\"1\":{\"1570\":1}}],[\"平台角色绑定菜单\",{\"1\":{\"1599\":1}}],[\"平台角色增删改查\",{\"1\":{\"1599\":1}}],[\"平台角色id列表\",{\"1\":{\"1566\":1}}],[\"平台角色管理\",{\"0\":{\"1598\":1},\"1\":{\"1503\":1}}],[\"平台角色的组合\",{\"1\":{\"1503\":1}}],[\"平台管理\",{\"0\":{\"1494\":1,\"1567\":1},\"1\":{\"1502\":1,\"1503\":1,\"1524\":1,\"1582\":1}}],[\"平台作为客户端\",{\"1\":{\"1328\":1}}],[\"平台也作为客户端订阅和发布相应消息\",{\"1\":{\"1288\":1}}],[\"平台还提供了事件总线来实现粒度更细的事件支持\",{\"1\":{\"1284\":1}}],[\"串口协议报文格式如下\",{\"1\":{\"1279\":1}}],[\"串口\",{\"0\":{\"1279\":1}}],[\"串行化\",{\"1\":{\"1044\":1}}],[\"占一个字节\",{\"1\":{\"1278\":1}}],[\"寄存器\",{\"0\":{\"1277\":1}}],[\"收尾任务队列\",{\"1\":{\"1445\":1}}],[\"收到所有订阅客户端的\",{\"1\":{\"1275\":1}}],[\"收到\",{\"1\":{\"1275\":2}}],[\"收到消息后\",{\"1\":{\"1275\":2}}],[\"收货在途\",{\"1\":{\"236\":1}}],[\"至少一次\",{\"1\":{\"1273\":1}}],[\"至多一次\",{\"1\":{\"1273\":1}}],[\"五\",{\"1\":{\"1272\":1}}],[\"四\",{\"1\":{\"1272\":1,\"1445\":1}}],[\"装饰给定的executor并确保currentexecutor\",{\"1\":{\"1445\":1}}],[\"装饰\",{\"1\":{\"1262\":1}}],[\"装饰器模式\",{\"0\":{\"1260\":1},\"1\":{\"1254\":1}}],[\"饿汉式\",{\"1\":{\"1256\":1}}],[\"懒汉式\",{\"1\":{\"1256\":2}}],[\"责任链模式\",{\"0\":{\"1261\":1},\"1\":{\"1254\":1}}],[\"观察者模式\",{\"1\":{\"1254\":1}}],[\"策略模式\",{\"1\":{\"1254\":1}}],[\"享元模式\",{\"1\":{\"1254\":1}}],[\"外链\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"外观模式\",{\"1\":{\"1254\":1}}],[\"外部网络的名称\",{\"1\":{\"1122\":1}}],[\"外部网络\",{\"1\":{\"1122\":1}}],[\"桥接模式\",{\"1\":{\"1254\":1}}],[\"抽象工厂模式\",{\"1\":{\"1254\":1}}],[\"抽象类businessbiz\",{\"1\":{\"1244\":1}}],[\"概述\",{\"0\":{\"1254\":1}}],[\"概念\",{\"0\":{\"729\":1,\"748\":1,\"1269\":1,\"1428\":1}}],[\"供查询\",{\"1\":{\"1243\":1}}],[\"拆分原则\",{\"1\":{\"1240\":1}}],[\"耦合度较高\",{\"1\":{\"1240\":1}}],[\"合并原则\",{\"1\":{\"1240\":1}}],[\"能效平台域名\",{\"1\":{\"1475\":1}}],[\"能力\",{\"1\":{\"1238\":1}}],[\"能够防止脚本中的许多逻辑错误\",{\"1\":{\"1222\":1}}],[\"活动\",{\"1\":{\"1238\":1}}],[\"活动profile\",{\"1\":{\"593\":1}}],[\"云原生的代表技术包括容器\",{\"1\":{\"1234\":1}}],[\"云原生技术有利于各组织在公有云\",{\"1\":{\"1234\":1}}],[\"云原生架构\",{\"0\":{\"1234\":1},\"1\":{\"1233\":1}}],[\"云原生多模数据库\",{\"1\":{\"1037\":1}}],[\"架构\",{\"0\":{\"1670\":1}}],[\"架构融合拉通\",{\"1\":{\"1238\":1}}],[\"架构的模式\",{\"0\":{\"1236\":1}}],[\"架构服务化\",{\"1\":{\"1233\":1}}],[\"架构演进\",{\"0\":{\"1233\":1}}],[\"架构设计\",{\"0\":{\"1232\":1}}],[\"崩溃恢复\",{\"0\":{\"1231\":1}}],[\"仔细分析日志\",{\"1\":{\"1229\":1}}],[\"详见2\",{\"1\":{\"1506\":1}}],[\"详细分析日志\",{\"1\":{\"1228\":1}}],[\"详解\",{\"1\":{\"1213\":1}}],[\"线上问题分析\",{\"0\":{\"1230\":1}}],[\"线上问题处理\",{\"0\":{\"1228\":1}}],[\"线程转储信息\",{\"1\":{\"1153\":1}}],[\"线程内部维护了threadlocal\",{\"1\":{\"915\":1}}],[\"线程就会挂起\",{\"1\":{\"911\":1}}],[\"线程就会等待状态\",{\"1\":{\"233\":1}}],[\"线程模型\",{\"0\":{\"683\":1}}],[\"线程\",{\"1\":{\"658\":2}}],[\"线程间隔离\",{\"1\":{\"602\":1}}],[\"线程间的通信\",{\"0\":{\"237\":1}}],[\"线程上下文切换\",{\"1\":{\"911\":1}}],[\"线程上下文\",{\"0\":{\"602\":1}}],[\"线程在执行过程中\",{\"1\":{\"243\":1}}],[\"线程在等待锁的释放\",{\"1\":{\"232\":1}}],[\"线程执行顺序\",{\"0\":{\"238\":1}}],[\"线程获取等待队列中的任务\",{\"1\":{\"236\":1}}],[\"线程工厂\",{\"1\":{\"236\":1}}],[\"线程池的方式\",{\"1\":{\"236\":1}}],[\"线程池会进行处理\",{\"1\":{\"233\":1}}],[\"线程池\",{\"0\":{\"233\":1}}],[\"线程已经执行完毕或者因为异常而终止\",{\"1\":{\"232\":1}}],[\"线程正在等待另一个线程的通知或者等待io操作完成\",{\"1\":{\"232\":2}}],[\"线程正在执行或者等待cpu时间片\",{\"1\":{\"232\":1}}],[\"线程对象已经被创建\",{\"1\":{\"232\":1}}],[\"线程状态\",{\"0\":{\"232\":1}}],[\"线程不像进程\",{\"1\":{\"209\":1,\"235\":1}}],[\"线程还会运行吗\",{\"0\":{\"208\":1}}],[\"线程b读到了线程a未提交的数据\",{\"1\":{\"204\":1}}],[\"线程数量\",{\"1\":{\"186\":1}}],[\"线程通信\",{\"0\":{\"113\":1},\"1\":{\"1246\":1}}],[\"既不是目录\",{\"1\":{\"1227\":1}}],[\"既可以通过\",{\"1\":{\"993\":1}}],[\"算数运算\",{\"0\":{\"1225\":1}}],[\"比较\",{\"0\":{\"1222\":1}}],[\"比如可以直接使用if\",{\"1\":{\"1222\":1}}],[\"比如执行\",{\"1\":{\"1179\":1}}],[\"比如在前面的\",{\"1\":{\"995\":1}}],[\"比如扩展\",{\"1\":{\"993\":1}}],[\"比如上面设置的是1分钟内\",{\"1\":{\"780\":1}}],[\"比如承接上个例子\",{\"1\":{\"770\":1,\"771\":1}}],[\"比如我的learngit文件夹就是一个工作区\",{\"1\":{\"1151\":1}}],[\"比如我们希望计算出account每个州的统计数量\",{\"1\":{\"769\":1}}],[\"比如我自定了一个\",{\"1\":{\"376\":1}}],[\"比如日志模块的方案\",{\"1\":{\"481\":1}}],[\"比如app呀\",{\"1\":{\"103\":1}}],[\"比如asp\",{\"1\":{\"103\":1}}],[\"比如helloblog\",{\"1\":{\"103\":1}}],[\"比如webapi\",{\"1\":{\"103\":1}}],[\"比如\",{\"1\":{\"20\":1,\"1222\":1}}],[\"括起来的情况\",{\"1\":{\"1220\":1}}],[\"→\",{\"1\":{\"1215\":1}}],[\"块定义了整个流水线中完成的所有的工作\",{\"1\":{\"1215\":1}}],[\"块类似\",{\"1\":{\"160\":1}}],[\"防抖\",{\"1\":{\"1311\":1}}],[\"防护等\",{\"1\":{\"1207\":1}}],[\"防护\",{\"1\":{\"1207\":1}}],[\"防止命名冲突\",{\"1\":{\"991\":1}}],[\"防止死锁\",{\"1\":{\"911\":1}}],[\"防止session攻击\",{\"1\":{\"346\":1}}],[\"防止出现平票的情况\",{\"1\":{\"98\":1}}],[\"终止\",{\"1\":{\"1207\":1}}],[\"激活相应的配置\",{\"1\":{\"1202\":1}}],[\"激活方式\",{\"0\":{\"1079\":1}}],[\"记住这个id\",{\"1\":{\"1202\":2}}],[\"记录锁\",{\"1\":{\"1048\":1}}],[\"记录\",{\"1\":{\"596\":2}}],[\"初次安装请将\",{\"1\":{\"1201\":1}}],[\"初始daoauthenticationprovider\",{\"1\":{\"341\":1}}],[\"初始化产品种类数据\",{\"1\":{\"1322\":1}}],[\"初始化网关id\",{\"1\":{\"1319\":1}}],[\"初始化仓库\",{\"0\":{\"1144\":1}}],[\"初始化ts项目\",{\"1\":{\"965\":1}}],[\"初始化设置clientcomms对象\",{\"1\":{\"843\":1}}],[\"初始化配置\",{\"1\":{\"744\":1}}],[\"初始化dubbo上下文\",{\"1\":{\"738\":1}}],[\"初始化coyoteadapter\",{\"1\":{\"688\":1}}],[\"初始化后调用\",{\"1\":{\"652\":1}}],[\"初始化groovy脚本对象\",{\"1\":{\"648\":1}}],[\"初始化bindings\",{\"1\":{\"648\":1}}],[\"初始化基础目录initbasedir\",{\"1\":{\"453\":1}}],[\"初始化servletcontext\",{\"1\":{\"447\":1,\"458\":1}}],[\"初始化属性资源initpropertysources\",{\"1\":{\"446\":1}}],[\"初始化器\",{\"1\":{\"391\":1}}],[\"初始化端点或路径匹配器\",{\"1\":{\"338\":1}}],[\"初始化时构建sqlcommand和methodsignature\",{\"1\":{\"852\":1}}],[\"初始化时增加的构造器\",{\"1\":{\"333\":1}}],[\"初始化时的字段顺序不需要和结构体定义时的顺序一致\",{\"1\":{\"271\":1}}],[\"初始化父认证管理器\",{\"1\":{\"330\":1}}],[\"初始化实例时\",{\"1\":{\"271\":1}}],[\"初始化切片s\",{\"1\":{\"152\":1}}],[\"初始化切片\",{\"1\":{\"152\":2}}],[\"初始化值依次是\",{\"1\":{\"152\":1}}],[\"初始化\",{\"0\":{\"1392\":1},\"1\":{\"140\":1,\"152\":1,\"244\":1,\"440\":1}}],[\"私有化构造器\",{\"1\":{\"1256\":1}}],[\"私有化构造方法\",{\"1\":{\"1256\":1}}],[\"私有云和混合云等新型动态环境中\",{\"1\":{\"1234\":1}}],[\"私库快照\",{\"1\":{\"1201\":1}}],[\"私库发行版\",{\"1\":{\"1201\":1}}],[\"私钥格式\",{\"1\":{\"627\":1}}],[\"私钥加密则用于身份认证\",{\"1\":{\"471\":1}}],[\"私钥解密\",{\"1\":{\"471\":1}}],[\"仓库和货主\",{\"1\":{\"1452\":1}}],[\"仓库和货主的关系\",{\"1\":{\"224\":1}}],[\"仓库\",{\"1\":{\"1452\":2}}],[\"仓库的路径\",{\"1\":{\"1203\":1}}],[\"仓库分组\",{\"1\":{\"1201\":1}}],[\"仓库说明\",{\"0\":{\"1201\":1}}],[\"物模型模块下唯一\",{\"1\":{\"1486\":3}}],[\"物模型接口及实现类处理\",{\"1\":{\"1479\":1}}],[\"物模型\",{\"0\":{\"1482\":1},\"1\":{\"1304\":1,\"1479\":2}}],[\"物联网平台问题\",{\"0\":{\"1478\":1}}],[\"物联网平台jetlinks\",{\"1\":{\"84\":1}}],[\"物联网\",{\"0\":{\"1268\":1,\"1671\":1}}],[\"物理卷\",{\"1\":{\"1197\":1}}],[\"物理分区\",{\"1\":{\"1197\":1}}],[\"逻辑实体\",{\"1\":{\"1239\":1}}],[\"逻辑运算符\",{\"0\":{\"1224\":1}}],[\"逻辑卷在操作系统中映射的文件的据对路径为\",{\"1\":{\"1197\":1}}],[\"逻辑卷pe数\",{\"1\":{\"1197\":1}}],[\"逻辑卷名称\",{\"1\":{\"1197\":1}}],[\"逻辑卷管理器\",{\"1\":{\"1197\":1}}],[\"逻辑卷最终是给用户使用的\",{\"1\":{\"1197\":1}}],[\"逻辑分区\",{\"1\":{\"1197\":1}}],[\"逻辑值\",{\"1\":{\"928\":1}}],[\"卷组名\",{\"1\":{\"1197\":1}}],[\"卷组\",{\"1\":{\"1197\":1}}],[\"卷的最小单位\",{\"1\":{\"1197\":1}}],[\"卷就是以pe的形式存储\",{\"1\":{\"1197\":1}}],[\"卷名\",{\"1\":{\"1100\":1}}],[\"磁盘\",{\"1\":{\"1197\":1}}],[\"磁盘与分区挂载\",{\"0\":{\"1197\":1}}],[\"磁盘缓冲区\",{\"1\":{\"1179\":1}}],[\"退出\",{\"1\":{\"1187\":1,\"1597\":1}}],[\"退出了一个不会影响另外一个\",{\"1\":{\"209\":1,\"235\":1}}],[\"软件类型id\",{\"1\":{\"1466\":1}}],[\"软件名称管理\",{\"1\":{\"1466\":1}}],[\"软件名称\",{\"0\":{\"1466\":1},\"1\":{\"1466\":1}}],[\"软件名称id\",{\"1\":{\"1465\":1}}],[\"软件版本\",{\"0\":{\"1465\":1},\"1\":{\"1465\":1}}],[\"软件版本列表\",{\"1\":{\"1464\":1}}],[\"软件包id\",{\"1\":{\"1467\":1}}],[\"软件包版本号\",{\"1\":{\"1464\":1}}],[\"软件包名称\",{\"1\":{\"1464\":1}}],[\"软件包\",{\"0\":{\"1464\":1},\"1\":{\"1463\":1,\"1464\":1}}],[\"软连接名称为卷组名称加\",{\"1\":{\"1197\":1}}],[\"软链接文件\",{\"1\":{\"1184\":1}}],[\"软引用\",{\"1\":{\"243\":1}}],[\"替换字段\",{\"1\":{\"1187\":1}}],[\"替换所有\",{\"1\":{\"1183\":1}}],[\"替换\",{\"1\":{\"1183\":1}}],[\"替代\",{\"1\":{\"282\":1}}],[\"追加环境变量\",{\"1\":{\"1182\":1}}],[\"追加资源路径配置\",{\"1\":{\"594\":1}}],[\"压缩文件\",{\"1\":{\"1181\":1}}],[\"希望这个解释对你有所帮助\",{\"1\":{\"1171\":1}}],[\"另一个端点连接到宿主机的网络命名空间中\",{\"1\":{\"1170\":1}}],[\"广泛使用的控制器有\",{\"1\":{\"1167\":1}}],[\"广播调用所有提供者\",{\"1\":{\"730\":1}}],[\"水平扩展\",{\"1\":{\"1167\":1}}],[\"水平分库和水平分表\",{\"1\":{\"221\":1}}],[\"灵活性和弹性\",{\"1\":{\"1161\":1}}],[\"稳定的网络标识\",{\"1\":{\"1161\":1}}],[\"稳定排序\",{\"1\":{\"307\":1}}],[\"命名空间与虚拟化\",{\"0\":{\"1196\":1}}],[\"命名空间\",{\"0\":{\"1160\":1}}],[\"命令模式\",{\"1\":{\"1254\":1}}],[\"命令讲解\",{\"1\":{\"1200\":1}}],[\"命令查看逻辑卷信息\",{\"1\":{\"1197\":1}}],[\"命令查看卷组信息\",{\"1\":{\"1197\":1}}],[\"命令来创建逻辑卷\",{\"1\":{\"1197\":1}}],[\"命令来创建vg\",{\"1\":{\"1197\":1}}],[\"命令删除逻辑卷\",{\"1\":{\"1197\":1}}],[\"命令删除卷组\",{\"1\":{\"1197\":1}}],[\"命令删除物理卷\",{\"1\":{\"1197\":1}}],[\"命令将\",{\"1\":{\"1197\":1}}],[\"命令将文件提交到暂存区\",{\"1\":{\"1147\":1}}],[\"命令第一次后\",{\"1\":{\"1179\":1}}],[\"命令行分析\",{\"1\":{\"1153\":1}}],[\"命令git\",{\"1\":{\"1151\":1}}],[\"命令\",{\"0\":{\"1176\":1},\"1\":{\"623\":1,\"1057\":1,\"1150\":1,\"1159\":1}}],[\"约10秒一次\",{\"1\":{\"1155\":1}}],[\"展示卷信息\",{\"1\":{\"1197\":2}}],[\"展示该进程所有线程\",{\"1\":{\"1153\":1}}],[\"展示缓冲池的状态\",{\"1\":{\"717\":1}}],[\"撤销修改就回到添加到暂存区后的状态\",{\"1\":{\"1151\":1}}],[\"撤销修改就回到和版本库一模一样的状态\",{\"1\":{\"1151\":1}}],[\"又作了修改\",{\"1\":{\"1151\":1}}],[\"又可以通过\",{\"1\":{\"993\":1}}],[\"现在\",{\"1\":{\"1151\":2}}],[\"丢及工作区的修改\",{\"1\":{\"1147\":1}}],[\"回调地址\",{\"1\":{\"1531\":1}}],[\"回复\",{\"1\":{\"1330\":1}}],[\"回复确认后才会释放消息id\",{\"1\":{\"15\":1}}],[\"回到最新版本\",{\"1\":{\"1147\":1}}],[\"回到未来\",{\"1\":{\"1147\":1}}],[\"回到过去\",{\"1\":{\"1147\":1}}],[\"移动重命名\",{\"1\":{\"1144\":1}}],[\"移除当前库并复制到指定库\",{\"1\":{\"908\":1}}],[\"移除线程局部变量\",{\"1\":{\"602\":1}}],[\"移除环境\",{\"1\":{\"96\":1}}],[\"克隆\",{\"1\":{\"1144\":1}}],[\"克隆一个现有的环境到一个新的名称下\",{\"1\":{\"96\":1}}],[\"搭建\",{\"1\":{\"1158\":1}}],[\"搭建maven私有仓库\",{\"1\":{\"1142\":1}}],[\"搭建步骤\",{\"0\":{\"965\":1}}],[\"图形界面\",{\"1\":{\"1136\":1}}],[\"挂载进\",{\"1\":{\"1128\":1}}],[\"社区\",{\"1\":{\"1127\":1}}],[\"密码永不过期\",{\"1\":{\"1141\":1}}],[\"密码\",{\"1\":{\"1127\":1,\"1129\":1,\"1177\":1}}],[\"密钥过期时间\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"密钥只能是16\",{\"1\":{\"1515\":1}}],[\"密钥长度只能为16\",{\"1\":{\"719\":1}}],[\"密钥库格式转换\",{\"1\":{\"623\":1}}],[\"密钥库类型\",{\"1\":{\"623\":1}}],[\"密钥库文件名路径\",{\"1\":{\"623\":1}}],[\"升级前端\",{\"1\":{\"1123\":1}}],[\"升级为表级锁\",{\"1\":{\"1048\":1}}],[\"使得浏览器和服务器只需要做一个握手的动作\",{\"1\":{\"1425\":1}}],[\"使得浏览器需要对服务器不断发出请求\",{\"1\":{\"1425\":1}}],[\"使得一个service可以公开多个端口\",{\"1\":{\"1171\":1}}],[\"使变量立即生效\",{\"1\":{\"1182\":1}}],[\"使不同compose中的容器可以通信\",{\"1\":{\"1122\":1}}],[\"使之立即生效\",{\"1\":{\"1118\":1,\"1186\":1}}],[\"使当前shell读入路径为filepath的shell文件并依次执行文件中的所有语句\",{\"1\":{\"1118\":1,\"1186\":1}}],[\"使用空间\",{\"1\":{\"1649\":1}}],[\"使用全局过滤器将token解析得到的用户信息写入到要转发的请求头中\",{\"1\":{\"1523\":1}}],[\"使用自定义token构造器构造token\",{\"1\":{\"1519\":1}}],[\"使用自定义消息类mqcontent\",{\"1\":{\"1245\":1}}],[\"使用私钥对密码进行解密\",{\"1\":{\"1518\":1}}],[\"使用区域字段\",{\"1\":{\"1477\":1}}],[\"使用横向分组也有问题\",{\"1\":{\"1456\":1}}],[\"使用拦截器进行处理\",{\"1\":{\"1455\":1}}],[\"使用报表参数拼接导出请求\",{\"1\":{\"1455\":1}}],[\"使用关系表维护仓库货主间的多对多关系\",{\"1\":{\"1452\":1}}],[\"使用vertx\",{\"1\":{\"1353\":1}}],[\"使用guaua谷歌工具\",{\"1\":{\"1345\":1}}],[\"使用globalauthenticationconfigureradapter配置器\",{\"1\":{\"331\":1}}],[\"使用存储策略进行数据操作\",{\"1\":{\"1344\":1}}],[\"使用设备操作器中的devicemessagesender\",{\"1\":{\"1331\":1}}],[\"使用解析器获取rdbtablemetadata数据\",{\"1\":{\"1300\":1}}],[\"使用exists语句构造自定义查询条件\",{\"1\":{\"1292\":1}}],[\"使用反射\",{\"1\":{\"1257\":1}}],[\"使用枚举来创建单例对象\",{\"1\":{\"1256\":1}}],[\"使用索引名称\",{\"1\":{\"1248\":1}}],[\"使用fastjson转string\",{\"1\":{\"1245\":1}}],[\"使用factorybean的getobject获取对象\",{\"1\":{\"480\":1}}],[\"使用额外工具处理数据后保存到redis中\",{\"1\":{\"1243\":1}}],[\"使用变量\",{\"1\":{\"1219\":1}}],[\"使用local修饰的变量在函数体外无法访问\",{\"1\":{\"1219\":1}}],[\"使用localhost\",{\"1\":{\"1161\":1}}],[\"使用成长轨迹的maven库\",{\"1\":{\"1203\":1}}],[\"使用逻辑卷\",{\"1\":{\"1197\":1}}],[\"使用yaml或json文件创建或更新资源\",{\"1\":{\"1159\":1}}],[\"使用yaml或json文件创建资源\",{\"1\":{\"1159\":1}}],[\"使用配置文件跳过检查\",{\"1\":{\"1141\":1}}],[\"使用nginx转发注册\",{\"1\":{\"1133\":1}}],[\"使用nuget分发\",{\"1\":{\"103\":1}}],[\"使用的算法\",{\"1\":{\"1130\":1,\"1145\":1}}],[\"使用的数据库连接池\",{\"1\":{\"850\":1}}],[\"使用超级管理员执行sudo\",{\"1\":{\"1129\":1}}],[\"使用已存在网络\",{\"1\":{\"1122\":1}}],[\"使用已有的会话对象\",{\"1\":{\"652\":1}}],[\"使用该指令的语法格式如下\",{\"1\":{\"1111\":1}}],[\"使用docker\",{\"1\":{\"1130\":1}}],[\"使用docker在arm架构上重新打包\",{\"1\":{\"37\":1}}],[\"使用dependencymanagement中的版本\",{\"1\":{\"1076\":1}}],[\"使用最高版本\",{\"1\":{\"1068\":1}}],[\"使用间隙锁\",{\"1\":{\"1048\":1}}],[\"使用bucket\",{\"1\":{\"1650\":1}}],[\"使用b+树组织索引\",{\"1\":{\"1045\":1}}],[\"使用bgsave命令进行某一时刻的数据进行存盘\",{\"1\":{\"911\":1}}],[\"使用默认token校验\",{\"1\":{\"1031\":1}}],[\"使用缓存\",{\"1\":{\"1029\":1}}],[\"使用rabbitmq\",{\"1\":{\"1024\":1}}],[\"使用reactorql处理实时数据\",{\"1\":{\"1335\":1}}],[\"使用readonly标识后的变量\",{\"1\":{\"1219\":1}}],[\"使用resolve\",{\"1\":{\"1000\":1}}],[\"使用registryconfig作为配置中心配置\",{\"1\":{\"744\":1}}],[\"使用request建造器构建serverhttprequest\",{\"1\":{\"471\":1}}],[\"使用replace更改引用本地包\",{\"1\":{\"169\":1}}],[\"使用方便\",{\"1\":{\"1454\":1}}],[\"使用方可以用\",{\"1\":{\"992\":1}}],[\"使用方法\",{\"1\":{\"279\":1}}],[\"使用构造签名类型和原型属性\",{\"1\":{\"991\":1}}],[\"使用声明文件和ts文件来描述\",{\"1\":{\"984\":1}}],[\"使用useroutematch\",{\"1\":{\"976\":1}}],[\"使用useparam钩子获取路由参数\",{\"1\":{\"975\":1}}],[\"使用updatewrapper方式更新\",{\"1\":{\"902\":1}}],[\"使用xxl定时任务重新发送\",{\"1\":{\"915\":1}}],[\"使用对订单id创建锁实例\",{\"1\":{\"911\":1}}],[\"使用工厂bean来生成bean对象\",{\"1\":{\"900\":1}}],[\"使用了一个特殊的容器\",{\"1\":{\"1170\":1}}],[\"使用了springboot的自动配置功能代替配置文件配置的方式\",{\"1\":{\"852\":1}}],[\"使用了线程池\",{\"1\":{\"215\":1}}],[\"使用样例\",{\"0\":{\"792\":1}}],[\"使用oauth2认证\",{\"1\":{\"1018\":1}}],[\"使用outputstream将消息发送出去\",{\"1\":{\"836\":1}}],[\"使用order\",{\"1\":{\"780\":1}}],[\"使用oopmap数据结构存放对象的位置信息\",{\"1\":{\"243\":1}}],[\"使用keyword类型\",{\"1\":{\"762\":1}}],[\"使用场景\",{\"1\":{\"749\":2,\"1447\":1}}],[\"使用timeout属性配置超时时间\",{\"1\":{\"730\":1}}],[\"使用tomcatcontextcustomizers\",{\"1\":{\"451\":1}}],[\"使用用户信息构造jwt\",{\"1\":{\"722\":1}}],[\"使用jdk自带的jvisualvm和jvisualgc插件对gc进行分析\",{\"1\":{\"1154\":1}}],[\"使用json格式将数据存储\",{\"1\":{\"748\":1}}],[\"使用js在客户端设置\",{\"1\":{\"652\":1}}],[\"使用jwt的方式\",{\"1\":{\"722\":1}}],[\"使用消息队列\",{\"1\":{\"666\":1}}],[\"使用httpwebhandleradapter的handle方法处理\",{\"1\":{\"1262\":1}}],[\"使用httpsessionrequestcache请求缓存存取客户端的授权请求\",{\"1\":{\"346\":1}}],[\"使用hutool的cacheutil的定时缓存\",{\"1\":{\"1249\":1}}],[\"使用hutool脚本工具\",{\"1\":{\"646\":1}}],[\"使用参考参考\",{\"1\":{\"1093\":1}}],[\"使用参考\",{\"1\":{\"646\":1}}],[\"使用线程局部变量定义上下文\",{\"1\":{\"602\":1}}],[\"使用线程池的方式\",{\"1\":{\"223\":1}}],[\"使用条件表达式表示处理某一任务的create或complete事件\",{\"1\":{\"589\":1,\"711\":1}}],[\"使用条件判断是否有值\",{\"1\":{\"373\":1}}],[\"使用$\",{\"1\":{\"584\":1,\"706\":1}}],[\"使用其内部集成的持续集成工具\",{\"1\":{\"565\":1}}],[\"使用其它消息队列如kafka\",{\"1\":{\"223\":1}}],[\"使用webservermanager创建web服务器\",{\"1\":{\"507\":1}}],[\"使用crontab实现\",{\"1\":{\"925\":1}}],[\"使用configurationclasspostprocessor获取配置类的beandefinition\",{\"1\":{\"483\":1}}],[\"使用chan关键字\",{\"1\":{\"190\":1}}],[\"使用过滤器适配器gatewayfilteradapter进行过滤器包装\",{\"1\":{\"473\":1}}],[\"使用密钥对token解密\",{\"1\":{\"471\":1}}],[\"使用await\",{\"1\":{\"998\":1}}],[\"使用aop\",{\"1\":{\"911\":1}}],[\"使用aggs关键字对state字段聚合\",{\"1\":{\"769\":1}}],[\"使用adminaccessfilter全局过滤器\",{\"1\":{\"471\":1}}],[\"使用authenticated判别时不包括匿名认证对象annoymousauthentcation\",{\"1\":{\"336\":1}}],[\"使用上述初始化器配置上下文configurecontext\",{\"1\":{\"451\":1}}],[\"使用原生servlet注解定义filter\",{\"1\":{\"421\":1}}],[\"使用spingboot组件\",{\"1\":{\"1472\":1}}],[\"使用spring事件机制\",{\"1\":{\"589\":1,\"711\":1}}],[\"使用spring\",{\"1\":{\"421\":1,\"468\":1}}],[\"使用sql数据源\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"使用systemctl去启停service\",{\"1\":{\"1205\":1}}],[\"使用store\",{\"1\":{\"998\":1}}],[\"使用serverendpointconfig\",{\"1\":{\"1417\":1}}],[\"使用set方法注入\",{\"1\":{\"900\":1}}],[\"使用session方式\",{\"1\":{\"722\":1}}],[\"使用sharedobject初始化\",{\"1\":{\"333\":1}}],[\"使用initwebapplicationcontext初始化servlet的上下文\",{\"1\":{\"401\":1}}],[\"使用idea自带的测试\",{\"1\":{\"40\":1}}],[\"使用idea运行时候发生报错\",{\"0\":{\"40\":1}}],[\"使用mqttendpoint和客户端进行通信\",{\"1\":{\"1349\":1}}],[\"使用modelmap取出\",{\"1\":{\"377\":1}}],[\"使用model取出\",{\"1\":{\"377\":1}}],[\"使用mvcvalidator进行校验\",{\"1\":{\"353\":1}}],[\"使用特征作为函数参数\",{\"1\":{\"297\":1}}],[\"使用同步更新方式\",{\"1\":{\"224\":1}}],[\"使用锁\",{\"1\":{\"216\":1}}],[\"使用2的n次方便于使用与运算得到对应的数组散列值或索引\",{\"1\":{\"198\":1}}],[\"使用一个线程执行多个协程\",{\"1\":{\"185\":1}}],[\"使用中间件\",{\"0\":{\"178\":1}}],[\"使用新版本包管理器\",{\"1\":{\"173\":1}}],[\"使用键输出地图值\",{\"1\":{\"154\":1}}],[\"使用指针访问值\",{\"1\":{\"143\":1}}],[\"使用操作符\",{\"1\":{\"126\":1}}],[\"使用文件系统分发\",{\"1\":{\"103\":1}}],[\"使用下述方法解决\",{\"1\":{\"59\":1}}],[\"使用\",{\"0\":{\"126\":1,\"186\":1,\"236\":1,\"302\":1,\"382\":1,\"413\":1,\"466\":1,\"791\":1,\"796\":1,\"905\":1,\"915\":1,\"930\":1,\"985\":1,\"1041\":1,\"1086\":1,\"1119\":1,\"1256\":1,\"1259\":1,\"1262\":1,\"1455\":1,\"1460\":1},\"1\":{\"38\":1,\"103\":1,\"106\":1,\"131\":1,\"133\":1,\"154\":1,\"176\":1,\"264\":1,\"277\":1,\"282\":1,\"291\":1,\"304\":1,\"312\":1,\"377\":1,\"476\":1,\"730\":1,\"992\":2,\"1197\":6,\"1218\":1,\"1222\":1,\"1295\":1,\"1408\":1}}],[\"使用官方在github提供的方案\",{\"1\":{\"37\":1}}],[\"成为ls\",{\"1\":{\"1113\":1}}],[\"成员变量的思考\",{\"0\":{\"354\":1}}],[\"成员名\",{\"1\":{\"149\":1}}],[\"想追加一个命令\",{\"1\":{\"1113\":1}}],[\"想要在闭包内部捕获可变借用\",{\"1\":{\"318\":1}}],[\"顺序执行\",{\"1\":{\"1102\":1}}],[\"互相同步\",{\"1\":{\"1098\":1}}],[\"宿主机文件系统\",{\"1\":{\"1098\":1}}],[\"赋予权限\",{\"1\":{\"1092\":1}}],[\"赋值\",{\"0\":{\"929\":1},\"1\":{\"200\":1}}],[\"赋值操作符\",{\"0\":{\"126\":1}}],[\"脚本运行的当前进程号\",{\"1\":{\"1220\":1}}],[\"脚本化流水线\",{\"0\":{\"1216\":1},\"1\":{\"1083\":1}}],[\"脚本将\",{\"1\":{\"996\":1}}],[\"环境\",{\"1\":{\"1458\":1}}],[\"环境中的任何可用代理\",{\"1\":{\"1214\":1}}],[\"环境变量\",{\"1\":{\"1079\":1,\"1163\":1}}],[\"环境名称\",{\"1\":{\"96\":2}}],[\"名字暂定为tfdb\",{\"1\":{\"1479\":1}}],[\"名字随便起\",{\"1\":{\"1078\":1}}],[\"名称\",{\"1\":{\"271\":1,\"801\":1,\"1531\":3,\"1532\":2,\"1533\":2,\"1534\":3,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":1,\"1583\":2,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":1,\"1611\":2,\"1612\":2,\"1613\":1,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":2,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":2,\"1641\":1}}],[\"才返回\",{\"1\":{\"1223\":1}}],[\"才能使用\",{\"1\":{\"1074\":1}}],[\"才会应用到这些类型声明\",{\"1\":{\"992\":1}}],[\"才会执行\",{\"1\":{\"935\":1}}],[\"普通任务队列\",{\"1\":{\"1445\":1}}],[\"普通订阅\",{\"1\":{\"1266\":1}}],[\"普通jar\",{\"1\":{\"1066\":1}}],[\"普通java项目\",{\"1\":{\"1065\":1}}],[\"普通用户\",{\"0\":{\"350\":1},\"1\":{\"348\":1}}],[\"源码文件放在\",{\"1\":{\"1065\":1}}],[\"队列\",{\"1\":{\"1062\":1,\"1266\":1}}],[\"宽表\",{\"1\":{\"1062\":1}}],[\"宽表引擎\",{\"1\":{\"1038\":1}}],[\"半结构化数据\",{\"1\":{\"1061\":1}}],[\"快照读即select查询\",{\"1\":{\"1050\":1}}],[\"快速失败\",{\"1\":{\"730\":1}}],[\"页锁\",{\"1\":{\"1048\":1}}],[\"页面缓存\",{\"1\":{\"1179\":1}}],[\"页面\",{\"1\":{\"39\":1,\"1503\":1}}],[\"临键锁\",{\"1\":{\"1048\":1}}],[\"临时生效\",{\"1\":{\"17\":1}}],[\"临时\",{\"1\":{\"5\":1}}],[\"间隙锁\",{\"1\":{\"1048\":1}}],[\"排它锁\",{\"1\":{\"1048\":1}}],[\"排序值\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"排序类型\",{\"1\":{\"780\":1}}],[\"排序字段\",{\"1\":{\"780\":1}}],[\"排序操作\",{\"1\":{\"749\":1}}],[\"排序\",{\"0\":{\"307\":1},\"1\":{\"672\":1,\"749\":1}}],[\"意向排它锁\",{\"1\":{\"1048\":1}}],[\"意向共享锁\",{\"1\":{\"1048\":1}}],[\"范围或等值查询不能避免幻读\",{\"1\":{\"1051\":1}}],[\"范围查询时前后结果不一致\",{\"1\":{\"1044\":1}}],[\"范围range\",{\"0\":{\"153\":1}}],[\"读写比例\",{\"1\":{\"1491\":1}}],[\"读写线程获取到结果\",{\"1\":{\"1433\":1}}],[\"读\",{\"1\":{\"1399\":1}}],[\"读输入寄存器\",{\"1\":{\"1278\":1}}],[\"读保持寄存器\",{\"1\":{\"1278\":1}}],[\"读离散输入寄存器\",{\"1\":{\"1278\":1}}],[\"读线圈寄存器\",{\"1\":{\"1278\":1}}],[\"读锁\",{\"1\":{\"1048\":1}}],[\"读操作时\",{\"1\":{\"1044\":2}}],[\"读已提交\",{\"1\":{\"1044\":1}}],[\"读未提交\",{\"1\":{\"1044\":1}}],[\"读取\",{\"0\":{\"1433\":1}}],[\"读取数据\",{\"1\":{\"1400\":1}}],[\"读取事件处理流程\",{\"0\":{\"1400\":1}}],[\"读取jar包文件\",{\"1\":{\"1357\":1}}],[\"读取协议jar包生成协议\",{\"1\":{\"1354\":1}}],[\"读取最新记录\",{\"1\":{\"1050\":1}}],[\"读取配置中心配置\",{\"0\":{\"876\":1}}],[\"读取cookie\",{\"1\":{\"652\":1}}],[\"读取指定位置的元素有两种方式可选\",{\"1\":{\"304\":1}}],[\"读取不到数据\",{\"1\":{\"256\":1}}],[\"树剪枝叶\",{\"1\":{\"1036\":1}}],[\"树的元素\",{\"1\":{\"970\":1}}],[\"剪枝\",{\"1\":{\"1036\":2}}],[\"推荐使用大括号版\",{\"1\":{\"1219\":1}}],[\"推荐使用\",{\"1\":{\"1036\":1,\"1222\":2}}],[\"推送\",{\"1\":{\"1472\":1}}],[\"推送时需登录\",{\"1\":{\"1129\":1}}],[\"推送消息的本质是拉取消息\",{\"1\":{\"916\":1}}],[\"推送远程仓库\",{\"1\":{\"565\":1}}],[\"推送到远程仓库并关联\",{\"1\":{\"1144\":1}}],[\"推送到远程仓库\",{\"1\":{\"564\":1}}],[\"菜单接口表记录菜单id\",{\"1\":{\"1644\":1}}],[\"菜单id列表\",{\"1\":{\"1606\":1}}],[\"菜单唯一id\",{\"1\":{\"1581\":1}}],[\"菜单列表\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"菜单类型\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"菜单名称\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"菜单管理\",{\"1\":{\"1502\":1,\"1503\":1,\"1524\":1,\"1583\":1}}],[\"菜单表和权限表\",{\"1\":{\"1452\":1}}],[\"菜单表\",{\"0\":{\"1034\":1},\"1\":{\"1452\":1,\"1644\":1}}],[\"菜单\",{\"0\":{\"1033\":1},\"1\":{\"1034\":1}}],[\"建立运行信息表\",{\"1\":{\"1477\":1}}],[\"建立一个file\",{\"1\":{\"1032\":1}}],[\"建造者模式\",{\"1\":{\"1254\":1}}],[\"建造器上下文\",{\"1\":{\"333\":1}}],[\"权限管理\",{\"1\":{\"1503\":1}}],[\"权限范围等信息\",{\"1\":{\"1503\":1}}],[\"权限表的设计\",{\"1\":{\"1452\":2}}],[\"权限编码\",{\"1\":{\"1028\":1,\"1579\":1,\"1580\":1}}],[\"权限\",{\"0\":{\"1177\":1},\"1\":{\"1028\":1}}],[\"权限被拒绝\",{\"0\":{\"27\":1}}],[\"角色绑定\",{\"1\":{\"1607\":1}}],[\"角色绑定菜单\",{\"0\":{\"1606\":1},\"1\":{\"1586\":1,\"1592\":1}}],[\"角色绑定用户\",{\"1\":{\"1546\":1,\"1586\":1}}],[\"角色管理\",{\"1\":{\"1583\":1}}],[\"角色描述\",{\"1\":{\"1559\":1,\"1560\":1,\"1561\":1,\"1601\":1,\"1602\":1}}],[\"角色编码\",{\"1\":{\"1559\":1,\"1560\":1,\"1601\":1,\"1602\":1}}],[\"角色名称\",{\"1\":{\"1559\":1,\"1560\":1,\"1561\":1,\"1601\":1,\"1602\":1,\"1603\":1}}],[\"角色权限管理\",{\"1\":{\"1502\":1,\"1524\":1}}],[\"角色的权限相交\",{\"1\":{\"1030\":1}}],[\"角色聚合\",{\"0\":{\"1030\":1}}],[\"角色id列表\",{\"1\":{\"1555\":1}}],[\"角色id\",{\"1\":{\"1028\":1,\"1560\":1,\"1602\":1,\"1606\":1}}],[\"角色\",{\"1\":{\"1028\":2}}],[\"协议升级请求\",{\"1\":{\"1418\":1}}],[\"协议事件处理类\",{\"1\":{\"1358\":1}}],[\"协议管理\",{\"0\":{\"1343\":1}}],[\"协议支持\",{\"1\":{\"1342\":1}}],[\"协议包类型\",{\"1\":{\"1305\":1}}],[\"协议表\",{\"1\":{\"1305\":1}}],[\"协议及证书\",{\"0\":{\"1305\":1}}],[\"协议标识符\",{\"1\":{\"1280\":1}}],[\"协议\",{\"0\":{\"1270\":1,\"1491\":1},\"1\":{\"1269\":1,\"1304\":1,\"1317\":1,\"1326\":1,\"1327\":1}}],[\"协议选择\",{\"1\":{\"1015\":1}}],[\"协程在线程基础上执行\",{\"1\":{\"185\":1}}],[\"协程与系统线程并不是一一对应关系\",{\"1\":{\"185\":1}}],[\"协程与通道\",{\"0\":{\"185\":1}}],[\"公众号后台服务器根据code获取accesstoken和openid\",{\"1\":{\"1007\":1}}],[\"公众号\",{\"0\":{\"1006\":1}}],[\"公钥加密标准pkcs中定义的pkcs\",{\"1\":{\"625\":1}}],[\"公钥加密\",{\"1\":{\"471\":1}}],[\"微信内部浏览器会渲染公众号或小程序中打开的网页\",{\"1\":{\"1005\":1}}],[\"微信内部浏览器\",{\"0\":{\"1005\":1}}],[\"微服务用户管理\",{\"0\":{\"1646\":1},\"1\":{\"1646\":1}}],[\"微服务治理能力\",{\"1\":{\"1241\":1}}],[\"微服务架构\",{\"1\":{\"1233\":1}}],[\"微服务go\",{\"1\":{\"165\":1}}],[\"微服务\",{\"0\":{\"70\":1},\"1\":{\"1234\":1}}],[\"立即修改\",{\"1\":{\"1183\":1}}],[\"立即调用子组件方法获取最新的值\",{\"1\":{\"1002\":1}}],[\"立即执行函数\",{\"1\":{\"932\":1}}],[\"问题\",{\"0\":{\"1001\":1}}],[\"影响通信\",{\"1\":{\"1430\":1}}],[\"影响赋值\",{\"1\":{\"998\":1}}],[\"影响性能\",{\"1\":{\"180\":1}}],[\"带参报表\",{\"1\":{\"1456\":1}}],[\"带参数二维码的生成\",{\"0\":{\"1008\":1}}],[\"带着token\",{\"1\":{\"1028\":1}}],[\"带着code重定向到指定url\",{\"1\":{\"1007\":1}}],[\"带有命名空间的模块\",{\"1\":{\"998\":1}}],[\"带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态\",{\"1\":{\"190\":1}}],[\"何时执行完成\",{\"1\":{\"998\":1}}],[\"统一管理多个组件共享的状态\",{\"1\":{\"998\":1}}],[\"统计相关数量\",{\"1\":{\"1328\":1}}],[\"统计sql的耗时时间\",{\"1\":{\"911\":1}}],[\"统计\",{\"1\":{\"749\":1}}],[\"统计数量\",{\"1\":{\"554\":1}}],[\"目的是为了重用代码\",{\"1\":{\"1254\":1}}],[\"目录\",{\"1\":{\"1034\":1}}],[\"目录下面创建一个软连接\",{\"1\":{\"1197\":1}}],[\"目录下\",{\"1\":{\"996\":2}}],[\"目标路由中设置参数\",{\"0\":{\"975\":1}}],[\"目标路由\",{\"1\":{\"974\":1}}],[\"目标服务可能无用\",{\"1\":{\"42\":1}}],[\"书写一个全局变量的声明文件\",{\"1\":{\"995\":1}}],[\"书写声明文件\",{\"0\":{\"990\":1}}],[\"缺少插件部分的类型\",{\"1\":{\"994\":1}}],[\"缺点\",{\"0\":{\"1257\":1},\"1\":{\"221\":1,\"1454\":1,\"1459\":1}}],[\"仍然需要导出一个空对象\",{\"1\":{\"993\":1}}],[\"称为\",{\"1\":{\"993\":1,\"1170\":1}}],[\"称之为初始化声明\",{\"1\":{\"126\":1}}],[\"官方\",{\"1\":{\"1127\":1}}],[\"官方提供了\",{\"1\":{\"1026\":1}}],[\"官方推荐的方式\",{\"1\":{\"992\":1}}],[\"官方文档\",{\"1\":{\"172\":1,\"1018\":1}}],[\"针对这种模块导出\",{\"1\":{\"992\":1}}],[\"针对唯一索引进行检索时\",{\"1\":{\"219\":1}}],[\"混用\",{\"1\":{\"992\":1}}],[\"箭头函数\",{\"1\":{\"991\":1}}],[\"含有子属性的\",{\"1\":{\"991\":1,\"992\":1}}],[\"了\",{\"1\":{\"989\":1}}],[\"断言\",{\"0\":{\"988\":1}}],[\"断开连接shutdownconnection\",{\"1\":{\"848\":1}}],[\"取反\",{\"1\":{\"1399\":1}}],[\"取并集\",{\"1\":{\"987\":1}}],[\"取交集\",{\"1\":{\"987\":1}}],[\"取消感兴趣事件\",{\"1\":{\"1402\":1}}],[\"取消部署\",{\"1\":{\"1326\":1}}],[\"取消任务\",{\"1\":{\"1013\":1}}],[\"取消订阅\",{\"1\":{\"872\":1,\"1377\":1}}],[\"取消注册实例\",{\"1\":{\"872\":1,\"893\":1}}],[\"取消复选框前面的勾\",{\"1\":{\"45\":1}}],[\"取消勾选\",{\"1\":{\"44\":1}}],[\"取消验证\",{\"1\":{\"26\":1}}],[\"链式调用\",{\"1\":{\"1451\":1}}],[\"链接网址表达式\",{\"1\":{\"982\":1}}],[\"链表长度大于8会转化为红黑树\",{\"1\":{\"228\":1}}],[\"阻止转移\",{\"0\":{\"979\":1}}],[\"阻塞等风险\",{\"1\":{\"668\":1}}],[\"阻塞队列\",{\"1\":{\"236\":1}}],[\"阻塞\",{\"1\":{\"215\":1}}],[\"跳转的地址\",{\"1\":{\"974\":1}}],[\"跳过迭代\",{\"1\":{\"135\":1}}],[\"渲染组件\",{\"1\":{\"971\":1}}],[\"渲染元素到根节点\",{\"1\":{\"970\":1}}],[\"组合模式\",{\"1\":{\"1254\":1}}],[\"组名称在\",{\"1\":{\"1177\":1}}],[\"组\",{\"0\":{\"1177\":1}}],[\"组件会自动将原始数据\",{\"1\":{\"1425\":1}}],[\"组件名称必须以大写字母开头\",{\"1\":{\"971\":1}}],[\"组件\",{\"0\":{\"971\":1},\"1\":{\"1579\":1,\"1580\":1,\"1613\":1}}],[\"组成\",{\"1\":{\"1284\":1}}],[\"组成routedefinition\",{\"1\":{\"468\":1}}],[\"组成的序列\",{\"1\":{\"117\":1}}],[\"尽管每一秒我们都会新建一个描述整个\",{\"1\":{\"970\":1}}],[\"尽量命中多个索引\",{\"1\":{\"716\":1}}],[\"达到预期的状态\",{\"1\":{\"970\":1}}],[\"状态模式\",{\"1\":{\"1254\":1}}],[\"状态属性访问状态\",{\"1\":{\"998\":1}}],[\"状态\",{\"0\":{\"966\":1,\"998\":1},\"1\":{\"1503\":1,\"1579\":1,\"1580\":1,\"1611\":1,\"1612\":1}}],[\"状态码\",{\"1\":{\"749\":1}}],[\"附带的\",{\"1\":{\"965\":1}}],[\"样式设置\",{\"0\":{\"948\":1}}],[\"样例\",{\"0\":{\"241\":1,\"672\":1,\"803\":1},\"1\":{\"140\":1,\"148\":1,\"471\":1,\"473\":1,\"656\":1,\"899\":1,\"971\":1,\"985\":1}}],[\"鸭子\",{\"1\":{\"932\":1}}],[\"削峰\",{\"1\":{\"915\":1}}],[\"削峰的作用\",{\"1\":{\"224\":1}}],[\"驻内存数据网格客户端\",{\"1\":{\"912\":1}}],[\"扣减库存\",{\"1\":{\"911\":1}}],[\"商品信息是变动量较小的信息\",{\"1\":{\"911\":1}}],[\"涉及操作系统用户态切换内核态\",{\"1\":{\"911\":1}}],[\"涉及服务间的数据传输\",{\"1\":{\"911\":1}}],[\"涉及到的就是在对state分组的基础上\",{\"1\":{\"770\":1}}],[\"秒\",{\"1\":{\"910\":1,\"1155\":1}}],[\"秒钟\",{\"1\":{\"908\":1}}],[\"拼在路径中\",{\"1\":{\"1551\":1,\"1574\":1,\"1581\":1,\"1584\":1,\"1585\":1}}],[\"拼接报表参数\",{\"1\":{\"1455\":1}}],[\"拼接\",{\"1\":{\"910\":1}}],[\"拼凑参数对象\",{\"1\":{\"649\":2}}],[\"哈希\",{\"1\":{\"909\":1}}],[\"扇形交换机\",{\"1\":{\"906\":1}}],[\"写一个tfdb的spring\",{\"1\":{\"1479\":1}}],[\"写超时猜想\",{\"0\":{\"1433\":1}}],[\"写出事件处理流程\",{\"0\":{\"1401\":1}}],[\"写\",{\"1\":{\"1399\":1}}],[\"写数据到通道\",{\"1\":{\"1383\":1}}],[\"写单个保持寄存器\",{\"1\":{\"1278\":1}}],[\"写单个线圈寄存器\",{\"1\":{\"1278\":1}}],[\"写锁\",{\"1\":{\"1048\":1}}],[\"写的\",{\"1\":{\"996\":1}}],[\"写sql\",{\"1\":{\"902\":1}}],[\"写入事件的接口方法\",{\"1\":{\"1397\":1}}],[\"写入多个保持寄存器\",{\"1\":{\"1278\":1}}],[\"写入多个线圈寄存器\",{\"1\":{\"1278\":1}}],[\"写入操作时\",{\"1\":{\"911\":1}}],[\"写入另一topic\",{\"1\":{\"649\":1}}],[\"写入函数\",{\"1\":{\"649\":1}}],[\"维护在租户的平台下\",{\"1\":{\"1644\":1}}],[\"维护在本地\",{\"1\":{\"1265\":1}}],[\"维护了自带头尾的上下文链表\",{\"1\":{\"1396\":1}}],[\"维护了一个记录版本链\",{\"1\":{\"1049\":1}}],[\"维护了三个缓存\",{\"1\":{\"380\":1}}],[\"维护service和client的关系\",{\"1\":{\"893\":1}}],[\"健康检查接口\",{\"1\":{\"889\":1}}],[\"长轮询\",{\"0\":{\"1434\":1}}],[\"长轮询获取已更新的配置id\",{\"1\":{\"881\":1}}],[\"长度\",{\"1\":{\"910\":1,\"1280\":1}}],[\"长度为\",{\"1\":{\"140\":1,\"152\":1}}],[\"增加平台角色\",{\"1\":{\"1586\":1}}],[\"增加读写事件\",{\"1\":{\"1398\":1}}],[\"增加租户监听器\",{\"1\":{\"880\":1}}],[\"增加消息到messagequeue\",{\"1\":{\"834\":1}}],[\"心跳注册器\",{\"1\":{\"872\":1}}],[\"心跳机制\",{\"1\":{\"861\":1,\"893\":1}}],[\"扫描mapper为mapperfactorybean\",{\"1\":{\"859\":1}}],[\"池中连接最长生命周期\",{\"1\":{\"850\":1}}],[\"池中最大连接数\",{\"1\":{\"850\":1}}],[\"池中维护的最小空闲连接数\",{\"1\":{\"850\":1}}],[\"尝试关闭保活间隔\",{\"1\":{\"847\":1}}],[\"校验用户密码\",{\"1\":{\"1518\":1}}],[\"校验消息类型为mqttpublish\",{\"1\":{\"825\":1}}],[\"校验是否超过保活时间\",{\"1\":{\"824\":1}}],[\"校验token后\",{\"1\":{\"1520\":1}}],[\"校验token\",{\"1\":{\"467\":1,\"1028\":1}}],[\"采用微服务架构\",{\"1\":{\"1511\":1}}],[\"采用了一些特殊的报头\",{\"1\":{\"1425\":1}}],[\"采用的技术都是\",{\"1\":{\"1425\":1}}],[\"采用工作线程池来对消息进行消费\",{\"1\":{\"808\":1}}],[\"采用较多\",{\"1\":{\"722\":1}}],[\"抛弃当前list中后续消息\",{\"1\":{\"804\":1}}],[\"抛出运行时异常\",{\"1\":{\"233\":1}}],[\"均被抛弃\",{\"1\":{\"804\":1}}],[\"仅仅针对release\",{\"1\":{\"1074\":1}}],[\"仅仅会用于编译时的检查\",{\"1\":{\"989\":1}}],[\"仅在多partition单个消费者时\",{\"1\":{\"804\":1}}],[\"仅针对部分表达方式的计算机编程语言\",{\"1\":{\"604\":1}}],[\"确认其是否安装成功\",{\"1\":{\"1093\":1}}],[\"确认单当前消息\",{\"1\":{\"804\":3}}],[\"确定了线程模型\",{\"1\":{\"1450\":1}}],[\"确定\",{\"1\":{\"31\":1}}],[\"批量导入系统接口\",{\"0\":{\"1596\":1},\"1\":{\"1588\":1,\"1592\":1}}],[\"批量更新\",{\"1\":{\"1243\":1,\"1327\":1}}],[\"批量删除操作日志\",{\"1\":{\"1586\":1}}],[\"批量删除字典条目\",{\"1\":{\"1586\":1}}],[\"批量删除平台角色\",{\"1\":{\"1586\":1}}],[\"批量删除登录日志\",{\"1\":{\"1586\":1}}],[\"批量删除\",{\"0\":{\"1543\":1,\"1563\":1,\"1594\":1,\"1605\":1,\"1615\":1,\"1624\":1,\"1630\":1,\"1631\":1,\"1637\":1},\"1\":{\"1087\":1}}],[\"批量消费\",{\"1\":{\"804\":1}}],[\"批量消费最大数量\",{\"1\":{\"801\":1,\"802\":1}}],[\"批量\",{\"1\":{\"802\":1}}],[\"批量处理的最大大小\",{\"1\":{\"801\":1,\"802\":1}}],[\"应补数量\",{\"1\":{\"1251\":1}}],[\"应答级别\",{\"1\":{\"801\":1,\"802\":1}}],[\"应用方案\",{\"0\":{\"1667\":1}}],[\"应用组\",{\"1\":{\"1240\":1}}],[\"应用域\",{\"1\":{\"1240\":1}}],[\"应用系统\",{\"1\":{\"1238\":1,\"1240\":1}}],[\"应用架构\",{\"0\":{\"1240\":1},\"1\":{\"1237\":1}}],[\"应用中的url链接\",{\"1\":{\"982\":1}}],[\"应用初始化\",{\"1\":{\"965\":1}}],[\"应用框架\",{\"0\":{\"964\":1}}],[\"应用程序\",{\"1\":{\"616\":1}}],[\"应用上下文\",{\"1\":{\"447\":1}}],[\"应用类加载器\",{\"1\":{\"244\":1}}],[\"应用服务器项目\",{\"1\":{\"240\":1}}],[\"应用在innodb存储引擎中\",{\"1\":{\"219\":1}}],[\"副本数\",{\"1\":{\"801\":1}}],[\"除非重启消费者\",{\"1\":{\"798\":1}}],[\"距离上次提交时间大于time时提交\",{\"1\":{\"798\":1}}],[\"术语\",{\"0\":{\"788\":1}}],[\"未绑定应用\",{\"1\":{\"1643\":1}}],[\"未查询到任务\",{\"1\":{\"1013\":1}}],[\"未知错误\",{\"1\":{\"786\":1}}],[\"未认证\",{\"1\":{\"467\":1,\"1031\":1}}],[\"忽略鉴权路径\",{\"1\":{\"1513\":1}}],[\"忽略写事件\",{\"1\":{\"1383\":1}}],[\"忽略key\",{\"1\":{\"906\":1}}],[\"忽略判断\",{\"1\":{\"902\":1}}],[\"忽略\",{\"1\":{\"902\":1}}],[\"忽略不可用索引\",{\"1\":{\"780\":1}}],[\"忽略的字段为\",{\"1\":{\"148\":1}}],[\"得到结果\",{\"1\":{\"780\":1}}],[\"得到这次开始查询位置\",{\"1\":{\"780\":1}}],[\"继续写数据到javachannel\",{\"1\":{\"1402\":1}}],[\"继续滚动\",{\"1\":{\"780\":1}}],[\"继承链\",{\"1\":{\"1445\":1,\"1446\":1}}],[\"继承基础响应对象baseresponse\",{\"1\":{\"1244\":1}}],[\"继承基础泛型抽象类basebiz\",{\"1\":{\"1244\":1}}],[\"继承了mapper接口\",{\"1\":{\"1244\":1}}],[\"继承了onceperrequestfilter\",{\"1\":{\"418\":1}}],[\"继承corepublisher接口\",{\"1\":{\"533\":1}}],[\"继承reflectivemethodinvocation\",{\"1\":{\"436\":1}}],[\"继承transactionaspectsupport\",{\"1\":{\"429\":1}}],[\"继承thread\",{\"1\":{\"236\":1}}],[\"继承aspectjautoproxyingconfiguration\",{\"1\":{\"427\":1}}],[\"继承frameworkservlet抽象类\",{\"1\":{\"401\":1}}],[\"继承\",{\"0\":{\"255\":1},\"1\":{\"333\":1,\"1295\":1,\"1344\":1}}],[\"继承backgroundservice\",{\"1\":{\"105\":1}}],[\"说明滚动完了\",{\"1\":{\"780\":1}}],[\"经过pipeline的handler后增加到channeloutboundbuffer\",{\"1\":{\"1401\":1}}],[\"经过操作后\",{\"1\":{\"780\":1}}],[\"经验证\",{\"1\":{\"325\":1}}],[\"拿到hits结果\",{\"1\":{\"780\":1}}],[\"拿到第一个scrollid\",{\"1\":{\"780\":1}}],[\"游标\",{\"1\":{\"780\":1}}],[\"滚动查询将searchhit封装到result中\",{\"1\":{\"780\":1}}],[\"滚动查询的scroll\",{\"1\":{\"780\":1}}],[\"滚动时间\",{\"1\":{\"780\":1}}],[\"清空一级和二级缓存配置\",{\"1\":{\"1317\":1}}],[\"清理scroll\",{\"1\":{\"780\":1}}],[\"清理\",{\"1\":{\"780\":1,\"1073\":1}}],[\"清除缓存\",{\"1\":{\"786\":1,\"1246\":1}}],[\"清除applicationcontext\",{\"1\":{\"413\":1}}],[\"清除边界以外的内存\",{\"1\":{\"243\":1}}],[\"清除\",{\"1\":{\"243\":1}}],[\"清除没在使用的连接\",{\"1\":{\"18\":1}}],[\"计算引擎\",{\"0\":{\"1039\":1},\"1\":{\"1038\":1}}],[\"计算每个州的平均结余\",{\"1\":{\"770\":1}}],[\"计数一次\",{\"1\":{\"129\":1}}],[\"越高\",{\"1\":{\"767\":1}}],[\"越库缓存+补货缓存+拣货库位+存储库位\",{\"1\":{\"236\":1}}],[\"区别\",{\"1\":{\"1220\":1}}],[\"区别仅在于声明文件中禁止定义具体的实现\",{\"1\":{\"992\":1}}],[\"区别在于\",{\"1\":{\"767\":1}}],[\"区别就是下面这个只是autoconfigurtion\",{\"1\":{\"481\":1}}],[\"搜索词\",{\"1\":{\"1187\":2}}],[\"搜索引擎管理工具\",{\"1\":{\"1137\":1}}],[\"搜索引擎数据查询工具\",{\"1\":{\"1137\":1}}],[\"搜索引擎\",{\"1\":{\"1038\":1}}],[\"搜索所有macth\",{\"0\":{\"764\":1}}],[\"搜索\",{\"0\":{\"761\":1}}],[\"搜索结果中显示附近的信息\",{\"1\":{\"12\":1}}],[\"检测文件\",{\"1\":{\"1227\":1}}],[\"检测文件是否为空\",{\"1\":{\"1227\":1}}],[\"检测文件是否可执行\",{\"1\":{\"1227\":1}}],[\"检测文件是否可写\",{\"1\":{\"1227\":1}}],[\"检测文件是否可读\",{\"1\":{\"1227\":1}}],[\"检测文件是否设置了粘着位\",{\"1\":{\"1227\":1}}],[\"检测文件是否设置了\",{\"1\":{\"1227\":2}}],[\"检测文件是否是有名管道\",{\"1\":{\"1227\":1}}],[\"检测文件是否是普通文件\",{\"1\":{\"1227\":1}}],[\"检测文件是否是目录\",{\"1\":{\"1227\":1}}],[\"检测文件是否是字符设备文件\",{\"1\":{\"1227\":1}}],[\"检测文件是否是块设备文件\",{\"1\":{\"1227\":1}}],[\"检测字符串是否为空\",{\"1\":{\"1222\":1}}],[\"检测字符串长度是否为0\",{\"1\":{\"1222\":2}}],[\"检测两个字符串是否相等\",{\"1\":{\"1222\":2}}],[\"检测两个数是否不相等\",{\"1\":{\"1222\":1}}],[\"检测两个数是否相等\",{\"1\":{\"1222\":1}}],[\"检测左边的数是否小于等于右边的\",{\"1\":{\"1222\":1}}],[\"检测左边的数是否小于右边的\",{\"1\":{\"1222\":1}}],[\"检测左边的数是否大于等于右边的\",{\"1\":{\"1222\":1}}],[\"检测左边的数是否大于右边的\",{\"1\":{\"1222\":1}}],[\"检出\",{\"1\":{\"1150\":1}}],[\"检查活跃度\",{\"0\":{\"830\":1}}],[\"检查时异常\",{\"1\":{\"230\":1}}],[\"检索关键字分词\",{\"1\":{\"751\":1}}],[\"词频相关度打分\",{\"1\":{\"749\":1}}],[\"博客文章内容等\",{\"1\":{\"749\":1}}],[\"邮箱\",{\"1\":{\"1532\":1,\"1548\":1,\"1549\":1,\"1550\":1}}],[\"邮箱名和用户名可任意配置\",{\"1\":{\"1146\":1}}],[\"邮箱名\",{\"1\":{\"1145\":1}}],[\"邮箱内容\",{\"1\":{\"749\":1}}],[\"邮政编码\",{\"1\":{\"749\":1}}],[\"精确匹配路由key\",{\"1\":{\"906\":1}}],[\"精确匹配检索返回结果\",{\"1\":{\"749\":1}}],[\"精确查询\",{\"1\":{\"749\":1}}],[\"聚合了设备接入物联网平台所需的网络组件和协议等相关配置信息\",{\"1\":{\"1269\":1}}],[\"聚合并获取聚合列表数据\",{\"0\":{\"782\":1}}],[\"聚合查询的searchresponse\",{\"1\":{\"780\":1}}],[\"聚合查询\",{\"0\":{\"768\":1}}],[\"聚合等操作时\",{\"1\":{\"749\":1}}],[\"聚合\",{\"0\":{\"781\":1},\"1\":{\"749\":1,\"786\":2}}],[\"性别\",{\"1\":{\"1548\":1,\"1549\":1,\"1554\":1}}],[\"性别等数据\",{\"1\":{\"749\":1}}],[\"性能调优\",{\"0\":{\"713\":1}}],[\"年龄\",{\"1\":{\"749\":1}}],[\"手机号\",{\"1\":{\"1532\":1,\"1548\":1,\"1549\":1,\"1550\":1}}],[\"手机号码\",{\"1\":{\"749\":1}}],[\"手机热点\",{\"0\":{\"1431\":1}}],[\"手机都可以作为网关\",{\"1\":{\"1429\":1}}],[\"手写分布式锁\",{\"1\":{\"911\":1}}],[\"手动触发\",{\"1\":{\"1311\":2}}],[\"手动txmanager\",{\"1\":{\"1244\":1}}],[\"手动事务\",{\"1\":{\"1244\":1}}],[\"手动下载安装包\",{\"1\":{\"1082\":1}}],[\"手动设置beandefinition中要注入的依赖属性\",{\"1\":{\"900\":1}}],[\"手动模式\",{\"1\":{\"804\":2}}],[\"手动确认\",{\"1\":{\"804\":2}}],[\"手动进行请求参数校验\",{\"0\":{\"353\":1}}],[\"手动提交偏移量\",{\"1\":{\"798\":1}}],[\"手动提交事务释放锁\",{\"1\":{\"212\":1}}],[\"手动提交回滚事务\",{\"1\":{\"202\":1}}],[\"超级管理员\",{\"1\":{\"1564\":1,\"1565\":1,\"1603\":1}}],[\"超过字符串长度的自动用x00补齐\",{\"1\":{\"910\":1}}],[\"超过这个时间consumer没有发送心跳\",{\"1\":{\"801\":1,\"802\":1}}],[\"超过给定长度后的数据将不被索引\",{\"1\":{\"749\":1}}],[\"超时与重试\",{\"1\":{\"730\":1}}],[\"超时时间\",{\"1\":{\"236\":1}}],[\"倒排索引\",{\"0\":{\"752\":1},\"1\":{\"748\":1,\"749\":1}}],[\"拓展类到jvm\",{\"1\":{\"734\":1}}],[\"功能概述\",{\"0\":{\"1502\":1}}],[\"功能参数\",{\"1\":{\"1484\":1}}],[\"功能并不齐全\",{\"1\":{\"1459\":1}}],[\"功能齐全\",{\"1\":{\"1454\":1}}],[\"功能脑图\",{\"0\":{\"1282\":1}}],[\"功能码\",{\"0\":{\"1278\":1},\"1\":{\"1279\":1}}],[\"功能需求\",{\"1\":{\"1240\":1}}],[\"功能\",{\"0\":{\"1336\":1},\"1\":{\"1034\":1,\"1503\":1}}],[\"功能bean已初始化\",{\"1\":{\"743\":1}}],[\"功能类\",{\"1\":{\"734\":1,\"1240\":1}}],[\"功能序列\",{\"1\":{\"604\":1}}],[\"逐个调用\",{\"1\":{\"730\":1}}],[\"失败自动恢复\",{\"1\":{\"730\":1}}],[\"失败安全\",{\"1\":{\"730\":1}}],[\"失败立即报错\",{\"1\":{\"730\":1}}],[\"失败重试\",{\"1\":{\"730\":1}}],[\"集成swagger\",{\"1\":{\"1503\":1}}],[\"集线器主要用于将多个pc连接通信\",{\"1\":{\"1430\":1}}],[\"集线器\",{\"0\":{\"1430\":1}}],[\"集群管理\",{\"1\":{\"1342\":1}}],[\"集群\",{\"0\":{\"1265\":1}}],[\"集群搭建\",{\"1\":{\"885\":1}}],[\"集群地址\",{\"1\":{\"801\":1,\"802\":1}}],[\"集群容错模式\",{\"1\":{\"730\":1}}],[\"集群容错\",{\"1\":{\"730\":1}}],[\"集合查询子部门\",{\"1\":{\"256\":1}}],[\"集合遍历删除元素\",{\"0\":{\"229\":1}}],[\"集合\",{\"0\":{\"228\":1,\"300\":1},\"1\":{\"468\":1}}],[\"负载\",{\"1\":{\"1272\":1}}],[\"负载平均值越高\",{\"1\":{\"756\":1}}],[\"负载均衡策略\",{\"1\":{\"730\":1}}],[\"负载均衡\",{\"1\":{\"730\":1,\"862\":1,\"1501\":1}}],[\"负责负载均衡和路由到后端应用服务器\",{\"1\":{\"1207\":1}}],[\"负责根据集群的资源情况\",{\"1\":{\"1162\":1}}],[\"负责nacos集群间的数据同步\",{\"1\":{\"894\":1}}],[\"负责服务发现\",{\"1\":{\"865\":1}}],[\"负责servlet的选择\",{\"1\":{\"675\":1,\"676\":1}}],[\"负责处理任务的审批人或候选人\",{\"1\":{\"580\":1,\"704\":1}}],[\"负责处理客户端获取token的请求\",{\"1\":{\"346\":1}}],[\"负责处理客户端的请求\",{\"1\":{\"339\":1}}],[\"负责处理授权服务器的授权码重定向请求\",{\"1\":{\"345\":1}}],[\"负责发起授权获取token及资源\",{\"1\":{\"345\":1}}],[\"灰度发布\",{\"1\":{\"730\":1}}],[\"次数\",{\"1\":{\"1403\":1}}],[\"次\",{\"1\":{\"730\":1}}],[\"利用lambda表达式\",{\"1\":{\"911\":1}}],[\"利用超时机制来解决这个问题\",{\"1\":{\"730\":1}}],[\"利用java的spi机制\",{\"1\":{\"481\":1}}],[\"势必会造成雪崩\",{\"1\":{\"730\":1}}],[\"高级用法\",{\"0\":{\"1058\":1}}],[\"高级特性\",{\"0\":{\"730\":1}}],[\"高级往低级\",{\"1\":{\"56\":1}}],[\"致力于提供高性能和透明化的\",{\"1\":{\"729\":1}}],[\"致力于提供高性能和简单易用\",{\"1\":{\"212\":1}}],[\"载荷\",{\"1\":{\"726\":1}}],[\"头\",{\"1\":{\"726\":1}}],[\"减少数据传送量\",{\"1\":{\"1425\":1}}],[\"减少后续同类型请求的预检步骤\",{\"1\":{\"725\":1}}],[\"减少单表数据量\",{\"1\":{\"221\":1}}],[\"携带授权码重定向到系统a\",{\"1\":{\"723\":1}}],[\"携带信息重定向到auth登录页面\",{\"1\":{\"723\":1}}],[\"携带code到客户端时\",{\"1\":{\"345\":1}}],[\"硬件层\",{\"0\":{\"717\":1}}],[\"避免遗漏\",{\"1\":{\"1229\":1}}],[\"避免重复修改\",{\"1\":{\"1229\":1}}],[\"避免其他线程插入或更新数据\",{\"1\":{\"1048\":1}}],[\"避免了多线程处理的上下文切换\",{\"1\":{\"911\":1}}],[\"避免回表\",{\"1\":{\"716\":1}}],[\"避免使用union\",{\"1\":{\"716\":1}}],[\"避免使用\",{\"1\":{\"716\":1}}],[\"复杂网络\",{\"1\":{\"1122\":1}}],[\"复杂查询\",{\"1\":{\"716\":1}}],[\"复制字典\",{\"0\":{\"1617\":1},\"1\":{\"1609\":1}}],[\"复制\",{\"1\":{\"243\":1}}],[\"阀门组件\",{\"1\":{\"678\":1}}],[\"职责不同\",{\"1\":{\"675\":1}}],[\"职业发展\",{\"0\":{\"62\":1}}],[\"技术实现方式\",{\"0\":{\"1472\":1,\"1504\":1}}],[\"技术组件选取\",{\"1\":{\"1241\":1}}],[\"技术能力分析\",{\"1\":{\"1241\":2}}],[\"技术能力\",{\"1\":{\"1241\":1}}],[\"技术能力识别\",{\"1\":{\"1241\":1}}],[\"技术需求\",{\"1\":{\"1241\":1}}],[\"技术架构\",{\"0\":{\"1241\":1},\"1\":{\"1237\":1}}],[\"技术的支持\",{\"1\":{\"674\":1}}],[\"技术栈\",{\"0\":{\"64\":1},\"1\":{\"1240\":1}}],[\"依据当前月份\",{\"1\":{\"656\":1}}],[\"依赖传递\",{\"1\":{\"1075\":1}}],[\"依赖管理\",{\"1\":{\"1075\":1}}],[\"依赖jar包路径\",{\"1\":{\"1066\":1}}],[\"依赖一个全局变量的声明文件\",{\"1\":{\"995\":1}}],[\"依赖注入\",{\"0\":{\"356\":1}}],[\"依赖应该被定义在\",{\"1\":{\"31\":1}}],[\"序列化\",{\"1\":{\"1501\":1}}],[\"序列化类\",{\"1\":{\"802\":2}}],[\"序列化方式\",{\"1\":{\"801\":2}}],[\"序列化和反序列化\",{\"1\":{\"200\":1}}],[\"序号\",{\"1\":{\"656\":1}}],[\"周一至周五的上午10\",{\"1\":{\"656\":1}}],[\"周一至周五\",{\"1\":{\"656\":2}}],[\"周字段的设置\",{\"1\":{\"656\":1}}],[\"周三和周五触发\",{\"1\":{\"656\":1}}],[\"周杰伦\",{\"1\":{\"479\":1}}],[\"月份中的日期和星期可能会起冲突\",{\"1\":{\"656\":1}}],[\"小写p\",{\"1\":{\"1109\":1}}],[\"小程序\",{\"0\":{\"1010\":1}}],[\"小狗\",{\"1\":{\"932\":1}}],[\"小时后\",{\"1\":{\"652\":1}}],[\"小于\",{\"1\":{\"131\":1}}],[\"站点网址\",{\"1\":{\"652\":1}}],[\"网口\",{\"0\":{\"1280\":1}}],[\"网络通信\",{\"0\":{\"1435\":1,\"1672\":1}}],[\"网络通信判断连接\",{\"0\":{\"1433\":1}}],[\"网络\",{\"0\":{\"1305\":1},\"1\":{\"1319\":1}}],[\"网络的获取\",{\"1\":{\"1319\":1}}],[\"网络的\",{\"1\":{\"1276\":1}}],[\"网络组件的替换\",{\"1\":{\"1478\":1}}],[\"网络组件配置表\",{\"1\":{\"1305\":1}}],[\"网络组件\",{\"1\":{\"1269\":1}}],[\"网络命名空间与虚拟网络设备对veth\",{\"0\":{\"1169\":1}}],[\"网络中的所有容器可以使用容器名通信\",{\"1\":{\"1091\":1}}],[\"网络名\",{\"1\":{\"1089\":1,\"1122\":1}}],[\"网页中点击发起授权按钮\",{\"1\":{\"1007\":1}}],[\"网站名称\",{\"1\":{\"652\":1}}],[\"网关服务\",{\"0\":{\"1513\":1,\"1520\":1}}],[\"网关主要用于连接异构网络\",{\"1\":{\"1429\":1}}],[\"网关和路由\",{\"0\":{\"1429\":1}}],[\"网关的获取及启动\",{\"1\":{\"1319\":1}}],[\"网关的入口reactorhttphandleradapter的apply方法\",{\"1\":{\"473\":1}}],[\"网关子设备\",{\"1\":{\"1269\":1}}],[\"网关设备\",{\"1\":{\"1269\":1}}],[\"网关集成权限认证\",{\"0\":{\"1031\":1}}],[\"网关作为资源服务器的相关配置\",{\"1\":{\"1513\":1}}],[\"网关作为资源服务器\",{\"1\":{\"1029\":1}}],[\"网关作为资源服务器对token进行校验\",{\"1\":{\"466\":1}}],[\"网关\",{\"0\":{\"1029\":1,\"1305\":1},\"1\":{\"723\":1,\"862\":1,\"1090\":1,\"1198\":1,\"1501\":1}}],[\"网关token验证\",{\"1\":{\"471\":1}}],[\"网关应用报错\",{\"0\":{\"42\":1}}],[\"销毁前调用\",{\"1\":{\"652\":1}}],[\"支持rbac\",{\"1\":{\"1503\":1}}],[\"支持应用自定义权限管理\",{\"1\":{\"1502\":1}}],[\"支持多租户管理\",{\"1\":{\"1500\":1}}],[\"支持多种协议\",{\"1\":{\"678\":1}}],[\"支持int\",{\"1\":{\"1486\":4}}],[\"支持分页查询\",{\"1\":{\"1248\":1}}],[\"支持moby\",{\"1\":{\"1093\":1}}],[\"支持全文检索\",{\"1\":{\"749\":1}}],[\"支持聚合\",{\"1\":{\"749\":1}}],[\"支持精确匹配\",{\"1\":{\"749\":1}}],[\"支持模糊\",{\"1\":{\"749\":2}}],[\"支持\",{\"1\":{\"658\":1}}],[\"支持传参\",{\"1\":{\"658\":1}}],[\"支持javaservlet规范\",{\"1\":{\"652\":1}}],[\"支持跨域\",{\"1\":{\"203\":1}}],[\"产品和设备的绑定关系\",{\"1\":{\"1327\":1}}],[\"产品的部署和取消部署\",{\"0\":{\"1326\":1}}],[\"产品版本\",{\"1\":{\"1317\":1}}],[\"产品名称\",{\"1\":{\"1304\":1,\"1482\":1}}],[\"产品分类信息表\",{\"1\":{\"1304\":1}}],[\"产品表\",{\"1\":{\"1304\":1}}],[\"产品与设备\",{\"0\":{\"1304\":1}}],[\"产品\",{\"1\":{\"1240\":1,\"1269\":1,\"1309\":2}}],[\"产品id\",{\"1\":{\"649\":1,\"1317\":1,\"1482\":1}}],[\"产生上下文在订阅的时候传递给上游\",{\"1\":{\"543\":1}}],[\"补码运算\",{\"1\":{\"1399\":1}}],[\"补货任务并发\",{\"1\":{\"1251\":2}}],[\"补货锁定库存\",{\"1\":{\"236\":1}}],[\"补到应补数量\",{\"1\":{\"1251\":1}}],[\"补充\",{\"1\":{\"1118\":1}}],[\"补零函数\",{\"1\":{\"649\":1}}],[\"调试版本\",{\"1\":{\"1201\":1}}],[\"调度策略等因素\",{\"1\":{\"1162\":1}}],[\"调度器\",{\"1\":{\"1012\":1}}],[\"调整部署的副本数\",{\"1\":{\"1159\":1}}],[\"调整innodb\",{\"1\":{\"717\":1}}],[\"调整时间为指定时区\",{\"1\":{\"649\":1}}],[\"调用authorizationmanager的checkuri方法对用户路径鉴权\",{\"1\":{\"1522\":1}}],[\"调用abstractroutingdatasource的getconnection\",{\"1\":{\"632\":1}}],[\"调用能管接口查询点位数据\",{\"1\":{\"1472\":1}}],[\"调用register方法获取eventlooop\",{\"1\":{\"1450\":1}}],[\"调用filter方法对请求进行处理\",{\"1\":{\"1262\":1}}],[\"调用then方法执行后续操作\",{\"1\":{\"998\":1}}],[\"调用模版查询方法\",{\"1\":{\"896\":1}}],[\"调用回调callback相应的方法\",{\"1\":{\"838\":1}}],[\"调用spring组件中oauth2authorizationcodeauthenticationprovider方法对授权码code\",{\"1\":{\"1519\":1}}],[\"调用spring组件中clientsecretauthenticationprovider的authenticate方法\",{\"1\":{\"1517\":1}}],[\"调用startreconnectcycle方法\",{\"1\":{\"820\":1}}],[\"调用subscribeorreturn方法\",{\"1\":{\"527\":1}}],[\"调用deployer的initialize方法进行初始化\",{\"1\":{\"744\":1}}],[\"调用httpwebhandleradapter的handle方法\",{\"1\":{\"473\":1}}],[\"调用gettransaction\",{\"1\":{\"1244\":1}}],[\"调用gethandlerinternal\",{\"1\":{\"473\":1}}],[\"调用getproxy方法获取代理对象\",{\"1\":{\"383\":1}}],[\"调用centeropaquetokenintrospector的introspect方法\",{\"1\":{\"1521\":1}}],[\"调用centeruserdetailsauthenticationprovider中的authenticate\",{\"1\":{\"1518\":1}}],[\"调用channel内部的pipeline的firechannelread和firechannelreadcomplete方法\",{\"1\":{\"1445\":1}}],[\"调用channel的write方法\",{\"1\":{\"1401\":1}}],[\"调用clientstate的notifysent方法\",{\"1\":{\"836\":1}}],[\"调用clientstate的get方法获取要发送的消息\",{\"1\":{\"836\":1}}],[\"调用clientstate的send方法\",{\"1\":{\"829\":1}}],[\"调用clientcomms的connect方法\",{\"1\":{\"826\":1}}],[\"调用cglibaopproxy的getproxy方法获取代理实例\",{\"1\":{\"435\":1}}],[\"调用configure方法进行配置\",{\"1\":{\"334\":1}}],[\"调用其init方法实现servlet初始化\",{\"1\":{\"401\":1}}],[\"调用委托器的静态方法postprocessorregistrationdelegate\",{\"1\":{\"399\":1}}],[\"调用上下文abstractapplicationcontext的refresh方法\",{\"1\":{\"394\":1}}],[\"调用处理器mapperproxy\",{\"1\":{\"852\":1}}],[\"调用处理器sqlsessioninterceptor\",{\"1\":{\"852\":1}}],[\"调用处理器需实现methodinterceptor\",{\"1\":{\"386\":1}}],[\"调用处理器需实现invocationhandler接口\",{\"1\":{\"385\":1}}],[\"调用处理器\",{\"1\":{\"385\":1}}],[\"调用public\",{\"1\":{\"383\":1}}],[\"调用配置器的init方法\",{\"1\":{\"334\":1}}],[\"调用init方法初始化\",{\"1\":{\"334\":1}}],[\"调用方法需要引入特征\",{\"1\":{\"297\":1}}],[\"调用消息队列的take方法获取任务\",{\"1\":{\"233\":1}}],[\"调用选择器的select方法获取就绪socket套接字集\",{\"1\":{\"215\":1}}],[\"调用methoda方法时\",{\"1\":{\"202\":1}}],[\"调用object的clone方法\",{\"1\":{\"200\":1}}],[\"调用中传递过来的错误值\",{\"1\":{\"160\":1}}],[\"调用\",{\"1\":{\"139\":1,\"160\":1,\"652\":1}}],[\"绑定用户中心等应用\",{\"1\":{\"1643\":1}}],[\"绑定默认租户角色\",{\"1\":{\"1537\":1}}],[\"绑定api接口\",{\"1\":{\"1503\":1}}],[\"绑定线程到eventloop\",{\"1\":{\"1445\":1}}],[\"绑定参数\",{\"1\":{\"648\":1}}],[\"绑定路径中参数\",{\"1\":{\"181\":1}}],[\"插件仓库列表\",{\"1\":{\"1202\":1}}],[\"插件地址\",{\"1\":{\"643\":1}}],[\"插件\",{\"1\":{\"642\":1}}],[\"插入5\",{\"1\":{\"312\":1}}],[\"工控机\",{\"0\":{\"1462\":1}}],[\"工程的\",{\"1\":{\"1065\":1}}],[\"工作区有一个隐藏目录\",{\"1\":{\"1151\":1}}],[\"工作原理\",{\"0\":{\"852\":1}}],[\"工作流\",{\"0\":{\"700\":1}}],[\"工具示例\",{\"1\":{\"780\":1}}],[\"工具\",{\"1\":{\"642\":1}}],[\"工厂方法模式\",{\"1\":{\"1254\":1}}],[\"工厂bean通过getobject方法获取其生产的对象\",{\"1\":{\"854\":1}}],[\"工厂\",{\"1\":{\"446\":1}}],[\"^~\",{\"1\":{\"1210\":6,\"1211\":1}}],[\"^\",{\"1\":{\"635\":1}}],[\"例\",{\"1\":{\"635\":1}}],[\"例如容器镜像\",{\"1\":{\"1163\":1}}],[\"例如分布式锁\",{\"1\":{\"912\":1}}],[\"例如在日字段上设置\",{\"1\":{\"656\":1}}],[\"例如在秒上设置\",{\"1\":{\"656\":1}}],[\"例如在周字段上设置\",{\"1\":{\"656\":3}}],[\"例如\",{\"1\":{\"164\":1,\"282\":1,\"291\":1,\"656\":1,\"749\":2,\"971\":1,\"1167\":1,\"1284\":1}}],[\"例如以下定义了数组\",{\"1\":{\"140\":1}}],[\"预览保存链接\",{\"1\":{\"1455\":1}}],[\"预览\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"预检请求结果可缓存的时间\",{\"1\":{\"725\":1}}],[\"预测先行不占用字符\",{\"1\":{\"635\":1}}],[\"预先优先匹配规则\",{\"0\":{\"635\":1}}],[\"预先注册service到servicecollection\",{\"1\":{\"104\":1}}],[\"决定将pod调度到哪个nodes节点上运行\",{\"1\":{\"1162\":1}}],[\"决定使用哪个数据源\",{\"1\":{\"632\":1}}],[\"决定请求是否走过滤\",{\"1\":{\"348\":1}}],[\"故障恢复\",{\"1\":{\"1167\":1}}],[\"故当我们在书写一个全局变量的声明文件时\",{\"1\":{\"995\":1}}],[\"故而想到的解决方案是将事务管理在数据持久\",{\"1\":{\"632\":1}}],[\"故要保证max\",{\"1\":{\"6\":1}}],[\"证书信息表\",{\"1\":{\"1305\":1}}],[\"证书配置\",{\"1\":{\"1211\":1}}],[\"证书标准包含哪些信息\",{\"1\":{\"627\":1}}],[\"证书请求格式\",{\"1\":{\"627\":1}}],[\"证书可分为根证书\",{\"1\":{\"626\":1}}],[\"证书私钥格式\",{\"1\":{\"625\":1}}],[\"二\",{\"1\":{\"1272\":1,\"1445\":1}}],[\"二进制zip\",{\"1\":{\"1082\":1}}],[\"二进制\",{\"1\":{\"625\":1}}],[\"二阶段回滚\",{\"1\":{\"212\":1}}],[\"二阶段提交\",{\"0\":{\"662\":1},\"1\":{\"212\":1}}],[\"二阶段提交回滚\",{\"1\":{\"212\":1}}],[\"扩展配置\",{\"1\":{\"1311\":1}}],[\"扩展原有模块26\",{\"1\":{\"994\":1}}],[\"扩展名可为key\",{\"1\":{\"625\":1}}],[\"扩展名可为pem\",{\"1\":{\"625\":1}}],[\"扩展名包括pem\",{\"1\":{\"625\":1}}],[\"扩展类加载器\",{\"1\":{\"244\":1}}],[\"签名算法\",{\"1\":{\"1570\":1}}],[\"签名\",{\"1\":{\"726\":1}}],[\"签名等\",{\"1\":{\"625\":1}}],[\"签发token\",{\"1\":{\"346\":1,\"1516\":1}}],[\"交给pipeline处理\",{\"1\":{\"1400\":1}}],[\"交给conn连接中的exchangehandler处理\",{\"1\":{\"1382\":1}}],[\"交给servlet后还会对请求包装servletrequestwrapper\",{\"1\":{\"678\":1}}],[\"交换机的不同端口间可以隔离冲突域\",{\"1\":{\"1430\":1}}],[\"交换机\",{\"0\":{\"1430\":1},\"1\":{\"1090\":1,\"1429\":1}}],[\"交互式\",{\"1\":{\"623\":1}}],[\"交付给质量团队或者⽤户\",{\"1\":{\"562\":1}}],[\"库存交易日志\",{\"1\":{\"1252\":1}}],[\"库存分配锁定库存\",{\"1\":{\"1252\":1}}],[\"库存服务扣减库存\",{\"1\":{\"212\":1}}],[\"库的声明文件\",{\"1\":{\"993\":1}}],[\"库中扩展全局变量\",{\"1\":{\"993\":1}}],[\"库\",{\"1\":{\"616\":1,\"993\":2,\"995\":1}}],[\"嵌套查询\",{\"1\":{\"1243\":1}}],[\"嵌套逻辑\",{\"1\":{\"1128\":1}}],[\"嵌套计算avg\",{\"1\":{\"770\":1}}],[\"嵌套聚合\",{\"0\":{\"770\":1}}],[\"嵌套函数\",{\"1\":{\"604\":2}}],[\"嵌入到了每一个可执行文件当中\",{\"1\":{\"174\":1}}],[\"姓名+邮箱\",{\"1\":{\"1104\":1}}],[\"姓名\",{\"1\":{\"602\":1,\"1532\":1}}],[\"系统接口表\",{\"1\":{\"1644\":1}}],[\"系统接口id列表\",{\"1\":{\"1596\":1}}],[\"系统监控\",{\"1\":{\"1582\":1}}],[\"系统异常\",{\"1\":{\"1526\":1}}],[\"系统异常统一处理\",{\"1\":{\"1526\":1}}],[\"系统调用\",{\"1\":{\"1403\":1}}],[\"系统相关\",{\"0\":{\"1193\":1}}],[\"系统可以提供给程序使用的剩余内存\",{\"1\":{\"1179\":1}}],[\"系统真正的剩余内存\",{\"1\":{\"1179\":1}}],[\"系统的网络命名空间和虚拟网络设备\",{\"1\":{\"1170\":1}}],[\"系统没有超时日志出现\",{\"1\":{\"1155\":1}}],[\"系统a拿着code获取token\",{\"1\":{\"723\":1}}],[\"系统操作日志\",{\"1\":{\"596\":1}}],[\"系统日志输出\",{\"1\":{\"596\":1}}],[\"拒绝消息列表中指定index\",{\"1\":{\"804\":1}}],[\"拒绝当前消息\",{\"1\":{\"804\":1}}],[\"拒绝\",{\"1\":{\"596\":2}}],[\"拒绝策略\",{\"1\":{\"236\":1}}],[\"遵循application覆盖bootstrap原则\",{\"1\":{\"593\":1}}],[\"举例2\",{\"1\":{\"593\":1}}],[\"举例1\",{\"1\":{\"593\":1}}],[\"假如要为它写类型声明文件的话\",{\"1\":{\"992\":1}}],[\"假如我们想使用第三方库\",{\"1\":{\"989\":1}}],[\"假如此时有bootstrap\",{\"1\":{\"593\":1}}],[\"假如此时只有bootstrap\",{\"1\":{\"593\":1}}],[\"假设在脚本运行时写了三个参数\",{\"1\":{\"1220\":1}}],[\"假设来自客户的请求为\",{\"1\":{\"679\":1}}],[\"假设执行时间1秒\",{\"1\":{\"192\":2}}],[\"综上此时的加载优先级变为了bootstrap\",{\"1\":{\"593\":1}}],[\"汇\",{\"1\":{\"789\":1}}],[\"汇成一个总的配置\",{\"1\":{\"593\":1}}],[\"汇总的数据塞值\",{\"1\":{\"236\":1}}],[\"按esc键后\",{\"1\":{\"1187\":1}}],[\"按enter键查找\",{\"1\":{\"1187\":1}}],[\"按\",{\"1\":{\"1187\":1}}],[\"按版本号排序\",{\"1\":{\"1068\":1}}],[\"按钮元素表\",{\"1\":{\"1452\":1}}],[\"按钮\",{\"1\":{\"1034\":1}}],[\"按指定值减少\",{\"1\":{\"910\":1}}],[\"按指定值增加\",{\"1\":{\"910\":1}}],[\"按权重轮询\",{\"1\":{\"730\":1}}],[\"按权重设置随机概率\",{\"1\":{\"730\":1}}],[\"按权重随机\",{\"1\":{\"730\":1}}],[\"按顺序查找\",{\"1\":{\"593\":1}}],[\"按优先级顺序排列属性配置对象\",{\"1\":{\"593\":1}}],[\"按照文件夹名引入模块和包\",{\"1\":{\"170\":1}}],[\"历史记录\",{\"1\":{\"1463\":1}}],[\"历史事件和任务的三个事件流\",{\"1\":{\"589\":1,\"711\":1}}],[\"历史表hi\",{\"0\":{\"579\":1,\"703\":1}}],[\"元数据表ge\",{\"0\":{\"578\":1,\"702\":1}}],[\"元素为用户自定义组件时\",{\"1\":{\"971\":1}}],[\"元素类型是\",{\"1\":{\"277\":1}}],[\"元素是不可变对象\",{\"1\":{\"970\":1}}],[\"元素是从0\",{\"1\":{\"277\":1}}],[\"元素是有序的\",{\"1\":{\"228\":1}}],[\"元素是无序的\",{\"1\":{\"228\":1}}],[\"元素顺序是有序的\",{\"1\":{\"228\":1}}],[\"远程仓库列表\",{\"1\":{\"1202\":1}}],[\"远程仓库的地址\",{\"1\":{\"1202\":1}}],[\"远程\",{\"1\":{\"1144\":1}}],[\"远程服务调用方案\",{\"1\":{\"729\":1}}],[\"远程镜像服务器\",{\"1\":{\"567\":1}}],[\"远程地址\",{\"1\":{\"421\":1}}],[\"停止\",{\"1\":{\"1194\":1}}],[\"停止和销毁\",{\"1\":{\"1161\":1}}],[\"停止并删除\",{\"1\":{\"1123\":1}}],[\"停止容器\",{\"1\":{\"566\":1}}],[\"停止终止过程进而恢复正常执行\",{\"1\":{\"160\":1}}],[\"评审结束后\",{\"1\":{\"562\":1}}],[\"频繁地将软件的新版本\",{\"1\":{\"562\":1}}],[\"频率5秒执行一次\",{\"1\":{\"192\":1}}],[\"部署dubbo\",{\"1\":{\"743\":1}}],[\"部署流程\",{\"1\":{\"583\":1}}],[\"部署记录表\",{\"1\":{\"578\":1,\"702\":1}}],[\"部署到生产环境\",{\"1\":{\"562\":1}}],[\"部署\",{\"0\":{\"1457\":1,\"1461\":1,\"1473\":1},\"1\":{\"562\":1,\"565\":1,\"1326\":1,\"1327\":1}}],[\"部分节点再传播给已知节点的部分节点\",{\"1\":{\"99\":1}}],[\"持久层框架\",{\"1\":{\"1501\":1}}],[\"持久性\",{\"1\":{\"212\":1}}],[\"持续部署\",{\"1\":{\"562\":1}}],[\"持续交付\",{\"1\":{\"562\":1}}],[\"持续集成\",{\"1\":{\"562\":1}}],[\"流媒体服务\",{\"0\":{\"1307\":1}}],[\"流量将转发到pod中容器的端口号8080\",{\"1\":{\"1171\":1}}],[\"流式计算\",{\"1\":{\"787\":1}}],[\"流程如下\",{\"1\":{\"1508\":1}}],[\"流程类\",{\"1\":{\"1240\":1}}],[\"流程\",{\"1\":{\"1238\":1}}],[\"流程部署\",{\"1\":{\"585\":1,\"707\":1}}],[\"流程结束\",{\"1\":{\"583\":1}}],[\"流程的表数据创建过程\",{\"0\":{\"583\":1}}],[\"流程实例表\",{\"1\":{\"580\":1,\"704\":1}}],[\"流程实例所有节点记录\",{\"1\":{\"579\":1,\"703\":1}}],[\"流程定义表\",{\"1\":{\"578\":1,\"702\":1}}],[\"流程元数据表\",{\"1\":{\"578\":1,\"702\":1}}],[\"流程引擎\",{\"0\":{\"78\":1}}],[\"流水线\",{\"0\":{\"562\":1,\"1083\":1}}],[\"更加灵活\",{\"1\":{\"1083\":1}}],[\"更改地址\",{\"1\":{\"1144\":1}}],[\"更改hostname\",{\"1\":{\"1129\":1}}],[\"更改密钥库的存储口令\",{\"1\":{\"623\":1}}],[\"更改条目的密钥口令\",{\"1\":{\"623\":1}}],[\"更改条目的别名\",{\"1\":{\"623\":1}}],[\"更改默认的队列的深度\",{\"1\":{\"596\":2}}],[\"更频繁地交付更稳定的软件\",{\"1\":{\"561\":1}}],[\"更新时间\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"更新发货单状态\",{\"1\":{\"1252\":1}}],[\"更新发货单明细已分配数量\",{\"1\":{\"1252\":1}}],[\"更新方法\",{\"1\":{\"1244\":1}}],[\"更新和删除操作\",{\"1\":{\"1163\":1}}],[\"更新已渲染的函数\",{\"1\":{\"970\":1}}],[\"更新如下最新版本\",{\"1\":{\"851\":1}}],[\"更新对应字段\",{\"1\":{\"758\":1}}],[\"更新历史流程实例表状态或结束时间\",{\"1\":{\"583\":1}}],[\"更新历史活动表和任务表的任务状态和结束时间\",{\"1\":{\"583\":1}}],[\"更新键值\",{\"0\":{\"312\":1}}],[\"更新\",{\"0\":{\"757\":1,\"902\":1},\"1\":{\"271\":1,\"970\":1,\"1467\":1,\"1477\":1}}],[\"更新go\",{\"1\":{\"173\":1}}],[\"更新git\",{\"1\":{\"52\":1}}],[\"强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理\",{\"1\":{\"561\":1}}],[\"强制杀掉进程\",{\"1\":{\"1191\":1}}],[\"强制执行\",{\"1\":{\"1184\":1}}],[\"强制\",{\"1\":{\"1144\":1}}],[\"强制删除\",{\"1\":{\"1144\":1}}],[\"强制刷新数据\",{\"1\":{\"1002\":1}}],[\"强制使用索引\",{\"1\":{\"206\":1,\"1059\":1}}],[\"强制将函数转为handlerfunc类型\",{\"1\":{\"139\":1}}],[\"键值对的形式\",{\"1\":{\"557\":1}}],[\"键和值可以为null\",{\"1\":{\"198\":1}}],[\"先从设备注册器查询\",{\"1\":{\"1342\":1}}],[\"先从缓存读取\",{\"1\":{\"1317\":1}}],[\"先读取本地缓存\",{\"1\":{\"1331\":1}}],[\"先登录\",{\"1\":{\"1097\":1}}],[\"先安装docker\",{\"1\":{\"1092\":1}}],[\"先声明多个变量\",{\"1\":{\"992\":1}}],[\"先使用条件查出对应id\",{\"1\":{\"716\":1}}],[\"先匹配不是全部数字\",{\"1\":{\"635\":1}}],[\"先调用determinetargetdatasource\",{\"1\":{\"632\":1}}],[\"先将订阅转为核心\",{\"1\":{\"535\":1}}],[\"先传播给当前节点已知节点的部分节点\",{\"1\":{\"99\":1}}],[\"资源占用\",{\"1\":{\"1240\":1}}],[\"资源需求\",{\"1\":{\"1163\":1}}],[\"资源管理和服务发现\",{\"1\":{\"1161\":1}}],[\"资源\",{\"1\":{\"1157\":1}}],[\"资源文件\",{\"1\":{\"1065\":1}}],[\"资源文件夹下\",{\"1\":{\"1065\":1}}],[\"资源路径和资源处理器接口映射\",{\"1\":{\"513\":1}}],[\"资源服务器配置\",{\"1\":{\"467\":1}}],[\"响应描述\",{\"1\":{\"1542\":1,\"1543\":1,\"1551\":1,\"1552\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1574\":1,\"1581\":1,\"1593\":1,\"1594\":1,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"响应数据\",{\"1\":{\"1542\":1,\"1543\":1,\"1551\":1,\"1552\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1574\":1,\"1581\":1,\"1593\":1,\"1594\":1,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"响应编码\",{\"1\":{\"1542\":1,\"1543\":1,\"1551\":1,\"1552\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1574\":1,\"1581\":1,\"1593\":1,\"1594\":1,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"响应示例\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"响应参数\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1542\":1,\"1543\":1,\"1551\":1,\"1552\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1574\":1,\"1581\":1,\"1583\":1,\"1593\":1,\"1594\":1,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"响应必须带上上述请求头\",{\"1\":{\"1408\":1}}],[\"响应\",{\"0\":{\"1385\":1},\"1\":{\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"响应信息\",{\"1\":{\"1229\":1}}],[\"响应式通过用户id查询authentication放入本地缓存\",{\"1\":{\"1345\":1}}],[\"响应式orm\",{\"0\":{\"903\":1}}],[\"响应式关系映射框架\",{\"1\":{\"746\":1,\"1292\":1}}],[\"响应式事务\",{\"0\":{\"558\":1,\"1314\":1}}],[\"响应式编程无法在线程局部变量中存放用户信息\",{\"1\":{\"557\":1}}],[\"响应式项目初始化\",{\"0\":{\"503\":1}}],[\"响应状态码\",{\"0\":{\"360\":1}}],[\"充分利用cpu\",{\"1\":{\"500\":1}}],[\"规则实例\",{\"0\":{\"1310\":1}}],[\"规则如下\",{\"1\":{\"319\":1}}],[\"规定了证书要包含的信息\",{\"1\":{\"625\":1}}],[\"规范的库\",{\"1\":{\"992\":1}}],[\"规范中\",{\"1\":{\"992\":1}}],[\"规范\",{\"1\":{\"500\":1}}],[\"顶层导入选择器接口\",{\"1\":{\"493\":1}}],[\"及消息处理器deviceoperationbroker内部的replyprocessor\",{\"1\":{\"1331\":1}}],[\"及之前的消息\",{\"1\":{\"804\":3}}],[\"及组处理器autoconfigurantionimportselector中的autoconfigurationgroup\",{\"1\":{\"492\":1}}],[\"及封装被认证的对象\",{\"1\":{\"467\":1}}],[\"首先第一步操作就是将物理磁盘或者物理分区格式化成pv\",{\"1\":{\"1197\":1}}],[\"首先检查是否到达了auto\",{\"1\":{\"798\":2}}],[\"首先按优先级执行beandefinitionregistrypostprocessor实现类中的postprocessbeandefinitionregistry方法\",{\"1\":{\"483\":1}}],[\"首字母小写\",{\"1\":{\"658\":1}}],[\"首都是\",{\"1\":{\"154\":1}}],[\"入参名称\",{\"1\":{\"1486\":1}}],[\"入参唯一标识符\",{\"1\":{\"1486\":1}}],[\"入网方式\",{\"1\":{\"1304\":1}}],[\"入口reactorhttphandleradapter的apply方法\",{\"1\":{\"1262\":1}}],[\"入口函数\",{\"1\":{\"935\":1}}],[\"入口\",{\"0\":{\"482\":1}}],[\"入库缓存的可用库存总量\",{\"1\":{\"236\":1}}],[\"入库缓存\",{\"1\":{\"236\":1}}],[\"案例\",{\"1\":{\"481\":1}}],[\"还会把本地的master分支和远程的master分支关联起来\",{\"1\":{\"1151\":1}}],[\"还有这个数据长度是不固定的\",{\"1\":{\"1279\":1}}],[\"还有git为我们自动创建的第一个分支master\",{\"1\":{\"1151\":1}}],[\"还有使用iife\",{\"1\":{\"932\":1}}],[\"还未存盘\",{\"1\":{\"915\":1}}],[\"还提供了许多分布式服务\",{\"1\":{\"912\":1}}],[\"还可以把init初始化和监听器什么的加进去\",{\"1\":{\"481\":1}}],[\"还是原来的单例对象\",{\"1\":{\"476\":1}}],[\"还是原型\",{\"1\":{\"439\":1}}],[\"还是其他\",{\"1\":{\"439\":1}}],[\"还是\",{\"1\":{\"285\":1}}],[\"还是业务唯一id\",{\"0\":{\"217\":1}}],[\"面向服务架构\",{\"1\":{\"1233\":1}}],[\"面向的对象的设计里\",{\"1\":{\"481\":1}}],[\"面向切面编程\",{\"1\":{\"382\":1}}],[\"往往有很多不同的实现方案\",{\"1\":{\"481\":1}}],[\"往往适用于实现\",{\"1\":{\"290\":1}}],[\"法拉利\",{\"1\":{\"480\":1}}],[\"北京海淀区\",{\"1\":{\"479\":1}}],[\"张三\",{\"1\":{\"479\":2}}],[\"静态set\",{\"1\":{\"602\":1}}],[\"静态资源路径配置\",{\"0\":{\"594\":1}}],[\"静态获取对象\",{\"1\":{\"479\":1}}],[\"静态与非静态属性的情况\",{\"1\":{\"41\":1}}],[\"消费集群还是广播\",{\"1\":{\"920\":1}}],[\"消费原理图\",{\"1\":{\"921\":1}}],[\"消费原理\",{\"0\":{\"916\":1}}],[\"消费时\",{\"1\":{\"915\":1}}],[\"消费\",{\"0\":{\"807\":1}}],[\"消费指定分区\",{\"1\":{\"804\":1}}],[\"消费异常处理器\",{\"1\":{\"801\":1}}],[\"消费分区中新产生的数据\",{\"1\":{\"801\":1,\"802\":1}}],[\"消费者实现rocketmqlistener\",{\"1\":{\"1245\":1}}],[\"消费者id\",{\"1\":{\"920\":1}}],[\"消费者侧\",{\"0\":{\"917\":1}}],[\"消费者配置\",{\"1\":{\"802\":1}}],[\"消费者配置类\",{\"1\":{\"801\":1}}],[\"消费者组\",{\"1\":{\"801\":1,\"920\":1}}],[\"消费者\",{\"0\":{\"804\":1},\"1\":{\"789\":1}}],[\"消除缓存\",{\"1\":{\"476\":1}}],[\"消息处理器\",{\"1\":{\"1319\":1}}],[\"消息源messagesource\",{\"1\":{\"1313\":1}}],[\"消息总线\",{\"0\":{\"1284\":1}}],[\"消息\",{\"1\":{\"1275\":1}}],[\"消息后才向发送方发送\",{\"1\":{\"1275\":1}}],[\"消息后\",{\"1\":{\"1275\":1}}],[\"消息确认接收到消息\",{\"1\":{\"1275\":1}}],[\"消息确认消息已经成功处理\",{\"1\":{\"1275\":1}}],[\"消息请求释放消息\",{\"1\":{\"1275\":1}}],[\"消息作为初步确认\",{\"1\":{\"1275\":1}}],[\"消息给\",{\"1\":{\"1275\":1}}],[\"消息订阅者所具体接收的内容\",{\"1\":{\"1272\":1}}],[\"消息发布者可以同时是订阅者\",{\"1\":{\"1271\":1}}],[\"消息发送时\",{\"1\":{\"915\":1}}],[\"消息代理是服务器\",{\"1\":{\"1271\":1}}],[\"消息体setbody\",{\"1\":{\"1245\":1}}],[\"消息的发布者和订阅者都是客户端\",{\"1\":{\"1271\":1}}],[\"消息的用户信息mquserinfo\",{\"1\":{\"1245\":1}}],[\"消息的id是自动随机生成的\",{\"0\":{\"217\":1}}],[\"消息消费位点如何处理\",{\"1\":{\"1015\":1}}],[\"消息消费结束后\",{\"1\":{\"915\":1}}],[\"消息分配\",{\"1\":{\"1015\":1}}],[\"消息存入消息表\",{\"1\":{\"915\":1}}],[\"消息丢失的情况\",{\"1\":{\"915\":1}}],[\"消息已到达\",{\"1\":{\"824\":1}}],[\"消息已发送\",{\"1\":{\"824\":1}}],[\"消息压缩\",{\"1\":{\"801\":1,\"802\":1}}],[\"消息失败重试\",{\"1\":{\"223\":1}}],[\"消息队列\",{\"0\":{\"72\":1,\"1014\":1},\"1\":{\"789\":1,\"920\":1}}],[\"消息id耗尽问题\",{\"0\":{\"15\":1}}],[\"局部过滤器和全局过滤器加入到list集合排序\",{\"1\":{\"473\":1}}],[\"局部性和空间性\",{\"1\":{\"244\":1}}],[\"派发处理器\",{\"1\":{\"473\":1}}],[\"派生特征\",{\"1\":{\"297\":1}}],[\"派生类型\",{\"0\":{\"121\":1}}],[\"路由标识\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"路由器主要用于不同网络间的数据转发\",{\"1\":{\"1429\":1}}],[\"路由器\",{\"1\":{\"1429\":1}}],[\"路由表\",{\"1\":{\"1265\":1}}],[\"路由重定向redirects\",{\"0\":{\"977\":1}}],[\"路由嵌套nesting\",{\"0\":{\"976\":1}}],[\"路由\",{\"0\":{\"967\":1}}],[\"路由key包含\",{\"1\":{\"906\":1}}],[\"路由匹配\",{\"1\":{\"468\":1}}],[\"路由配置类\",{\"1\":{\"468\":1}}],[\"路径参数\",{\"1\":{\"1415\":1}}],[\"路径path\",{\"1\":{\"1415\":1}}],[\"路径中数据类型>类basecontroller\",{\"1\":{\"1244\":1}}],[\"路径相同优先使用先引用的\",{\"1\":{\"1076\":1}}],[\"路径是\",{\"1\":{\"1065\":1}}],[\"路径配置\",{\"1\":{\"348\":1}}],[\"路径\",{\"1\":{\"173\":1,\"346\":2,\"451\":1,\"1579\":1,\"1580\":1}}],[\"触发可写事件\",{\"1\":{\"1402\":1}}],[\"触发devicesessionevent\",{\"1\":{\"1328\":1}}],[\"触发deploy状态事件\",{\"1\":{\"744\":1}}],[\"触发条件\",{\"1\":{\"1311\":1,\"1398\":1}}],[\"触发callback的connectionlost方法进行重连startreconnectcycle\",{\"1\":{\"848\":1}}],[\"触发connectedcomplete的方法的前置判断\",{\"1\":{\"834\":1}}],[\"触发重连回调\",{\"1\":{\"834\":1}}],[\"触发器配置\",{\"1\":{\"1311\":1}}],[\"触发器\",{\"1\":{\"658\":1}}],[\"触发\",{\"1\":{\"656\":2}}],[\"触发任务监听器\",{\"1\":{\"585\":1,\"707\":1}}],[\"触发执行flatmapmain的onsubscribe方法\",{\"1\":{\"537\":1}}],[\"触发tomcat服务器延迟操作\",{\"1\":{\"456\":1}}],[\"触发初始化监听器\",{\"1\":{\"455\":1}}],[\"优点\",{\"1\":{\"1454\":1,\"1459\":1}}],[\"优雅启停单例对象\",{\"1\":{\"446\":1}}],[\"优先使用dependencymanagement中的版本\",{\"1\":{\"1068\":1}}],[\"优先在单例对像创建完成后\",{\"1\":{\"919\":1}}],[\"优先级高的覆盖优先级低的\",{\"1\":{\"593\":1}}],[\"优先从单例对象集singletonobjects\",{\"1\":{\"439\":1}}],[\"优先分配eden和一个survive区\",{\"1\":{\"243\":1}}],[\"优先考虑网关服务进行转发问题\",{\"1\":{\"42\":1}}],[\"做前置操作\",{\"1\":{\"1331\":1}}],[\"做内置处理\",{\"1\":{\"1325\":1}}],[\"做了同样的事情\",{\"1\":{\"1214\":1}}],[\"做了处理\",{\"1\":{\"419\":1}}],[\"做增删改查操作\",{\"1\":{\"898\":1}}],[\"做处理后再发出\",{\"1\":{\"536\":1}}],[\"做什么\",{\"1\":{\"382\":1}}],[\"封装消息数据\",{\"1\":{\"1245\":1}}],[\"封装着一个servlet\",{\"1\":{\"678\":1}}],[\"封装request和response\",{\"1\":{\"678\":1}}],[\"封装为一个sessioneventhttpsessionlisteneradapter\",{\"1\":{\"416\":1}}],[\"封存修改\",{\"1\":{\"43\":1}}],[\"监听其他服务器物模型数据变更\",{\"1\":{\"1323\":1}}],[\"监听子域名\",{\"1\":{\"1211\":1}}],[\"监听environmentchangeevent事件\",{\"1\":{\"884\":1}}],[\"监听配置初始化事件\",{\"1\":{\"743\":1}}],[\"监听应用上下文已刷新事件\",{\"1\":{\"742\":1}}],[\"监听器\",{\"0\":{\"587\":1,\"709\":1}}],[\"监听器触发\",{\"1\":{\"413\":1}}],[\"监听器对象注入到容器中\",{\"1\":{\"413\":1}}],[\"监听并在\",{\"1\":{\"179\":1}}],[\"后续请求都需要携带的值\",{\"1\":{\"1531\":1}}],[\"后端接口\",{\"0\":{\"1527\":1}}],[\"后端\",{\"0\":{\"1511\":1},\"1\":{\"1470\":1,\"1498\":1}}],[\"后端使用request\",{\"1\":{\"1408\":1}}],[\"后台管理\",{\"1\":{\"1582\":1}}],[\"后台运行的最后一个进程的id\",{\"1\":{\"1220\":1}}],[\"后台记录失败请求\",{\"1\":{\"730\":1}}],[\"后\",{\"1\":{\"1026\":1,\"1271\":1,\"1275\":2}}],[\"后面使用\",{\"1\":{\"995\":1}}],[\"后重新调用poll获取待消费消息\",{\"1\":{\"804\":2}}],[\"后者被过滤掉\",{\"1\":{\"767\":1}}],[\"后者是所有连接\",{\"1\":{\"18\":1}}],[\"后置处理添加订阅主题信息到topicinfo\",{\"1\":{\"1287\":1}}],[\"后置处理上下文postprocesscontext\",{\"1\":{\"451\":1}}],[\"后置处理器\",{\"1\":{\"398\":1}}],[\"父菜单id\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"父网关id\",{\"1\":{\"1331\":1}}],[\"父级设备id\",{\"1\":{\"1304\":1}}],[\"父模型记录子模型\",{\"1\":{\"735\":1}}],[\"父子域名保证cookie在父子域名间共享\",{\"1\":{\"724\":1}}],[\"父类加载器\",{\"1\":{\"451\":1}}],[\"父上下文为annotationconfigapplicationcontext\",{\"1\":{\"389\":1}}],[\"父一般不用\",{\"1\":{\"341\":1}}],[\"​\",{\"1\":{\"382\":1,\"852\":1,\"1259\":1,\"1452\":4}}],[\"降低代码耦合性的方案\",{\"1\":{\"382\":1}}],[\"降级其实就相当于\",{\"1\":{\"213\":1}}],[\"降级\",{\"1\":{\"213\":1,\"1501\":1}}],[\"延时操作settimeout\",{\"1\":{\"1002\":1}}],[\"延时5秒执行一次\",{\"1\":{\"192\":1}}],[\"延迟创建publisher\",{\"1\":{\"546\":1}}],[\"延迟生命周期的破坏\",{\"1\":{\"380\":1}}],[\"视为\",{\"1\":{\"379\":1}}],[\"放在redis缓存中\",{\"1\":{\"911\":1}}],[\"放在request的属性中\",{\"1\":{\"403\":1}}],[\"放在线程局部变量中\",{\"1\":{\"853\":1}}],[\"放在keyconfiguration\",{\"1\":{\"471\":1}}],[\"放入model\",{\"1\":{\"377\":1}}],[\"放到一个变量前使用就会返回相应变量的内存地址\",{\"1\":{\"141\":1}}],[\"我的理解\",{\"1\":{\"915\":1}}],[\"我使用的做法是先清空对应商品的缓存\",{\"1\":{\"911\":1}}],[\"我是全局参数\",{\"1\":{\"377\":1}}],[\"我想匹配所有被这个注解修饰的\",{\"1\":{\"376\":1}}],[\"我们第一次推送master分支时\",{\"1\":{\"1151\":1}}],[\"我们在后面的分支管理中会再次遇到git\",{\"1\":{\"1151\":1}}],[\"我们的命令\",{\"1\":{\"1114\":1}}],[\"我们才需要使用三斜线指令替代\",{\"1\":{\"995\":1}}],[\"我们就在声明文件中导入了\",{\"1\":{\"995\":1}}],[\"我们用以下方式来导出一个模块\",{\"1\":{\"992\":1}}],[\"我们也可以使用\",{\"1\":{\"992\":1}}],[\"我们也可以通过字面量在声明数组的同时快速初始化数组\",{\"1\":{\"140\":1}}],[\"我们通常这样获取一个\",{\"1\":{\"989\":1}}],[\"我们想重用一个功能模块\",{\"1\":{\"932\":1}}],[\"我们创建一个user\",{\"1\":{\"773\":1}}],[\"我们创建了函数\",{\"1\":{\"139\":1}}],[\"我们知道sql中有group\",{\"1\":{\"768\":1}}],[\"我们一般推荐模块之间基于接口编程\",{\"1\":{\"481\":1}}],[\"我们系统里抽象的各个模块\",{\"1\":{\"481\":1}}],[\"我们需要额外声明一个全局变量\",{\"1\":{\"993\":1}}],[\"我们需要使用\",{\"1\":{\"989\":1}}],[\"我们需要用\",{\"1\":{\"291\":1}}],[\"我们需要先执行编译后的脚本\",{\"1\":{\"16\":1}}],[\"我们不必一个一个列出所有值\",{\"1\":{\"282\":1}}],[\"我们不关心\",{\"1\":{\"272\":1}}],[\"我们使用了自身拥有所有权的\",{\"1\":{\"273\":1}}],[\"我们可以通过switch来完成类似的条件表达式的操作\",{\"1\":{\"982\":1}}],[\"我们可以确定新代码和原有代码能否正确地集成在⼀起\",{\"1\":{\"562\":1}}],[\"我们可以根据不同的数据库厂商来引入不同的jdbc驱动包\",{\"1\":{\"481\":1}}],[\"我们可以同时发送两个数据\",{\"1\":{\"190\":1}}],[\"我们可以在命令行中添加\",{\"1\":{\"996\":1}}],[\"我们可以在spring\",{\"1\":{\"481\":1}}],[\"我们可以在编码中通过实现\",{\"1\":{\"158\":1}}],[\"我们可以在java中调用该函数并传递参数\",{\"1\":{\"16\":1}}],[\"我们所测试的代码\",{\"1\":{\"159\":1}}],[\"我们定义了一个接口phone\",{\"1\":{\"157\":1}}],[\"我们必须创建一个新的更大的切片并把原分片的内容都拷贝过来\",{\"1\":{\"152\":1}}],[\"我们都知道\",{\"1\":{\"141\":1}}],[\"我们还可以通过指定下标来初始化元素\",{\"1\":{\"140\":1}}],[\"配合pipeline实现过滤器功能\",{\"1\":{\"678\":1}}],[\"配合valve实现过滤器功能\",{\"1\":{\"678\":1}}],[\"配合\",{\"1\":{\"372\":1}}],[\"配置路径\",{\"1\":{\"1458\":1}}],[\"配置线程组\",{\"1\":{\"1450\":1}}],[\"配置数据存储策略\",{\"1\":{\"1344\":1}}],[\"配置数据源\",{\"1\":{\"632\":1}}],[\"配置管理器\",{\"1\":{\"1342\":1}}],[\"配置仓库地址\",{\"1\":{\"1202\":1}}],[\"配置远程仓库的nexus的登录面\",{\"1\":{\"1202\":1}}],[\"配置静态ip\",{\"1\":{\"1198\":1}}],[\"配置静态资源路径\",{\"1\":{\"594\":1}}],[\"配置静态资源访问前缀\",{\"1\":{\"594\":1}}],[\"配置网络\",{\"0\":{\"1198\":1}}],[\"配置繁琐\",{\"1\":{\"1139\":1}}],[\"配置idea\",{\"1\":{\"1136\":1}}],[\"配置主机密钥\",{\"1\":{\"1130\":1}}],[\"配置主题\",{\"1\":{\"801\":1}}],[\"配置jdk\",{\"1\":{\"1202\":1}}],[\"配置jenkins凭据\",{\"1\":{\"1130\":1}}],[\"配置job\",{\"1\":{\"923\":1}}],[\"配置github公钥\",{\"1\":{\"1130\":1}}],[\"配置git\",{\"1\":{\"1130\":1}}],[\"配置默认从远程仓库下载依赖\",{\"1\":{\"1202\":1}}],[\"配置默认网络\",{\"1\":{\"1122\":1}}],[\"配置默认激活\",{\"1\":{\"1079\":1}}],[\"配置home路径\",{\"1\":{\"1082\":1}}],[\"配置http插件\",{\"1\":{\"1025\":1}}],[\"配置httpsecurity\",{\"1\":{\"330\":1}}],[\"配置鉴权管理器进行鉴权\",{\"1\":{\"1031\":1}}],[\"配置参数\",{\"1\":{\"1025\":1}}],[\"配置多台监听绑定到同一个直连交互的同一个队列\",{\"1\":{\"905\":1}}],[\"配置nacos服务管理器\",{\"1\":{\"864\":1}}],[\"配置加载流程\",{\"0\":{\"860\":1}}],[\"配置消费者\",{\"1\":{\"801\":1}}],[\"配置生产者\",{\"1\":{\"801\":1}}],[\"配置流程变量\",{\"1\":{\"585\":1,\"707\":1}}],[\"配置用户任务节点\",{\"1\":{\"584\":1,\"706\":1}}],[\"配置用户名密码认证过滤器的pattern\",{\"1\":{\"348\":1}}],[\"配置类解析的入口是启动类\",{\"1\":{\"486\":1}}],[\"配置动态更新\",{\"0\":{\"476\":1}}],[\"配置忽略鉴权的路径\",{\"1\":{\"471\":1}}],[\"配置servlet\",{\"1\":{\"456\":1}}],[\"配置server\",{\"1\":{\"450\":1}}],[\"配置session\",{\"1\":{\"451\":1}}],[\"配置engine\",{\"1\":{\"450\":1}}],[\"配置dispatcherservlet\",{\"1\":{\"447\":1}}],[\"配置上下文类加载器\",{\"1\":{\"398\":1}}],[\"配置文件包含pod的描述信息\",{\"1\":{\"1163\":1}}],[\"配置文件参考\",{\"1\":{\"1127\":1}}],[\"配置文件示例\",{\"0\":{\"924\":1}}],[\"配置文件配置\",{\"0\":{\"802\":1}}],[\"配置文件加载\",{\"0\":{\"355\":1}}],[\"配置文件sysctl\",{\"1\":{\"5\":1,\"17\":1}}],[\"配置表单登录页面及登录url和允许访问权限\",{\"1\":{\"348\":1}}],[\"配置登录页面\",{\"1\":{\"348\":1}}],[\"配置安全上下文的安全上下文仓库securitycontextrepository\",{\"1\":{\"346\":1,\"348\":1}}],[\"配置客户端信息\",{\"1\":{\"345\":1,\"347\":1}}],[\"配置客户端clientdetailservice\",{\"1\":{\"343\":1}}],[\"配置授权\",{\"1\":{\"343\":1}}],[\"配置授权服务器\",{\"1\":{\"343\":1}}],[\"配置filtersecurityinterceptor的filterinvocationsecuritymetadatasource\",{\"1\":{\"336\":1}}],[\"配置器初始化\",{\"1\":{\"334\":1}}],[\"配置全局authenticationmanagerbuilder\",{\"1\":{\"331\":1}}],[\"配置authentication\",{\"1\":{\"331\":1}}],[\"配置authorization\",{\"1\":{\"104\":1}}],[\"配置websecurity\",{\"1\":{\"329\":1}}],[\"配置使用的过滤器如stripprefix路径截取\",{\"1\":{\"468\":1}}],[\"配置使用\",{\"1\":{\"106\":1}}],[\"配置实例注入\",{\"1\":{\"106\":1}}],[\"配置读取\",{\"1\":{\"106\":1}}],[\"配置\",{\"0\":{\"106\":1,\"348\":1,\"591\":1,\"800\":1,\"981\":1,\"1208\":1,\"1475\":1,\"1512\":1},\"1\":{\"658\":1,\"730\":1,\"1129\":1}}],[\"配置中心\",{\"1\":{\"862\":1}}],[\"配置中\",{\"1\":{\"31\":1}}],[\"配置对象数组参数\",{\"0\":{\"10\":1}}],[\"测试groovy脚本的执行方式\",{\"1\":{\"648\":1}}],[\"测试\",{\"1\":{\"360\":1,\"562\":1,\"1248\":1,\"1613\":1}}],[\"测试样例\",{\"0\":{\"234\":1}}],[\"示例值\",{\"1\":{\"1531\":3,\"1532\":2,\"1533\":2,\"1534\":3,\"1535\":2,\"1570\":1,\"1571\":1,\"1579\":1,\"1580\":1,\"1641\":1}}],[\"示例代码\",{\"1\":{\"780\":1}}],[\"示例\",{\"1\":{\"360\":1,\"589\":1,\"711\":1,\"760\":1,\"1026\":1}}],[\"相较于积木平台\",{\"1\":{\"1459\":1}}],[\"相比传统\",{\"1\":{\"1425\":1}}],[\"相比于\",{\"1\":{\"993\":1}}],[\"相等返回\",{\"1\":{\"1222\":2}}],[\"相互协作的应用程序组件\",{\"1\":{\"1161\":1}}],[\"相应属性的查询\",{\"1\":{\"1479\":1}}],[\"相应类型的extensionloader\",{\"1\":{\"736\":1}}],[\"相应的包名\",{\"1\":{\"20\":1}}],[\"相同点\",{\"1\":{\"1220\":1}}],[\"相同\",{\"1\":{\"1220\":1}}],[\"相同参数的请求总是发到同一提供者\",{\"1\":{\"730\":1}}],[\"相同活跃数的随机\",{\"1\":{\"730\":1}}],[\"相当于\",{\"1\":{\"656\":1}}],[\"相关概念\",{\"0\":{\"906\":1},\"1\":{\"382\":1}}],[\"相关对象设置到\",{\"1\":{\"354\":1}}],[\"转译成一个名为\",{\"1\":{\"969\":1}}],[\"转化为jspservlet\",{\"1\":{\"651\":1}}],[\"转为工厂beandefinition\",{\"1\":{\"859\":1}}],[\"转为json\",{\"1\":{\"649\":1}}],[\"转为string\",{\"1\":{\"649\":1}}],[\"转为number\",{\"1\":{\"649\":1}}],[\"转为boolean\",{\"1\":{\"649\":1}}],[\"转为post\",{\"1\":{\"609\":1}}],[\"转换函数\",{\"1\":{\"649\":1}}],[\"转换为单个对象传递给组件\",{\"1\":{\"971\":1}}],[\"转换为毫秒\",{\"1\":{\"649\":1}}],[\"转换为request中的mappingdata\",{\"1\":{\"460\":1}}],[\"转换mono到flux\",{\"1\":{\"539\":1}}],[\"转发到登录页面\",{\"1\":{\"348\":1}}],[\"转移所有权\",{\"1\":{\"279\":1,\"318\":1}}],[\"委托器模式包含多个generator\",{\"1\":{\"348\":1}}],[\"投票发起\",{\"1\":{\"346\":1}}],[\"登陆成功后回调地址上携带的code\",{\"1\":{\"1531\":1}}],[\"登出过滤器\",{\"1\":{\"346\":1}}],[\"登录账号\",{\"1\":{\"1628\":1,\"1635\":1}}],[\"登录日志删改查\",{\"1\":{\"1626\":1}}],[\"登录日志管理\",{\"0\":{\"1625\":1}}],[\"登录流程\",{\"0\":{\"1505\":1}}],[\"登录后展示所拥有应用\",{\"1\":{\"1496\":1}}],[\"登录时\",{\"1\":{\"1452\":1}}],[\"登录shell路径\",{\"1\":{\"1177\":1}}],[\"登录a\",{\"1\":{\"723\":1}}],[\"登录\",{\"0\":{\"722\":1},\"1\":{\"1628\":2}}],[\"登录token检查\",{\"1\":{\"471\":1}}],[\"登录失败处理\",{\"1\":{\"348\":1}}],[\"登录成功\",{\"1\":{\"724\":1}}],[\"登录成功处理\",{\"1\":{\"348\":1}}],[\"登录成功后的重定向\",{\"1\":{\"348\":1}}],[\"登录成功后\",{\"0\":{\"325\":1},\"1\":{\"723\":1}}],[\"登录配置\",{\"1\":{\"348\":1}}],[\"登录请求成功后\",{\"1\":{\"346\":1}}],[\"刷新令牌时间\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"刷新令牌\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"刷新令牌也是该接口\",{\"1\":{\"1531\":1}}],[\"刷新频率ms\",{\"1\":{\"1153\":1}}],[\"刷新权限\",{\"1\":{\"1141\":1}}],[\"刷新token\",{\"1\":{\"346\":1}}],[\"刷新服务列表的间隔时间\",{\"1\":{\"213\":1}}],[\"删除指定token\",{\"1\":{\"1597\":1}}],[\"删除平台\",{\"1\":{\"1592\":1}}],[\"删除平台角色\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"删除单个操作日志\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"删除单个租户\",{\"1\":{\"1586\":1}}],[\"删除登录日志\",{\"1\":{\"1586\":1}}],[\"删除用户\",{\"0\":{\"1551\":1},\"1\":{\"1586\":1}}],[\"删除命令\",{\"1\":{\"1248\":1}}],[\"删除不掉只读变量\",{\"1\":{\"1219\":1}}],[\"删除不需要的依赖包\",{\"1\":{\"173\":1}}],[\"删除之后不可访问\",{\"1\":{\"1219\":1}}],[\"删除变量\",{\"1\":{\"1219\":1}}],[\"删除特定的服务\",{\"1\":{\"1159\":1}}],[\"删除特定的部署\",{\"1\":{\"1159\":1}}],[\"删除特定的pod\",{\"1\":{\"1159\":1}}],[\"删除开发分支\",{\"1\":{\"1148\":1}}],[\"删除文件夹文件夹文件夹文内容\",{\"1\":{\"1215\":2}}],[\"删除文件\",{\"1\":{\"1147\":1}}],[\"删除分支\",{\"1\":{\"1144\":1}}],[\"删除镜像\",{\"1\":{\"1087\":1}}],[\"删除菜单\",{\"0\":{\"1035\":1}}],[\"删除消息\",{\"1\":{\"915\":1}}],[\"删除锁\",{\"1\":{\"911\":1}}],[\"删除\",{\"0\":{\"1542\":1,\"1562\":1,\"1573\":1,\"1581\":1,\"1593\":1,\"1604\":1,\"1614\":1,\"1623\":1,\"1629\":1,\"1636\":1},\"1\":{\"910\":1,\"1244\":1,\"1477\":1}}],[\"删除值\",{\"1\":{\"909\":1}}],[\"删除所有key\",{\"1\":{\"908\":1}}],[\"删除字段\",{\"1\":{\"759\":1}}],[\"删除cookie\",{\"1\":{\"652\":1}}],[\"删除条目\",{\"1\":{\"623\":1}}],[\"删除当前代办任务\",{\"1\":{\"583\":1}}],[\"删除授权信息\",{\"1\":{\"346\":1}}],[\"授权方式\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"授权范围\",{\"1\":{\"1531\":1}}],[\"授权页面\",{\"1\":{\"1496\":1}}],[\"授权码模式必须\",{\"1\":{\"1531\":2}}],[\"授权码模式\",{\"0\":{\"1508\":1}}],[\"授权码\",{\"1\":{\"1463\":1,\"1467\":1}}],[\"授权过滤器链\",{\"1\":{\"348\":1}}],[\"授权\",{\"1\":{\"346\":1}}],[\"管道组件\",{\"1\":{\"678\":1}}],[\"管道与管道之间的交互关系事先建立完成\",{\"1\":{\"526\":1}}],[\"管道实例化过程\",{\"1\":{\"110\":1}}],[\"管理平台\",{\"0\":{\"1495\":1}}],[\"管理调度多个任务\",{\"1\":{\"1335\":1}}],[\"管理设备与平台通信的网络组件\",{\"1\":{\"1269\":1}}],[\"管理session会话\",{\"1\":{\"678\":1}}],[\"管理应用的多个容器\",{\"1\":{\"566\":1}}],[\"管理员\",{\"0\":{\"349\":1},\"1\":{\"1561\":1}}],[\"管理资源\",{\"1\":{\"347\":1}}],[\"管理已注册客户端信息\",{\"1\":{\"346\":1}}],[\"过期时间\",{\"1\":{\"1532\":1}}],[\"过滤\",{\"1\":{\"762\":1}}],[\"过滤的级别\",{\"1\":{\"596\":3}}],[\"过滤器设置当前语言环境\",{\"1\":{\"1313\":1}}],[\"过滤器实例\",{\"1\":{\"652\":1}}],[\"过滤器处理器适配器\",{\"1\":{\"473\":1}}],[\"过滤器web处理器\",{\"1\":{\"473\":2}}],[\"过滤器链\",{\"1\":{\"473\":1}}],[\"过滤器适配器\",{\"1\":{\"473\":1}}],[\"过滤器注册器bean注册过滤器\",{\"1\":{\"468\":1}}],[\"过滤器filter\",{\"1\":{\"447\":1}}],[\"过滤器oauth2authorizationrequestredirectfilter会进行捕获处理\",{\"1\":{\"345\":1}}],[\"过滤器顺序\",{\"0\":{\"322\":1}}],[\"过滤器\",{\"0\":{\"111\":1},\"1\":{\"1491\":1}}],[\"过渡版本\",{\"0\":{\"343\":1}}],[\"构成的filterproxy\",{\"1\":{\"418\":1}}],[\"构造propertymetadata\",{\"1\":{\"1480\":1}}],[\"构造信息数据推送到节能管理平台\",{\"1\":{\"1472\":1}}],[\"构造网关实例\",{\"1\":{\"1319\":1}}],[\"构造签名类型通常出现在接口或类型别名中\",{\"1\":{\"991\":1}}],[\"构造签名类型\",{\"1\":{\"991\":1}}],[\"构造httpservletrequest对象和httpservletresponse对象\",{\"1\":{\"679\":1}}],[\"构造每一级的已订阅的队列信息\",{\"1\":{\"527\":1}}],[\"构造存放多个回调方法\",{\"1\":{\"500\":1}}],[\"构造一个路径及授权判断的映射的entry对象\",{\"1\":{\"467\":1}}],[\"构造\",{\"1\":{\"451\":1}}],[\"构造web请求\",{\"1\":{\"403\":1}}],[\"构造器加入需要查找的字段\",{\"1\":{\"780\":1}}],[\"构造器注入\",{\"1\":{\"479\":1}}],[\"构造器中调用初始化方法initialize\",{\"1\":{\"450\":1}}],[\"构造器\",{\"0\":{\"357\":1}}],[\"构造授权码\",{\"1\":{\"346\":2}}],[\"构造安全过滤器链\",{\"1\":{\"343\":1}}],[\"构造生成的providermanager包含父providermanager\",{\"1\":{\"341\":1}}],[\"构造上述authenticationmanager\",{\"1\":{\"341\":1}}],[\"构建可执行operator\",{\"1\":{\"1301\":1}}],[\"构建设备和平台的传输通道\",{\"1\":{\"1269\":1}}],[\"构建查询来源searchsourcebuilder\",{\"1\":{\"1248\":1}}],[\"构建查询请求searchrequest\",{\"1\":{\"1248\":1}}],[\"构建和运行可弹性扩展的应用\",{\"1\":{\"1234\":1}}],[\"构建自定义镜像\",{\"1\":{\"1130\":1}}],[\"构建过程\",{\"0\":{\"1102\":1}}],[\"构建过滤器链过滤\",{\"1\":{\"473\":1}}],[\"构建多平台镜像\",{\"1\":{\"1093\":1}}],[\"构建数据源datasource\",{\"1\":{\"850\":1}}],[\"构建request请求\",{\"1\":{\"780\":1}}],[\"构建searchrequest\",{\"1\":{\"780\":1}}],[\"构建searchresponse\",{\"1\":{\"780\":1}}],[\"构建serviceprovider\",{\"1\":{\"104\":1}}],[\"构建镜像\",{\"1\":{\"564\":1,\"565\":1,\"1474\":1}}],[\"构建打包\",{\"1\":{\"562\":1}}],[\"构建线程任务\",{\"1\":{\"236\":1}}],[\"构建索引名称出错\",{\"1\":{\"222\":1}}],[\"构建包文件参数\",{\"1\":{\"173\":1}}],[\"构建包为可执行文件\",{\"1\":{\"173\":1}}],[\"构建标记\",{\"1\":{\"173\":1}}],[\"构建运行\",{\"0\":{\"115\":1}}],[\"构建host\",{\"1\":{\"104\":1}}],[\"构建容器\",{\"1\":{\"104\":1}}],[\"认证方式\",{\"1\":{\"1531\":1,\"1570\":1,\"1571\":1}}],[\"认证服务\",{\"0\":{\"1514\":1,\"1516\":1}}],[\"认证服务使用authserverrunner\",{\"1\":{\"471\":1}}],[\"认证中心\",{\"1\":{\"1513\":1}}],[\"认证与授权\",{\"1\":{\"1241\":1}}],[\"认证\",{\"0\":{\"1028\":1}}],[\"认证和授权地址\",{\"1\":{\"1026\":1}}],[\"认证请求类型\",{\"1\":{\"1026\":1}}],[\"认证模块的实现\",{\"1\":{\"1015\":1}}],[\"认证失败\",{\"1\":{\"1031\":1}}],[\"认证失败处理\",{\"1\":{\"348\":1}}],[\"认证失败入口点\",{\"1\":{\"348\":1}}],[\"认证主体放入安全上下文\",{\"1\":{\"346\":1}}],[\"认证成功和失败的处理逻辑即认证入口点authenticationentrypoint\",{\"1\":{\"348\":1}}],[\"认证成功\",{\"1\":{\"339\":1}}],[\"认证时\",{\"1\":{\"334\":1}}],[\"认证管理器\",{\"1\":{\"330\":1}}],[\"被赋予服务使用权的企业租户\",{\"1\":{\"1503\":1}}],[\"被用作平台对设备下发指令\",{\"1\":{\"1361\":1}}],[\"被分配到集群中的某个节点上运行\",{\"1\":{\"1161\":1}}],[\"被commsreceiver触发调用\",{\"1\":{\"831\":1}}],[\"被commssender调用\",{\"1\":{\"824\":2}}],[\"被处理record数量大于等于count时提交\",{\"1\":{\"798\":1}}],[\"被聚合的字段无需对分词统计\",{\"1\":{\"769\":1}}],[\"被不同extensiondirector管理\",{\"1\":{\"737\":1}}],[\"被在那里侦听的coyote\",{\"1\":{\"679\":1}}],[\"被调用服务端对服务端token验证\",{\"1\":{\"471\":1}}],[\"被调用或者程序中止\",{\"1\":{\"160\":1}}],[\"被代理对象需实现接口\",{\"1\":{\"385\":1}}],[\"被多个httpsecurity中的子认证管理构造器共享\",{\"1\":{\"330\":1,\"331\":1}}],[\"加减乘除等\",{\"1\":{\"1225\":1}}],[\"加减乘除\",{\"1\":{\"1225\":1}}],[\"加上了\",{\"1\":{\"1151\":1}}],[\"加\",{\"1\":{\"1144\":1}}],[\"加入下列配置\",{\"1\":{\"1072\":1}}],[\"加入agg\",{\"1\":{\"780\":1}}],[\"加入scroll和构造器\",{\"1\":{\"780\":1}}],[\"加入排序字段\",{\"1\":{\"780\":1}}],[\"加入query语句\",{\"1\":{\"780\":1}}],[\"加入到websecurity中留待build时做初始化\",{\"1\":{\"329\":1}}],[\"加密插件\",{\"1\":{\"1140\":1,\"1141\":1}}],[\"加密\",{\"1\":{\"719\":1}}],[\"加载协议配置到容器\",{\"1\":{\"1324\":1}}],[\"加载文件夹中代理服务器配置\",{\"1\":{\"1210\":1}}],[\"加载完成后才可以对\",{\"1\":{\"935\":1}}],[\"加载对应类型的类进行管理\",{\"1\":{\"737\":1}}],[\"加载配置类\",{\"1\":{\"734\":1}}],[\"加载器\",{\"1\":{\"678\":1}}],[\"加载器webapploader\",{\"1\":{\"451\":1}}],[\"加载所有不同的配置项\",{\"1\":{\"593\":1}}],[\"加载factories和imports文件中的自动配置类\",{\"1\":{\"494\":1}}],[\"加载自定义类的相关类对象\",{\"1\":{\"244\":1}}],[\"加载\",{\"0\":{\"944\":1},\"1\":{\"244\":1}}],[\"加载资源到内存\",{\"0\":{\"210\":1}}],[\"适配器模式\",{\"0\":{\"1258\":1},\"1\":{\"1254\":1}}],[\"适配器和安全过滤器链配置方式不能同时使用\",{\"1\":{\"329\":1}}],[\"适合大字段存储\",{\"1\":{\"749\":1}}],[\"适用于在大规模集群中管理容器化应用程序\",{\"1\":{\"1164\":1}}],[\"适用于单体应用\",{\"1\":{\"722\":1}}],[\"适用于webflux\",{\"1\":{\"321\":1}}],[\"适用的范围更广\",{\"1\":{\"668\":1}}],[\"疑问\",{\"0\":{\"324\":1}}],[\"迭代器模式\",{\"1\":{\"1254\":1}}],[\"迭代器实现了iterator\",{\"1\":{\"320\":1}}],[\"迭代器\",{\"0\":{\"320\":1}}],[\"试试实现了\",{\"1\":{\"318\":1}}],[\"恰好对应函数参数的三种传入方式\",{\"1\":{\"318\":1}}],[\"三\",{\"1\":{\"1272\":1,\"1445\":1}}],[\"三斜线指令的前面只允许出现单行或多行注释\",{\"1\":{\"995\":1}}],[\"三斜线指令的语法如上\",{\"1\":{\"995\":1}}],[\"三斜线指令必须放在文件的最顶端\",{\"1\":{\"995\":1}}],[\"三斜线指令\",{\"1\":{\"995\":1}}],[\"三阶段提交\",{\"0\":{\"663\":1}}],[\"三大安全过滤器链\",{\"1\":{\"348\":1}}],[\"三种\",{\"0\":{\"318\":1,\"319\":1}}],[\"三者都是用于描述和操作字符串的类\",{\"1\":{\"199\":1}}],[\"捕获作用域中的值\",{\"0\":{\"317\":1}}],[\"英文单词都是通过空格切分\",{\"1\":{\"312\":1}}],[\"覆盖springboot默认配置\",{\"1\":{\"594\":1}}],[\"覆盖已有的值\",{\"1\":{\"312\":1}}],[\"覆盖索引\",{\"1\":{\"220\":1}}],[\"日志管理等功能\",{\"1\":{\"1502\":1,\"1524\":1}}],[\"日志\",{\"0\":{\"1250\":1},\"1\":{\"678\":1}}],[\"日志最大的历史\",{\"1\":{\"596\":2}}],[\"日志最大\",{\"1\":{\"596\":1}}],[\"日志文件名格式\",{\"1\":{\"596\":3}}],[\"日志输出格式\",{\"1\":{\"596\":1}}],[\"日志存放路径\",{\"1\":{\"596\":1}}],[\"日志配置\",{\"1\":{\"596\":1}}],[\"日期查询日志\",{\"1\":{\"1187\":1}}],[\"日期转换\",{\"1\":{\"649\":1}}],[\"日期格式的字符串转换成date对象\",{\"1\":{\"379\":1}}],[\"日期如果是date类型\",{\"1\":{\"256\":1}}],[\"日本队\",{\"1\":{\"309\":1}}],[\"美国队\",{\"1\":{\"309\":1}}],[\"跟结构体一样\",{\"1\":{\"303\":1}}],[\"深入特征\",{\"0\":{\"299\":1}}],[\"深克隆\",{\"1\":{\"200\":1}}],[\"智能指针会自动解引用为它所包裹的值\",{\"1\":{\"298\":1}}],[\"电脑再也不会卡\",{\"1\":{\"297\":1}}],[\"泛型\",{\"0\":{\"296\":1},\"1\":{\"988\":1}}],[\"泛型和特征\",{\"0\":{\"293\":1}}],[\"换句话说\",{\"1\":{\"290\":1}}],[\"底下的枚举成员\",{\"1\":{\"286\":1}}],[\"底层是字节数组\",{\"1\":{\"267\":1}}],[\"底层是基于数组加链表和红黑树\",{\"1\":{\"228\":1}}],[\"千万不要因为调用路径变短了\",{\"1\":{\"286\":1}}],[\"宏\",{\"0\":{\"284\":1}}],[\"匹配越好\",{\"1\":{\"767\":1}}],[\"匹配其中一个字段即可\",{\"1\":{\"762\":1}}],[\"匹配它所拥有的所有context\",{\"1\":{\"679\":1}}],[\"匹配它所有虚拟主机host\",{\"1\":{\"679\":1}}],[\"匹配时的操作\",{\"1\":{\"596\":2}}],[\"匹配org\",{\"1\":{\"376\":1}}],[\"匹配登录请求\",{\"1\":{\"346\":1}}],[\"匹配获取token的客户端请求\",{\"1\":{\"346\":1}}],[\"匹配出来的age是\",{\"1\":{\"285\":1}}],[\"匹配\",{\"0\":{\"283\":1}}],[\"匹配行之后\",{\"1\":{\"12\":1}}],[\"没有执行requestready方法\",{\"1\":{\"1383\":1}}],[\"没有\",{\"1\":{\"1151\":1}}],[\"没有从父级extensiondirector查找\",{\"1\":{\"736\":1}}],[\"没有移出所捕获变量的所有权的闭包自动实现了\",{\"1\":{\"319\":1}}],[\"没有实现\",{\"1\":{\"318\":1}}],[\"没有处理\",{\"1\":{\"282\":1}}],[\"没有三目运算符\",{\"1\":{\"131\":1}}],[\"穷尽匹配\",{\"1\":{\"282\":1}}],[\"有效\",{\"1\":{\"1532\":1}}],[\"有效时间\",{\"1\":{\"1503\":1}}],[\"有效时间等的维护\",{\"1\":{\"1503\":1}}],[\"有点繁琐\",{\"1\":{\"1459\":1}}],[\"有点类似于上面的\",{\"1\":{\"658\":1}}],[\"有点类似ioc的思想\",{\"1\":{\"481\":1}}],[\"有更加轻量级的头\",{\"1\":{\"1425\":1}}],[\"有更多的请求正在等待处理\",{\"1\":{\"756\":1}}],[\"有如下好处\",{\"1\":{\"1425\":1}}],[\"有一个表达式为\",{\"1\":{\"1223\":1}}],[\"有一个叫\",{\"1\":{\"290\":1}}],[\"有自己的环境变量和文件系统\",{\"1\":{\"1103\":1}}],[\"有时通过\",{\"1\":{\"994\":1}}],[\"有的第三方库扩展了一个全局变量\",{\"1\":{\"993\":1}}],[\"有多种方式可以导入\",{\"1\":{\"992\":1}}],[\"有序消费还是多线程\",{\"1\":{\"920\":1}}],[\"有三种策略\",{\"1\":{\"902\":1}}],[\"有三个全局初始化配置器配置\",{\"1\":{\"341\":1}}],[\"有默认host\",{\"1\":{\"678\":1}}],[\"有父认证管理器\",{\"1\":{\"333\":1}}],[\"有值的时候返回\",{\"1\":{\"305\":1}}],[\"有两个关键概念\",{\"1\":{\"658\":1}}],[\"有两个self\",{\"1\":{\"298\":1}}],[\"有两个不同的运算符来调用方法\",{\"1\":{\"290\":1}}],[\"有些类似\",{\"1\":{\"280\":1}}],[\"有待学习\",{\"1\":{\"207\":1}}],[\"显示最后命令的退出状态\",{\"1\":{\"1220\":1}}],[\"显示文件最后几行\",{\"1\":{\"1187\":1}}],[\"显示文件最后行数的内容\",{\"1\":{\"1187\":1}}],[\"显示ipv4和地址信息\",{\"1\":{\"1185\":1}}],[\"显示jvm进程\",{\"1\":{\"1153\":1}}],[\"显示head提交的简短sha1值\",{\"1\":{\"1149\":1}}],[\"显示head提交的sha1值\",{\"1\":{\"1149\":1}}],[\"显示工作区根目录\",{\"1\":{\"1149\":1}}],[\"显示版本库\",{\"1\":{\"1149\":1}}],[\"显示已订阅\",{\"1\":{\"8\":1}}],[\"显隐\",{\"1\":{\"948\":1}}],[\"显式类型标注\",{\"1\":{\"277\":1}}],[\"枚举项定义方法与bool类型定义0和1的方法相同\",{\"1\":{\"1486\":1}}],[\"枚举项定义方法与bool类型定义0和1的值方法相同\",{\"1\":{\"1486\":3}}],[\"枚举实例默认被public\",{\"1\":{\"1256\":1}}],[\"枚举中使用泛型\",{\"0\":{\"294\":1}}],[\"枚举用于处理空值\",{\"0\":{\"276\":1}}],[\"枚举类型是一个类型\",{\"1\":{\"275\":1}}],[\"枚举\",{\"0\":{\"275\":1},\"1\":{\"286\":1}}],[\"简称为k8s\",{\"1\":{\"1161\":1}}],[\"简洁写法\",{\"1\":{\"935\":1}}],[\"简化了之前的使用形式\",{\"1\":{\"932\":1}}],[\"简写\",{\"1\":{\"271\":1,\"996\":1}}],[\"简单聚合\",{\"0\":{\"769\":1}}],[\"简单\",{\"1\":{\"240\":1}}],[\"简单信号通知\",{\"1\":{\"113\":1}}],[\"字典子项标识\",{\"1\":{\"1622\":1}}],[\"字典子项名称\",{\"1\":{\"1622\":1}}],[\"字典子项增删改查\",{\"1\":{\"1619\":1}}],[\"字典子项管理\",{\"0\":{\"1618\":1}}],[\"字典标识\",{\"1\":{\"1613\":1}}],[\"字典名称\",{\"1\":{\"1613\":1}}],[\"字典项增删改查\",{\"1\":{\"1609\":1}}],[\"字典管理\",{\"0\":{\"1608\":1}}],[\"字段添加删除\",{\"0\":{\"1042\":1}}],[\"字段策略\",{\"1\":{\"902\":1}}],[\"字段中包含\",{\"1\":{\"763\":1}}],[\"字段数据类型\",{\"0\":{\"749\":1}}],[\"字段\",{\"1\":{\"271\":1,\"1034\":1}}],[\"字符串比较\",{\"1\":{\"1222\":1}}],[\"字符串验证时\",{\"1\":{\"1222\":1}}],[\"字符串拼接\",{\"1\":{\"982\":1}}],[\"字符串切片类型\",{\"1\":{\"273\":1}}],[\"字符串的一些操作是基于原有字符串操作\",{\"1\":{\"267\":1}}],[\"字符串字面量返回的是字符串的地址\",{\"1\":{\"267\":1}}],[\"字符串\",{\"0\":{\"267\":1},\"1\":{\"910\":1,\"928\":1}}],[\"字符串等进行迭代循环\",{\"1\":{\"133\":1}}],[\"字符串为\",{\"1\":{\"123\":1}}],[\"几个有名字的结构体\",{\"1\":{\"271\":1}}],[\"让该线程处理一个\",{\"1\":{\"1445\":1}}],[\"让连接pc的局域网设备能够访问外网\",{\"1\":{\"1432\":1}}],[\"让代码更容易被他人理解\",{\"1\":{\"1254\":1}}],[\"让容器使用和服务器同样的时间设置\",{\"1\":{\"1130\":1}}],[\"让bean后置处理器applicationcontextawareprocessor处理\",{\"1\":{\"398\":1}}],[\"让浏览器再次发送授权请求\",{\"1\":{\"325\":1}}],[\"让我们可以对原始字符串进行部分访问\",{\"1\":{\"268\":1}}],[\"让程序可以从\",{\"1\":{\"160\":1}}],[\"栈和堆\",{\"1\":{\"265\":1}}],[\"栈处理\",{\"1\":{\"174\":1}}],[\"借用arrays的元素用作循环中\",{\"1\":{\"277\":1}}],[\"借用不可变所有权\",{\"1\":{\"265\":1}}],[\"借用中间件对用户进行鉴权\",{\"1\":{\"177\":1}}],[\"与设备上线类似\",{\"1\":{\"1329\":1}}],[\"与运算\",{\"1\":{\"1223\":1}}],[\"与运行中的协程数量相等\",{\"1\":{\"186\":1}}],[\"与$\",{\"1\":{\"1220\":1}}],[\"与上面的\",{\"1\":{\"1214\":1}}],[\"与上述mono逻辑类似\",{\"1\":{\"545\":1}}],[\"与上述xml注入类似\",{\"1\":{\"480\":1}}],[\"与本地gradle等同\",{\"1\":{\"1073\":1}}],[\"与或运算符\",{\"0\":{\"987\":1}}],[\"与之相反true\",{\"1\":{\"929\":1}}],[\"与倒排索引相反\",{\"1\":{\"753\":1}}],[\"与match\",{\"1\":{\"751\":1}}],[\"与mon相同\",{\"1\":{\"656\":1}}],[\"与httpsecurity相似\",{\"1\":{\"321\":1}}],[\"与其元素共存亡\",{\"0\":{\"303\":1}}],[\"与其它系统编程语言的\",{\"1\":{\"264\":1}}],[\"与\",{\"1\":{\"298\":1,\"992\":1,\"995\":1,\"1220\":1}}],[\"与结构体紧密关联\",{\"1\":{\"291\":1}}],[\"与方法签名匹配\",{\"1\":{\"290\":1}}],[\"此executor不是线程池\",{\"1\":{\"1446\":1}}],[\"此executor并非线程池\",{\"1\":{\"1445\":1}}],[\"此临时性分支可用于做实验性修改\",{\"1\":{\"1150\":1}}],[\"此profile被激活\",{\"1\":{\"1079\":2}}],[\"此方法仅适用于listener\",{\"1\":{\"804\":2}}],[\"此处application\",{\"1\":{\"593\":1}}],[\"此作用域已结束\",{\"1\":{\"264\":1}}],[\"此时工作区的内容和切换分之前commitid提交节点的内容一样\",{\"1\":{\"1150\":1}}],[\"此时如果原有模块已经有了类型声明文件\",{\"1\":{\"994\":1}}],[\"此时就需要扩展全局变量的类型\",{\"1\":{\"993\":1}}],[\"此时需要注意选择提交的模式ackmode\",{\"1\":{\"798\":1}}],[\"此时遵循高优先级覆盖低优先级\",{\"1\":{\"593\":1}}],[\"此时则变成了低优先级覆盖高优先的配置\",{\"1\":{\"593\":1}}],[\"此时\",{\"1\":{\"219\":1}}],[\"此时不会产生编译错误\",{\"1\":{\"123\":1}}],[\"特别是在有多个端口的情况下\",{\"1\":{\"1171\":1}}],[\"特别地\",{\"1\":{\"900\":1}}],[\"特殊字符转义\",{\"0\":{\"1043\":1}}],[\"特殊常量\",{\"1\":{\"129\":1}}],[\"特点\",{\"1\":{\"604\":1}}],[\"特地没有用\",{\"1\":{\"291\":1}}],[\"特征对象的限制\",{\"1\":{\"298\":1}}],[\"特征对象的动态分发\",{\"1\":{\"298\":1}}],[\"特征对象\",{\"0\":{\"298\":1}}],[\"特征约束\",{\"1\":{\"297\":1}}],[\"特征的类型无需所有权转移\",{\"1\":{\"266\":1}}],[\"特征\",{\"0\":{\"261\":1,\"297\":1,\"318\":1},\"1\":{\"266\":1,\"298\":3,\"310\":2,\"318\":2,\"319\":4,\"320\":2}}],[\"容易引起混乱和管理不便\",{\"1\":{\"1500\":1}}],[\"容器启动命令\",{\"0\":{\"1283\":1}}],[\"容器启动添加配置\",{\"1\":{\"1141\":1}}],[\"容器化\",{\"1\":{\"1241\":1}}],[\"容器编排化\",{\"1\":{\"1233\":1}}],[\"容器创建的网络命名空间和虚拟网络设备\",{\"1\":{\"1170\":1}}],[\"容器内部\",{\"1\":{\"1170\":1}}],[\"容器内部又要使用docker\",{\"1\":{\"1128\":1}}],[\"容器会分配一个虚拟网络设备\",{\"1\":{\"1170\":1}}],[\"容器是\",{\"1\":{\"1170\":1}}],[\"容器组和控制器\",{\"0\":{\"1167\":1}}],[\"容器组合\",{\"1\":{\"1161\":1}}],[\"容器安装需挂载进来docker\",{\"1\":{\"1128\":1}}],[\"容器安全\",{\"1\":{\"256\":1}}],[\"容器就可被该网络中的其他容器访问\",{\"1\":{\"1117\":1}}],[\"容器运行要执行的命令\",{\"1\":{\"1113\":1,\"1114\":1}}],[\"容器数据卷\",{\"1\":{\"1106\":1}}],[\"容器不可删除\",{\"1\":{\"1098\":1}}],[\"容器只读\",{\"1\":{\"1098\":1}}],[\"容器间通信必须使用\",{\"1\":{\"1090\":1}}],[\"容器名字或容器id\",{\"1\":{\"1127\":1}}],[\"容器名\",{\"1\":{\"1089\":1}}],[\"容器过滤命令\",{\"1\":{\"1087\":1}}],[\"容器id\",{\"1\":{\"1087\":3,\"1136\":1,\"1230\":1}}],[\"容器使用这个接口来创建一个\",{\"1\":{\"652\":1}}],[\"容器从服务移除之前调用\",{\"1\":{\"652\":1}}],[\"容器\",{\"0\":{\"681\":1},\"1\":{\"651\":1,\"652\":1,\"674\":1,\"1170\":3,\"1233\":1}}],[\"容器管理\",{\"1\":{\"341\":1}}],[\"容量是16\",{\"1\":{\"228\":1}}],[\"容量10\",{\"1\":{\"228\":1}}],[\"形式来增强模块的\",{\"1\":{\"932\":1}}],[\"形式的特征对象\",{\"1\":{\"298\":2}}],[\"形式的条件判断\",{\"1\":{\"131\":1}}],[\"形式\",{\"1\":{\"246\":1,\"315\":1,\"899\":1}}],[\"双方约定使用modbus协议去通信\",{\"1\":{\"1276\":1}}],[\"双向绑定的数据对象的数据对象的数据类型\",{\"1\":{\"998\":1}}],[\"双亲委派机制\",{\"1\":{\"244\":1}}],[\"双重检查\",{\"1\":{\"216\":1}}],[\"准备连接信息对象mqttconnect\",{\"1\":{\"828\":1}}],[\"准备clientcomms\",{\"1\":{\"819\":1}}],[\"准备上下文preparecontext\",{\"1\":{\"450\":1}}],[\"准备\",{\"1\":{\"244\":1}}],[\"抢先式中断\",{\"1\":{\"243\":1}}],[\"安全过滤器链等\",{\"1\":{\"343\":1}}],[\"安全点的延申\",{\"1\":{\"243\":1}}],[\"安全区域\",{\"1\":{\"243\":1}}],[\"安装历史表\",{\"0\":{\"1468\":1}}],[\"安装信息表\",{\"1\":{\"1467\":1}}],[\"安装时间\",{\"1\":{\"1467\":1}}],[\"安装时默认使用docker0网桥\",{\"1\":{\"1090\":1}}],[\"安装方式\",{\"1\":{\"1467\":1}}],[\"安装表\",{\"0\":{\"1467\":1}}],[\"安装记录\",{\"1\":{\"1463\":1}}],[\"安装id\",{\"1\":{\"1463\":1}}],[\"安装启用容器\",{\"1\":{\"1128\":1}}],[\"安装容器\",{\"1\":{\"1128\":1}}],[\"安装参考\",{\"1\":{\"1127\":1}}],[\"安装配置\",{\"1\":{\"1127\":1,\"1130\":1}}],[\"安装及配置\",{\"0\":{\"1118\":1}}],[\"安装环境模拟器\",{\"1\":{\"1093\":1}}],[\"安装模拟器\",{\"1\":{\"1093\":1}}],[\"安装docker\",{\"0\":{\"1092\":1},\"1\":{\"1093\":1}}],[\"安装python和java8环境\",{\"1\":{\"923\":1}}],[\"安装\",{\"1\":{\"102\":1,\"1118\":1,\"1129\":1,\"1463\":1,\"1467\":1}}],[\"安装ntpdate工具\",{\"1\":{\"33\":1}}],[\"异常跳转\",{\"1\":{\"243\":1}}],[\"异步调用\",{\"1\":{\"1486\":1}}],[\"异步请求\",{\"0\":{\"695\":1}}],[\"异步更新库存\",{\"0\":{\"224\":1},\"1\":{\"212\":1}}],[\"异步\",{\"0\":{\"107\":1,\"1000\":1},\"1\":{\"224\":1,\"915\":1}}],[\"异步执行后台任务\",{\"1\":{\"105\":1}}],[\"暂时未用\",{\"1\":{\"1501\":1}}],[\"暂时保存暂存区的修改\",{\"1\":{\"43\":1}}],[\"暂存channelinitializer\",{\"1\":{\"1450\":1}}],[\"暂存父上下文\",{\"1\":{\"395\":1}}],[\"暂未解决\",{\"1\":{\"1130\":1}}],[\"暂停所有用户线程\",{\"1\":{\"243\":1}}],[\"根本没有\",{\"1\":{\"304\":1}}],[\"根节点枚举\",{\"1\":{\"243\":1}}],[\"根据白名单忽略鉴权\",{\"1\":{\"1522\":1}}],[\"根据用户角色获取用户的应用\",{\"1\":{\"1494\":1}}],[\"根据用户名和口令获取信息\",{\"1\":{\"1491\":1}}],[\"根据不同服务使用redisconnectionfactory获取不同的redistemplate\",{\"1\":{\"1487\":1}}],[\"根据不同的功能码有不同的数据长度\",{\"1\":{\"1279\":1}}],[\"根据项目id查询安装信息\",{\"1\":{\"1463\":1}}],[\"根据选择器选择合适的eventloop\",{\"1\":{\"1445\":1}}],[\"根据tokengenerator产生token返回\",{\"1\":{\"1345\":1}}],[\"根据产品或设备聚合属性信息\",{\"1\":{\"1344\":1}}],[\"根据物模型数据查询对应存储策略\",{\"1\":{\"1344\":1}}],[\"根据场景实例id和规则模型生成schedulejob\",{\"1\":{\"1335\":1}}],[\"根据设备所注册的服务器节点\",{\"1\":{\"1368\":1}}],[\"根据设备id获取设备操作器deviceoperator\",{\"1\":{\"1331\":1}}],[\"根据设备网关id启用网关\",{\"1\":{\"1319\":1}}],[\"根据网络组件id通过网络配置管理器查询网络配置\",{\"1\":{\"1319\":1}}],[\"根据网络类型找到对应networkprovider\",{\"1\":{\"1319\":1}}],[\"根据网关配置的provider\",{\"1\":{\"1319\":1}}],[\"根据告警配置alarm\",{\"1\":{\"1309\":1}}],[\"根据过滤器集创建网关过滤器链gatewayfilterchain\",{\"1\":{\"1262\":1}}],[\"根据分配请求allocaterequest和allocateresponse构建拣货请求\",{\"1\":{\"1252\":1}}],[\"根据id查询商品信息放在redis缓存中\",{\"1\":{\"1246\":1}}],[\"根据id更新\",{\"1\":{\"757\":1}}],[\"根据端口查看服务\",{\"0\":{\"1180\":1}}],[\"根据应用程序的需要\",{\"1\":{\"1171\":1}}],[\"根据当前操作系统\",{\"1\":{\"1079\":1}}],[\"根据当前部门id查询所有子部门的id\",{\"1\":{\"256\":1}}],[\"根据节点配置树的深度进行剪枝\",{\"1\":{\"1036\":1}}],[\"根据服务名称查询拥有的api进行鉴权\",{\"1\":{\"1029\":1}}],[\"根据服务器状态做出相应操作\",{\"1\":{\"455\":1}}],[\"根据需要配置下面地址\",{\"1\":{\"1026\":1}}],[\"根据openid和accesstoken获取用户详细信息\",{\"1\":{\"1007\":1}}],[\"根据我们已有的知识\",{\"1\":{\"970\":1}}],[\"根据类路径扫描dao接口\",{\"1\":{\"900\":1}}],[\"根据事务工厂和数据源创建环境对象到configuration\",{\"1\":{\"852\":1}}],[\"根据application\",{\"1\":{\"850\":1}}],[\"根据上一个游标\",{\"1\":{\"780\":1}}],[\"根据游标位置获取下一批结果\",{\"1\":{\"780\":1}}],[\"根据条件更新\",{\"1\":{\"758\":1}}],[\"根据servletwebserverinitializedevent开启服务注册\",{\"1\":{\"861\":1}}],[\"根据scripted\",{\"1\":{\"758\":1}}],[\"根据state和state\",{\"1\":{\"348\":1}}],[\"根据相应的load加载策略\",{\"1\":{\"737\":1}}],[\"根据级联key获取指定对象中的value值\",{\"1\":{\"649\":1}}],[\"根据指定格式将时间戳格式化为日期字符串\",{\"1\":{\"649\":1}}],[\"根据证书请求生成证书\",{\"1\":{\"623\":1}}],[\"根据提交记录自动触发\",{\"1\":{\"565\":1}}],[\"根据测试结果\",{\"1\":{\"562\":1}}],[\"根据索引找到过滤器\",{\"1\":{\"471\":1}}],[\"根据路径或名称获取servlet以及构造请求分发器applicationdispatcher\",{\"1\":{\"463\":1}}],[\"根据beandefinitionnames生成工厂bean还是普通bean\",{\"1\":{\"438\":1}}],[\"根据要要认证的主体选取合适的provider认证\",{\"1\":{\"340\":1}}],[\"根据空格来切分字符串\",{\"1\":{\"312\":1}}],[\"根据parent\",{\"1\":{\"256\":1}}],[\"根据引用关系从根节点向下搜索\",{\"1\":{\"243\":1}}],[\"根据已有容器创建镜像文件\",{\"1\":{\"218\":1}}],[\"根据undolog再次开启本地事务执行回滚操作\",{\"1\":{\"212\":1}}],[\"根据host进行分组\",{\"1\":{\"205\":1}}],[\"根据值自行判定变量类型\",{\"1\":{\"123\":1}}],[\"提交请求\",{\"1\":{\"1383\":1}}],[\"提交描述\",{\"1\":{\"1144\":1}}],[\"提交事务\",{\"1\":{\"429\":1}}],[\"提供租户管理\",{\"1\":{\"1524\":1}}],[\"提供统一用户认证\",{\"1\":{\"1502\":1}}],[\"提供基础新增\",{\"1\":{\"1244\":1}}],[\"提供可以对基础信息赋值的更新插入方法\",{\"1\":{\"1244\":1}}],[\"提供持久化能力\",{\"1\":{\"1015\":1}}],[\"提供restful接口api\",{\"1\":{\"748\":1}}],[\"提供了基础查询和更新方法\",{\"1\":{\"1244\":1}}],[\"提供了基本查询\",{\"1\":{\"1244\":1}}],[\"提供了一个语法\",{\"1\":{\"994\":1}}],[\"提供了一个新语法\",{\"1\":{\"993\":1}}],[\"提供了收集\",{\"1\":{\"748\":1}}],[\"提供了多种指定advice规则的定义方式\",{\"1\":{\"376\":1}}],[\"提供重试机制来避免类似问题的发生\",{\"1\":{\"730\":1}}],[\"提供资源给客户端\",{\"1\":{\"347\":1}}],[\"提供的一个特殊模式\",{\"1\":{\"282\":1}}],[\"提前生成代理对象getearlyreference方法\",{\"1\":{\"383\":1}}],[\"提前将最常用的类型自动引入到作用域中\",{\"1\":{\"308\":1}}],[\"提前触发gc\",{\"1\":{\"243\":1}}],[\"提高并发度\",{\"1\":{\"1049\":1}}],[\"提高单位时间内的吞吐量\",{\"1\":{\"500\":1}}],[\"提高查询效率\",{\"1\":{\"221\":1}}],[\"提高开发效率\",{\"1\":{\"201\":1,\"243\":1}}],[\"垃圾收集器\",{\"1\":{\"243\":1}}],[\"垃圾收集算法如下\",{\"1\":{\"243\":1}}],[\"垃圾收集的区域划分\",{\"1\":{\"243\":1}}],[\"垃圾回收触发时机及条件\",{\"1\":{\"194\":1}}],[\"垃圾回收\",{\"1\":{\"174\":1}}],[\"老年代\",{\"1\":{\"243\":2}}],[\"堆的分代划分\",{\"1\":{\"243\":1}}],[\"由浏览器对服务器发出\",{\"1\":{\"1425\":1}}],[\"由协议管理器进行管理\",{\"1\":{\"1354\":1}}],[\"由网络组件和协议组成了传输特定格式数据的网络通道\",{\"1\":{\"1269\":1}}],[\"由listenercontainerconfiguration创建监听容器并启动\",{\"1\":{\"919\":1}}],[\"由configurationpropertiesbindingpostprocessor将被\",{\"1\":{\"884\":1}}],[\"由chunk\",{\"1\":{\"717\":1}}],[\"由于spring\",{\"1\":{\"1284\":1}}],[\"由于远程库是空的\",{\"1\":{\"1151\":1}}],[\"由于全局变量不支持通过\",{\"1\":{\"995\":1}}],[\"由于这是一种很常见的需求\",{\"1\":{\"932\":1}}],[\"由于重连时\",{\"1\":{\"848\":1}}],[\"由于实现了\",{\"1\":{\"298\":1}}],[\"由spring帮我们提交\",{\"1\":{\"798\":5}}],[\"由生命周期处理器\",{\"1\":{\"456\":1}}],[\"由资源服务器配置\",{\"1\":{\"322\":1}}],[\"由低优先级的finalizer线程执行finalize\",{\"1\":{\"243\":1}}],[\"由前端使用location\",{\"1\":{\"46\":1}}],[\"判断是超级租户或租户管理员或用户\",{\"1\":{\"1452\":1}}],[\"判断是否启用\",{\"1\":{\"1319\":1}}],[\"判断是否自动重连\",{\"1\":{\"820\":1}}],[\"判断是否是单例\",{\"1\":{\"439\":1}}],[\"判断是否有必要执行finalize方法\",{\"1\":{\"243\":1}}],[\"判断eventloop是否与线程绑定\",{\"1\":{\"1445\":1}}],[\"判断超时线程\",{\"1\":{\"1433\":1}}],[\"判断执行是否成功\",{\"1\":{\"1221\":1}}],[\"判断子字符串\",{\"1\":{\"931\":1}}],[\"判断某个key是否存在\",{\"1\":{\"908\":1}}],[\"判断\",{\"1\":{\"902\":1}}],[\"判断消息类型\",{\"1\":{\"838\":1}}],[\"判断token是否存在\",{\"1\":{\"723\":1}}],[\"判断请求头中的token是否合法\",{\"1\":{\"471\":1}}],[\"判断bean是否有对应的建议器advisors\",{\"1\":{\"434\":1}}],[\"判断对象是否存活的算法\",{\"1\":{\"201\":1,\"243\":1}}],[\"随后\",{\"1\":{\"1170\":1}}],[\"随后进行筛选\",{\"1\":{\"243\":1}}],[\"随机选择一个\",{\"1\":{\"188\":1}}],[\"虚拟的url形式\",{\"1\":{\"1202\":1}}],[\"虚拟机ip\",{\"1\":{\"1137\":1}}],[\"虚拟机栈帧的局部变量表引用的对象\",{\"1\":{\"243\":1}}],[\"虚引用\",{\"1\":{\"243\":1}}],[\"全表扫描\",{\"1\":{\"1048\":1}}],[\"全部\",{\"1\":{\"1144\":1}}],[\"全部从\",{\"1\":{\"271\":1}}],[\"全部回收\",{\"1\":{\"243\":1}}],[\"全功能垃圾收集器\",{\"1\":{\"243\":1}}],[\"全局异常处理器\",{\"0\":{\"1526\":1}}],[\"全局替换\",{\"1\":{\"1187\":1}}],[\"全局工具自动安装\",{\"0\":{\"1082\":1}}],[\"全局对象\",{\"1\":{\"991\":1}}],[\"全局变量是最简单的一种场景\",{\"1\":{\"991\":1}}],[\"全局变量是允许声明但不使用的\",{\"1\":{\"126\":1}}],[\"全局变量\",{\"0\":{\"991\":1}}],[\"全局配置\",{\"1\":{\"594\":1}}],[\"全局和局部过滤器按排序后的顺序执行\",{\"1\":{\"473\":1}}],[\"全局和局部过滤器\",{\"0\":{\"472\":1}}],[\"全局\",{\"1\":{\"330\":1}}],[\"全局事务服务\",{\"1\":{\"212\":1}}],[\"弱引用\",{\"1\":{\"243\":1}}],[\"弱一致性\",{\"1\":{\"212\":1}}],[\"报表预览鉴权\",{\"1\":{\"1455\":1}}],[\"报表查询参数\",{\"1\":{\"1455\":1}}],[\"报npe\",{\"1\":{\"658\":1}}],[\"报内存溢出异常\",{\"1\":{\"243\":1}}],[\"报错问题\",{\"0\":{\"59\":1}}],[\"报错信息\",{\"0\":{\"52\":1}}],[\"报错\",{\"0\":{\"26\":1},\"1\":{\"1113\":1}}],[\"反应\",{\"1\":{\"1309\":1}}],[\"反射和序列化会破坏单例\",{\"1\":{\"1257\":1}}],[\"反射获取信息\",{\"1\":{\"1032\":1}}],[\"反射执行方法\",{\"1\":{\"241\":1}}],[\"反之则失败\",{\"1\":{\"910\":1}}],[\"反序列化类\",{\"1\":{\"801\":2,\"802\":2}}],[\"反熵\",{\"1\":{\"99\":1}}],[\"属性单位\",{\"1\":{\"1486\":4}}],[\"属性类型\",{\"1\":{\"1486\":4}}],[\"属性读写类型\",{\"1\":{\"1486\":1}}],[\"属性唯一标识符\",{\"1\":{\"1486\":1}}],[\"属性标识\",{\"1\":{\"1480\":1}}],[\"属性值2\",{\"1\":{\"1479\":1}}],[\"属性值1\",{\"1\":{\"1479\":1}}],[\"属性值根据物模型进行格式化\",{\"1\":{\"1479\":1}}],[\"属性\",{\"1\":{\"824\":1,\"1342\":1}}],[\"属性来设置和调用同一个接口的不同版本\",{\"1\":{\"730\":1}}],[\"属性来设置重试次数\",{\"1\":{\"730\":1}}],[\"属性描述\",{\"1\":{\"497\":1,\"1486\":1}}],[\"属性名称\",{\"1\":{\"497\":1,\"498\":1,\"1486\":1}}],[\"属性注入\",{\"1\":{\"440\":1}}],[\"属性编辑器\",{\"1\":{\"379\":1}}],[\"属性操作\",{\"1\":{\"241\":1}}],[\"属于host\",{\"1\":{\"678\":1}}],[\"属于\",{\"1\":{\"139\":1}}],[\"向对应服务节点发送消息\",{\"1\":{\"1331\":1}}],[\"向设备注册中心存入设备产品操作器map=key\",{\"1\":{\"1326\":1}}],[\"向\",{\"1\":{\"1275\":3}}],[\"向量引擎\",{\"1\":{\"1038\":1}}],[\"向auth服务发起oauth2\",{\"1\":{\"1031\":1}}],[\"向auth服务发起token进行校验\",{\"1\":{\"1029\":1}}],[\"向微信公众号订阅用户发送模板消息\",{\"0\":{\"1009\":1}}],[\"向微信公众号平台发起授权\",{\"1\":{\"1007\":1}}],[\"向上反馈订阅信息\",{\"1\":{\"526\":1}}],[\"向服务器添加service\",{\"1\":{\"453\":1}}],[\"向服务器设置catalinabase\",{\"1\":{\"453\":1}}],[\"向pipeline添加value\",{\"1\":{\"451\":1}}],[\"向授权服务器获取token请求\",{\"1\":{\"345\":1}}],[\"向授权服务器发起授权请求\",{\"1\":{\"345\":1}}],[\"向数组尾部插入元素\",{\"1\":{\"287\":1}}],[\"向队列移除元素\",{\"1\":{\"239\":1}}],[\"向切片添加一个元素\",{\"1\":{\"152\":1}}],[\"已绑定的线程\",{\"1\":{\"1445\":1}}],[\"已订单明细维度\",{\"1\":{\"1252\":1}}],[\"已订阅\",{\"1\":{\"530\":1}}],[\"已定位问题\",{\"0\":{\"848\":1}}],[\"已使用消息id列表\",{\"1\":{\"824\":1}}],[\"已满\",{\"1\":{\"596\":2}}],[\"已经存在\",{\"1\":{\"312\":1}}],[\"已经声明\",{\"1\":{\"123\":1}}],[\"已下单未发运数量\",{\"1\":{\"236\":1}}],[\"总体来说\",{\"1\":{\"1254\":1}}],[\"总gc情况\",{\"1\":{\"1153\":1}}],[\"总之\",{\"1\":{\"286\":1,\"1151\":1}}],[\"总库存数\",{\"1\":{\"236\":1}}],[\"总结起来\",{\"1\":{\"1162\":1}}],[\"总结\",{\"0\":{\"668\":1},\"1\":{\"160\":1}}],[\"散件数量\",{\"1\":{\"236\":1}}],[\"返库数量\",{\"1\":{\"236\":1}}],[\"返回0\",{\"1\":{\"1532\":1}}],[\"返回身份信息保存在浏览器端\",{\"1\":{\"1491\":1}}],[\"返回就绪channel的个数\",{\"1\":{\"1445\":1}}],[\"返回最新的数据给浏览器刷新\",{\"1\":{\"1425\":1}}],[\"返回网络对象vertxmqttclient\",{\"1\":{\"1353\":1}}],[\"返回\",{\"1\":{\"1222\":11,\"1223\":3,\"1227\":13}}],[\"返回匹配的字符串\",{\"1\":{\"931\":1}}],[\"返回true\",{\"1\":{\"931\":1}}],[\"返回t结果\",{\"1\":{\"780\":1}}],[\"返回hash所有的field\",{\"1\":{\"909\":1}}],[\"返回hash的field数量\",{\"1\":{\"909\":1}}],[\"返回结果即可\",{\"1\":{\"780\":1}}],[\"返回结果\",{\"1\":{\"780\":1}}],[\"返回类型\",{\"1\":{\"780\":1}}],[\"返回函数\",{\"1\":{\"780\":1}}],[\"返回分片数\",{\"1\":{\"780\":1}}],[\"返回一个空结果\",{\"1\":{\"730\":1}}],[\"返回响应\",{\"1\":{\"652\":1}}],[\"返回表示flux终止的新的mono对象\",{\"1\":{\"549\":1}}],[\"返回表示在mono完成后\",{\"1\":{\"538\":1}}],[\"返回表达式\",{\"1\":{\"315\":2}}],[\"返回订阅信息\",{\"1\":{\"527\":2}}],[\"返回由factorybean创建的bean实例\",{\"1\":{\"480\":1}}],[\"返回mono对象\",{\"1\":{\"556\":1}}],[\"返回mono\",{\"1\":{\"471\":1}}],[\"返回值是map\",{\"1\":{\"377\":1}}],[\"返回值方法\",{\"1\":{\"377\":2}}],[\"返回授权页面服务器收到同意授权的许可consent后\",{\"1\":{\"346\":1}}],[\"返回了\",{\"1\":{\"312\":1}}],[\"返回sessionid存放在cookie中\",{\"1\":{\"203\":1}}],[\"返回另外一个函数\",{\"1\":{\"139\":1}}],[\"返回变量存储地址\",{\"1\":{\"130\":1}}],[\"出参名称\",{\"1\":{\"1486\":1}}],[\"出参唯一标识符\",{\"1\":{\"1486\":1}}],[\"出于设计上的考虑\",{\"1\":{\"291\":1}}],[\"出库缓存的可用库存总量\",{\"1\":{\"236\":1}}],[\"出库缓存\",{\"1\":{\"236\":1}}],[\"出现之前\",{\"1\":{\"1425\":1}}],[\"出现异常时\",{\"1\":{\"730\":1}}],[\"出现多数据源动态切换失败的原因是因为在事务开启后\",{\"1\":{\"632\":1}}],[\"出现在\",{\"1\":{\"124\":1}}],[\"出现这样的问题是原sql文件是mysql\",{\"1\":{\"56\":1}}],[\"出现\",{\"0\":{\"5\":1}}],[\"差异库位\",{\"1\":{\"236\":1}}],[\"差异数量\",{\"1\":{\"236\":1}}],[\"拣货库位+存储库位\",{\"1\":{\"236\":1}}],[\"冻结数量\",{\"1\":{\"236\":1}}],[\"耗时\",{\"1\":{\"236\":1,\"421\":1}}],[\"核心注意点\",{\"0\":{\"1381\":1}}],[\"核心resthighlevelclient\",{\"1\":{\"1248\":1}}],[\"核心redistemplate的opsforvalue\",{\"1\":{\"468\":1}}],[\"核心是双重检查\",{\"1\":{\"1256\":1}}],[\"核心是sqlsessionfactory中的configuration对象\",{\"1\":{\"852\":1}}],[\"核心是客户端和服务器之间\",{\"1\":{\"652\":1}}],[\"核心是生成\",{\"1\":{\"651\":1}}],[\"核心订阅者和发布者\",{\"1\":{\"535\":1}}],[\"核心serverwebchange是springgateway中的上下文\",{\"1\":{\"473\":1}}],[\"核心serverwebchange\",{\"1\":{\"471\":1}}],[\"核心方法nioeventloop中的run方法\",{\"1\":{\"1445\":1}}],[\"核心方法postprocessafterinitialization\",{\"1\":{\"432\":1}}],[\"核心方法\",{\"1\":{\"429\":1}}],[\"核心\",{\"0\":{\"391\":1,\"1013\":1},\"1\":{\"468\":1,\"500\":1,\"562\":1,\"849\":1,\"853\":1,\"1262\":1}}],[\"核心类维护\",{\"0\":{\"1395\":1}}],[\"核心类\",{\"0\":{\"510\":1},\"1\":{\"383\":1,\"832\":1,\"893\":1}}],[\"核心类defaultsingletonbeanregistry中\",{\"1\":{\"380\":1}}],[\"核心时gettask\",{\"1\":{\"236\":1}}],[\"核心线程数\",{\"1\":{\"236\":1}}],[\"控制flush次数\",{\"1\":{\"1403\":1}}],[\"控制循环\",{\"1\":{\"1173\":1}}],[\"控制器名称\",{\"1\":{\"1590\":1,\"1591\":1}}],[\"控制器通过其中配置的\",{\"1\":{\"1167\":1}}],[\"控制器可以自动地在另一个节点调度一个配置完全一样的\",{\"1\":{\"1167\":1}}],[\"控制器可以提供如下特性\",{\"1\":{\"1167\":1}}],[\"控制器建议器\",{\"1\":{\"375\":1}}],[\"控制线程执行顺序\",{\"1\":{\"236\":1}}],[\"控制台输出\",{\"1\":{\"596\":2}}],[\"控制台\",{\"1\":{\"91\":1}}],[\"守护线程和用户线程\",{\"0\":{\"235\":1}}],[\"释放连接\",{\"1\":{\"1381\":1}}],[\"释放资源\",{\"1\":{\"780\":1}}],[\"释放容器worker线程\",{\"1\":{\"695\":1}}],[\"释放cpu资源和锁资源\",{\"1\":{\"233\":1}}],[\"释放锁\",{\"1\":{\"212\":2}}],[\"标准解析器\",{\"1\":{\"749\":1}}],[\"标准script函数库\",{\"0\":{\"649\":1}}],[\"标签1\",{\"1\":{\"1484\":1}}],[\"标签引入\",{\"1\":{\"989\":1,\"991\":1,\"993\":1}}],[\"标签上声明\",{\"1\":{\"983\":1}}],[\"标签\",{\"1\":{\"749\":1,\"971\":2}}],[\"标注在方法上\",{\"1\":{\"413\":1}}],[\"标注类为切面\",{\"1\":{\"382\":1}}],[\"标记的\",{\"1\":{\"1275\":1}}],[\"标记整理\",{\"1\":{\"243\":1}}],[\"标记\",{\"1\":{\"243\":2}}],[\"标记线程已完成\",{\"1\":{\"233\":1}}],[\"标识\",{\"1\":{\"1130\":1,\"1145\":1,\"1465\":1,\"1466\":1,\"1611\":1,\"1612\":1}}],[\"标识是否可变\",{\"1\":{\"265\":1}}],[\"标识为其元素类型为\",{\"1\":{\"152\":1}}],[\"标识符用来命名变量\",{\"1\":{\"117\":1}}],[\"标识符\",{\"1\":{\"117\":1}}],[\"标识符如果以小写字母开头\",{\"1\":{\"116\":1}}],[\"处理都事件或accept事件\",{\"1\":{\"1445\":1}}],[\"处理io读写或连接操作\",{\"1\":{\"1445\":1}}],[\"处理流程\",{\"1\":{\"1398\":1}}],[\"处理写事件\",{\"1\":{\"1383\":1}}],[\"处理mqtt报文消息\",{\"1\":{\"1377\":1}}],[\"处理订阅\",{\"1\":{\"1377\":1}}],[\"处理设备消息\",{\"1\":{\"1361\":1,\"1364\":1}}],[\"处理设备上线消息\",{\"1\":{\"1328\":1}}],[\"处理客户端传来的消息\",{\"1\":{\"1349\":1}}],[\"处理消息的发送\",{\"1\":{\"1331\":1}}],[\"处理消息\",{\"1\":{\"1330\":1}}],[\"处理器执行器包含handler和拦截器\",{\"1\":{\"1259\":1}}],[\"处理优先级\",{\"1\":{\"1068\":1,\"1076\":1}}],[\"处理方式\",{\"1\":{\"1036\":1}}],[\"处理之后\",{\"1\":{\"798\":2}}],[\"处理之后提交\",{\"1\":{\"798\":2}}],[\"处理相应的注入service业务\",{\"1\":{\"658\":1}}],[\"处理负时区偏移\",{\"1\":{\"649\":1}}],[\"处理被task\",{\"1\":{\"589\":1,\"711\":1}}],[\"处理任务\",{\"1\":{\"585\":1,\"707\":1}}],[\"处理组中的导入选择器\",{\"1\":{\"494\":1}}],[\"处理来源\",{\"1\":{\"488\":1}}],[\"处理未授权\",{\"1\":{\"467\":1,\"1031\":1}}],[\"处理异步结果\",{\"1\":{\"403\":1}}],[\"处理filtersecurityinterceptor产生的访问被拒绝异常\",{\"1\":{\"346\":1}}],[\"处理\",{\"1\":{\"346\":1,\"739\":1,\"741\":1,\"1207\":1,\"1445\":1}}],[\"处理请求和响应\",{\"1\":{\"1381\":1}}],[\"处理请求\",{\"1\":{\"108\":1}}],[\"处自动调用\",{\"1\":{\"264\":1}}],[\"处于物理层\",{\"1\":{\"1430\":1}}],[\"处于数据链路层\",{\"1\":{\"1430\":1}}],[\"处于网络层\",{\"1\":{\"1429\":1}}],[\"处于终止状态\",{\"1\":{\"232\":1}}],[\"处于阻塞状态\",{\"1\":{\"232\":1}}],[\"处于可运行状态\",{\"1\":{\"232\":1}}],[\"非必填\",{\"1\":{\"1486\":8}}],[\"非必备\",{\"1\":{\"1450\":1}}],[\"非io事件\",{\"1\":{\"1440\":1}}],[\"非功能需求\",{\"1\":{\"1240\":1}}],[\"非运算\",{\"1\":{\"1223\":1}}],[\"非容器安装runner\",{\"1\":{\"1128\":1}}],[\"非结构化数据\",{\"1\":{\"1061\":1}}],[\"非空判断\",{\"1\":{\"902\":1}}],[\"非空\",{\"1\":{\"902\":1}}],[\"非\",{\"1\":{\"902\":3}}],[\"非异步状态\",{\"1\":{\"696\":1}}],[\"非对称加密只是用于商定采用哪种对称加密方式来加密传输内容\",{\"1\":{\"626\":1}}],[\"非活动profile\",{\"1\":{\"593\":1}}],[\"非基础类型\",{\"1\":{\"277\":1}}],[\"非受检异常\",{\"1\":{\"230\":1}}],[\"非全局变量\",{\"1\":{\"124\":1}}],[\"自减\",{\"1\":{\"910\":1}}],[\"自增\",{\"1\":{\"910\":1}}],[\"自定义全局异常处理器customexceptionhandler对参数异常\",{\"1\":{\"1526\":1}}],[\"自定义鉴权类对token进行处理\",{\"1\":{\"1455\":1}}],[\"自定义messagesender\",{\"1\":{\"1245\":1}}],[\"自定义内部类进行数据结构的组织\",{\"1\":{\"1244\":1}}],[\"自定义内容\",{\"0\":{\"858\":1}}],[\"自定义网络名称\",{\"1\":{\"1122\":1}}],[\"自定义网络\",{\"0\":{\"1091\":1}}],[\"自定义字段可以有多个\",{\"1\":{\"1078\":1}}],[\"自定义过滤规则\",{\"1\":{\"1032\":1}}],[\"自定义生成dao接口的代理对象的工厂bean\",{\"1\":{\"900\":1}}],[\"自定义分区器\",{\"1\":{\"801\":1}}],[\"自定义servlet出现异常时的处理器\",{\"1\":{\"652\":1}}],[\"自定义service实现oauth2authorizationconsentservice接口获取授权许可信息\",{\"1\":{\"348\":1}}],[\"自定义service实现oauth2authorizationservice接口获取授权信息\",{\"1\":{\"348\":1}}],[\"自定义service实现registeredclientrepository获取客户端信息\",{\"1\":{\"348\":1}}],[\"自定义对象获取上下文\",{\"1\":{\"413\":1}}],[\"自定义\",{\"1\":{\"377\":1}}],[\"自定义参数解析\",{\"1\":{\"375\":1}}],[\"自定义oauth2userdetailsservice函数接口及inmemoryoauth2userdetailsservice实现\",{\"1\":{\"350\":1}}],[\"自定义用户认证userdetails\",{\"1\":{\"348\":1}}],[\"自定义tokengenerator\",{\"1\":{\"348\":1}}],[\"自定义函数式接口使用function\",{\"1\":{\"249\":1}}],[\"自定义类的加载器\",{\"1\":{\"244\":1}}],[\"自上而下的类结构\",{\"1\":{\"230\":1}}],[\"自动将服务接口持久化\",{\"1\":{\"1503\":1}}],[\"自动将bean注册到spring的ioc容器中构建组件运行环境\",{\"1\":{\"851\":1}}],[\"自动根据gradle文件夹下的配置\",{\"1\":{\"1073\":1}}],[\"自动生成声明文件\",{\"0\":{\"996\":1}}],[\"自动驼峰命名转换\",{\"1\":{\"852\":1}}],[\"自动提交从池中返回的连接\",{\"1\":{\"850\":1}}],[\"自动提交的频率\",{\"1\":{\"801\":1,\"802\":1}}],[\"自动提交\",{\"1\":{\"801\":1,\"802\":1}}],[\"自动提交和手动提交\",{\"0\":{\"798\":1}}],[\"自动提交事务后释放锁\",{\"1\":{\"212\":1}}],[\"自动编译\",{\"1\":{\"562\":1}}],[\"自动化工具\",{\"0\":{\"563\":1}}],[\"自动化\",{\"1\":{\"562\":1}}],[\"自动把实现了该特征的数组类型转换为迭代器\",{\"1\":{\"320\":1}}],[\"自动引用和解引用的功能\",{\"1\":{\"290\":1}}],[\"自动调用\",{\"1\":{\"264\":1}}],[\"自动被调用\",{\"1\":{\"137\":1}}],[\"自动推断\",{\"1\":{\"124\":1}}],[\"遍历params对象\",{\"1\":{\"1480\":1}}],[\"遍历集合\",{\"1\":{\"982\":1}}],[\"遍历\",{\"0\":{\"940\":1},\"1\":{\"229\":1}}],[\"遍历通道与关闭通道\",{\"1\":{\"190\":1}}],[\"知识点\",{\"0\":{\"227\":1}}],[\"租户需绑定初始用户来登录\",{\"1\":{\"1643\":1}}],[\"租户端角色绑定客户端角色\",{\"0\":{\"1566\":1}}],[\"租户默认用户中心平台管理员\",{\"1\":{\"1561\":1}}],[\"租户默认用户名\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户角色id\",{\"1\":{\"1566\":1}}],[\"租户角色绑定客户端角色\",{\"1\":{\"1557\":1}}],[\"租户角色增删改查\",{\"1\":{\"1557\":1}}],[\"租户角色管理\",{\"0\":{\"1556\":1},\"1\":{\"1503\":1}}],[\"租户密码\",{\"1\":{\"1539\":1}}],[\"租户结束时间\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户开始时间\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户域名\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户状态\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户编码\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"租户名称\",{\"1\":{\"1539\":1,\"1540\":1,\"1541\":1}}],[\"租户信息增删改查\",{\"1\":{\"1537\":1}}],[\"租户信息的创建\",{\"1\":{\"1503\":1}}],[\"租户id\",{\"1\":{\"1532\":1,\"1544\":1}}],[\"租户间的数据是完全隔离的\",{\"1\":{\"1503\":1}}],[\"租户之间数据相互隔离\",{\"1\":{\"1502\":1}}],[\"租户隔离数据\",{\"1\":{\"1495\":1}}],[\"租户管理\",{\"0\":{\"1493\":1,\"1536\":1},\"1\":{\"1502\":1,\"1503\":1}}],[\"租户所属组以租户维护的编码和税号唯一标识\",{\"1\":{\"1452\":1}}],[\"租户模板修改的仍然是租户初始的角色权限\",{\"1\":{\"1452\":1}}],[\"租户账号登录企业中台创建仓库和货主\",{\"1\":{\"1452\":1}}],[\"租户表的关系\",{\"1\":{\"1452\":1}}],[\"租户\",{\"1\":{\"224\":1,\"1452\":2,\"1643\":1}}],[\"起到解耦\",{\"1\":{\"224\":1}}],[\"严格保证消息有序\",{\"1\":{\"223\":1}}],[\"查到安装信息\",{\"1\":{\"1463\":1}}],[\"查找字段\",{\"1\":{\"1187\":1}}],[\"查找下一个\",{\"1\":{\"1187\":1}}],[\"查找并创建指定脚本引擎\",{\"1\":{\"648\":1}}],[\"查询用户信息\",{\"1\":{\"1518\":1}}],[\"查询父元素\",{\"1\":{\"1452\":1}}],[\"查询事件1\",{\"1\":{\"1479\":1}}],[\"查询事件\",{\"1\":{\"1344\":1}}],[\"查询物模型属性信息\",{\"1\":{\"1344\":1}}],[\"查询不到\",{\"1\":{\"1342\":1}}],[\"查询不到的原因\",{\"0\":{\"222\":1}}],[\"查询已启用的设备网关\",{\"1\":{\"1319\":1}}],[\"查询json\",{\"1\":{\"1248\":1}}],[\"查询请求设置设置查询来源searchrequest\",{\"1\":{\"1248\":1}}],[\"查询总数\",{\"1\":{\"1248\":2}}],[\"查询接口\",{\"1\":{\"1244\":1}}],[\"查询接口获取下一批结果\",{\"1\":{\"780\":1}}],[\"查询日志文件中的头10行日志\",{\"1\":{\"1187\":1}}],[\"查询undo\",{\"1\":{\"1050\":1}}],[\"查询元素对象\",{\"1\":{\"946\":1}}],[\"查询租户下所有货主的发货单\",{\"1\":{\"911\":1}}],[\"查询当前仓库下的所有发货单时\",{\"1\":{\"911\":1}}],[\"查询\",{\"1\":{\"910\":1}}],[\"查询服务实例\",{\"1\":{\"893\":1}}],[\"查询实例\",{\"1\":{\"872\":1}}],[\"查询条件\",{\"1\":{\"786\":1}}],[\"查询条件中设置了滚动条件之后\",{\"1\":{\"780\":1}}],[\"查询段落匹配\",{\"0\":{\"766\":1}}],[\"查询分为基于文本和基于词项的查询\",{\"1\":{\"761\":1}}],[\"查询后脚本更新\",{\"1\":{\"757\":1}}],[\"查询相应列\",{\"1\":{\"716\":1}}],[\"查询列\",{\"1\":{\"716\":1}}],[\"查询yellow对应的值\",{\"1\":{\"312\":2}}],[\"查询新插入的值\",{\"1\":{\"312\":1}}],[\"查询到时返回\",{\"1\":{\"311\":1}}],[\"查询参数\",{\"1\":{\"255\":1}}],[\"查看java进程\",{\"1\":{\"1230\":1}}],[\"查看主进程下的线程\",{\"1\":{\"1230\":1}}],[\"查看单进程最大句柄上限\",{\"1\":{\"1206\":1}}],[\"查看系统最大句柄\",{\"1\":{\"1206\":1}}],[\"查看系统最大pid使用数\",{\"1\":{\"5\":1,\"17\":1}}],[\"查看tcp\",{\"1\":{\"1190\":1}}],[\"查看log\",{\"1\":{\"1187\":1}}],[\"查看log日志\",{\"0\":{\"13\":1}}],[\"查看文件多少行到多少行内容\",{\"1\":{\"1187\":1}}],[\"查看文件位置\",{\"1\":{\"1176\":1}}],[\"查看特定pod的日志\",{\"1\":{\"1159\":1}}],[\"查看堆信息\",{\"1\":{\"1153\":1}}],[\"查看栈信息\",{\"1\":{\"1153\":1}}],[\"查看gc情况\",{\"1\":{\"1153\":1}}],[\"查看命令历史\",{\"1\":{\"1147\":1}}],[\"查看提交记录\",{\"1\":{\"1147\":1}}],[\"查看远程分支信息\",{\"1\":{\"1147\":1}}],[\"查看root初始密码\",{\"1\":{\"1127\":1}}],[\"查看数据卷信息\",{\"0\":{\"1100\":1}}],[\"查看是否设置开机启动\",{\"1\":{\"1095\":1}}],[\"查看是否已经安装模拟器\",{\"1\":{\"1093\":1}}],[\"查看已启动的服务\",{\"1\":{\"1095\":1}}],[\"查看镜像等占用\",{\"1\":{\"1087\":1}}],[\"查看镜像是否成功构建\",{\"1\":{\"218\":1}}],[\"查看环境参数\",{\"1\":{\"1025\":1}}],[\"查看key是什么数据类型\",{\"1\":{\"908\":1}}],[\"查看还有多少秒过期\",{\"1\":{\"908\":1}}],[\"查看分词结果\",{\"0\":{\"776\":1}}],[\"查看字段映射\",{\"1\":{\"775\":1}}],[\"查看字段的分词后存储在倒排索引的值\",{\"1\":{\"774\":1}}],[\"查看索引设置\",{\"1\":{\"775\":1}}],[\"查看节点负载\",{\"0\":{\"756\":1}}],[\"查看慢查询日志是否开启\",{\"1\":{\"206\":1}}],[\"查看\",{\"1\":{\"173\":1,\"1188\":1,\"1206\":1}}],[\"查看元素在集合中是否存在\",{\"1\":{\"154\":1}}],[\"查看conda信息\",{\"1\":{\"96\":1}}],[\"查看server\",{\"1\":{\"39\":1}}],[\"查看源\",{\"1\":{\"29\":1}}],[\"查看进程参数\",{\"1\":{\"1206\":1}}],[\"查看进程信息\",{\"1\":{\"1190\":1}}],[\"查看进程\",{\"0\":{\"19\":1}}],[\"查看内存\",{\"1\":{\"1179\":1}}],[\"查看内存使用情况\",{\"1\":{\"17\":1}}],[\"查看内存情况\",{\"1\":{\"5\":1}}],[\"查看日志最后几行\",{\"1\":{\"1087\":1}}],[\"查看日志\",{\"0\":{\"1187\":1},\"1\":{\"13\":1}}],[\"查看当前仓库状态\",{\"1\":{\"1147\":1}}],[\"查看当前\",{\"1\":{\"173\":1}}],[\"查看当前位置\",{\"1\":{\"13\":1}}],[\"查看当前使用的pid数\",{\"1\":{\"5\":1,\"17\":1}}],[\"跨域请求\",{\"0\":{\"725\":1}}],[\"跨多个连接或页面请求\",{\"1\":{\"652\":1}}],[\"跨库join时可能需将数据查询到中间件再join\",{\"1\":{\"221\":1}}],[\"跨模块引包\",{\"1\":{\"169\":1}}],[\"联合索引的创建\",{\"1\":{\"716\":1}}],[\"联合索引未遵循最左原则\",{\"1\":{\"206\":1}}],[\"联表关联字段避免使用or条件\",{\"1\":{\"716\":1}}],[\"联表和嵌套查询问题\",{\"1\":{\"221\":1}}],[\"锁住记录和间隙\",{\"1\":{\"1048\":1}}],[\"锁住对应列索引和主键聚簇索引记录以及对应间隙\",{\"1\":{\"1048\":1}}],[\"锁住对应列索引和主键聚簇索引记录\",{\"1\":{\"1048\":1}}],[\"锁住间隙和记录\",{\"1\":{\"1048\":1}}],[\"锁住间隙\",{\"1\":{\"1048\":1}}],[\"锁的类别\",{\"0\":{\"1048\":1}}],[\"锁的粒度\",{\"0\":{\"1047\":1}}],[\"锁\",{\"0\":{\"1046\":1}}],[\"锁升级\",{\"1\":{\"911\":1}}],[\"锁定状态\",{\"1\":{\"1552\":1}}],[\"锁定量增加\",{\"1\":{\"1252\":1}}],[\"锁定库存\",{\"1\":{\"236\":1}}],[\"锁定粒度最小\",{\"1\":{\"219\":1}}],[\"锁进行搜索和索引扫描\",{\"1\":{\"219\":1}}],[\"锁和事务的共存的解决方案\",{\"1\":{\"212\":1}}],[\"行列存储\",{\"1\":{\"1344\":1}}],[\"行为型模式\",{\"1\":{\"1254\":1}}],[\"行为被注册时\",{\"1\":{\"138\":1}}],[\"行\",{\"1\":{\"1187\":1}}],[\"行数\",{\"1\":{\"1187\":1}}],[\"行业标准格式\",{\"1\":{\"623\":1}}],[\"行锁是通过对索引上的索引项加锁来实现的\",{\"1\":{\"219\":1}}],[\"行级锁\",{\"1\":{\"219\":1,\"1047\":1,\"1048\":1}}],[\"镜像id\",{\"1\":{\"1200\":1}}],[\"镜像作者\",{\"1\":{\"1104\":1}}],[\"镜像地址\",{\"0\":{\"1096\":1}}],[\"镜像名称\",{\"1\":{\"1087\":1}}],[\"镜像\",{\"1\":{\"218\":1}}],[\"基本的访问控制等\",{\"1\":{\"1207\":1}}],[\"基本使用\",{\"0\":{\"581\":1,\"705\":1,\"908\":1,\"913\":1}}],[\"基础信息表\",{\"1\":{\"1477\":1}}],[\"基础控制层泛型<业务类\",{\"1\":{\"1244\":1}}],[\"基础业务泛型\",{\"1\":{\"1244\":1}}],[\"基础配置\",{\"1\":{\"1201\":1}}],[\"基础\",{\"1\":{\"1102\":1}}],[\"基础镜像\",{\"1\":{\"1094\":1,\"1103\":1}}],[\"基础命令\",{\"0\":{\"1087\":1}}],[\"基础语法\",{\"0\":{\"117\":1,\"982\":1}}],[\"基于springboot\",{\"1\":{\"1524\":1}}],[\"基于spring\",{\"1\":{\"1516\":1,\"1520\":1}}],[\"基于该问题\",{\"1\":{\"1500\":1}}],[\"基于oauth2返回的信息包含accesstoken\",{\"1\":{\"1491\":1}}],[\"基于tcp方式调用tfdb\",{\"1\":{\"1479\":1}}],[\"基于发布\",{\"1\":{\"1271\":1}}],[\"基于nginx的waf实现\",{\"0\":{\"1207\":1}}],[\"基于docker\",{\"1\":{\"1123\":1}}],[\"基于rabbitmq进行改造\",{\"0\":{\"1024\":1}}],[\"基于redisson实现定时任务\",{\"0\":{\"1012\":1}}],[\"基于eclipse\",{\"0\":{\"1023\":1}}],[\"基于qpid进行改造\",{\"0\":{\"1022\":1}}],[\"基于moquette改造\",{\"0\":{\"1021\":1}}],[\"基于hivemq改造\",{\"0\":{\"1020\":1}}],[\"基于activemq改造\",{\"0\":{\"1019\":1}}],[\"基于pulsar改造\",{\"0\":{\"1018\":1}}],[\"基于jmqtt改造\",{\"0\":{\"1017\":1}}],[\"基于jmx\",{\"1\":{\"680\":1}}],[\"基于生命周期\",{\"1\":{\"680\":1}}],[\"基于组件的架构\",{\"1\":{\"680\":1}}],[\"基于接口\",{\"1\":{\"657\":1}}],[\"基于注解\",{\"1\":{\"657\":1}}],[\"基于时间创建日志文件\",{\"1\":{\"596\":2}}],[\"基于事件驱动通知的web框架\",{\"1\":{\"500\":1}}],[\"基于\",{\"1\":{\"298\":2}}],[\"基于容器\",{\"1\":{\"218\":1}}],[\"热点key过期失效\",{\"1\":{\"216\":1}}],[\"击穿等问题的\",{\"0\":{\"216\":1}}],[\"雪崩\",{\"0\":{\"216\":1}}],[\"进程能处理的最大连接\",{\"1\":{\"1210\":1}}],[\"进程\",{\"0\":{\"1190\":1}}],[\"进而无法及时变更store中state状态\",{\"1\":{\"998\":1}}],[\"进而生成全局认证管理器\",{\"1\":{\"331\":1}}],[\"进一部封装lucene的内部复杂性\",{\"1\":{\"748\":1}}],[\"进入项目根目录\",{\"1\":{\"1474\":1}}],[\"进入vim编辑模式\",{\"1\":{\"1187\":1}}],[\"进入到mysql的bin目录下输入\",{\"1\":{\"1141\":1}}],[\"进入web领域的标准\",{\"1\":{\"652\":1}}],[\"进入容器执行\",{\"1\":{\"1130\":1}}],[\"进入容器\",{\"1\":{\"36\":1,\"1230\":1}}],[\"进行报表设计\",{\"1\":{\"1456\":1}}],[\"进行事件循环\",{\"1\":{\"1445\":1}}],[\"进行消息发送\",{\"1\":{\"1364\":1}}],[\"进行协议管理\",{\"1\":{\"1354\":1}}],[\"进行数据存储\",{\"1\":{\"1328\":1}}],[\"进行同步或异步消息发送\",{\"1\":{\"1245\":1}}],[\"进行交互\",{\"1\":{\"1162\":1}}],[\"进行删除\",{\"1\":{\"1035\":1}}],[\"进行参数的拼接\",{\"1\":{\"982\":1}}],[\"进行一起使用来完成对象属性的简写\",{\"1\":{\"982\":1}}],[\"进行操作\",{\"1\":{\"935\":1}}],[\"进行异步库存扣减\",{\"1\":{\"915\":1}}],[\"进行排序\",{\"1\":{\"771\":1,\"780\":1}}],[\"进行默认安全配置\",{\"1\":{\"333\":1}}],[\"进行遍历处理读取解析数据\",{\"1\":{\"215\":1}}],[\"操作日志删改查\",{\"1\":{\"1633\":1}}],[\"操作日志管理\",{\"0\":{\"1632\":1}}],[\"操作时间\",{\"1\":{\"1468\":1}}],[\"操作次数\",{\"1\":{\"1467\":1}}],[\"操作es数据\",{\"1\":{\"1344\":1}}],[\"操作es的api接口elasticsearchtemplate\",{\"1\":{\"1248\":1}}],[\"操作系统直接从页面缓存获取\",{\"1\":{\"1179\":1}}],[\"操作系统会将结果进行缓存\",{\"1\":{\"1179\":1}}],[\"操作系统层面判断\",{\"1\":{\"215\":1}}],[\"操作git目录相关\",{\"1\":{\"1149\":1}}],[\"操作数据库\",{\"1\":{\"256\":1}}],[\"操作符能够正常存在于\",{\"1\":{\"1222\":1}}],[\"操作符\",{\"1\":{\"149\":1,\"190\":1}}],[\"看服务是否可用\",{\"1\":{\"213\":1}}],[\"看是否用上索引\",{\"1\":{\"206\":1}}],[\"隔离和限流\",{\"1\":{\"213\":1}}],[\"隔离性\",{\"1\":{\"212\":1}}],[\"怎么处理取决于业务需求如\",{\"1\":{\"213\":1}}],[\"单体分层架构\",{\"1\":{\"1233\":1}}],[\"单个导入\",{\"1\":{\"992\":3}}],[\"单个导出\",{\"1\":{\"992\":1}}],[\"单例设计模式\",{\"0\":{\"1255\":1}}],[\"单例模式\",{\"1\":{\"1254\":1}}],[\"单例\",{\"1\":{\"893\":1}}],[\"单独使用替换每行的第一个\",{\"1\":{\"1183\":1}}],[\"单独引用\",{\"1\":{\"851\":1}}],[\"单独调用methodb方法时\",{\"1\":{\"202\":1}}],[\"单记录消费\",{\"1\":{\"804\":1}}],[\"单条\",{\"1\":{\"802\":1}}],[\"单位s\",{\"1\":{\"1531\":1,\"1570\":2,\"1571\":2}}],[\"单位名称\",{\"1\":{\"1486\":4}}],[\"单位接口\",{\"1\":{\"1479\":1}}],[\"单位\",{\"1\":{\"801\":4,\"802\":3}}],[\"单位毫秒\",{\"1\":{\"730\":1,\"1026\":1}}],[\"单位ms\",{\"1\":{\"213\":2}}],[\"单点登录说明\",{\"0\":{\"1509\":1}}],[\"单点登录\",{\"0\":{\"723\":1}}],[\"单元标识符\",{\"1\":{\"1280\":1}}],[\"单元结构体\",{\"0\":{\"272\":1}}],[\"单元类型\",{\"0\":{\"263\":1}}],[\"单线程模型\",{\"1\":{\"1440\":1}}],[\"单线程\",{\"1\":{\"243\":1}}],[\"熔断和降级\",{\"1\":{\"1236\":1}}],[\"熔断\",{\"1\":{\"213\":1}}],[\"熔断降级如何处理\",{\"0\":{\"213\":1}}],[\"熔断限流\",{\"0\":{\"73\":1}}],[\"阿里云上有商用版本的gts\",{\"1\":{\"212\":1}}],[\"务模式\",{\"1\":{\"212\":1}}],[\"事物回滚\",{\"1\":{\"1251\":1}}],[\"事件类型\",{\"1\":{\"1486\":1}}],[\"事件描述\",{\"1\":{\"1486\":1}}],[\"事件名称\",{\"1\":{\"1486\":1}}],[\"事件唯一标识符\",{\"1\":{\"1486\":1}}],[\"事件1\",{\"1\":{\"1484\":1}}],[\"事件参数1\",{\"1\":{\"1484\":1}}],[\"事件分发\",{\"1\":{\"1440\":1}}],[\"事件轮询\",{\"1\":{\"1440\":1}}],[\"事件处理\",{\"1\":{\"1386\":1}}],[\"事件上报\",{\"0\":{\"1373\":1}}],[\"事件的触发\",{\"0\":{\"1371\":1}}],[\"事件总线根据订阅表发送消息给下游订阅者进行处理\",{\"1\":{\"1362\":1}}],[\"事件监听器进行处理将配置添加到redis缓存中\",{\"1\":{\"1358\":1}}],[\"事件监听器或初始化器等\",{\"1\":{\"481\":1}}],[\"事件驱动\",{\"0\":{\"1284\":1}}],[\"事件触发\",{\"0\":{\"947\":1}}],[\"事件\",{\"0\":{\"938\":1},\"1\":{\"1445\":1}}],[\"事件是等到所有内容\",{\"1\":{\"935\":1}}],[\"事\",{\"1\":{\"212\":1}}],[\"事务一致\",{\"0\":{\"1251\":1}}],[\"事务一致性问题\",{\"0\":{\"254\":1}}],[\"事务补偿模式\",{\"1\":{\"1236\":1}}],[\"事务按顺序执行\",{\"1\":{\"1044\":1}}],[\"事务隔离级别\",{\"0\":{\"1044\":1}}],[\"事务隔离级别是读未提交\",{\"1\":{\"204\":1}}],[\"事务消息和最大努力通知其实都是最终一致性事务\",{\"1\":{\"668\":1}}],[\"事务\",{\"1\":{\"632\":1}}],[\"事务配置\",{\"1\":{\"558\":1}}],[\"事务特性\",{\"1\":{\"212\":1}}],[\"事务的传播\",{\"1\":{\"202\":1}}],[\"事务传播\",{\"0\":{\"202\":1}}],[\"事务传播的具体场景\",{\"0\":{\"195\":1}}],[\"兼容性\",{\"1\":{\"212\":1}}],[\"保持游标查询窗口5分钟\",{\"1\":{\"780\":1}}],[\"保存设备数据到时序数据库\",{\"1\":{\"1363\":1}}],[\"保存设备消息\",{\"1\":{\"1344\":1}}],[\"保存退出\",{\"1\":{\"1187\":1}}],[\"保存该进程下的jstack文件\",{\"1\":{\"1153\":1}}],[\"保存并退出vi编辑器\",{\"1\":{\"1141\":1}}],[\"保存到usertokenmanager\",{\"1\":{\"1345\":1}}],[\"保存到es数据库\",{\"1\":{\"915\":1}}],[\"保存到授权信息表中\",{\"1\":{\"346\":1}}],[\"保存返回结果list\",{\"1\":{\"780\":1}}],[\"保存在客户端的文本\",{\"1\":{\"652\":1}}],[\"保存在安全点\",{\"1\":{\"243\":1}}],[\"保存session信息到redis\",{\"1\":{\"418\":1}}],[\"保存要被代理的接口或对象信息\",{\"1\":{\"383\":1}}],[\"保存即可得到\",{\"1\":{\"103\":1}}],[\"保证两个主机间能正常通信\",{\"1\":{\"1430\":1}}],[\"保证代码可靠性\",{\"1\":{\"1254\":1}}],[\"保证数据一致\",{\"1\":{\"894\":1}}],[\"保证库存更新的可靠性\",{\"1\":{\"224\":1}}],[\"保证了可靠性\",{\"1\":{\"223\":1}}],[\"保证更新库存操作是可靠的\",{\"1\":{\"212\":1}}],[\"各大数据库厂商实现接口\",{\"1\":{\"1291\":1}}],[\"各个组件的源代码\",{\"1\":{\"680\":1}}],[\"各个国家对应的首都\",{\"1\":{\"154\":1}}],[\"各服务上的数据要保持一致\",{\"1\":{\"212\":1}}],[\"订单导入时\",{\"1\":{\"911\":1}}],[\"订单服务创建订单\",{\"1\":{\"212\":1}}],[\"订单服务和库存服务\",{\"1\":{\"212\":1}}],[\"订阅所有设备消息\",{\"1\":{\"1363\":1}}],[\"订阅某一个设备的消息\",{\"1\":{\"1284\":1}}],[\"订阅客户端\",{\"1\":{\"1275\":1}}],[\"订阅会与一个会话\",{\"1\":{\"1272\":1}}],[\"订阅包含主题筛选器\",{\"1\":{\"1272\":1}}],[\"订阅者对消息处理\",{\"1\":{\"1329\":1}}],[\"订阅者类型\",{\"1\":{\"1312\":1}}],[\"订阅者订阅\",{\"1\":{\"1271\":1}}],[\"订阅者\",{\"1\":{\"1271\":1}}],[\"订阅表\",{\"1\":{\"1265\":1}}],[\"订阅主题为空\",{\"1\":{\"848\":1}}],[\"订阅完成后\",{\"1\":{\"537\":1}}],[\"订阅完成触发每一级的onsubscribe方法\",{\"1\":{\"527\":1}}],[\"订阅\",{\"0\":{\"1266\":1,\"1272\":1},\"1\":{\"15\":1,\"872\":1,\"1015\":1,\"1271\":1,\"1272\":1}}],[\"某项业务操作跨多个服务\",{\"1\":{\"212\":1}}],[\"原密码\",{\"1\":{\"1553\":1}}],[\"原生\",{\"1\":{\"1486\":16}}],[\"原生查询api\",{\"0\":{\"785\":1}}],[\"原型模式\",{\"1\":{\"1254\":1}}],[\"原始查询search可分页\",{\"1\":{\"1248\":1}}],[\"原因\",{\"0\":{\"846\":1}}],[\"原理是是什么\",{\"1\":{\"911\":1}}],[\"原理\",{\"0\":{\"383\":1,\"473\":1,\"731\":1,\"794\":1,\"1389\":1}}],[\"原子性\",{\"1\":{\"212\":1}}],[\"原则上package应和文件夹名相同\",{\"1\":{\"170\":1}}],[\"本身只是一个线程驱动\",{\"1\":{\"1445\":1}}],[\"本身是一个配置器\",{\"1\":{\"343\":1}}],[\"本地缓存\",{\"1\":{\"1345\":1}}],[\"本地自测\",{\"1\":{\"1229\":1}}],[\"本地若不存在sonatype\",{\"1\":{\"1200\":1}}],[\"本地开发\",{\"1\":{\"1137\":1}}],[\"本地开发若出现\",{\"1\":{\"1136\":2}}],[\"本地再推送\",{\"1\":{\"1093\":1}}],[\"本地\",{\"1\":{\"1073\":1,\"1144\":1}}],[\"本地消息\",{\"1\":{\"668\":1}}],[\"本地消息表\",{\"0\":{\"665\":1}}],[\"本地事务\",{\"1\":{\"212\":1}}],[\"本月最后一个星期五\",{\"1\":{\"656\":1}}],[\"本质上是对函数式接口中的方法的重写\",{\"1\":{\"248\":1}}],[\"本质上是转换为迭代器操作\",{\"1\":{\"229\":1}}],[\"本文章\",{\"1\":{\"172\":1}}],[\"业务异常\",{\"1\":{\"1526\":2}}],[\"业务线程执行异步操作\",{\"1\":{\"1433\":1}}],[\"业务逻辑\",{\"0\":{\"1315\":1}}],[\"业务对象\",{\"1\":{\"1238\":1,\"1239\":1}}],[\"业务项\",{\"1\":{\"1238\":1}}],[\"业务架构\",{\"0\":{\"1238\":1},\"1\":{\"1237\":1}}],[\"业务\",{\"1\":{\"893\":1,\"1470\":1,\"1498\":1}}],[\"业务服务a\",{\"1\":{\"723\":1}}],[\"业务相关\",{\"1\":{\"649\":1}}],[\"业务唯一id\",{\"1\":{\"217\":1}}],[\"业务处理\",{\"1\":{\"212\":1}}],[\"业务处理方法加\",{\"1\":{\"212\":1}}],[\"业务名可以不同\",{\"1\":{\"20\":1}}],[\"业务名\",{\"1\":{\"20\":1}}],[\"主键\",{\"1\":{\"1465\":1,\"1466\":1,\"1467\":1}}],[\"主键id\",{\"1\":{\"1464\":1}}],[\"主页信息\",{\"1\":{\"1463\":1}}],[\"主从多线程模型\",{\"1\":{\"1440\":1}}],[\"主组标识\",{\"1\":{\"1177\":1}}],[\"主题提供者\",{\"1\":{\"1312\":1}}],[\"主题筛选器\",{\"1\":{\"1272\":1}}],[\"主题名\",{\"1\":{\"1272\":1}}],[\"主题\",{\"0\":{\"1272\":1},\"1\":{\"1271\":1}}],[\"主题树\",{\"1\":{\"1265\":1}}],[\"主题子域\",{\"1\":{\"1239\":1}}],[\"主题域\",{\"1\":{\"1239\":1}}],[\"主题交换机\",{\"1\":{\"906\":1}}],[\"主题配置类\",{\"1\":{\"801\":1}}],[\"主体信息\",{\"1\":{\"726\":1}}],[\"主机名\",{\"1\":{\"749\":1}}],[\"主机\",{\"1\":{\"678\":1}}],[\"主动式中断\",{\"1\":{\"243\":1}}],[\"主动断开连接\",{\"1\":{\"6\":1}}],[\"主要由spring\",{\"1\":{\"1284\":1}}],[\"主要有四种属性\",{\"1\":{\"998\":1}}],[\"主要是start方法\",{\"1\":{\"920\":1}}],[\"主要是解决代码冗余\",{\"1\":{\"382\":1}}],[\"主要出现在日志记录和jmx管理控制台中以识别池和池配置\",{\"1\":{\"850\":1}}],[\"主要处理来自客户端的请求\",{\"1\":{\"652\":1}}],[\"主要用于维护低功率的设备\",{\"1\":{\"1321\":1}}],[\"主要用于工业自动化设备通信\",{\"1\":{\"1276\":1}}],[\"主要用于不同命名空间的通信\",{\"1\":{\"1169\":1}}],[\"主要用于主从复制传递数据\",{\"1\":{\"1054\":1}}],[\"主要用于事务回滚数据\",{\"1\":{\"1053\":1}}],[\"主要用于服务器宕机的数据恢复\",{\"1\":{\"1052\":1}}],[\"主要用于数据的交互\",{\"1\":{\"692\":1}}],[\"主要用于apache和nginx\",{\"1\":{\"625\":1}}],[\"主要用于\",{\"1\":{\"616\":1}}],[\"主要用于在执行onnext方法\",{\"1\":{\"537\":2}}],[\"主要用于standardserver\",{\"1\":{\"457\":1}}],[\"主要用于简化spring的繁琐配置\",{\"1\":{\"211\":1}}],[\"主要通过分库分表中间件\",{\"1\":{\"221\":1}}],[\"条件循环\",{\"0\":{\"1226\":1}}],[\"条件判断结构中\",{\"1\":{\"1222\":1}}],[\"条件判断结构\",{\"1\":{\"1222\":1}}],[\"条件判断\",{\"1\":{\"982\":1}}],[\"条件\",{\"1\":{\"760\":1,\"1311\":1}}],[\"条件列尽量在索引中\",{\"1\":{\"716\":1}}],[\"条件中使用了数学计算或函数\",{\"1\":{\"206\":1}}],[\"条件语句\",{\"0\":{\"131\":1}}],[\"隐式暴露端口\",{\"1\":{\"1109\":1}}],[\"隐式类型转换\",{\"1\":{\"206\":1}}],[\"隐式实现接口方法\",{\"1\":{\"139\":1}}],[\"索引即数据\",{\"1\":{\"1045\":1}}],[\"索引为0的最上面一层链表\",{\"1\":{\"911\":1}}],[\"索引\",{\"0\":{\"1045\":1},\"1\":{\"780\":2}}],[\"索引名\",{\"1\":{\"778\":1}}],[\"索引名称\",{\"1\":{\"206\":1,\"780\":1}}],[\"索引test\",{\"1\":{\"773\":1}}],[\"索引管理\",{\"0\":{\"772\":1},\"1\":{\"1344\":1}}],[\"索引是document集\",{\"1\":{\"748\":1}}],[\"索引是否是环境自建\",{\"1\":{\"222\":1}}],[\"索引类型\",{\"1\":{\"748\":1}}],[\"索引如何建立\",{\"1\":{\"748\":1}}],[\"索引自动分片\",{\"1\":{\"748\":1}}],[\"索引使用\",{\"1\":{\"716\":1}}],[\"索引失效\",{\"1\":{\"206\":1}}],[\"生产实体repository\",{\"1\":{\"1297\":1}}],[\"生产\",{\"0\":{\"806\":1}}],[\"生产者配置\",{\"1\":{\"802\":1}}],[\"生产者配置类\",{\"1\":{\"801\":1}}],[\"生产者可用缓冲区的最大值\",{\"1\":{\"801\":1}}],[\"生产者就会将消息提交给kafka\",{\"1\":{\"801\":1,\"802\":2}}],[\"生产环境索引失效\",{\"0\":{\"206\":1}}],[\"生命周期和调度\",{\"1\":{\"1161\":1}}],[\"生命周期的各个阶段的触发又是基于事件的方式\",{\"1\":{\"680\":1}}],[\"生命周期是servlet容器\",{\"1\":{\"652\":1}}],[\"生命周期基类\",{\"1\":{\"457\":1}}],[\"生命周期监听器\",{\"1\":{\"451\":1}}],[\"生命周期\",{\"0\":{\"313\":1},\"1\":{\"652\":1}}],[\"生成时间\",{\"1\":{\"1532\":1}}],[\"生成安装记录\",{\"1\":{\"1463\":1}}],[\"生成设备消息session到设备会话管理器中\",{\"1\":{\"1361\":1}}],[\"生成拣货明细\",{\"1\":{\"1252\":1}}],[\"生成java应用程序的线程转储信息\",{\"1\":{\"1230\":1}}],[\"生成的镜像存在本地docker服务器上\",{\"1\":{\"1123\":1}}],[\"生成gradlew文件\",{\"1\":{\"1073\":1}}],[\"生成grpc代码\",{\"1\":{\"643\":1}}],[\"生成read\",{\"1\":{\"1049\":1}}],[\"生成mapperinterface的mapperfactorybean用于生成mapper代理对象\",{\"1\":{\"854\":1}}],[\"生成代理对象\",{\"1\":{\"852\":1,\"900\":1}}],[\"生成proto代码\",{\"1\":{\"643\":1}}],[\"生成之后输出java文件目录\",{\"1\":{\"643\":1}}],[\"生成包含密钥对的密钥库文件\",{\"1\":{\"623\":1}}],[\"生成密钥\",{\"1\":{\"623\":1}}],[\"生成密钥对\",{\"1\":{\"623\":1}}],[\"生成证书请求\",{\"1\":{\"623\":1}}],[\"生成对应\",{\"1\":{\"860\":1}}],[\"生成对应接口的代理对象\",{\"1\":{\"741\":1}}],[\"生成对应service的服务代理对象提供服务\",{\"1\":{\"739\":1}}],[\"生成对应过滤器\",{\"1\":{\"334\":1}}],[\"生成对象的工厂\",{\"1\":{\"479\":1}}],[\"生成spring核心相关的单例对象为下述上下文annotationconfigservletwebserverapplicationcontext初始化做准备\",{\"1\":{\"388\":1}}],[\"生成过滤器\",{\"1\":{\"338\":1}}],[\"生成一个class对象\",{\"1\":{\"241\":1}}],[\"生成式ai应用\",{\"1\":{\"63\":1}}],[\"生成索引文件\",{\"1\":{\"31\":1}}],[\"找出10次以上的用户\",{\"1\":{\"205\":1}}],[\"找到serverendpoint注解的bean\",{\"1\":{\"1411\":1}}],[\"找到devicegatewayprovider创建设备网关\",{\"1\":{\"1319\":1}}],[\"找到\",{\"1\":{\"26\":1}}],[\"什么时候做\",{\"1\":{\"658\":1}}],[\"什么时候走行级锁或表级锁\",{\"0\":{\"219\":1}}],[\"什么也不做\",{\"1\":{\"652\":1}}],[\"什么地方\",{\"1\":{\"382\":1}}],[\"什么情况下发生数据脏读\",{\"0\":{\"204\":1}}],[\"什么是声明文件\",{\"1\":{\"989\":1}}],[\"什么是声明语句\",{\"1\":{\"989\":1}}],[\"什么是session\",{\"1\":{\"722\":1}}],[\"什么是cookie\",{\"0\":{\"203\":1}}],[\"什么是指针\",{\"0\":{\"142\":1}}],[\"存入redis中\",{\"1\":{\"1327\":1}}],[\"存入数据的时间比实际时间少一个小时\",{\"0\":{\"23\":1}}],[\"存算分离\",{\"1\":{\"1063\":1}}],[\"存在冲突域\",{\"1\":{\"1430\":1}}],[\"存在调用outputready方法处理\",{\"1\":{\"1383\":1}}],[\"存在返回旧值\",{\"1\":{\"911\":1}}],[\"存在则不做任何动作\",{\"1\":{\"910\":1}}],[\"存在则直接返回属性值\",{\"1\":{\"593\":1}}],[\"存在不做任何操作\",{\"1\":{\"909\":1}}],[\"存在更新\",{\"1\":{\"758\":2}}],[\"存储储位可用库存\",{\"1\":{\"1251\":1}}],[\"存储卷挂载等\",{\"1\":{\"1163\":1}}],[\"存储卷和其他资源\",{\"1\":{\"1161\":1}}],[\"存储完新建下一bin\",{\"1\":{\"1054\":1}}],[\"存储对应消息的唯一id\",{\"1\":{\"915\":1}}],[\"存储scroll的list\",{\"1\":{\"780\":1}}],[\"存储在一个分片一个副本上\",{\"1\":{\"773\":1}}],[\"存储在es的一条数据即是一个文档\",{\"1\":{\"748\":1}}],[\"存储全文搜索数据\",{\"1\":{\"749\":1}}],[\"存储邮箱号码\",{\"1\":{\"749\":1}}],[\"存储数据时候\",{\"1\":{\"749\":2}}],[\"存储数据的功能\",{\"1\":{\"748\":1}}],[\"存储\",{\"0\":{\"270\":1,\"1060\":1,\"1332\":1,\"1480\":1}}],[\"存放在第三方\",{\"1\":{\"1491\":1}}],[\"存放在内存\",{\"1\":{\"345\":1}}],[\"存放软件版本id\",{\"1\":{\"1464\":1}}],[\"存放来源路由\",{\"1\":{\"973\":1}}],[\"存放要发布的消息\",{\"1\":{\"824\":1}}],[\"存放共享变量\",{\"1\":{\"599\":1}}],[\"存放流程实例的任务记录\",{\"1\":{\"579\":1,\"703\":1}}],[\"存放流程实例记录\",{\"1\":{\"579\":1,\"703\":1}}],[\"存放导入选择器deferredimportselector\",{\"1\":{\"492\":1}}],[\"存放键值对元素\",{\"1\":{\"228\":1}}],[\"存放用户信息\",{\"1\":{\"203\":1,\"602\":1}}],[\"子executor\",{\"1\":{\"1445\":1}}],[\"子产品\",{\"1\":{\"1240\":1}}],[\"子流程\",{\"1\":{\"1238\":1}}],[\"子节点加入到父节点中\",{\"1\":{\"672\":1}}],[\"子类继承该类\",{\"1\":{\"457\":1}}],[\"子线程还能运行\",{\"1\":{\"209\":1}}],[\"子线程还能运行么\",{\"0\":{\"209\":1}}],[\"子域名\",{\"1\":{\"203\":1}}],[\"子句\",{\"1\":{\"131\":2}}],[\"因此适用于一些对时间不敏感的业务\",{\"1\":{\"668\":1}}],[\"因此对业务的侵入性较大\",{\"1\":{\"668\":1}}],[\"因此在配置时这两个得有一个是\",{\"1\":{\"656\":1}}],[\"因此任何一个闭包都至少可以被调用一次\",{\"1\":{\"319\":1}}],[\"因此可以修改该值\",{\"1\":{\"318\":1}}],[\"因此可以通过该可变引用直接修改\",{\"1\":{\"312\":1}}],[\"因此可以返回一个值\",{\"1\":{\"280\":1}}],[\"因此50没有插入\",{\"1\":{\"312\":1}}],[\"因此无所谓所有权\",{\"1\":{\"310\":1}}],[\"因此\",{\"1\":{\"305\":1,\"1065\":1}}],[\"因此称为关联函数\",{\"1\":{\"291\":1}}],[\"因此它是一个函数而不是方法\",{\"1\":{\"291\":1}}],[\"因此你可以直接通过名称来使用它们\",{\"1\":{\"286\":1}}],[\"因此会报错\",{\"1\":{\"282\":1}}],[\"因此这里用\",{\"1\":{\"282\":1}}],[\"因此将它声明为单元结构体\",{\"1\":{\"272\":1}}],[\"因此就加入到当前事务中来\",{\"1\":{\"202\":1}}],[\"因为判断不了回调函数何时执行\",{\"1\":{\"998\":1}}],[\"因为页面中的代码一般情况下按照\",{\"1\":{\"935\":1}}],[\"因为mybatisautoconfiguration和mybatisplusautoconfiguration两个自动配置类都没有指定autoconfigureorder\",{\"1\":{\"857\":1}}],[\"因为它可以找到\",{\"1\":{\"850\":1}}],[\"因为它没有\",{\"1\":{\"291\":1}}],[\"因为订阅是异步\",{\"1\":{\"846\":1}}],[\"因为该host被定义为该engine的默认主机\",{\"1\":{\"679\":1}}],[\"因为发生了数组越界访问\",{\"1\":{\"305\":1}}],[\"因为是函数\",{\"1\":{\"291\":1}}],[\"因为可以使用特殊的模式\",{\"1\":{\"282\":1}}],[\"因为我们想要这个结构体拥有它所有的数据\",{\"1\":{\"273\":1}}],[\"因为当前上下文不存在事务\",{\"1\":{\"202\":2}}],[\"因为没有使用\",{\"1\":{\"179\":1}}],[\"因为有声明新的变量\",{\"1\":{\"123\":1}}],[\"因为\",{\"1\":{\"123\":2,\"138\":1,\"190\":2,\"286\":1,\"298\":1,\"318\":1}}],[\"编辑系统配置\",{\"1\":{\"1206\":1}}],[\"编辑用户资源配置\",{\"1\":{\"1206\":1}}],[\"编辑内容\",{\"1\":{\"1141\":1}}],[\"编辑和创建java字节码的类库\",{\"1\":{\"240\":1}}],[\"编程式事务管理\",{\"1\":{\"202\":1}}],[\"编译相关命令\",{\"0\":{\"1178\":1}}],[\"编译时不会参与\",{\"1\":{\"1074\":1}}],[\"编译好的java类文件\",{\"1\":{\"1032\":1}}],[\"编译为\",{\"1\":{\"996\":1}}],[\"编译为可执行文件\",{\"1\":{\"115\":1}}],[\"编译错误\",{\"1\":{\"993\":1}}],[\"编译成可执行类\",{\"1\":{\"651\":1}}],[\"编译器并不知道\",{\"1\":{\"989\":1}}],[\"编译器自动推导出one的类型\",{\"1\":{\"277\":1}}],[\"编译器\",{\"1\":{\"186\":1}}],[\"编译器下\",{\"1\":{\"186\":1}}],[\"编译器会根据元素个数自行推断数组的长度\",{\"1\":{\"140\":1}}],[\"编译并运行\",{\"1\":{\"173\":1}}],[\"编译运行\",{\"1\":{\"115\":1}}],[\"编译处理过程将生成\",{\"1\":{\"31\":1}}],[\"浅克隆通过对象的引用\",{\"1\":{\"200\":1}}],[\"改变连接socketchannel所绑定的selectionkey中的interestops\",{\"1\":{\"1383\":1}}],[\"改变文件或文件夹用户及所属组\",{\"1\":{\"1177\":1}}],[\"改变key的值\",{\"1\":{\"1002\":1}}],[\"改变状态\",{\"1\":{\"1000\":1}}],[\"改变sessionid\",{\"1\":{\"346\":1}}],[\"改变字符串\",{\"1\":{\"199\":1}}],[\"改动在这里\",{\"1\":{\"318\":1}}],[\"改成\",{\"1\":{\"25\":1}}],[\"两部分\",{\"1\":{\"1271\":1}}],[\"两者在登陆bash时都会被bash执行\",{\"1\":{\"1118\":1}}],[\"两者编译后都会放到\",{\"1\":{\"1065\":1}}],[\"两者区别\",{\"1\":{\"935\":1}}],[\"两者都可以写查询条件\",{\"1\":{\"767\":1}}],[\"两者都是spi机制的入口文件\",{\"1\":{\"481\":1}}],[\"两者关系\",{\"0\":{\"248\":1}}],[\"两者的填充因子默认都是0\",{\"1\":{\"198\":1}}],[\"两个表达式都为\",{\"1\":{\"1223\":1}}],[\"两个对象\",{\"1\":{\"383\":1}}],[\"两个survive区\",{\"1\":{\"243\":2}}],[\"两个poller线程\",{\"1\":{\"215\":1}}],[\"两数相加\",{\"1\":{\"140\":1}}],[\"设备调试服务\",{\"0\":{\"1488\":1}}],[\"设备运行状态\",{\"1\":{\"1479\":1}}],[\"设备是否在线或离线\",{\"1\":{\"1342\":1}}],[\"设备指令的发送\",{\"1\":{\"1342\":1}}],[\"设备实例\",{\"0\":{\"1338\":1}}],[\"设备管理\",{\"0\":{\"1337\":1}}],[\"设备若有上级网关\",{\"1\":{\"1331\":1}}],[\"设备回复\",{\"1\":{\"1331\":1}}],[\"设备数据上报\",{\"0\":{\"1329\":1}}],[\"设备的上线与离线\",{\"0\":{\"1328\":1}}],[\"设备的部署和取消部署\",{\"0\":{\"1327\":1}}],[\"设备的启停\",{\"0\":{\"1317\":1}}],[\"设备注册器\",{\"1\":{\"1319\":1}}],[\"设备操作器会缓存设备当前状态\",{\"1\":{\"1317\":1}}],[\"设备触发\",{\"1\":{\"1311\":2}}],[\"设备网关\",{\"1\":{\"1305\":1}}],[\"设备标签表\",{\"1\":{\"1304\":1}}],[\"设备状态分为在线online\",{\"1\":{\"1317\":1}}],[\"设备状态\",{\"1\":{\"1304\":1}}],[\"设备特性\",{\"1\":{\"1304\":1}}],[\"设备物模型映射\",{\"1\":{\"1304\":1}}],[\"设备物模型\",{\"1\":{\"1304\":1}}],[\"设备接入协议\",{\"0\":{\"1289\":1}}],[\"设备接入网关\",{\"0\":{\"1288\":1},\"1\":{\"1269\":1}}],[\"设备作为客户端与mqtt服务器连接\",{\"1\":{\"1288\":1}}],[\"设备直接通过mqtt协议与平台交互\",{\"1\":{\"1288\":1}}],[\"设备和平台约定的在网络通道中传输数据的格式\",{\"1\":{\"1269\":1}}],[\"设备\",{\"0\":{\"1316\":1},\"1\":{\"1269\":1,\"1309\":1}}],[\"设备信息表\",{\"1\":{\"1304\":1}}],[\"设备信息\",{\"1\":{\"649\":1,\"1309\":1}}],[\"设用序列化破坏单例\",{\"1\":{\"1257\":1}}],[\"设计模式分为三大类\",{\"1\":{\"1254\":1}}],[\"设计模式是一套经过反复使用的代码设计经验\",{\"1\":{\"1254\":1}}],[\"设计文档\",{\"1\":{\"1017\":1}}],[\"设数据库值为null\",{\"1\":{\"902\":1}}],[\"设参\",{\"1\":{\"194\":1}}],[\"设置角色菜单权限划分\",{\"1\":{\"1503\":1}}],[\"设置到共享内存的异步对象中\",{\"1\":{\"1433\":1}}],[\"设置超时结果\",{\"1\":{\"1433\":1}}],[\"设置selectionkey的感兴趣事件\",{\"1\":{\"1398\":1}}],[\"设置servletcontext到应用上下文中\",{\"1\":{\"448\":1}}],[\"设置连接conn的感兴趣事件\",{\"1\":{\"1384\":1}}],[\"设置相关配置\",{\"1\":{\"1317\":1}}],[\"设置自定义占位符\",{\"1\":{\"1295\":1}}],[\"设置要执行的过滤器索引和过滤器集\",{\"1\":{\"1262\":1}}],[\"设置要执行的advise拦截器\",{\"1\":{\"430\":1}}],[\"设置mysql最大连接数\",{\"1\":{\"1243\":1}}],[\"设置进程句柄数\",{\"1\":{\"1206\":1}}],[\"设置进入老年代的阈值\",{\"1\":{\"214\":1}}],[\"设置ip地址获取方式\",{\"1\":{\"1198\":1}}],[\"设置path变量\",{\"1\":{\"1188\":1}}],[\"设置环境变量\",{\"0\":{\"1182\":1},\"1\":{\"1188\":1}}],[\"设置密码\",{\"1\":{\"1141\":1}}],[\"设置邮箱名\",{\"1\":{\"1130\":1}}],[\"设置用户名\",{\"1\":{\"1130\":1}}],[\"设置工作目录\",{\"1\":{\"1107\":1}}],[\"设置开机启动\",{\"1\":{\"1095\":1}}],[\"设置为\",{\"1\":{\"996\":1,\"1201\":1}}],[\"设置过期时间\",{\"1\":{\"915\":1}}],[\"设置过期日期为\",{\"1\":{\"652\":1}}],[\"设置的key都不存在时才成功\",{\"1\":{\"910\":1}}],[\"设置key对应的值value\",{\"1\":{\"910\":1}}],[\"设置指定区间范围内的值\",{\"1\":{\"910\":1}}],[\"设置全局策略\",{\"1\":{\"902\":1}}],[\"设置全局变量\",{\"1\":{\"649\":2}}],[\"设置数据源\",{\"1\":{\"896\":1}}],[\"设置保活时间间隔keepaliveinterval作用\",{\"0\":{\"845\":1}}],[\"设置消息id\",{\"1\":{\"825\":1}}],[\"设置消费者组中的线程数量\",{\"1\":{\"801\":1}}],[\"设置网络模块\",{\"1\":{\"819\":1}}],[\"设置是否自定义占位符\",{\"1\":{\"1295\":1}}],[\"设置是否批量消费\",{\"1\":{\"802\":1}}],[\"设置是否开启批量监听\",{\"1\":{\"801\":1}}],[\"设置consumer拦截器\",{\"1\":{\"801\":1}}],[\"设置\",{\"1\":{\"801\":1}}],[\"设置事务id前缀\",{\"1\":{\"801\":1}}],[\"设置结果最大窗口\",{\"0\":{\"778\":1}}],[\"设置dubboproperties到applicationmodel的modelenvironment中\",{\"1\":{\"740\":1}}],[\"设置了超时时间\",{\"1\":{\"730\":1}}],[\"设置一个超时时间\",{\"1\":{\"730\":1}}],[\"设置请求状态为dispatched\",{\"1\":{\"695\":1}}],[\"设置响应内容类型\",{\"1\":{\"652\":1}}],[\"设置上下文\",{\"1\":{\"649\":1}}],[\"设置任务处理人\",{\"1\":{\"585\":1,\"707\":1}}],[\"设置子类的状态\",{\"1\":{\"457\":1}}],[\"设置引擎engine实例id\",{\"1\":{\"455\":1}}],[\"设置服务器端口\",{\"1\":{\"453\":1}}],[\"设置服务为关闭\",{\"1\":{\"213\":1}}],[\"设置名称\",{\"1\":{\"451\":1}}],[\"设置应用上下文到servletcontext的属性中\",{\"1\":{\"448\":1}}],[\"设置返回值\",{\"1\":{\"403\":1}}],[\"设置http\",{\"0\":{\"360\":1}}],[\"设置不同的过期时间\",{\"1\":{\"216\":1}}],[\"设置空值\",{\"1\":{\"216\":1}}],[\"设置缓存\",{\"1\":{\"216\":1}}],[\"设置线程的堆栈大小\",{\"1\":{\"214\":1}}],[\"设置年轻代大小\",{\"1\":{\"214\":1}}],[\"设置最小堆内存\",{\"1\":{\"214\":1}}],[\"设置最大堆内存\",{\"1\":{\"214\":1}}],[\"设置堆内存大小\",{\"1\":{\"214\":1}}],[\"设置系统时间与网络时间同步\",{\"1\":{\"33\":1}}],[\"设置git\",{\"0\":{\"26\":1}}],[\"固定\",{\"1\":{\"1220\":1}}],[\"固定长度数组\",{\"1\":{\"277\":1}}],[\"固定频率调度\",{\"1\":{\"192\":1}}],[\"固定延时调度\",{\"1\":{\"192\":1}}],[\"个人基本信息\",{\"1\":{\"1546\":1}}],[\"个人登录平台oauth2登录页\",{\"0\":{\"1496\":1}}],[\"个元素是\",{\"1\":{\"279\":1}}],[\"个数据的时候就阻塞了\",{\"1\":{\"190\":1}}],[\"个数据\",{\"1\":{\"190\":1}}],[\"个\",{\"1\":{\"190\":1,\"1221\":1}}],[\"个的机器上\",{\"1\":{\"186\":1}}],[\"个的操作系统线程\",{\"1\":{\"186\":1}}],[\"缓冲区大小为2\",{\"1\":{\"190\":1}}],[\"缓存取属性对应的json\",{\"1\":{\"1480\":1}}],[\"缓存到共享内存中\",{\"1\":{\"1433\":1}}],[\"缓存分配策略\",{\"1\":{\"1392\":1}}],[\"缓存分配器\",{\"1\":{\"1392\":1}}],[\"缓存区分配\",{\"0\":{\"1390\":1}}],[\"缓存deviceproductoperator\",{\"1\":{\"1342\":1}}],[\"缓存deviceoperator\",{\"1\":{\"1342\":1}}],[\"缓存相应物模型\",{\"1\":{\"1326\":1,\"1327\":1}}],[\"缓存设备操作器deviceoperator\",{\"1\":{\"1317\":1}}],[\"缓存时间\",{\"1\":{\"1026\":1}}],[\"缓存后端指定为\",{\"1\":{\"1026\":1}}],[\"缓存job的任务id\",{\"1\":{\"1013\":1}}],[\"缓存的使用\",{\"1\":{\"911\":1}}],[\"缓存配置数据\",{\"1\":{\"880\":1}}],[\"缓存mapperproxyfactory用于生成mapper代理对象\",{\"1\":{\"860\":1}}],[\"缓存token\",{\"1\":{\"833\":1}}],[\"缓存前一次请求\",{\"1\":{\"723\":1}}],[\"缓存雪崩\",{\"1\":{\"216\":1}}],[\"缓存穿透\",{\"1\":{\"216\":1}}],[\"缓存击穿\",{\"1\":{\"216\":1}}],[\"缓存\",{\"0\":{\"74\":1},\"1\":{\"849\":1}}],[\"之前举的例子就是通过\",{\"1\":{\"991\":1}}],[\"之前运行\",{\"1\":{\"935\":1}}],[\"之前\",{\"1\":{\"418\":1}}],[\"之间的距离\",{\"1\":{\"295\":1}}],[\"之间通过传递一个指定类型的值来同步运行和通讯\",{\"1\":{\"190\":1}}],[\"之后就结束了\",{\"1\":{\"190\":1}}],[\"之后\",{\"1\":{\"173\":2,\"798\":1}}],[\"共11种\",{\"1\":{\"1254\":1}}],[\"共7种\",{\"1\":{\"1254\":1}}],[\"共5种\",{\"1\":{\"1254\":1}}],[\"共享订阅\",{\"1\":{\"1266\":1}}],[\"共享存储卷\",{\"1\":{\"1161\":1}}],[\"共享命名空间\",{\"1\":{\"1161\":1}}],[\"共享runner配置\",{\"1\":{\"1128\":1}}],[\"共享锁\",{\"1\":{\"1048\":1}}],[\"共享同一个地址空间\",{\"1\":{\"189\":1}}],[\"共识算法\",{\"0\":{\"97\":1}}],[\"永远是可运行的\",{\"1\":{\"188\":1}}],[\"永久性\",{\"1\":{\"1206\":1}}],[\"永久生效\",{\"1\":{\"17\":1}}],[\"永久\",{\"1\":{\"5\":1}}],[\"无\",{\"1\":{\"1616\":2}}],[\"无效\",{\"1\":{\"1521\":1}}],[\"无需额外安装\",{\"1\":{\"1093\":1}}],[\"无锁\",{\"1\":{\"1050\":1}}],[\"无单发货单点击一键发货时\",{\"1\":{\"911\":1}}],[\"无单发货\",{\"1\":{\"911\":1}}],[\"无返回值方法\",{\"1\":{\"377\":1}}],[\"无值的时候返回\",{\"1\":{\"305\":1}}],[\"无论是\",{\"1\":{\"285\":1}}],[\"无限\",{\"1\":{\"188\":1}}],[\"无法做登出\",{\"1\":{\"1521\":1}}],[\"无法下控\",{\"1\":{\"1489\":1}}],[\"无法带参查询展示\",{\"1\":{\"1459\":1}}],[\"无法实现\",{\"1\":{\"1456\":1}}],[\"无法实现定制功能开发\",{\"1\":{\"1454\":1}}],[\"无法保持长时间会话\",{\"1\":{\"1321\":1}}],[\"无法打jar包问题\",{\"0\":{\"1072\":1}}],[\"无法通过\",{\"1\":{\"749\":1}}],[\"无法完成服务访问\",{\"1\":{\"730\":2}}],[\"无法避免stop\",{\"1\":{\"243\":1}}],[\"无法继续执行\",{\"1\":{\"232\":1}}],[\"无法解析域名问题\",{\"0\":{\"48\":1}}],[\"无法分配内存问题\",{\"0\":{\"17\":1}}],[\"大写的p\",{\"1\":{\"1109\":1}}],[\"大写字母全部转为了小写字母\",{\"1\":{\"774\":1}}],[\"大量的请求都在同时请求服务消费者\",{\"1\":{\"730\":1}}],[\"大量请求查询不存在的key\",{\"1\":{\"216\":1}}],[\"大字段\",{\"1\":{\"716\":1}}],[\"大于\",{\"1\":{\"186\":1}}],[\"大数据\",{\"0\":{\"81\":1,\"1666\":1}}],[\"你在电脑里能看到的目录\",{\"1\":{\"1151\":1}}],[\"你应该替换为host\",{\"1\":{\"1122\":1}}],[\"你就无法更改它的子元素或者属性\",{\"1\":{\"970\":1}}],[\"你也可以直接用for\",{\"1\":{\"277\":1}}],[\"你也可以让\",{\"1\":{\"273\":1}}],[\"你只能拥有要么一个可变引用\",{\"1\":{\"265\":1}}],[\"你必须设置\",{\"1\":{\"186\":1}}],[\"你可以使用\",{\"1\":{\"1425\":1}}],[\"你可以在特征中定义具有默认实现的方法\",{\"1\":{\"297\":1}}],[\"你可以声明一个未指定大小的数组来定义切片\",{\"1\":{\"152\":1}}],[\"你可以定义任意数量的\",{\"1\":{\"131\":1}}],[\"请注意您使用的是复制的上下文\",{\"1\":{\"179\":1}}],[\"请求方法\",{\"1\":{\"1590\":1,\"1591\":1}}],[\"请求方式\",{\"1\":{\"1535\":1,\"1592\":1}}],[\"请求参数\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"请求参数预处理\",{\"0\":{\"379\":1}}],[\"请求头\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"请求头拦截器\",{\"0\":{\"1525\":1}}],[\"请求路径\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"请求路径格式\",{\"1\":{\"1455\":1}}],[\"请求路径需和过滤器相匹配\",{\"1\":{\"334\":1}}],[\"请求上下文serverwebchange最终经过filterwebhandler的handle方法处理\",{\"1\":{\"1262\":1}}],[\"请求资源地址\",{\"1\":{\"1189\":1}}],[\"请求超时\",{\"1\":{\"801\":1,\"802\":1}}],[\"请求被发送到本机端口8080\",{\"1\":{\"679\":1}}],[\"请求地址\",{\"1\":{\"421\":1}}],[\"请求进来到继承httpservlet的frameservlet的service方法去处理\",{\"1\":{\"401\":1}}],[\"请求刚进入\",{\"1\":{\"354\":1}}],[\"请求缓存配置\",{\"1\":{\"348\":1}}],[\"请求包装过滤器\",{\"1\":{\"346\":1}}],[\"请求数过多会导致\",{\"1\":{\"215\":1}}],[\"请求连接超时时间\",{\"1\":{\"213\":1}}],[\"请求处理的超时时间\",{\"1\":{\"213\":1}}],[\"请求入口\",{\"0\":{\"109\":1}}],[\"请求\",{\"0\":{\"46\":1,\"1384\":1},\"1\":{\"416\":1}}],[\"必须相等\",{\"1\":{\"762\":1}}],[\"必须增加\",{\"1\":{\"421\":1}}],[\"必须在结构体的尾部使用\",{\"1\":{\"271\":1}}],[\"必须进行处理\",{\"1\":{\"230\":1}}],[\"必须使用只读副本\",{\"1\":{\"179\":1}}],[\"必填\",{\"1\":{\"103\":4,\"1531\":3,\"1532\":2,\"1533\":2,\"1534\":3,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"框架生成的代理对象\",{\"1\":{\"354\":1}}],[\"框架\",{\"0\":{\"175\":1,\"1441\":1},\"1\":{\"729\":1}}],[\"等价于\",{\"1\":{\"1220\":2}}],[\"等价使用方式\",{\"1\":{\"279\":1}}],[\"等同如下两条命令\",{\"1\":{\"1148\":2}}],[\"等同于\",{\"1\":{\"186\":1,\"1187\":1}}],[\"等值查询时\",{\"1\":{\"1048\":1}}],[\"等待输出到channel\",{\"1\":{\"1383\":1}}],[\"等待await右侧的表达式返回promise或对象\",{\"1\":{\"1000\":1}}],[\"等待来自池的连接的最大毫秒数\",{\"1\":{\"850\":1}}],[\"等待的情形\",{\"1\":{\"730\":1}}],[\"等待被唤醒\",{\"1\":{\"233\":1}}],[\"等数据准备好\",{\"1\":{\"500\":1}}],[\"等等\",{\"1\":{\"174\":1}}],[\"等于\",{\"1\":{\"129\":1}}],[\"来保证不同租户的数据安全性\",{\"1\":{\"1502\":1}}],[\"来向连接写入或从中接收数据\",{\"1\":{\"1425\":1}}],[\"来定义其规范和属性\",{\"1\":{\"1163\":1}}],[\"来定义它的类型2\",{\"1\":{\"989\":1}}],[\"来构建\",{\"1\":{\"1130\":1}}],[\"来运行\",{\"1\":{\"1123\":1}}],[\"来导入\",{\"1\":{\"992\":1}}],[\"来导入这个默认值\",{\"1\":{\"992\":1}}],[\"来禁用内联的操作\",{\"1\":{\"983\":1}}],[\"来开启内联操作\",{\"1\":{\"983\":1}}],[\"来进行自动配置\",{\"1\":{\"851\":1}}],[\"来进行循环\",{\"1\":{\"277\":1}}],[\"来简化配置\",{\"1\":{\"851\":1}}],[\"来避免重复登录\",{\"1\":{\"722\":1}}],[\"来解决循环依赖问题\",{\"1\":{\"380\":1}}],[\"来调用\",{\"1\":{\"291\":1}}],[\"来作为构造器的名称\",{\"1\":{\"291\":1}}],[\"来代表未列出的所有可能性\",{\"1\":{\"282\":1}}],[\"来释放每一个变量占用的内存\",{\"1\":{\"264\":1}}],[\"来移除当前源码包和关联源码包里面编译生成的文件\",{\"1\":{\"173\":1}}],[\"来获取指针所指向的内容\",{\"1\":{\"143\":1}}],[\"那就不会加入到commit中\",{\"1\":{\"1151\":1}}],[\"那就是\",{\"1\":{\"993\":1}}],[\"那就得执行\",{\"1\":{\"173\":1}}],[\"那么没有必要进行gc优化\",{\"1\":{\"1155\":1}}],[\"那么在使用\",{\"1\":{\"996\":1}}],[\"那么在一次消费过程中\",{\"1\":{\"798\":1}}],[\"那么他就会被视为一个\",{\"1\":{\"995\":1}}],[\"那么就必须用三斜线指令了28\",{\"1\":{\"995\":1}}],[\"那么就要根据租户id查询当前仓库下有权限的货主\",{\"1\":{\"911\":1}}],[\"那么就涉及到给各个字段加注解\",{\"1\":{\"902\":1}}],[\"那么就会创建一个\",{\"1\":{\"154\":1}}],[\"那么该offset之前的所有消息都算作已提交\",{\"1\":{\"798\":1}}],[\"那么会提交此前拉去的消息的最大偏移量\",{\"1\":{\"798\":1}}],[\"那么会提交此前拉取的消息的最大偏移量\",{\"1\":{\"798\":1}}],[\"那么需要通过consumer\",{\"1\":{\"798\":1}}],[\"那么filter和上述query子句有啥区别呢\",{\"1\":{\"767\":1}}],[\"那么虽然优先加载bootstrap\",{\"1\":{\"593\":1}}],[\"那么properties中的配置会被加载\",{\"1\":{\"593\":1}}],[\"那么我们添加一个约束\",{\"1\":{\"318\":1}}],[\"那么我们可以用sh来替换\",{\"1\":{\"50\":1}}],[\"那么innodb将对表中的所有记录加锁\",{\"1\":{\"219\":1}}],[\"那么子线程会随着主线程结束而结束\",{\"1\":{\"209\":1,\"235\":1}}],[\"那么\",{\"1\":{\"190\":1,\"282\":1,\"290\":1}}],[\"那么使用这种形式的标识符的对象就可以被外部包的代码所使用\",{\"1\":{\"116\":1}}],[\"整个\",{\"1\":{\"1275\":1}}],[\"整体导入\",{\"1\":{\"992\":3}}],[\"整体导出\",{\"1\":{\"992\":1}}],[\"整数或浮点数\",{\"1\":{\"928\":1}}],[\"整数地址赋值给指针数组\",{\"1\":{\"145\":1}}],[\"整件数量\",{\"1\":{\"236\":1}}],[\"整理依赖\",{\"1\":{\"173\":1}}],[\"列出插件列表\",{\"1\":{\"1025\":1}}],[\"列出当前库的所有key\",{\"1\":{\"908\":1}}],[\"列出当前全部安装的\",{\"1\":{\"173\":1}}],[\"列出实际请求所允许使用的方法\",{\"1\":{\"725\":1}}],[\"列出密钥库中的条目\",{\"1\":{\"623\":1}}],[\"列出所有创建的环境\",{\"1\":{\"96\":1}}],[\"拉取镜像启动容器\",{\"1\":{\"1474\":1}}],[\"拉取代码\",{\"1\":{\"1215\":2}}],[\"拉取代码构建\",{\"1\":{\"564\":1}}],[\"拉取提交记录\",{\"1\":{\"1144\":1}}],[\"拉取远程仓库\",{\"1\":{\"1144\":1}}],[\"拉取远程仓库代码\",{\"1\":{\"172\":1}}],[\"拉取opms里的所有镜像\",{\"1\":{\"1123\":1}}],[\"拉取\",{\"1\":{\"1123\":1,\"1201\":1}}],[\"拉取scms里的所有镜像\",{\"1\":{\"1123\":1}}],[\"拉取与上传module处理\",{\"0\":{\"171\":1}}],[\"模拟器和设备调试的客户端id相同问题\",{\"1\":{\"846\":1}}],[\"模拟一个长任务\",{\"1\":{\"179\":2}}],[\"模型有父子级关系\",{\"1\":{\"735\":1}}],[\"模型\",{\"0\":{\"618\":1},\"1\":{\"1450\":1}}],[\"模型及参数绑定\",{\"0\":{\"181\":1}}],[\"模式的编译和最终的release\",{\"1\":{\"1074\":1}}],[\"模式适用场景\",{\"0\":{\"287\":1}}],[\"模式绑定\",{\"1\":{\"282\":1}}],[\"模式匹配\",{\"0\":{\"281\":1}}],[\"模糊查询首部使用了\",{\"1\":{\"206\":1}}],[\"模块中可以嵌套模块\",{\"1\":{\"998\":1}}],[\"模块名\",{\"1\":{\"998\":2}}],[\"模块插件\",{\"0\":{\"994\":1}}],[\"模块系统中\",{\"1\":{\"992\":1}}],[\"模块已启动事件\",{\"1\":{\"742\":1}}],[\"模块之间不对实现类进行硬编码\",{\"1\":{\"481\":1}}],[\"模块\",{\"1\":{\"172\":1}}],[\"模板方法模式\",{\"0\":{\"1263\":1},\"1\":{\"1254\":1}}],[\"模板的唯一名称\",{\"1\":{\"103\":1}}],[\"模板创建者\",{\"1\":{\"103\":1}}],[\"模板制作\",{\"0\":{\"103\":1}}],[\"模板名称\",{\"1\":{\"102\":1}}],[\"模板使用\",{\"0\":{\"102\":1}}],[\"上传文件\",{\"1\":{\"1586\":1}}],[\"上传按照go\",{\"1\":{\"171\":1}}],[\"上\",{\"1\":{\"1425\":1}}],[\"上报\",{\"1\":{\"1330\":1}}],[\"上可以进行通信\",{\"1\":{\"1276\":1}}],[\"上例的声明文件可以等价的改写为\",{\"1\":{\"992\":1}}],[\"上例中我们添加了\",{\"1\":{\"996\":1}}],[\"上例中\",{\"1\":{\"989\":1}}],[\"上述例子\",{\"1\":{\"970\":1}}],[\"上述代码中\",{\"1\":{\"298\":1}}],[\"上的小型应用程序\",{\"1\":{\"652\":1}}],[\"上级订阅者传递信息到下游节点\",{\"1\":{\"537\":1}}],[\"上下文的条件是用来给文档打分的\",{\"1\":{\"767\":1}}],[\"上下文\",{\"0\":{\"598\":1},\"1\":{\"678\":1}}],[\"上下文中会优先注册默认configurationclasspostprocessor到上下文的bean工厂的单例对象集中\",{\"1\":{\"483\":1}}],[\"上下文容器\",{\"1\":{\"451\":1}}],[\"上下文方法发布事件\",{\"1\":{\"413\":1}}],[\"上面代码中\",{\"1\":{\"264\":1}}],[\"上面的代码将会输出\",{\"1\":{\"138\":1}}],[\"上启动服务\",{\"1\":{\"179\":1}}],[\"节能管理平台ip\",{\"1\":{\"1475\":1}}],[\"节能管理平台\",{\"1\":{\"1475\":1}}],[\"节点id\",{\"1\":{\"1335\":1}}],[\"节点中\",{\"1\":{\"1265\":1}}],[\"节点间同步\",{\"1\":{\"1265\":2}}],[\"节点上\",{\"1\":{\"1214\":1}}],[\"节点\",{\"1\":{\"1036\":1}}],[\"节中编写的\",{\"1\":{\"173\":1}}],[\"节\",{\"1\":{\"160\":1,\"174\":1}}],[\"正泰协议处理\",{\"1\":{\"1479\":1}}],[\"正则表达式\",{\"1\":{\"931\":2}}],[\"正常停止进程\",{\"1\":{\"1191\":1}}],[\"正常调用mapper接口的方法执行sql操作时会创建sqlsession对象\",{\"1\":{\"852\":1}}],[\"正常情况下\",{\"1\":{\"982\":1}}],[\"正常情况\",{\"1\":{\"158\":1}}],[\"正排索引\",{\"0\":{\"753\":1}}],[\"正向预测先行搜索的子表达式\",{\"1\":{\"635\":1}}],[\"正如名字一样\",{\"1\":{\"160\":1}}],[\"从redis中取到属性json\",{\"1\":{\"1480\":1}}],[\"从redis中获取网关路由配置信息的json格式\",{\"1\":{\"468\":1}}],[\"从base\",{\"1\":{\"1452\":1}}],[\"从上下文servletcontext获取servercontainer\",{\"1\":{\"1413\":1}}],[\"从上到下\",{\"1\":{\"935\":1}}],[\"从channelconfig获取bytebufallocator\",{\"1\":{\"1400\":1}}],[\"从channel获取channelconfig\",{\"1\":{\"1400\":1}}],[\"从尾部上下文到头部上下文执行channelhandler\",{\"1\":{\"1396\":1}}],[\"从连接池获取连接\",{\"1\":{\"1384\":1}}],[\"从集群读取协议改变的消息\",{\"1\":{\"1354\":1}}],[\"从设备注册器获取设备operator时\",{\"1\":{\"1317\":1}}],[\"从第5行开始到文件最后\",{\"1\":{\"1187\":1}}],[\"从应用软件的角度看\",{\"1\":{\"1102\":1}}],[\"从官网下载安装\",{\"1\":{\"1082\":1}}],[\"从auth服务获取jwksource来对token进行校验\",{\"1\":{\"1031\":1}}],[\"从左到右的顺序执行\",{\"1\":{\"935\":1}}],[\"从线程局部变量中取分页信息构建查询sql语句\",{\"1\":{\"853\":1}}],[\"从任务队列获取任务执行\",{\"1\":{\"842\":1}}],[\"从输入流中获取字节数据转为消息对象\",{\"1\":{\"838\":1}}],[\"从配置中心获取配置\",{\"1\":{\"744\":1}}],[\"从配置类中读取beandefinition\",{\"1\":{\"486\":1}}],[\"从后续深入理解的角度\",{\"0\":{\"680\":1}}],[\"从后端直接发起\",{\"1\":{\"325\":1}}],[\"从一个完整请求的角度来看\",{\"0\":{\"679\":1}}],[\"从组件角度\",{\"0\":{\"678\":1}}],[\"从其他密钥库导入一个或所有条目\",{\"1\":{\"623\":1}}],[\"从flux获取指定数量的元素\",{\"1\":{\"547\":1}}],[\"从下游订阅者获取上下文\",{\"1\":{\"542\":1}}],[\"从启动类包开始扫描组件beandefinition\",{\"1\":{\"488\":1}}],[\"从启动的容器中获取bean\",{\"1\":{\"210\":1}}],[\"从serverwebchange获取路径信息进行判断是否需鉴权\",{\"1\":{\"471\":1}}],[\"从仓库获取上下文\",{\"1\":{\"346\":1}}],[\"从模式中取出绑定的值\",{\"1\":{\"282\":1}}],[\"从此处起\",{\"1\":{\"264\":1}}],[\"从数据库查询数据\",{\"1\":{\"216\":1}}],[\"从队列中取socket套接字加入到select选择器中\",{\"1\":{\"215\":1}}],[\"从而做一些redis的操作\",{\"1\":{\"1487\":1}}],[\"从而实现对pod的管理和控制\",{\"1\":{\"1163\":1}}],[\"从而避免幻读\",{\"1\":{\"1048\":1}}],[\"从而决定任务的流向\",{\"1\":{\"586\":1,\"708\":1}}],[\"从而更快\",{\"1\":{\"561\":1}}],[\"从而达到自定义请求参数格式的目的\",{\"1\":{\"375\":1}}],[\"从而达到异常全局处理的目的\",{\"1\":{\"375\":1}}],[\"从而跳过后面的校验\",{\"1\":{\"339\":1}}],[\"从而不会影响其他线程的运行\",{\"1\":{\"208\":1}}],[\"从而在接收第\",{\"1\":{\"190\":1}}],[\"从\",{\"0\":{\"160\":1,\"304\":1},\"1\":{\"190\":1}}],[\"程序\",{\"1\":{\"173\":1}}],[\"程序不能继续运行时\",{\"1\":{\"159\":1}}],[\"程序中\",{\"1\":{\"117\":1}}],[\"很重要\",{\"1\":{\"1151\":1}}],[\"很少用\",{\"1\":{\"1074\":1}}],[\"很严苛且不可恢复\",{\"1\":{\"159\":1}}],[\"很像\",{\"1\":{\"124\":1}}],[\"伴随着程序的崩溃抛出一个\",{\"1\":{\"159\":1}}],[\"`hdcode`\",{\"1\":{\"1467\":1}}],[\"`operation\",{\"1\":{\"1467\":1,\"1468\":1}}],[\"`project\",{\"1\":{\"1467\":1}}],[\"`customer\",{\"1\":{\"1467\":1}}],[\"`create\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"`version\",{\"1\":{\"1465\":1}}],[\"`update\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"`useparams`\",{\"1\":{\"975\":1}}],[\"`remarks`\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"`idx\",{\"1\":{\"1467\":1}}],[\"`id`\",{\"1\":{\"1464\":2,\"1465\":2,\"1466\":2,\"1467\":2}}],[\"`installation\",{\"1\":{\"1467\":2,\"1468\":2}}],[\"`installation`\",{\"1\":{\"1467\":1}}],[\"`int`\",{\"1\":{\"158\":1}}],[\"`software\",{\"1\":{\"1464\":4,\"1465\":3,\"1466\":4,\"1467\":1}}],[\"`name`\",{\"1\":{\"1058\":1}}],[\"`dev`\",{\"1\":{\"985\":1}}],[\"`draw`\",{\"1\":{\"298\":2}}],[\"`build`\",{\"1\":{\"985\":1}}],[\"`application\",{\"1\":{\"1531\":1}}],[\"`authorization\",{\"1\":{\"1467\":2}}],[\"`authorizationcontext\",{\"1\":{\"345\":1}}],[\"`authorizedclient`\",{\"1\":{\"345\":1}}],[\"`a`\",{\"1\":{\"279\":1}}],[\"`form\",{\"1\":{\"181\":2}}],[\"`\",{\"1\":{\"158\":2,\"181\":2,\"279\":2}}],[\"`error`\",{\"1\":{\"158\":1}}],[\"实时化的问题\",{\"1\":{\"1425\":1}}],[\"实时监控100行日志\",{\"1\":{\"1187\":1}}],[\"实体\",{\"1\":{\"1244\":1}}],[\"实体类\",{\"1\":{\"1244\":1}}],[\"实体文件\",{\"1\":{\"1184\":1}}],[\"实际创建和管理容器\",{\"1\":{\"1162\":1}}],[\"实际发送json格式的字符串给es\",{\"1\":{\"748\":1}}],[\"实际的逻辑是在这里\",{\"1\":{\"652\":1}}],[\"实际注入的是\",{\"1\":{\"354\":1}}],[\"实际上需要通过使用kubernetes提供的网络插件来实现流量的转发和负载均衡\",{\"1\":{\"1171\":1}}],[\"实际上是把当前分支master推送到远程\",{\"1\":{\"1151\":1}}],[\"实际上是创建了一个指向原有字符串数据的切片\",{\"1\":{\"268\":1}}],[\"实际上\",{\"1\":{\"319\":1,\"798\":2,\"1162\":1}}],[\"实际场景\",{\"1\":{\"194\":1}}],[\"实现mqttclient\",{\"1\":{\"1353\":1}}],[\"实现networkmanager\",{\"1\":{\"1348\":1}}],[\"实现notify方法\",{\"1\":{\"588\":1,\"710\":1}}],[\"实现webfilter\",{\"1\":{\"1345\":1}}],[\"实现deviceregistry\",{\"0\":{\"1342\":1}}],[\"实现commandlinerunner\",{\"0\":{\"1339\":1}}],[\"实现cloneable接口\",{\"1\":{\"200\":1}}],[\"实现更细粒度的安全策略\",{\"1\":{\"1207\":1}}],[\"实现的\",{\"1\":{\"1170\":1}}],[\"实现的方法名\",{\"1\":{\"252\":1}}],[\"实现的方法名称\",{\"1\":{\"252\":1}}],[\"实现数据的持久化和共享\",{\"1\":{\"1161\":1}}],[\"实现一个可供客户端订阅消息的消息队列服务器broker\",{\"1\":{\"1015\":1}}],[\"实现initializingbean\",{\"1\":{\"919\":1}}],[\"实现方式\",{\"0\":{\"655\":1}}],[\"实现servletcontext接口的servletcontextimpl的attributes中存放spring的rootcontext\",{\"1\":{\"601\":1}}],[\"实现standardcontext\",{\"1\":{\"451\":1}}],[\"实现上述接口\",{\"1\":{\"486\":1,\"588\":1,\"710\":1}}],[\"实现globalfilter接口\",{\"1\":{\"471\":1}}],[\"实现routedefinitionrepository接口\",{\"1\":{\"468\":1}}],[\"实现了轮询的方式对消息进行消费\",{\"1\":{\"905\":1}}],[\"实现了对\",{\"1\":{\"674\":1}}],[\"实现了webhandler接口\",{\"1\":{\"513\":1}}],[\"实现了dofilterinternal\",{\"1\":{\"418\":1}}],[\"实现了\",{\"1\":{\"266\":1,\"298\":1}}],[\"实现了超时机制和断路器模式\",{\"1\":{\"213\":1}}],[\"实现解耦\",{\"1\":{\"224\":1}}],[\"实现对象的克隆\",{\"0\":{\"200\":1}}],[\"实现\",{\"1\":{\"158\":1,\"1295\":1}}],[\"实例化readpropertymessagesender\",{\"1\":{\"1331\":1}}],[\"实例化时添加过滤器wsfilter处理websocket连接\",{\"1\":{\"1413\":1,\"1422\":1}}],[\"实例化时会进行init初始化\",{\"1\":{\"872\":1}}],[\"实例化时\",{\"1\":{\"827\":1}}],[\"实例化http11nioprotocol\",{\"1\":{\"689\":1}}],[\"实例化tomcatwebserver\",{\"1\":{\"450\":1}}],[\"实例时创建protocolhandler的实现http11nioprotocol\",{\"1\":{\"688\":1}}],[\"实例被\",{\"1\":{\"652\":1}}],[\"实例则没有定义此方法\",{\"1\":{\"295\":1}}],[\"实例\",{\"1\":{\"155\":1,\"298\":1}}],[\"任意一台报错则报错\",{\"1\":{\"730\":1}}],[\"任何错误都将立即中断序列并向下转发\",{\"1\":{\"548\":1}}],[\"任何类型的数据都可以放入枚举成员中\",{\"1\":{\"275\":1}}],[\"任何其他类型只要实现了这些方法就是实现了这个接口\",{\"1\":{\"157\":1}}],[\"任务队列\",{\"1\":{\"1445\":1}}],[\"任务处理机制\",{\"0\":{\"1449\":1}}],[\"任务处理\",{\"1\":{\"1440\":1}}],[\"任务处理时要设置处理意见\",{\"1\":{\"586\":1,\"708\":1}}],[\"任务类继承自\",{\"1\":{\"658\":1}}],[\"任务开始\",{\"1\":{\"658\":1}}],[\"任务启动时\",{\"1\":{\"658\":1}}],[\"任务监听器\",{\"1\":{\"587\":1,\"709\":1}}],[\"任务流向上的表达式\",{\"1\":{\"586\":1,\"708\":1}}],[\"任务的流转处理\",{\"0\":{\"586\":1,\"708\":1}}],[\"任务节点\",{\"1\":{\"579\":1,\"703\":1}}],[\"任务\",{\"0\":{\"1479\":1},\"1\":{\"234\":2,\"1238\":1}}],[\"任期\",{\"1\":{\"98\":1}}],[\"斐波那契数列\",{\"1\":{\"155\":1}}],[\"递归获取子元素id或父元素id\",{\"1\":{\"1452\":1}}],[\"递归获取所有菜单id\",{\"1\":{\"1035\":1}}],[\"递归构建订阅信息subscriber\",{\"1\":{\"527\":1}}],[\"递归构建配置类\",{\"1\":{\"491\":1}}],[\"递归将订阅对象subscriber信息一级一级节点向上传递\",{\"1\":{\"527\":1}}],[\"递归处理\",{\"1\":{\"488\":1}}],[\"递归调用处理\",{\"1\":{\"436\":1}}],[\"递归查询\",{\"0\":{\"256\":1},\"1\":{\"256\":1}}],[\"递归算法题\",{\"0\":{\"197\":1}}],[\"递归\",{\"1\":{\"155\":1,\"1036\":1}}],[\"递归函数\",{\"0\":{\"155\":1}}],[\"东京\",{\"1\":{\"154\":1}}],[\"罗马\",{\"1\":{\"154\":1}}],[\"巴黎\",{\"1\":{\"154\":1}}],[\"通讯关联\",{\"1\":{\"1479\":1}}],[\"通用响应泛型类objectresponse\",{\"1\":{\"1244\":1}}],[\"通用mapper接口commonmapper\",{\"1\":{\"1244\":1}}],[\"通信过程完成\",{\"1\":{\"1275\":1}}],[\"通信过程\",{\"0\":{\"1274\":1}}],[\"通信\",{\"0\":{\"999\":1,\"1088\":1,\"1174\":1,\"1481\":1}}],[\"通知记录\",{\"1\":{\"1312\":1}}],[\"通知订阅者信息\",{\"1\":{\"1312\":1}}],[\"通知订阅service的客户端\",{\"1\":{\"893\":1}}],[\"通知与订阅\",{\"0\":{\"1312\":1}}],[\"通知类型advice\",{\"1\":{\"382\":1}}],[\"通知\",{\"1\":{\"382\":1}}],[\"通配符\",{\"0\":{\"656\":1},\"1\":{\"282\":1,\"906\":1}}],[\"通常由一个或多个容器组成\",{\"1\":{\"1170\":1}}],[\"通常使用yaml或json格式\",{\"1\":{\"1163\":1}}],[\"通常在其中放入异步操作\",{\"1\":{\"1000\":1}}],[\"通常我们会把声明语句放到一个单独的文件\",{\"1\":{\"989\":1}}],[\"通常是yaml或json格式\",{\"1\":{\"1162\":1}}],[\"通常是用一个函数来进行封装\",{\"1\":{\"932\":1}}],[\"通常是字符串\",{\"1\":{\"159\":1}}],[\"通常用来表示将数据写入外部系统\",{\"1\":{\"789\":1}}],[\"通常用于重新执行刚修改的初始化文件\",{\"1\":{\"1118\":1,\"1186\":1}}],[\"通常用于消息通知操作\",{\"1\":{\"730\":1}}],[\"通常用于写操作\",{\"1\":{\"730\":1}}],[\"通常用于下次请求\",{\"1\":{\"203\":1}}],[\"通常用在\",{\"1\":{\"188\":1}}],[\"通道配置\",{\"0\":{\"1306\":1}}],[\"通道不关闭\",{\"1\":{\"190\":1}}],[\"通道可以设置缓冲区\",{\"1\":{\"190\":1}}],[\"通道可用于两个\",{\"1\":{\"190\":1}}],[\"通道缓冲区\",{\"1\":{\"190\":1}}],[\"通道在使用前必须先创建\",{\"1\":{\"190\":1}}],[\"通道是不带缓冲区的\",{\"1\":{\"190\":1}}],[\"通道\",{\"1\":{\"153\":1,\"190\":1}}],[\"通过分类获取页面label绑定信息\",{\"0\":{\"1616\":1}}],[\"通过字典编码获取字典子项\",{\"1\":{\"1609\":1}}],[\"通过用户id获取用户基础信息\",{\"1\":{\"1586\":1}}],[\"通过用户角色id查询菜单api信息\",{\"1\":{\"1586\":1}}],[\"通过id删除菜单\",{\"1\":{\"1586\":1}}],[\"通过invocable接口的invokefunction\",{\"1\":{\"16\":1}}],[\"通过平台标识查询前端路由信息\",{\"0\":{\"1583\":1},\"1\":{\"1586\":1}}],[\"通过平台标识查询菜单树\",{\"0\":{\"1582\":1},\"1\":{\"1586\":1}}],[\"通过拦截器headerinterceptor\",{\"1\":{\"1525\":1}}],[\"通过浏览器转发请求到idp\",{\"1\":{\"1491\":1}}],[\"通过authority\",{\"1\":{\"1452\":1}}],[\"通过共享pc无线网络\",{\"1\":{\"1432\":1}}],[\"通过以后\",{\"1\":{\"1425\":1}}],[\"通过在路径中携带附加信息\",{\"1\":{\"1408\":1}}],[\"通过在父标签或者本标签上声明th\",{\"1\":{\"983\":1}}],[\"通过子协议\",{\"1\":{\"1408\":1}}],[\"通过easyormconfigurationautoregisterfeature方法将eventlistener\",{\"1\":{\"1371\":1}}],[\"通过设备会话管理器找到设备对应的会话\",{\"1\":{\"1364\":1}}],[\"通过设备id查询本地的设备session会话\",{\"1\":{\"1342\":1}}],[\"通过设备网关属性管理器\",{\"1\":{\"1319\":1}}],[\"通过devicemessageconnector\",{\"1\":{\"1331\":1}}],[\"通过判断当前设备是否连接的当前服务器\",{\"1\":{\"1331\":1}}],[\"通过加载设备会话文件\",{\"1\":{\"1321\":1}}],[\"通过class获取bean\",{\"1\":{\"1247\":1}}],[\"通过commmit方法触发\",{\"1\":{\"998\":1}}],[\"通过compiledscript\",{\"1\":{\"16\":1}}],[\"通过pod\",{\"1\":{\"1161\":1}}],[\"通过pom文件里的activation属性\",{\"1\":{\"1079\":1}}],[\"通过复制pod\",{\"1\":{\"1161\":1}}],[\"通过文件的存在或缺失\",{\"1\":{\"1079\":1}}],[\"通过系统环境变量\",{\"1\":{\"1079\":1}}],[\"通过jdk版本\",{\"1\":{\"1079\":1}}],[\"通过记录对应的三个隐藏字段\",{\"1\":{\"1049\":1}}],[\"通过如下方式实现\",{\"1\":{\"1049\":1}}],[\"通过类加载器加载类路径下的所有类对象\",{\"1\":{\"1032\":1}}],[\"通过集成的swagger实现\",{\"1\":{\"1032\":1}}],[\"通过辅助函数mapactions将触发方法dispatch映射到组件的方法属性\",{\"1\":{\"998\":1}}],[\"通过辅助函数mapmutation将触发方法映射到组件的方法属性\",{\"1\":{\"998\":1}}],[\"通过辅助函数mapgetter将getter属性映射到组件的计算属性\",{\"1\":{\"998\":1}}],[\"通过this\",{\"1\":{\"998\":1}}],[\"通过spring上下文来实现\",{\"1\":{\"1032\":1}}],[\"通过spi的方式\",{\"1\":{\"734\":1}}],[\"通过sqlsessionfactory的opensession方法获取sqlsession\",{\"1\":{\"852\":1}}],[\"通过sqlsessionfactorybean的getobject方法得到sqlsessionfactory\",{\"1\":{\"852\":1}}],[\"通过starter引入jar包构建web环境\",{\"1\":{\"851\":1}}],[\"通过setcallback方法来设置拦截对象\",{\"1\":{\"386\":1}}],[\"通过setsuperclass方法来设置目标类\",{\"1\":{\"386\":1}}],[\"通过预装在计算机中的权威机构根证书对证书的身份进行校验\",{\"1\":{\"626\":1}}],[\"通过代理人及候选代理人查询代办任务\",{\"1\":{\"585\":1,\"707\":1}}],[\"通过上级给的subscription的request方法向上级请求信息\",{\"1\":{\"537\":1}}],[\"通过实现commandlinerunner的authclientrunner开启定时任务获取服务公钥和用户公钥存放在userauthconfig和serviceauthconfig中\",{\"1\":{\"471\":1}}],[\"通过执行commitsession\",{\"1\":{\"418\":1}}],[\"通过安全过滤器来处理\",{\"1\":{\"346\":1}}],[\"通过下标索引访问\",{\"1\":{\"304\":1}}],[\"通过关键字\",{\"1\":{\"271\":1}}],[\"通过对新生代内存划分为eden区\",{\"1\":{\"243\":1}}],[\"通过一系列被称为gcroot的根对象作为起始结点集来判段对象是否存活\",{\"1\":{\"243\":1}}],[\"通过水平分库和分表将数据按照一定规则分散存储到不同库和不同表中\",{\"1\":{\"221\":1}}],[\"通过业务标记biztag生成业务唯一id\",{\"1\":{\"217\":1}}],[\"通过自动装配\",{\"1\":{\"211\":1}}],[\"通过构建starter\",{\"1\":{\"211\":1}}],[\"通过\",{\"1\":{\"188\":1,\"190\":2,\"297\":1,\"320\":1,\"730\":1,\"982\":1}}],[\"通过内置函数\",{\"1\":{\"152\":1}}],[\"通过切片\",{\"1\":{\"152\":1}}],[\"拷贝\",{\"1\":{\"152\":1}}],[\"允许在大括号中嵌入任何表达式\",{\"1\":{\"968\":1}}],[\"允许在常规的beanfactorypostprocessor检测生效之前注册进一步的bean定义\",{\"1\":{\"900\":1}}],[\"允许的请求头字段列表\",{\"1\":{\"725\":1}}],[\"允许json\",{\"1\":{\"181\":1}}],[\"允许追加空切片\",{\"1\":{\"152\":1}}],[\"允许我们推迟到函数返回之前\",{\"1\":{\"138\":1}}],[\"时间戳\",{\"1\":{\"1479\":1}}],[\"时间\",{\"1\":{\"1463\":1}}],[\"时间错误导致\",{\"0\":{\"33\":1}}],[\"时区问题\",{\"1\":{\"1130\":1}}],[\"时序\",{\"1\":{\"1062\":1}}],[\"时序数据\",{\"1\":{\"1061\":1}}],[\"时序引擎\",{\"1\":{\"1038\":1}}],[\"时\",{\"1\":{\"179\":1,\"186\":1,\"354\":1}}],[\"时将表示从\",{\"1\":{\"152\":1}}],[\"时将表示一直到arr的最后一个元素\",{\"1\":{\"152\":1}}],[\"到设备会话的相应客户端\",{\"1\":{\"1331\":1}}],[\"到本地缓存\",{\"1\":{\"1317\":1}}],[\"到代理服务器则是为了确认他们已经成功收到了消息\",{\"1\":{\"1275\":1}}],[\"到处服务\",{\"1\":{\"652\":1}}],[\"到哪去了\",{\"1\":{\"290\":1}}],[\"到\",{\"1\":{\"152\":1,\"282\":1,\"780\":1}}],[\"直连设备\",{\"1\":{\"1269\":1}}],[\"直连交换机\",{\"1\":{\"906\":1}}],[\"直到有数据或超时返回\",{\"1\":{\"1434\":1}}],[\"直到javachannel有空间写入\",{\"1\":{\"1402\":1}}],[\"直到滚动到无法继续查询数据的时候结束\",{\"1\":{\"780\":1}}],[\"直到最后一个源完成\",{\"1\":{\"548\":1}}],[\"直到某个通信可以运行\",{\"1\":{\"131\":1}}],[\"直接解析返回\",{\"1\":{\"1345\":1}}],[\"直接连接\",{\"1\":{\"1265\":1}}],[\"直接使用\",{\"1\":{\"1109\":1}}],[\"直接使用java编码的形式\",{\"1\":{\"240\":1}}],[\"直接推送仓库可能网络地址有问题\",{\"1\":{\"1093\":1}}],[\"直接扩展全局变量\",{\"1\":{\"993\":1}}],[\"直接在xml中写update\",{\"1\":{\"902\":1}}],[\"直接在对象上调用方法\",{\"1\":{\"290\":1}}],[\"直接获取jdbc模版jdbctemplate\",{\"1\":{\"896\":1}}],[\"直接将完整的文本保存到倒排索引中\",{\"1\":{\"749\":1}}],[\"直接将项目目录作为一个添加到gopath中\",{\"1\":{\"168\":1}}],[\"直接忽略\",{\"1\":{\"730\":1}}],[\"直接定义一个bean\",{\"1\":{\"658\":1}}],[\"直接取出\",{\"1\":{\"377\":1}}],[\"直接累加\",{\"1\":{\"236\":1}}],[\"直接继承exception\",{\"1\":{\"230\":1}}],[\"直接初始化切片\",{\"1\":{\"152\":1}}],[\"信息架构\",{\"0\":{\"1239\":1}}],[\"信息来创建\",{\"1\":{\"1167\":1}}],[\"信息查看\",{\"0\":{\"775\":1}}],[\"信息\",{\"1\":{\"151\":2}}],[\"信任中心设置\",{\"1\":{\"45\":2}}],[\"信任中心\",{\"1\":{\"45\":1}}],[\"打包\",{\"1\":{\"1073\":1,\"1215\":2}}],[\"打成jar包\",{\"1\":{\"564\":1}}],[\"打印日志\",{\"1\":{\"1450\":1}}],[\"打印dump日志\",{\"1\":{\"1230\":1}}],[\"打印消费异常的消息和异常信息\",{\"1\":{\"801\":1}}],[\"打印证书请求的内容\",{\"1\":{\"623\":1}}],[\"打印证书内容\",{\"1\":{\"623\":1}}],[\"打印请求信息\",{\"1\":{\"421\":1}}],[\"打印\",{\"0\":{\"274\":1},\"1\":{\"151\":2,\"623\":1}}],[\"打开方式\",{\"1\":{\"1579\":1,\"1580\":1,\"1613\":1}}],[\"打开网页\",{\"1\":{\"1007\":1}}],[\"打开文件\",{\"1\":{\"103\":1}}],[\"打开file下的setting下的maven下的ignorefile\",{\"1\":{\"44\":1}}],[\"打开\",{\"1\":{\"26\":1}}],[\"教程\",{\"1\":{\"151\":1}}],[\"描述包含的对象\",{\"1\":{\"1486\":4}}],[\"描述触发规则\",{\"1\":{\"1311\":1}}],[\"描述\",{\"1\":{\"151\":2,\"1531\":3,\"1532\":2,\"1533\":2,\"1534\":3,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":1,\"1583\":2,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":2,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":2,\"1641\":1}}],[\"访问范围\",{\"1\":{\"1570\":1}}],[\"访问令牌时间\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"访问资源\",{\"1\":{\"1491\":1}}],[\"访问\",{\"1\":{\"1458\":1}}],[\"访问者模式\",{\"1\":{\"1254\":1}}],[\"访问被拒绝处理\",{\"1\":{\"1031\":1}}],[\"访问的网址\",{\"1\":{\"652\":1}}],[\"访问器\",{\"1\":{\"290\":1}}],[\"访问结构体成员\",{\"0\":{\"149\":1}}],[\"访问指向指针的指针变量值需要使用两个\",{\"1\":{\"146\":1}}],[\"访问指针变量中指向地址的值\",{\"1\":{\"143\":1}}],[\"也要访问用户中心\",{\"1\":{\"1643\":1}}],[\"也处理io事件\",{\"1\":{\"1449\":1}}],[\"也称为\",{\"1\":{\"1170\":1}}],[\"也不是设备文件\",{\"1\":{\"1227\":1}}],[\"也不是目录就直接返回\",{\"1\":{\"1032\":1}}],[\"也不会被扫描\",{\"1\":{\"31\":1}}],[\"也会输出到\",{\"1\":{\"996\":1}}],[\"也就是例子中的文本节点\",{\"1\":{\"970\":1}}],[\"也就是切换数据源操作放在controller层\",{\"1\":{\"632\":1}}],[\"也就是说与batch有相同的语义\",{\"1\":{\"798\":1}}],[\"也就是说\",{\"1\":{\"632\":1,\"1276\":1}}],[\"也就是说切换数据源要在开启事务之前执行\",{\"1\":{\"632\":1}}],[\"也就是\",{\"1\":{\"298\":1,\"318\":1}}],[\"也是一个容器\",{\"1\":{\"675\":1}}],[\"也是\",{\"1\":{\"286\":1}}],[\"也提供了一个释放内存的函数\",{\"1\":{\"264\":1}}],[\"也可不设默认值\",{\"1\":{\"1456\":1}}],[\"也可初始化时传入\",{\"1\":{\"1446\":1}}],[\"也可能没连上\",{\"1\":{\"1398\":1}}],[\"也可能在客户端和服务器之间跨越多个连续的网络连接\",{\"1\":{\"1272\":1}}],[\"也可能在首次处理请求时\",{\"1\":{\"456\":1}}],[\"也可直接配置自动安装\",{\"1\":{\"1130\":1}}],[\"也可拆分写\",{\"1\":{\"1121\":1}}],[\"也可用于在一个文件中一次性声明多个模块的类型\",{\"1\":{\"994\":1}}],[\"也可用在mapper方法上\",{\"1\":{\"911\":1}}],[\"也可join代替in\",{\"1\":{\"716\":1}}],[\"也可通过request发起可处理需求\",{\"1\":{\"530\":1}}],[\"也可使用session\",{\"1\":{\"327\":1}}],[\"也可使用具体绑定的方法\",{\"1\":{\"181\":1}}],[\"也可以是物理分区\",{\"1\":{\"1197\":1}}],[\"也可以通过指定注解来匹配\",{\"1\":{\"376\":1}}],[\"也可以匹配\",{\"1\":{\"282\":1}}],[\"也可以带一个返回值\",{\"1\":{\"280\":1}}],[\"也可以指定容量\",{\"1\":{\"152\":1}}],[\"也可以简写为\",{\"1\":{\"152\":1}}],[\"也可以使用\",{\"1\":{\"148\":1,\"154\":1,\"993\":1}}],[\"地址域\",{\"1\":{\"1279\":1}}],[\"地址空间\",{\"1\":{\"1170\":1}}],[\"地址和网络设备\",{\"1\":{\"1170\":1}}],[\"地址都相同\",{\"0\":{\"1166\":1}}],[\"地址缓存\",{\"1\":{\"730\":1}}],[\"地址\",{\"1\":{\"146\":2,\"200\":1,\"749\":1,\"1129\":1,\"1535\":1}}],[\"前面几个都是为创建逻辑卷做的准备\",{\"1\":{\"1197\":1}}],[\"前后端分离端\",{\"1\":{\"720\":1}}],[\"前后端分离的项目\",{\"1\":{\"652\":1}}],[\"前后端分离的xhr请求不可联合使用\",{\"1\":{\"46\":1}}],[\"前身是catalina\",{\"1\":{\"674\":1}}],[\"前只能设置具体的数字\",{\"1\":{\"656\":1}}],[\"前加上数字\",{\"1\":{\"656\":1}}],[\"前一个任务节点处理完成\",{\"1\":{\"586\":1,\"708\":1}}],[\"前端密码解密\",{\"1\":{\"1513\":1}}],[\"前端处理\",{\"0\":{\"1507\":1}}],[\"前端\",{\"0\":{\"1510\":1,\"1665\":1},\"1\":{\"1498\":1}}],[\"前端取到重定向url\",{\"1\":{\"325\":1}}],[\"前端vue中维护组件共享的变量\",{\"1\":{\"224\":1}}],[\"前缀\",{\"1\":{\"143\":1}}],[\"号时\",{\"1\":{\"1187\":1}}],[\"号\",{\"1\":{\"143\":1,\"146\":1}}],[\"号用于指定变量是作为一个指针\",{\"1\":{\"142\":1}}],[\"用git\",{\"1\":{\"1151\":1}}],[\"用命令git\",{\"1\":{\"1151\":1}}],[\"用来在构建镜像过程中设置环境变量\",{\"1\":{\"1105\":1}}],[\"用来告诉编译器这是一个模块的声明文件\",{\"1\":{\"993\":1}}],[\"用来导出一个拥有子属性的对象\",{\"1\":{\"992\":1}}],[\"用来分开多个值\",{\"1\":{\"656\":1}}],[\"用接口定义函数的类型\",{\"1\":{\"986\":1}}],[\"用在方法上\",{\"1\":{\"372\":1}}],[\"用在类上需启用才能注册到容器中\",{\"1\":{\"372\":1}}],[\"用在请求参数中\",{\"1\":{\"345\":1}}],[\"用lambda表达式配置userdetailservice\",{\"1\":{\"348\":1}}],[\"用户增加\",{\"1\":{\"1586\":1}}],[\"用户头像uri\",{\"1\":{\"1548\":1,\"1549\":1,\"1554\":1}}],[\"用户是否锁定\",{\"1\":{\"1548\":1,\"1549\":1}}],[\"用户是系统操作者\",{\"1\":{\"1503\":1}}],[\"用户姓名\",{\"1\":{\"1548\":1,\"1549\":1,\"1554\":1}}],[\"用户绑定角色\",{\"1\":{\"1546\":1}}],[\"用户密码\",{\"1\":{\"1544\":1}}],[\"用户密码解密密钥\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"用户退出\",{\"0\":{\"1533\":1}}],[\"用户登出\",{\"1\":{\"1529\":1}}],[\"用户登录根据角色获取对应的角色权限\",{\"1\":{\"1495\":1}}],[\"用户认证\",{\"0\":{\"1518\":1}}],[\"用户认证后\",{\"1\":{\"1516\":1}}],[\"用户系统服务\",{\"0\":{\"1515\":1,\"1524\":1}}],[\"用户点击具体的应用\",{\"1\":{\"1506\":1}}],[\"用户在浏览器打开的后台登录地址\",{\"1\":{\"1506\":1}}],[\"用户在登录成功\",{\"1\":{\"722\":1}}],[\"用户面板的入口地址需要配在用户中心管理平台的redirect\",{\"1\":{\"1506\":1}}],[\"用户面板\",{\"0\":{\"1506\":1}}],[\"用户管理\",{\"0\":{\"1545\":1},\"1\":{\"1502\":1,\"1503\":1,\"1524\":1,\"1582\":1}}],[\"用户有新建租户的权限\",{\"1\":{\"1495\":1}}],[\"用户的角色id\",{\"1\":{\"1494\":1}}],[\"用户可以直接spring进行集成\",{\"1\":{\"1479\":1}}],[\"用户表\",{\"1\":{\"1452\":1}}],[\"用户家目录\",{\"1\":{\"1177\":1}}],[\"用户标识号\",{\"1\":{\"1177\":1}}],[\"用户名\",{\"1\":{\"1177\":1}}],[\"用户名密码\",{\"1\":{\"850\":1}}],[\"用户名密码认证后\",{\"1\":{\"343\":1}}],[\"用户信息增删改查\",{\"1\":{\"1546\":1}}],[\"用户信息写入请求头\",{\"0\":{\"1523\":1}}],[\"用户信息\",{\"1\":{\"1177\":1}}],[\"用户信息在\",{\"1\":{\"1177\":1}}],[\"用户信息存放到redis\",{\"1\":{\"724\":1}}],[\"用户\",{\"0\":{\"1177\":1}}],[\"用户应该始终使用控制器来创建\",{\"1\":{\"1167\":1}}],[\"用户通过kubernetes\",{\"1\":{\"1162\":1}}],[\"用户角色绑定\",{\"0\":{\"1555\":1},\"1\":{\"1586\":1,\"1635\":1}}],[\"用户角色\",{\"1\":{\"1030\":1}}],[\"用户id获取关联平台\",{\"1\":{\"1568\":1}}],[\"用户id\",{\"1\":{\"1028\":1,\"1532\":1,\"1552\":1,\"1555\":1}}],[\"用户中心租户间共享问题\",{\"0\":{\"1643\":1}}],[\"用户中心问题\",{\"0\":{\"1642\":1}}],[\"用户中心管理员\",{\"1\":{\"1564\":1,\"1565\":1,\"1603\":1}}],[\"用户中心技术文档\",{\"0\":{\"1497\":1}}],[\"用户中心进行服务调用获取角色对应api\",{\"1\":{\"1029\":1}}],[\"用户中心\",{\"0\":{\"1027\":1,\"1490\":1,\"1677\":1},\"1\":{\"1564\":1,\"1565\":1,\"1572\":1,\"1574\":1}}],[\"用户及队列信息的维护\",{\"1\":{\"1015\":1}}],[\"用户静默授权\",{\"1\":{\"1007\":1}}],[\"用户反馈没问题时\",{\"1\":{\"730\":1}}],[\"用户证书\",{\"1\":{\"626\":1}}],[\"用户每访问一次会在accesslog中记录一次访问记录\",{\"1\":{\"205\":1}}],[\"用线程池做到线程隔离来达到限流\",{\"1\":{\"213\":1}}],[\"用\",{\"1\":{\"179\":2,\"656\":1,\"1220\":1}}],[\"用包名引入方法使用\",{\"1\":{\"170\":1}}],[\"用于身份认证和单点登录\",{\"1\":{\"1491\":1}}],[\"用于身份校验\",{\"1\":{\"1491\":1}}],[\"用于将自定义的handler加入到channel的pipeline中\",{\"1\":{\"1447\":1}}],[\"用于将host等容器信息注册到mapper中\",{\"1\":{\"459\":1}}],[\"用于传到eventloop中\",{\"1\":{\"1446\":1}}],[\"用于注册channel\",{\"1\":{\"1445\":1}}],[\"用于管理连接远程端点的连接\",{\"1\":{\"1382\":1}}],[\"用于构造sql语句操作数据库\",{\"1\":{\"1292\":1}}],[\"用于构建configurationclass\",{\"1\":{\"487\":1}}],[\"用于编辑方法字符串为一个method对象\",{\"1\":{\"1290\":1}}],[\"用于建立软链接\",{\"1\":{\"1184\":1}}],[\"用于暂缓内存数据\",{\"1\":{\"1179\":1}}],[\"用于标识该端口的用途\",{\"1\":{\"1171\":1}}],[\"用于标记实体类为文档对象\",{\"1\":{\"748\":1}}],[\"用于储存用户的个性化设置\",{\"1\":{\"1118\":1}}],[\"用于数据保存和持久化工作\",{\"1\":{\"1106\":1}}],[\"用于maven打成可依赖jar包后的再次打包repackage\",{\"1\":{\"1077\":1}}],[\"用于myisam引擎\",{\"1\":{\"1047\":1}}],[\"用于innodb引擎\",{\"1\":{\"1047\":1}}],[\"用于触发mutations事件\",{\"1\":{\"998\":1}}],[\"用于改变store中state的属性状态\",{\"1\":{\"998\":1}}],[\"用于描述一个构造函数应该具有的结构\",{\"1\":{\"991\":1}}],[\"用于显示web\",{\"1\":{\"982\":1}}],[\"用于读取配置文件的信息\",{\"1\":{\"851\":1}}],[\"用于连接目标数据库\",{\"1\":{\"850\":1}}],[\"用于分区的分配\",{\"1\":{\"816\":1}}],[\"用于多线程消费消息\",{\"1\":{\"804\":1}}],[\"用于记录每次滚动的结果\",{\"1\":{\"780\":1}}],[\"用于筛选数据\",{\"1\":{\"749\":1}}],[\"用于发布相应部署事件\",{\"1\":{\"742\":1}}],[\"用于rpc请求调用\",{\"1\":{\"741\":1}}],[\"用于rpc的服务\",{\"1\":{\"739\":1}}],[\"用于加载injector类型的extension类\",{\"1\":{\"736\":1}}],[\"用于运行servlet程序\",{\"1\":{\"674\":1}}],[\"用于递增触发\",{\"1\":{\"656\":1}}],[\"用于保存一些身份信息\",{\"1\":{\"652\":1}}],[\"用于保存上一次被拒绝的请求\",{\"1\":{\"348\":1}}],[\"用于订阅者向发布者请求元素\",{\"1\":{\"529\":1}}],[\"用于自动装配bean到容器中\",{\"1\":{\"493\":1}}],[\"用于自定义一些命令\",{\"1\":{\"164\":1}}],[\"用于从配置类推导出更多的beandefinition\",{\"1\":{\"486\":1}}],[\"用于项目启动处理配置类\",{\"1\":{\"486\":1}}],[\"用于bean工厂初始化单例对象集\",{\"1\":{\"483\":1}}],[\"用于创建线程与eventloop绑定\",{\"1\":{\"1445\":1}}],[\"用于创建任务执行器\",{\"1\":{\"1335\":1}}],[\"用于创建实例对象\",{\"1\":{\"991\":1}}],[\"用于创建bean对象\",{\"1\":{\"479\":1}}],[\"用于创建授权和获取token相关的过滤器\",{\"1\":{\"338\":1}}],[\"用于解析请求路径\",{\"1\":{\"460\":1}}],[\"用于在集群内部进行通信\",{\"1\":{\"1161\":1}}],[\"用于在初始化注入相关信息environment\",{\"1\":{\"442\":1}}],[\"用于在客户端存放一些信息\",{\"1\":{\"203\":1}}],[\"用于开启和提交事务\",{\"1\":{\"434\":1}}],[\"用于开启轻量级的routine协程\",{\"1\":{\"189\":1}}],[\"用于事务的开启和提交\",{\"1\":{\"429\":1}}],[\"用于请求中注册自定义参数的解析\",{\"1\":{\"375\":1}}],[\"用于捕获controller中抛出的不同类型的异常\",{\"1\":{\"375\":1}}],[\"用于securitycontextpersistencefilter获取已被认证主体\",{\"1\":{\"346\":1,\"348\":1}}],[\"用于过滤器中对主体进行认证\",{\"1\":{\"333\":1}}],[\"用于循环\",{\"1\":{\"277\":1}}],[\"用于老年代\",{\"1\":{\"243\":1}}],[\"用于新生代\",{\"1\":{\"243\":1}}],[\"用于存放键值对\",{\"1\":{\"198\":1}}],[\"用于指定通道的方向\",{\"1\":{\"190\":1}}],[\"用于线程间通信\",{\"1\":{\"190\":1}}],[\"用于取得\",{\"1\":{\"160\":1}}],[\"用于引用计算机内存地址\",{\"1\":{\"141\":1}}],[\"用法\",{\"1\":{\"129\":1,\"139\":1}}],[\"输出端\",{\"1\":{\"789\":1}}],[\"输出站点名称\",{\"1\":{\"652\":1}}],[\"输出初始化参数\",{\"1\":{\"652\":1}}],[\"输出目录\",{\"1\":{\"173\":1}}],[\"输出结果为\",{\"1\":{\"158\":1}}],[\"输出结果如下\",{\"1\":{\"157\":1}}],[\"输出每个数组元素的值\",{\"1\":{\"140\":1}}],[\"输出数组元素\",{\"1\":{\"140\":1}}],[\"输入searchhit\",{\"1\":{\"780\":1}}],[\"输入\",{\"1\":{\"17\":5,\"1187\":1}}],[\"代表传入的第n个参数\",{\"1\":{\"1220\":1}}],[\"代表传入的第1个参数\",{\"1\":{\"1220\":1}}],[\"代表执行的文件名\",{\"1\":{\"1220\":1}}],[\"代表\",{\"1\":{\"971\":1}}],[\"代表该分支可以匹配\",{\"1\":{\"282\":1}}],[\"代码\",{\"1\":{\"935\":3}}],[\"代码块\",{\"1\":{\"749\":1}}],[\"代码动态构建网页输出\",{\"1\":{\"682\":1}}],[\"代码在任何时刻都是可部署的\",{\"1\":{\"562\":1}}],[\"代码就进⼊⽣产阶段\",{\"1\":{\"562\":1}}],[\"代码如下\",{\"1\":{\"139\":1}}],[\"代理服务器发送\",{\"1\":{\"1275\":1}}],[\"代理服务器\",{\"1\":{\"1275\":7}}],[\"代理模式\",{\"1\":{\"1254\":1}}],[\"代理对象调用处理器\",{\"1\":{\"900\":1}}],[\"代理对象\",{\"1\":{\"849\":1}}],[\"代理对象不变\",{\"1\":{\"476\":1}}],[\"代理类生成\",{\"0\":{\"732\":1}}],[\"代理工厂的createaopproxy\",{\"1\":{\"435\":1}}],[\"代理工具类\",{\"1\":{\"383\":1}}],[\"代理\",{\"0\":{\"384\":1}}],[\"代替子设备接入物联网平台\",{\"1\":{\"1269\":1}}],[\"代替gin\",{\"1\":{\"176\":1}}],[\"代替数组的长度\",{\"1\":{\"140\":1}}],[\"执行eventloop中的run方法\",{\"1\":{\"1445\":1}}],[\"执行1次\",{\"1\":{\"1311\":1}}],[\"执行动作\",{\"1\":{\"1311\":2}}],[\"执行处理器方法\",{\"1\":{\"1259\":1}}],[\"执行拦截器的prehandle方法\",{\"1\":{\"1259\":1}}],[\"执行拦截器方法\",{\"1\":{\"852\":1}}],[\"执行上架操作\",{\"1\":{\"1252\":1}}],[\"执行partprobe\",{\"1\":{\"1197\":1}}],[\"执行postproceedafterinitialization方法时生成代理对象\",{\"1\":{\"383\":2}}],[\"执行shell命令\",{\"1\":{\"1108\":1}}],[\"执行subscribereturn方法\",{\"1\":{\"535\":1}}],[\"执行subscribe流程\",{\"0\":{\"527\":1}}],[\"执行流程\",{\"0\":{\"1443\":1}}],[\"执行流程实例中的节点任务\",{\"1\":{\"585\":1,\"707\":1}}],[\"执行流水线节点\",{\"1\":{\"1084\":1}}],[\"执行代码\",{\"1\":{\"935\":1}}],[\"执行\",{\"1\":{\"919\":1}}],[\"执行defaultmqpushconsumer的start方法\",{\"1\":{\"919\":1}}],[\"执行docker\",{\"1\":{\"218\":4}}],[\"执行mainloop\",{\"1\":{\"842\":1}}],[\"执行定时任务\",{\"1\":{\"657\":1}}],[\"执行必需的初始化\",{\"1\":{\"652\":1}}],[\"执行脚本并获取结果\",{\"1\":{\"648\":1}}],[\"执行脚本\",{\"1\":{\"648\":1}}],[\"执行监听器\",{\"1\":{\"587\":1,\"709\":1}}],[\"执行具体任务操作\",{\"1\":{\"585\":1,\"707\":1}}],[\"执行lambda处理方法返回新的mono对象\",{\"1\":{\"537\":2}}],[\"执行订阅者的处理方法\",{\"1\":{\"526\":1}}],[\"执行任务\",{\"1\":{\"476\":1}}],[\"执行过滤器方法\",{\"1\":{\"471\":1}}],[\"执行生命周期处理器defaultlifecycleprocessor的onrefresh方法\",{\"1\":{\"400\":1}}],[\"执行beanfactorypostprocessor的postprocessbeanfactory和beandefinitionregistrypostprocessor的postprocessbeandefinitionregistry的方法\",{\"1\":{\"399\":1}}],[\"执行到安全点时\",{\"1\":{\"243\":1}}],[\"执行以上程序\",{\"1\":{\"158\":1}}],[\"执行结果为\",{\"1\":{\"139\":1}}],[\"执行相关过滤器\",{\"1\":{\"108\":1}}],[\"圆的面积\",{\"1\":{\"139\":2}}],[\"接着再输入\",{\"1\":{\"1187\":1}}],[\"接受两个参数\",{\"1\":{\"379\":1}}],[\"接受者可以是命名类型或者结构体类型的一个值或者是一个指针\",{\"1\":{\"139\":1}}],[\"接收\",{\"1\":{\"596\":2}}],[\"接收方在有值可以接收之前会一直阻塞\",{\"1\":{\"190\":1}}],[\"接收方需要接受数据\",{\"1\":{\"190\":1}}],[\"接收数据\",{\"1\":{\"190\":1}}],[\"接收一个做任意类型的参数\",{\"1\":{\"159\":1}}],[\"接口问题\",{\"0\":{\"1644\":1}}],[\"接口地址\",{\"1\":{\"1590\":1,\"1591\":1}}],[\"接口名称\",{\"1\":{\"1590\":1,\"1591\":1,\"1592\":1}}],[\"接口管理表\",{\"1\":{\"1644\":1}}],[\"接口管理\",{\"1\":{\"1583\":1}}],[\"接口信息\",{\"0\":{\"1530\":1,\"1538\":1,\"1547\":1,\"1558\":1,\"1569\":1,\"1578\":1,\"1589\":1,\"1600\":1,\"1610\":1,\"1620\":1,\"1627\":1,\"1634\":1,\"1640\":1}}],[\"接口功能\",{\"0\":{\"1529\":1,\"1537\":1,\"1546\":1,\"1557\":1,\"1568\":1,\"1577\":1,\"1588\":1,\"1599\":1,\"1609\":1,\"1619\":1,\"1626\":1,\"1633\":1,\"1639\":1}}],[\"接口初始化失败\",{\"1\":{\"1032\":1}}],[\"接口方式\",{\"0\":{\"588\":1,\"710\":1}}],[\"接口对象数组\",{\"1\":{\"385\":1}}],[\"接口里面有一个方法call\",{\"1\":{\"157\":1}}],[\"接口\",{\"0\":{\"157\":1,\"392\":1,\"1341\":1,\"1355\":1},\"1\":{\"158\":1,\"386\":1,\"1482\":2}}],[\"接口引用指向函数对象\",{\"1\":{\"139\":1}}],[\"接口类型的值\",{\"1\":{\"159\":1}}],[\"接口类型来生成错误信息\",{\"1\":{\"158\":1}}],[\"接口类型\",{\"1\":{\"121\":1}}],[\"创建用户角色\",{\"1\":{\"1503\":1}}],[\"创建应用信息\",{\"1\":{\"1503\":1}}],[\"创建租户后\",{\"1\":{\"1452\":1}}],[\"创建服务端启动引导\",{\"1\":{\"1450\":1}}],[\"创建服务器实例\",{\"1\":{\"453\":1}}],[\"创建多个nioeventloop\",{\"1\":{\"1446\":1}}],[\"创建多个对象\",{\"1\":{\"1257\":1}}],[\"创建线程任务执行\",{\"1\":{\"1445\":1}}],[\"创建线程任务\",{\"1\":{\"1445\":1}}],[\"创建线程任务socketprocessor交给线程池执行\",{\"1\":{\"685\":1}}],[\"创建设备操作器\",{\"1\":{\"1342\":1}}],[\"创建并启动设备网关\",{\"1\":{\"1338\":1}}],[\"创建并切换分支\",{\"1\":{\"1148\":2}}],[\"创建执行上下文\",{\"1\":{\"1335\":1}}],[\"创建执行器对象\",{\"1\":{\"852\":1}}],[\"创建devicesession并添加到session管理器中\",{\"1\":{\"1328\":1}}],[\"创建对应类型配置\",{\"1\":{\"1319\":1}}],[\"创建型模式\",{\"1\":{\"1254\":1}}],[\"创建只可函数体中使用的局部变量\",{\"1\":{\"1219\":1}}],[\"创建普通变量\",{\"1\":{\"1219\":1}}],[\"创建逻辑卷的大小只要不超过vg剩余空间就可以\",{\"1\":{\"1197\":1}}],[\"创建软链接\",{\"1\":{\"1184\":1}}],[\"创建时\",{\"1\":{\"1170\":1}}],[\"创建时间\",{\"1\":{\"652\":1,\"1042\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"创建网络\",{\"1\":{\"1099\":1}}],[\"创建容器链接\",{\"1\":{\"1090\":1}}],[\"创建容器会创建evth\",{\"1\":{\"1088\":1}}],[\"创建人\",{\"1\":{\"1042\":1}}],[\"创建instance实例\",{\"1\":{\"893\":1}}],[\"创建事务对象\",{\"1\":{\"852\":1}}],[\"创建classpathmapperscanner\",{\"1\":{\"859\":1}}],[\"创建clientstate\",{\"1\":{\"827\":1}}],[\"创建connectbg对象\",{\"1\":{\"828\":1}}],[\"创建callback回调\",{\"1\":{\"827\":1}}],[\"创建tokenstore\",{\"1\":{\"827\":1}}],[\"创建token\",{\"1\":{\"826\":1}}],[\"创建tomcat实例\",{\"1\":{\"450\":1}}],[\"创建索引添加配置\",{\"0\":{\"779\":1}}],[\"创建索引\",{\"0\":{\"773\":1},\"1\":{\"774\":1}}],[\"创建applicationmodel\",{\"1\":{\"738\":1}}],[\"创建http11processor处理socketwrapper\",{\"1\":{\"690\":1}}],[\"创建httpsecurity时会传入authenticationmanagerbuilder\",{\"1\":{\"333\":1}}],[\"创建配置类\",{\"1\":{\"658\":1}}],[\"创建第一个代办任务\",{\"1\":{\"585\":1,\"707\":1}}],[\"创建下一个代办任务\",{\"1\":{\"583\":1}}],[\"创建下一个过滤器链对象\",{\"1\":{\"471\":1}}],[\"创建代办任务\",{\"1\":{\"583\":1}}],[\"创建代理工厂proxyfactory\",{\"1\":{\"435\":1}}],[\"创建新的mono对象\",{\"1\":{\"537\":1}}],[\"创建新的函数\",{\"1\":{\"139\":1}}],[\"创建socketchannel并注册到childgroup的eventloop中\",{\"1\":{\"1450\":1}}],[\"创建socket\",{\"1\":{\"840\":1}}],[\"创建socket套接字对象\",{\"1\":{\"215\":1}}],[\"创建serverwebchang网关上下文\",{\"1\":{\"1262\":1}}],[\"创建serverwebchange上下文\",{\"1\":{\"473\":1}}],[\"创建servletrequest\",{\"1\":{\"692\":1}}],[\"创建单例对象\",{\"1\":{\"439\":1}}],[\"创建单线程调度器\",{\"1\":{\"192\":1}}],[\"创建enhancer\",{\"1\":{\"436\":1}}],[\"创建enhancer实例\",{\"1\":{\"386\":1}}],[\"创建和销毁使用redis实现\",{\"1\":{\"414\":1}}],[\"创建web请求\",{\"1\":{\"403\":1}}],[\"创建web服务器\",{\"1\":{\"397\":1}}],[\"创建一个\",{\"1\":{\"1407\":1}}],[\"创建一个网络命名空间\",{\"1\":{\"1170\":1}}],[\"创建一个被称为react元素的对象\",{\"1\":{\"969\":1}}],[\"创建一个字符串微调编辑器\",{\"1\":{\"379\":1}}],[\"创建一个新的结构体\",{\"1\":{\"148\":1}}],[\"创建一个新的环境\",{\"1\":{\"96\":1}}],[\"创建上下文类\",{\"1\":{\"602\":1}}],[\"创建上下文\",{\"1\":{\"346\":1}}],[\"创建匿名用户作为认证主体\",{\"1\":{\"346\":1}}],[\"创建安全过滤器链\",{\"1\":{\"334\":1}}],[\"创建默认authenticationmanager\",{\"1\":{\"333\":1}}],[\"创建filterchainproxy过滤器\",{\"1\":{\"332\":1}}],[\"创建固定长度的数组\",{\"1\":{\"302\":1}}],[\"创建\",{\"1\":{\"271\":1,\"302\":1,\"801\":2,\"1148\":1}}],[\"创建的字符串对象\",{\"1\":{\"267\":1}}],[\"创建定时缓存\",{\"1\":{\"216\":1}}],[\"创建在\",{\"1\":{\"179\":1}}],[\"创建集合\",{\"1\":{\"154\":1}}],[\"创建切片\",{\"1\":{\"152\":1}}],[\"该用户要绑定用户中心的聚合角色和客户端角色\",{\"1\":{\"1643\":1}}],[\"该功能主要完成系统用户配置\",{\"1\":{\"1503\":1}}],[\"该标签与服务器的订阅相匹配\",{\"1\":{\"1272\":1}}],[\"该容器还能以服务名称作为hostname被其他容器访问\",{\"1\":{\"1117\":1}}],[\"该参数可以是源容器的名称或id\",{\"1\":{\"1111\":1}}],[\"该方法必须要重写\",{\"1\":{\"632\":1}}],[\"该值会影响性能\",{\"1\":{\"596\":2}}],[\"该类继承abstractautoproxycreator\",{\"1\":{\"432\":1}}],[\"该类型的闭包会拿走被捕获变量的所有权\",{\"1\":{\"318\":1}}],[\"该类型会被复制进\",{\"1\":{\"310\":1}}],[\"该过滤器会拦截所有的http\",{\"1\":{\"416\":1}}],[\"该注解已废弃\",{\"1\":{\"415\":1}}],[\"该特征对象是通过\",{\"1\":{\"298\":2}}],[\"该\",{\"1\":{\"139\":1}}],[\"该函数的目的是在闭包中递增\",{\"1\":{\"139\":1}}],[\"该引用被子类实例赋值也不行\",{\"1\":{\"24\":1}}],[\"匿名函数\",{\"1\":{\"139\":1}}],[\"闭包捕获变量有三种途径\",{\"1\":{\"318\":1}}],[\"闭包赋值给变量\",{\"1\":{\"315\":1}}],[\"闭包中最后一行表达式返回的值\",{\"1\":{\"315\":1}}],[\"闭包是一种匿名函数\",{\"1\":{\"315\":1}}],[\"闭包\",{\"0\":{\"315\":1},\"1\":{\"139\":1,\"604\":1}}],[\"作为可选参数\",{\"1\":{\"1456\":1}}],[\"作为一个字符串输出所有参数\",{\"1\":{\"1221\":1}}],[\"作为入口点\",{\"1\":{\"1207\":1}}],[\"作为资源服务器\",{\"1\":{\"1031\":1}}],[\"作为http请求的上下文\",{\"1\":{\"602\":1}}],[\"作为关键字\",{\"1\":{\"291\":1}}],[\"作为参数调用jspservlet的doget或dopost方法\",{\"1\":{\"679\":1}}],[\"作为参数\",{\"1\":{\"139\":1}}],[\"作用相同\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"作用范围\",{\"0\":{\"376\":1}}],[\"作用域为已声明标识符所表示的常量\",{\"1\":{\"140\":1}}],[\"作用域\",{\"0\":{\"140\":1}}],[\"作用就是在编译时扫描\",{\"1\":{\"31\":1}}],[\"默认租户用户拥有的用户中心权限\",{\"1\":{\"1564\":1,\"1603\":1}}],[\"默认租户管理员\",{\"1\":{\"1561\":1,\"1564\":1,\"1603\":1}}],[\"默认数量是cpu核心数的两倍\",{\"1\":{\"1446\":1}}],[\"默认数据源\",{\"1\":{\"632\":1}}],[\"默认false\",{\"1\":{\"1445\":1}}],[\"默认从\",{\"1\":{\"1201\":1}}],[\"默认4m大小\",{\"1\":{\"1197\":1}}],[\"默认显示最后\",{\"1\":{\"1187\":1}}],[\"默认创建dns\",{\"1\":{\"1091\":1}}],[\"默认创建spring事务工厂\",{\"1\":{\"852\":1}}],[\"默认网络管理器\",{\"0\":{\"1320\":1}}],[\"默认网络\",{\"0\":{\"1090\":1}}],[\"默认导出\",{\"1\":{\"992\":1}}],[\"默认消费方式\",{\"1\":{\"915\":1}}],[\"默认消费者组\",{\"1\":{\"802\":1}}],[\"默认异步刷盘\",{\"1\":{\"915\":1}}],[\"默认策略\",{\"1\":{\"902\":1}}],[\"默认500\",{\"1\":{\"798\":1}}],[\"默认5s\",{\"1\":{\"798\":2}}],[\"默认结合标准分析器进行词命中\",{\"1\":{\"749\":1}}],[\"默认结合\",{\"1\":{\"749\":1}}],[\"默认重试2次\",{\"1\":{\"730\":1}}],[\"默认为tcp\",{\"1\":{\"1171\":1}}],[\"默认为\",{\"1\":{\"730\":1,\"801\":1,\"802\":1}}],[\"默认为北京时间\",{\"1\":{\"649\":1}}],[\"默认128mb\",{\"1\":{\"717\":1}}],[\"默认root文件夹\",{\"1\":{\"678\":1}}],[\"默认required\",{\"1\":{\"202\":1}}],[\"默认使用spring自带的hikari数据库连接池\",{\"1\":{\"632\":1}}],[\"默认jks\",{\"1\":{\"623\":1}}],[\"默认在user\",{\"1\":{\"623\":1}}],[\"默认值为50\",{\"1\":{\"751\":1}}],[\"默认值为256\",{\"1\":{\"596\":2}}],[\"默认值\",{\"1\":{\"730\":2}}],[\"默认值1000\",{\"1\":{\"730\":1}}],[\"默认值传递\",{\"1\":{\"139\":1}}],[\"默认的提交模式\",{\"1\":{\"798\":1}}],[\"默认的\",{\"1\":{\"596\":2}}],[\"默认路径\",{\"1\":{\"594\":1}}],[\"默认查询位置default\",{\"1\":{\"593\":1}}],[\"默认web过滤器链\",{\"1\":{\"473\":1}}],[\"默认什么都不写\",{\"1\":{\"376\":1}}],[\"默认全部\",{\"1\":{\"375\":1}}],[\"默认登录页跳转过滤器\",{\"1\":{\"346\":1}}],[\"默认daoauthenticationprovider\",{\"1\":{\"341\":1}}],[\"默认入口点loginurlauthenticationentrypoint\",{\"1\":{\"337\":1}}],[\"默认实现\",{\"1\":{\"297\":1}}],[\"默认情况下\",{\"1\":{\"219\":1,\"1117\":1}}],[\"默认20次\",{\"1\":{\"213\":1}}],[\"默认\",{\"1\":{\"152\":2,\"154\":1,\"176\":1,\"801\":1,\"802\":2,\"1098\":1}}],[\"默认不解决循环依赖\",{\"1\":{\"58\":1}}],[\"引擎\",{\"0\":{\"1038\":1},\"1\":{\"651\":1,\"678\":1}}],[\"引擎将\",{\"1\":{\"651\":1}}],[\"引用方式\",{\"0\":{\"934\":1}}],[\"引用类型在赋值时需要\",{\"1\":{\"479\":1}}],[\"引用时\",{\"1\":{\"312\":1}}],[\"引用\",{\"1\":{\"312\":1}}],[\"引用必须总是有效的\",{\"1\":{\"265\":1}}],[\"引用可分为强引用\",{\"1\":{\"243\":1}}],[\"引用计数法\",{\"1\":{\"201\":1,\"243\":3}}],[\"引用传递\",{\"1\":{\"139\":1}}],[\"引入版本控制\",{\"1\":{\"1049\":1}}],[\"引入模块\",{\"1\":{\"973\":1}}],[\"引入groovy\",{\"1\":{\"648\":1}}],[\"引入jython包\",{\"1\":{\"646\":1}}],[\"引入jar包\",{\"1\":{\"585\":1,\"707\":1}}],[\"引入\",{\"0\":{\"621\":1,\"639\":1,\"790\":1,\"799\":1,\"943\":1}}],[\"引入spring\",{\"1\":{\"476\":1}}],[\"引入后\",{\"1\":{\"170\":1}}],[\"引入时使用文件的路径下\",{\"1\":{\"170\":1}}],[\"引入的时候需要起别名\",{\"1\":{\"170\":1}}],[\"引入test1包\",{\"1\":{\"137\":1}}],[\"引入包以module为单位\",{\"1\":{\"170\":1}}],[\"引入包\",{\"1\":{\"116\":1,\"720\":1}}],[\"值\",{\"1\":{\"988\":1}}],[\"值传递\",{\"1\":{\"139\":1}}],[\"值类型和引用类型\",{\"0\":{\"125\":1}}],[\"即租户所属的组权限\",{\"1\":{\"1452\":1}}],[\"即交给pipeline中的handler进行处理\",{\"1\":{\"1445\":1}}],[\"即将pc的有线网卡作为其他pc的网关\",{\"1\":{\"1432\":1}}],[\"即向底层写数据\",{\"1\":{\"1403\":1}}],[\"即写数据到outbuf\",{\"1\":{\"1383\":1}}],[\"即devicegatewayconfigservice\",{\"1\":{\"1359\":1}}],[\"即对网络组件进行订阅\",{\"1\":{\"1319\":1}}],[\"即对授权码拦截\",{\"1\":{\"345\":1}}],[\"即设备网关service\",{\"1\":{\"1319\":1}}],[\"即设置属性的方法\",{\"1\":{\"497\":1}}],[\"即reactiverepositoryfactorybean\",{\"1\":{\"1297\":1}}],[\"即runexception\",{\"1\":{\"230\":1}}],[\"即接口方法\",{\"1\":{\"1259\":1}}],[\"即可\",{\"1\":{\"1187\":1}}],[\"即注册服务的时候ip错位\",{\"1\":{\"1137\":1}}],[\"即gradle的包装\",{\"1\":{\"1130\":1}}],[\"即容器运行的目录\",{\"1\":{\"1107\":1}}],[\"即容器属于不同局域网\",{\"1\":{\"1089\":1}}],[\"即加锁\",{\"1\":{\"1050\":1}}],[\"即mutation事件中不可使用回调函数\",{\"1\":{\"998\":1}}],[\"即vuex的状态存储是响应式的\",{\"1\":{\"998\":1}}],[\"即构造函数的参数类型和返回类型\",{\"1\":{\"991\":1}}],[\"即在特定的时间间隔内\",{\"1\":{\"1425\":1}}],[\"即在使用maven打包时通过\",{\"1\":{\"1079\":1}}],[\"即在\",{\"1\":{\"935\":1}}],[\"即数据发送到broker服务器\",{\"1\":{\"915\":1}}],[\"即比较和交换\",{\"1\":{\"911\":1}}],[\"即每个链表中维护了下一节点的数组\",{\"1\":{\"911\":1}}],[\"即通过接口更新数据时数据为null值时将不更新进数据库\",{\"1\":{\"902\":1}}],[\"即通过顺序订阅第一个源\",{\"1\":{\"548\":1}}],[\"即操作的数据库\",{\"1\":{\"897\":1}}],[\"即以要发送消息的key作为键\",{\"1\":{\"833\":1}}],[\"即便设置concurrency\",{\"1\":{\"804\":1}}],[\"即使前一次拉取的数据未确认\",{\"1\":{\"797\":1}}],[\"即使匹配不到也把请求交给该host处理\",{\"1\":{\"679\":1}}],[\"即聚合运算\",{\"1\":{\"768\":1}}],[\"即连接超时时间和读取超时时间\",{\"1\":{\"730\":1}}],[\"即一个web应用\",{\"1\":{\"678\":1}}],[\"即webapps目录\",{\"1\":{\"678\":1}}],[\"即websecurityconfigureradapter\",{\"1\":{\"329\":1}}],[\"即不关心某个字段的取值时使用\",{\"1\":{\"656\":1}}],[\"即需要jsp引擎或容器\",{\"1\":{\"651\":1}}],[\"即发生匹配后\",{\"1\":{\"635\":1}}],[\"即发送方发送数据\",{\"1\":{\"190\":1}}],[\"即sqlsession的代理对象\",{\"1\":{\"852\":1}}],[\"即springboot会读取全部的配置文件\",{\"1\":{\"593\":1}}],[\"即sleep的线程如何到安全点\",{\"1\":{\"243\":1}}],[\"即优先级高的配置覆盖优先级低的配置\",{\"1\":{\"593\":1}}],[\"即\",{\"1\":{\"589\":1,\"652\":1,\"656\":1,\"711\":1}}],[\"即应用容器化部署\",{\"1\":{\"566\":1}}],[\"即上述流程\",{\"1\":{\"526\":1}}],[\"即除了string的所有引用类型\",{\"1\":{\"496\":1}}],[\"即来源类\",{\"1\":{\"486\":1}}],[\"即代理调用处理器集\",{\"1\":{\"436\":1}}],[\"即是否为该类生成代理对象\",{\"1\":{\"434\":1}}],[\"即多个安全过滤器\",{\"1\":{\"418\":1}}],[\"即调用处理器\",{\"1\":{\"386\":1}}],[\"即调用函数式接口的方法\",{\"1\":{\"248\":1}}],[\"即切点方法\",{\"1\":{\"382\":1}}],[\"即切点\",{\"1\":{\"382\":1}}],[\"即主体已被认证\",{\"1\":{\"348\":1}}],[\"即相等元素的顺序是否改变\",{\"1\":{\"307\":1}}],[\"即方法调用\",{\"1\":{\"243\":1}}],[\"即静态变量\",{\"1\":{\"243\":1}}],[\"即线程最大的空闲时间\",{\"1\":{\"236\":1}}],[\"即线程都是一样的\",{\"1\":{\"209\":1,\"235\":1}}],[\"即事务一致性问题\",{\"1\":{\"221\":1}}],[\"即删除undolog\",{\"1\":{\"212\":1}}],[\"即保存了各服务本地事务提交前后的undolog日志\",{\"1\":{\"212\":1}}],[\"即存放地址的数组\",{\"1\":{\"145\":1}}],[\"即为\",{\"1\":{\"139\":1}}],[\"即后进先出\",{\"1\":{\"138\":1}}],[\"即大于最小空闲连接小于最大连接数的那部分连接\",{\"1\":{\"18\":1}}],[\"最近依赖版本\",{\"1\":{\"1076\":1}}],[\"最新用法3\",{\"0\":{\"1074\":1}}],[\"最新版本记录了最新值以及修改的事务id\",{\"1\":{\"1049\":1}}],[\"最少活跃调用数\",{\"1\":{\"730\":1}}],[\"最左原则\",{\"1\":{\"716\":1}}],[\"最大的租户\",{\"1\":{\"1495\":1}}],[\"最大10240\",{\"1\":{\"1486\":4}}],[\"最大512\",{\"1\":{\"1486\":4}}],[\"最大文件描述符\",{\"1\":{\"1206\":1}}],[\"最大层级\",{\"1\":{\"1036\":1}}],[\"最大努力通知\",{\"0\":{\"667\":1}}],[\"最大线程数\",{\"1\":{\"236\":1}}],[\"最多只能添加一个\",{\"1\":{\"596\":2}}],[\"最后再用\",{\"1\":{\"992\":1}}],[\"最后发送消息时间\",{\"1\":{\"824\":1}}],[\"最后收到消息时间\",{\"1\":{\"824\":1}}],[\"最后没有再创建\",{\"1\":{\"736\":1}}],[\"最后按优先级执行beanfactorypostprocessor实现类中的postprocessbeanfactory方法\",{\"1\":{\"483\":1}}],[\"最后gatewayfilterchain的filter\",{\"1\":{\"471\":1}}],[\"最终写入到channel\",{\"1\":{\"1396\":1}}],[\"最终找到对应的handlermethod\",{\"1\":{\"1259\":1}}],[\"最终会将ts编译为js\",{\"1\":{\"984\":1}}],[\"最终加强分布式锁\",{\"1\":{\"911\":1}}],[\"最终一致性\",{\"1\":{\"666\":1}}],[\"最终返回对象\",{\"1\":{\"526\":1}}],[\"最终反馈到数据发出的起点处\",{\"1\":{\"526\":1}}],[\"最终执行切点方法invokejoinpoint\",{\"1\":{\"436\":1}}],[\"最终是调用了\",{\"1\":{\"354\":1}}],[\"最终使多个节点的数据达到一致性\",{\"1\":{\"99\":1}}],[\"最上层的collections和map接口\",{\"1\":{\"228\":1}}],[\"最内层的先执行\",{\"1\":{\"137\":1}}],[\"内链\",{\"1\":{\"1613\":1}}],[\"内置功能\",{\"0\":{\"1503\":1}}],[\"内置的函数\",{\"1\":{\"137\":1}}],[\"内容编码器是否存在\",{\"1\":{\"1383\":1}}],[\"内容器之间的网络通信\",{\"1\":{\"1170\":1}}],[\"内的容器可以像在同一主机上运行的进程一样进行网络通信\",{\"1\":{\"1170\":1}}],[\"内的容器都有自己的网络栈\",{\"1\":{\"1170\":1}}],[\"内联查询\",{\"1\":{\"1463\":1}}],[\"内联\",{\"0\":{\"983\":1}}],[\"内核\",{\"0\":{\"754\":1}}],[\"内嵌web服务器\",{\"1\":{\"503\":1}}],[\"内嵌tomcat启动\",{\"0\":{\"443\":1}}],[\"内存\",{\"1\":{\"1153\":1}}],[\"内存被释放\",{\"1\":{\"264\":1}}],[\"内存释放不了\",{\"1\":{\"208\":1}}],[\"内部包含静态任务执行器类\",{\"1\":{\"1335\":1}}],[\"内部包含webhandler接口的实现类dispatcherhandler\",{\"1\":{\"505\":1}}],[\"内部使用hash结构\",{\"1\":{\"1246\":1}}],[\"内部使用lucene做索引及搜索\",{\"1\":{\"748\":1}}],[\"内部类\",{\"1\":{\"843\":1}}],[\"内部类autoconfigurationgroup\",{\"1\":{\"494\":1}}],[\"内部多个应用登录\",{\"1\":{\"723\":1}}],[\"内部配置了请求路径和servlet的映射路径\",{\"1\":{\"652\":1}}],[\"内部有executor成员\",{\"1\":{\"1445\":1}}],[\"内部有重试机制\",{\"1\":{\"915\":1}}],[\"内部有对应的事务拦截器transactioninterceptor\",{\"1\":{\"434\":1}}],[\"内部有redissession内部类\",{\"1\":{\"419\":1}}],[\"内部调用apply添加配置器\",{\"1\":{\"333\":1}}],[\"内部的scopebeanfactory\",{\"1\":{\"735\":1}}],[\"内部的方法都被synchronized修饰\",{\"1\":{\"198\":1}}],[\"内部的第一行之前\",{\"1\":{\"129\":1}}],[\"内部实际上分成了两步操作\",{\"1\":{\"173\":1}}],[\"内建函数被用于从\",{\"1\":{\"160\":1}}],[\"位置\",{\"1\":{\"1305\":1}}],[\"位\",{\"1\":{\"133\":1,\"1227\":2}}],[\"格式拼凑在sql中\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"格式化\",{\"1\":{\"1479\":1}}],[\"格式化分区和挂载分区与上面fdisk分区中的方法一样\",{\"1\":{\"1197\":2}}],[\"格式化为pv\",{\"1\":{\"1197\":1}}],[\"格式化之后pv就可以为逻辑卷提供pe了\",{\"1\":{\"1197\":1}}],[\"格式化字符串并赋值给新串\",{\"1\":{\"117\":1}}],[\"格式化字符串\",{\"1\":{\"117\":1}}],[\"格式编码\",{\"1\":{\"625\":1}}],[\"格式为\",{\"1\":{\"149\":1,\"1177\":2}}],[\"格式\",{\"0\":{\"627\":1},\"1\":{\"148\":1}}],[\"格式如下\",{\"1\":{\"133\":2,\"190\":1}}],[\"格式可以对\",{\"1\":{\"133\":1}}],[\"给用户绑定租户\",{\"1\":{\"1495\":1}}],[\"给引导类配置两大线程组\",{\"1\":{\"1450\":1}}],[\"给发送方是为了确认消息已经被代理服务器成功处理并发送给了订阅客户端\",{\"1\":{\"1275\":1}}],[\"给已有的命名空间添加类型声明24\",{\"1\":{\"993\":1}}],[\"给hash中的filed加上指定的值\",{\"1\":{\"909\":1}}],[\"给指定的key设置过期时间\",{\"1\":{\"908\":1}}],[\"给节点任务配置创建或完成任务监听器\",{\"1\":{\"584\":1,\"706\":1}}],[\"给任务节点配置审批人及处理监听器\",{\"1\":{\"584\":1,\"706\":1}}],[\"给控制变量增量或减量\",{\"1\":{\"133\":1}}],[\"给控制变量赋初值\",{\"1\":{\"133\":1}}],[\"给线程池里面线程添加名称的4种方式\",{\"0\":{\"2\":1}}],[\"种形式\",{\"1\":{\"133\":1}}],[\"循环所有文件\",{\"1\":{\"1032\":1}}],[\"循环消费消息\",{\"1\":{\"834\":1}}],[\"循环政策\",{\"1\":{\"596\":2}}],[\"循环依赖问题\",{\"0\":{\"380\":1}}],[\"循环跳转\",{\"1\":{\"243\":1}}],[\"循环中\",{\"1\":{\"188\":1}}],[\"循环中迭代数组\",{\"1\":{\"153\":1}}],[\"循环\",{\"0\":{\"278\":1},\"1\":{\"135\":1}}],[\"循环嵌套\",{\"0\":{\"134\":1}}],[\"循环的\",{\"1\":{\"133\":1}}],[\"循环控制条件\",{\"1\":{\"133\":1}}],[\"循环有\",{\"1\":{\"133\":1}}],[\"循环语句\",{\"0\":{\"132\":1}}],[\"循环重复使用\",{\"1\":{\"15\":1}}],[\"都已对此做了支持\",{\"1\":{\"1425\":1}}],[\"都有自己的网络命名空间\",{\"1\":{\"1170\":1}}],[\"都表示一个新的构建阶段开始\",{\"1\":{\"1103\":1}}],[\"都加载之后\",{\"1\":{\"935\":1}}],[\"都实现了\",{\"1\":{\"298\":1}}],[\"都包含在\",{\"1\":{\"286\":1}}],[\"都是发布消息到消息总线eventbus\",{\"1\":{\"1329\":1}}],[\"都是引用所有参数\",{\"1\":{\"1220\":1}}],[\"都是bool查询的子句\",{\"1\":{\"767\":1}}],[\"都是向队列添加元素\",{\"1\":{\"239\":1}}],[\"都是平级关系\",{\"1\":{\"209\":1,\"235\":1}}],[\"都指代零值或空值\",{\"1\":{\"144\":1}}],[\"都可以运行\",{\"1\":{\"131\":1}}],[\"都必须是一个通信\",{\"1\":{\"131\":1}}],[\"它解决了\",{\"1\":{\"1425\":1}}],[\"它使浏览器和服务器可以进行全双工通信\",{\"1\":{\"1425\":1}}],[\"它实现了基于浏览器的远程\",{\"1\":{\"1425\":1}}],[\"它实现了webhandler接口\",{\"1\":{\"473\":1}}],[\"它负责创建\",{\"1\":{\"1170\":1}}],[\"它负责管理包括内存分配\",{\"1\":{\"174\":1}}],[\"它提供了一个逻辑上相关的容器组合\",{\"1\":{\"1161\":1}}],[\"它可以被创建\",{\"1\":{\"1161\":1}}],[\"它可以用来导入另一个声明文件\",{\"1\":{\"995\":1}}],[\"它可以用来扩展原有模块的类型\",{\"1\":{\"994\":1}}],[\"它可以赋值给变量也可以作为参数传递给其它函数\",{\"1\":{\"315\":1}}],[\"它用来表示全局变量是一个对象\",{\"1\":{\"991\":1}}],[\"它用来解决\",{\"1\":{\"286\":1}}],[\"它代表了某个特定时刻的\",{\"1\":{\"970\":1}}],[\"它能够处理大量的请求\",{\"1\":{\"911\":1}}],[\"它应该创建一个自己的实例并注册到drivermanager\",{\"1\":{\"850\":1}}],[\"它指的是一个接收数据并处理或输出数据的组件或模块\",{\"1\":{\"789\":1}}],[\"它则表示每月1号往后最近的工作日触发\",{\"1\":{\"656\":1}}],[\"它将轮流要求每个驱动程序尝试连接到目标url\",{\"1\":{\"850\":1}}],[\"它将获取到的jsp页面\",{\"1\":{\"651\":1}}],[\"它将业务拆分为核心业务和非核心业务\",{\"1\":{\"382\":1}}],[\"它允许将集群内的资源划分为多个独立的虚拟集群\",{\"1\":{\"1160\":1}}],[\"它允许你以一种非常简洁且类型安全的方式来定义网络请求\",{\"1\":{\"616\":1}}],[\"它允许捕获调用者作用域中的值\",{\"1\":{\"315\":1}}],[\"它是kubernetes中运行和管理容器化应用程序的基本对象\",{\"1\":{\"1161\":1}}],[\"它是生产级别的容器编排系统\",{\"1\":{\"1157\":1}}],[\"它是gradle的包装\",{\"1\":{\"1073\":1}}],[\"它是javascript的拓展\",{\"1\":{\"984\":1}}],[\"它是对链表的再次抽象\",{\"1\":{\"911\":1}}],[\"它是一种基于tcp\",{\"1\":{\"1271\":1}}],[\"它是一种会话技术\",{\"1\":{\"722\":1}}],[\"它是一个对象\",{\"1\":{\"968\":1}}],[\"它是一个内部私有类\",{\"1\":{\"832\":1}}],[\"它是处理请求的入口\",{\"1\":{\"652\":1}}],[\"它是运行在web服务器\",{\"1\":{\"652\":1}}],[\"它是sun设计的让java能够实现动态可交互网页\",{\"1\":{\"652\":1}}],[\"它是开发一个java应用要使用的模型\",{\"1\":{\"617\":1}}],[\"它是configurationclassparser内部类\",{\"1\":{\"490\":1}}],[\"它是beanfactorypostprocessor\",{\"1\":{\"486\":1}}],[\"它包含beanmethod等信息\",{\"1\":{\"487\":1}}],[\"它包含了指向字符串数据的指针和长度信息\",{\"1\":{\"268\":1}}],[\"它们具有相同的网络视图和相同的\",{\"1\":{\"1170\":1}}],[\"它们可以共享文件和数据\",{\"1\":{\"1161\":1}}],[\"它们可以通过localhost相互通信\",{\"1\":{\"1161\":1}}],[\"它们共享相同的生命周期和资源\",{\"1\":{\"1161\":1}}],[\"它们共享相同的网络命名空间\",{\"1\":{\"1161\":1}}],[\"它们是标签的属性\",{\"1\":{\"479\":1}}],[\"它们会以逆序执行\",{\"1\":{\"138\":1}}],[\"它传入serverwebexchange\",{\"1\":{\"473\":1}}],[\"它内部有一个defaultgatewayfilterchain静态内部类用于构建过滤器链对象\",{\"1\":{\"473\":1}}],[\"它在连接至不同类型总线或网络的设备之间提供客户机\",{\"1\":{\"1276\":1}}],[\"它在实例化时会传入全局过滤器集初始化\",{\"1\":{\"473\":1}}],[\"它在内部做了处理\",{\"1\":{\"305\":1}}],[\"它对servlet中的session进行了覆盖\",{\"1\":{\"414\":1}}],[\"它以html结尾\",{\"1\":{\"980\":1}}],[\"它以不可变借用的方式捕获环境中的值\",{\"1\":{\"318\":1}}],[\"它以可变借用的方式捕获了环境中的值\",{\"1\":{\"318\":1}}],[\"它的scope是prototype\",{\"1\":{\"333\":1}}],[\"它的对象才是安全的\",{\"1\":{\"298\":1}}],[\"它的值为\",{\"1\":{\"144\":1}}],[\"它的值都会自动加\",{\"1\":{\"129\":1}}],[\"它又在\",{\"1\":{\"291\":1}}],[\"它会存储事务操作的ddl\",{\"1\":{\"1052\":1}}],[\"它会根据依赖的改变实时变更getter属性的值\",{\"1\":{\"998\":1}}],[\"它会将\",{\"1\":{\"971\":1}}],[\"它会更新dom来与react元素保持一致\",{\"1\":{\"970\":1}}],[\"它会记录所有写操作命令\",{\"1\":{\"911\":1}}],[\"它会对以上版本进行覆盖\",{\"1\":{\"851\":1}}],[\"它会包含所有可能的枚举成员\",{\"1\":{\"275\":1}}],[\"它会被标记\",{\"1\":{\"243\":1}}],[\"它不仅提供了一系列的\",{\"1\":{\"912\":1}}],[\"它不拥有字符串数据的所有权\",{\"1\":{\"270\":1}}],[\"它不会产生任何文件\",{\"1\":{\"173\":1}}],[\"它只是创建了一个引用\",{\"1\":{\"268\":1}}],[\"它所占据的内存资源会全部被释放掉\",{\"1\":{\"208\":1}}],[\"它就会一直使用该类型\",{\"1\":{\"315\":1}}],[\"它就会执行\",{\"1\":{\"188\":1}}],[\"它就会在当前目录下生成一个可执行文件\",{\"1\":{\"173\":1}}],[\"它就执行\",{\"1\":{\"131\":1}}],[\"它把所有的具有共性的方法定义在一起\",{\"1\":{\"157\":1}}],[\"它一般用于释放某些已分配的资源\",{\"1\":{\"138\":1}}],[\"所接收的属性\",{\"1\":{\"971\":1}}],[\"所在的包\",{\"1\":{\"652\":1}}],[\"所需处理的类型\",{\"1\":{\"379\":1}}],[\"所有订阅消失\",{\"1\":{\"1489\":1}}],[\"所有标签\",{\"1\":{\"935\":1}}],[\"所有配置\",{\"1\":{\"743\":1}}],[\"所有servlet共享\",{\"1\":{\"600\":1}}],[\"所有预料之外的exception异常都由这里处理\",{\"1\":{\"378\":1}}],[\"所有权将被转移给\",{\"1\":{\"310\":1}}],[\"所有权转移\",{\"0\":{\"310\":1}}],[\"所有权\",{\"1\":{\"279\":1}}],[\"所有权和借用\",{\"0\":{\"265\":1}}],[\"所有的闭包都自动实现了\",{\"1\":{\"319\":1}}],[\"所有的\",{\"1\":{\"159\":1}}],[\"所有给定类型的方法属于该类型的方法集\",{\"1\":{\"139\":1}}],[\"所有被发送的表达式都会被求值\",{\"1\":{\"131\":1}}],[\"所有\",{\"1\":{\"131\":1,\"935\":1}}],[\"所以对于\",{\"1\":{\"993\":1}}],[\"所以当js代码需要获取页面中的元素时\",{\"1\":{\"935\":1}}],[\"所以ecmascript规范中加入了class语法\",{\"1\":{\"932\":1}}],[\"所以就直接按照全限定类名进行排序了\",{\"1\":{\"857\":1}}],[\"所以就可以用http的uri作为一个标识\",{\"1\":{\"213\":1}}],[\"所以使用state\",{\"1\":{\"769\":1}}],[\"所以创建索引时\",{\"1\":{\"749\":1}}],[\"所以它们都是容器\",{\"1\":{\"678\":1}}],[\"所以更换数据源的操作要放在这个操作之前进行\",{\"1\":{\"632\":1}}],[\"所以网上很多文章所说的高优先级覆盖低优先级其实是不严谨的\",{\"1\":{\"593\":1}}],[\"所以会报错\",{\"1\":{\"318\":1}}],[\"所以会开启一个新的事务\",{\"1\":{\"202\":2}}],[\"所以不能用\",{\"1\":{\"291\":1}}],[\"所以不支持\",{\"1\":{\"131\":1}}],[\"所以这里我们\",{\"1\":{\"190\":1}}],[\"所以还是必须有接收端来接收数据的\",{\"1\":{\"190\":1}}],[\"所以\",{\"1\":{\"129\":1,\"652\":1,\"681\":1}}],[\"所以以下代码在运行时会产生错误\",{\"1\":{\"116\":1}}],[\"的所有\",{\"1\":{\"1445\":1}}],[\"的所有权转移到该方法中\",{\"1\":{\"289\":1}}],[\"的协议颇为简单\",{\"1\":{\"1425\":1}}],[\"的起始输入是\",{\"1\":{\"1425\":1}}],[\"的重要特性\",{\"1\":{\"1425\":1}}],[\"的作用\",{\"0\":{\"1397\":1}}],[\"的针对数学比较表达式和字符串表达式的加强版\",{\"1\":{\"1222\":1}}],[\"的网络命名空间和虚拟网络设备\",{\"1\":{\"1170\":1}}],[\"的多个副本\",{\"1\":{\"1167\":1}}],[\"的命令\",{\"1\":{\"1151\":1}}],[\"的暂存区\",{\"1\":{\"1151\":1}}],[\"的时候\",{\"1\":{\"996\":1}}],[\"的格式添加了对\",{\"1\":{\"995\":1}}],[\"的例子中\",{\"1\":{\"995\":1}}],[\"的语法与普通的\",{\"1\":{\"992\":1}}],[\"的语法糖\",{\"1\":{\"277\":1}}],[\"的入口函数是在\",{\"1\":{\"935\":1}}],[\"的变量\",{\"1\":{\"915\":1}}],[\"的基础上实现的\",{\"1\":{\"912\":1}}],[\"的基本用法\",{\"1\":{\"658\":1}}],[\"的旧值\",{\"1\":{\"910\":1}}],[\"的条件只产生两种结果\",{\"1\":{\"767\":1}}],[\"的context获得请求\",{\"1\":{\"679\":1}}],[\"的context去处理\",{\"1\":{\"679\":1}}],[\"的clientsecretauthenticationprovider\",{\"1\":{\"346\":1}}],[\"的管理\",{\"1\":{\"675\":1,\"676\":1}}],[\"的名字和目标方法的名字\",{\"1\":{\"658\":1}}],[\"的配置有两种方式\",{\"1\":{\"658\":1}}],[\"的定义有两种方式\",{\"1\":{\"658\":1}}],[\"的数据\",{\"1\":{\"798\":2}}],[\"的数据被消费者监听器\",{\"1\":{\"798\":3}}],[\"的数组\",{\"1\":{\"652\":1}}],[\"的数值来允许运行时支持使用多于\",{\"1\":{\"186\":1}}],[\"的垃圾回收器进行垃圾回收的\",{\"1\":{\"652\":1}}],[\"的方法的时候\",{\"1\":{\"632\":1}}],[\"的方式或通过辅助函数mapstate将state属性映射到组件的计算属性\",{\"1\":{\"998\":1}}],[\"的方式创建的\",{\"1\":{\"298\":2}}],[\"的方式来调用\",{\"1\":{\"291\":1}}],[\"的形式输出所有参数\",{\"1\":{\"1220\":1}}],[\"的形式配置候选人\",{\"1\":{\"584\":1,\"706\":1}}],[\"的形式调用\",{\"1\":{\"291\":1}}],[\"的invokewithintransaction\",{\"1\":{\"429\":1}}],[\"的dispatcherservlet的时候会把\",{\"1\":{\"354\":1}}],[\"的关系\",{\"0\":{\"319\":1}}],[\"的闭包\",{\"1\":{\"318\":1}}],[\"的使用方式非常安全\",{\"1\":{\"305\":1}}],[\"的访问方式会导致程序无情报错退出\",{\"1\":{\"305\":1}}],[\"的区别是\",{\"1\":{\"995\":1}}],[\"的区别\",{\"0\":{\"305\":1}}],[\"的类型\",{\"1\":{\"298\":1,\"989\":1}}],[\"的函数被称之为关联函数\",{\"1\":{\"291\":1}}],[\"的函数调用者\",{\"1\":{\"159\":1}}],[\"的不可变借用\",{\"1\":{\"289\":1}}],[\"的简写\",{\"1\":{\"289\":1}}],[\"的有效的值\",{\"1\":{\"282\":1}}],[\"的情况\",{\"1\":{\"282\":1}}],[\"的每一个分支都必须是一个表达式\",{\"1\":{\"282\":1}}],[\"的匹配必须要穷举出所有可能\",{\"1\":{\"282\":1}}],[\"的字段数据\",{\"1\":{\"272\":1}}],[\"的分布式事务服务\",{\"1\":{\"212\":1}}],[\"的传递\",{\"1\":{\"200\":1}}],[\"的第二个参数指定缓冲区大小\",{\"1\":{\"190\":1}}],[\"的第一个元素开始\",{\"1\":{\"152\":1}}],[\"的可执行文件都比相对应的源代码文件要大很多\",{\"1\":{\"174\":1}}],[\"的环境变量\",{\"1\":{\"173\":1}}],[\"的首都不存在\",{\"1\":{\"154\":1}}],[\"的首都是\",{\"1\":{\"154\":1}}],[\"的元素\",{\"1\":{\"153\":1,\"989\":1}}],[\"的元素初始化\",{\"1\":{\"140\":2}}],[\"的内容到\",{\"1\":{\"152\":1}}],[\"的切片\",{\"1\":{\"152\":1}}],[\"的引用\",{\"1\":{\"152\":1}}],[\"的\",{\"1\":{\"138\":1,\"174\":1,\"308\":1,\"354\":3,\"935\":1,\"971\":1}}],[\"的用法类似于面向对象编程语言\",{\"1\":{\"138\":1}}],[\"的值设为\",{\"1\":{\"910\":1}}],[\"的值创建一个\",{\"1\":{\"298\":2}}],[\"的值报告错误情况\",{\"1\":{\"159\":1}}],[\"的值\",{\"1\":{\"133\":1,\"146\":1,\"282\":1}}],[\"的值为\",{\"1\":{\"131\":1,\"156\":1}}],[\"的解决方法\",{\"0\":{\"56\":1}}],[\"定制开发\",{\"1\":{\"1472\":1}}],[\"定期向master节点的api\",{\"1\":{\"1162\":1}}],[\"定位游标\",{\"1\":{\"780\":1}}],[\"定义wocker局部变量信息\",{\"1\":{\"1450\":1}}],[\"定义rows\",{\"1\":{\"1244\":1}}],[\"定义status和message属性\",{\"1\":{\"1244\":1}}],[\"定义执行脚本的shell解释器\",{\"1\":{\"1217\":1}}],[\"定义了处理读取\",{\"1\":{\"1397\":1}}],[\"定义了类路径\",{\"1\":{\"1066\":1}}],[\"定义了索引下字段处理规则\",{\"1\":{\"748\":1}}],[\"定义时\",{\"1\":{\"991\":1}}],[\"定义构造签名类型\",{\"1\":{\"991\":1}}],[\"定义变量并赋值\",{\"1\":{\"985\":1}}],[\"定义变量\",{\"1\":{\"985\":1}}],[\"定义biz2消息接收者\",{\"1\":{\"804\":1}}],[\"定义biz1消息接收者\",{\"1\":{\"804\":2}}],[\"定义参数\",{\"1\":{\"648\":1}}],[\"定义groovy脚本内容\",{\"1\":{\"648\":1}}],[\"定义groovy脚本中执行方法的名称\",{\"1\":{\"648\":2}}],[\"定义dynamicdatasource类继承抽象类abstractroutingdatasource\",{\"1\":{\"632\":1}}],[\"定义线程局部变量\",{\"1\":{\"602\":1}}],[\"定义此类为配置类\",{\"1\":{\"421\":1}}],[\"定义自定义事件\",{\"1\":{\"413\":1}}],[\"定义在\",{\"1\":{\"291\":1}}],[\"定义code和zh含义\",{\"1\":{\"207\":1}}],[\"定义\",{\"1\":{\"158\":1,\"271\":2}}],[\"定义一个bean继承\",{\"1\":{\"658\":1}}],[\"定义一个\",{\"1\":{\"158\":1}}],[\"定义map\",{\"1\":{\"154\":1}}],[\"定义切片\",{\"1\":{\"152\":1}}],[\"定义指针变量\",{\"1\":{\"143\":1}}],[\"定义结构体\",{\"0\":{\"148\":1},\"1\":{\"139\":1}}],[\"定义局部变量\",{\"1\":{\"131\":1,\"135\":1}}],[\"定时检查网络组件状态\",{\"1\":{\"1320\":1}}],[\"定时触发\",{\"1\":{\"1311\":2}}],[\"定时调度\",{\"1\":{\"1013\":1}}],[\"定时调度平台\",{\"0\":{\"77\":1}}],[\"定时ping发送器\",{\"1\":{\"843\":1}}],[\"定时器主要用于延迟执行任务\",{\"1\":{\"841\":1}}],[\"定时重发\",{\"1\":{\"730\":1}}],[\"定时消息\",{\"1\":{\"223\":1}}],[\"定时任务查询设备点位id\",{\"1\":{\"1472\":1}}],[\"定时任务\",{\"0\":{\"112\":1,\"925\":1,\"1011\":1}}],[\"将grant\",{\"1\":{\"1531\":2}}],[\"将请求转发到对应的服务\",{\"1\":{\"1520\":1}}],[\"将自定义handler添加到pipeline中\",{\"1\":{\"1450\":1}}],[\"将channel注册到eventloop中\",{\"1\":{\"1446\":1}}],[\"将channel注册到eventloop的选择器中\",{\"1\":{\"1445\":1}}],[\"将entry中的数据写入到javachannel中\",{\"1\":{\"1401\":1}}],[\"将设备指令发送到对应服务节点进行处理\",{\"1\":{\"1368\":1}}],[\"将设备消息发布到事件总线evenbus\",{\"1\":{\"1362\":1}}],[\"将消息发布给所有订阅了该主题的客户端\",{\"1\":{\"1275\":1}}],[\"将原值覆盖\",{\"1\":{\"1219\":1}}],[\"将物理设备\",{\"1\":{\"1197\":1}}],[\"将响应数据写道文件中\",{\"1\":{\"1189\":1}}],[\"将pod的ip地址映射到pod的名称\",{\"1\":{\"1168\":1}}],[\"将pom中依赖的组件jar包也打包到jar中\",{\"1\":{\"1077\":1}}],[\"将权限赋给所有用户\",{\"1\":{\"1130\":1}}],[\"将执行它们来初始化一个数据库\",{\"1\":{\"1115\":1}}],[\"将宿主机目录下的文件拷贝进镜像\",{\"1\":{\"1112\":1}}],[\"将容器目录挂载到docker\",{\"1\":{\"1098\":1}}],[\"将容器加入到网络中\",{\"1\":{\"1089\":1}}],[\"将已消费的消息存表\",{\"1\":{\"915\":1}}],[\"将导入的文件输入流放在redis缓存中\",{\"1\":{\"911\":1}}],[\"将给定\",{\"1\":{\"910\":1}}],[\"将给出变量的实际地址\",{\"1\":{\"130\":1}}],[\"将分页信息page\",{\"1\":{\"853\":1}}],[\"将会在下一次poll数据的时候\",{\"1\":{\"798\":2}}],[\"将会自动优化为行锁\",{\"1\":{\"219\":1}}],[\"将jsp转为servlet\",{\"1\":{\"682\":1}}],[\"将参数封装在\",{\"1\":{\"658\":1}}],[\"将实体参数转为路径参数\",{\"1\":{\"609\":1}}],[\"将flux转为list类型mono\",{\"1\":{\"555\":1}}],[\"将flux转为另一类型\",{\"1\":{\"551\":1}}],[\"将收到的元素转为list发出\",{\"1\":{\"553\":1}}],[\"将列表元素转为flux流管道\",{\"1\":{\"550\":1}}],[\"将三个mono转为一个mono\",{\"1\":{\"540\":1}}],[\"将递归订阅转化为循环订阅\",{\"1\":{\"533\":1}}],[\"将其转为内部类集合list<zuulroutevo>遍历\",{\"1\":{\"468\":1}}],[\"将standardservletasyncwebrequest放入asyncmanager异步管理器\",{\"1\":{\"403\":1}}],[\"将bean注册到spring容器当中\",{\"1\":{\"365\":1}}],[\"将许可信息存表\",{\"1\":{\"346\":1}}],[\"将a变成一个迭代器\",{\"1\":{\"277\":1}}],[\"将无法再访问该字段\",{\"1\":{\"271\":1}}],[\"将模式gradle改为idea\",{\"1\":{\"256\":1}}],[\"将存活的对象移到内存的一端\",{\"1\":{\"243\":1}}],[\"将生成的class写入文件中\",{\"1\":{\"241\":1}}],[\"将为用户提供了\",{\"1\":{\"212\":1}}],[\"将相关配置信息注入到spring容器中\",{\"1\":{\"211\":1}}],[\"将组件相关jar包引入\",{\"1\":{\"211\":1}}],[\"将\",{\"1\":{\"152\":1,\"996\":1}}],[\"将索引为\",{\"1\":{\"140\":2}}],[\"将阻塞\",{\"1\":{\"131\":1}}],[\"将要注入的\",{\"1\":{\"25\":1}}],[\"运维量增加\",{\"1\":{\"221\":1}}],[\"运算符优先级\",{\"0\":{\"226\":1}}],[\"运算符\",{\"0\":{\"130\":1},\"1\":{\"290\":1}}],[\"运行状态等信息存放映射的点位id\",{\"1\":{\"1477\":1}}],[\"运行状态的读取\",{\"1\":{\"1304\":1}}],[\"运行机制\",{\"1\":{\"1440\":1}}],[\"运行在每个nodes节点上\",{\"1\":{\"1162\":1}}],[\"运行在master节点上\",{\"1\":{\"1162\":1}}],[\"运行工具\",{\"1\":{\"965\":1}}],[\"运行python脚本\",{\"1\":{\"923\":1}}],[\"运行表ru\",{\"0\":{\"580\":1,\"704\":1}}],[\"运行以上代码\",{\"1\":{\"305\":1}}],[\"运行时\",{\"0\":{\"174\":1}}],[\"运行时负责中止程序并给出调试信息\",{\"1\":{\"159\":1}}],[\"运行时会触发运行时\",{\"1\":{\"159\":1}}],[\"运行时异常和\",{\"0\":{\"159\":1}}],[\"运行\",{\"1\":{\"115\":1,\"1167\":1}}],[\"独立值\",{\"1\":{\"129\":1}}],[\"每页大小\",{\"1\":{\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1622\":1,\"1628\":1,\"1635\":1}}],[\"每页条数\",{\"1\":{\"255\":1,\"853\":1}}],[\"每天定时推送前一天的间隔为1小时的能耗数据到节能管理平台\",{\"1\":{\"1471\":1}}],[\"每天上午10\",{\"1\":{\"656\":3}}],[\"每天上午8点触发\",{\"1\":{\"656\":1}}],[\"每星期一\",{\"1\":{\"1311\":1}}],[\"每行代表一个组\",{\"1\":{\"1177\":1}}],[\"每使用一个from指令\",{\"1\":{\"1103\":1}}],[\"每条指令都会创建一个新的镜像层\",{\"1\":{\"1102\":1}}],[\"每条保留字指令必须为大写字母\",{\"1\":{\"1102\":1}}],[\"每条消息最大的大小\",{\"1\":{\"801\":1}}],[\"每新建一个往后退18\",{\"1\":{\"1099\":1}}],[\"每开启线程向线程局部变量存值会初始化threadlocals\",{\"1\":{\"915\":1}}],[\"每滚动一次\",{\"1\":{\"780\":1}}],[\"每月的第三个星期五上午10\",{\"1\":{\"656\":1}}],[\"每月的最后一个星期五上午10\",{\"1\":{\"656\":1}}],[\"每月最后一日的上午10\",{\"1\":{\"656\":1}}],[\"每月15日上午10\",{\"1\":{\"656\":1}}],[\"每年三月的星期三的下午2\",{\"1\":{\"656\":1}}],[\"每隔一段时间对网络状态进行检查\",{\"1\":{\"1320\":1}}],[\"每隔一定频率执行一次\",{\"1\":{\"192\":1}}],[\"每隔1分钟执行一次\",{\"1\":{\"656\":1}}],[\"每10秒触发\",{\"1\":{\"656\":1}}],[\"每增15秒触发\",{\"1\":{\"656\":1}}],[\"每一级节点创建当级订阅对象\",{\"1\":{\"527\":1}}],[\"每一个会话中的每个订阅都有一个不同的主题筛选器\",{\"1\":{\"1272\":1}}],[\"每一个操作都需要实现对应的三个方法\",{\"1\":{\"668\":1}}],[\"每一个新的flux对象都记录旧的flux对象\",{\"1\":{\"526\":1}}],[\"每一个请求都会带有tenantid\",{\"1\":{\"224\":1}}],[\"每一个http请求就要开启一个线程\",{\"1\":{\"213\":1}}],[\"每次启动服务变为最新\",{\"1\":{\"1644\":1}}],[\"每次启动加载恢复会话\",{\"1\":{\"1321\":1}}],[\"每次读取创建recvbytebufallocator\",{\"1\":{\"1400\":1}}],[\"每次修改\",{\"1\":{\"1151\":1}}],[\"每次sql请求生成对应sql的二进制日志\",{\"1\":{\"1054\":1}}],[\"每次都是获取存放在线程局部变量中的值\",{\"1\":{\"915\":1}}],[\"每次批量消费消息\",{\"1\":{\"808\":1}}],[\"每次调用acknowledge\",{\"1\":{\"798\":2}}],[\"每次滚动的长度\",{\"1\":{\"780\":1}}],[\"每次创建新的httpsecurity\",{\"1\":{\"333\":1}}],[\"每次操作锁住对应的行数据\",{\"1\":{\"219\":1}}],[\"每次执行结束到开始的间隔固定不变\",{\"1\":{\"192\":1}}],[\"每5秒通过一次请求\",{\"1\":{\"213\":1}}],[\"每层的\",{\"1\":{\"159\":1}}],[\"每个客户端与服务器建立连接后就是一个会话\",{\"1\":{\"1272\":1}}],[\"每个pod都有一个唯一的ip地址\",{\"1\":{\"1161\":1}}],[\"每个命名空间都有自己的一组资源\",{\"1\":{\"1160\":1}}],[\"每个构建阶段的环境变量是相互独立的\",{\"1\":{\"1103\":1}}],[\"每个构建阶段都是相互独立的\",{\"1\":{\"1103\":1}}],[\"每个支持springboot自动配置的组件都会引用\",{\"1\":{\"851\":1}}],[\"每个驱动程序都应该提供一个实现driver接口的类\",{\"1\":{\"850\":1}}],[\"每个模型model\",{\"1\":{\"735\":1}}],[\"每个服务在容器启动初始化时就做了如下操作\",{\"1\":{\"471\":1}}],[\"每个字段都需要进行初始化\",{\"1\":{\"271\":1}}],[\"每个源文件能包含多个init函数\",{\"1\":{\"137\":1}}],[\"每个\",{\"1\":{\"131\":1,\"1170\":1}}],[\"每个语句不需要像\",{\"1\":{\"117\":1}}],[\"每当向服务发起一个请求时\",{\"1\":{\"213\":1}}],[\"每当\",{\"1\":{\"129\":1}}],[\"常用数据结构命令服务\",{\"1\":{\"912\":1}}],[\"常用rsa算法\",{\"1\":{\"726\":1}}],[\"常用的方案\",{\"1\":{\"243\":1}}],[\"常用的是arraylist和hashmap和hashset\",{\"1\":{\"228\":1}}],[\"常用于数据的初始化\",{\"1\":{\"137\":1}}],[\"常用命令\",{\"0\":{\"96\":1,\"805\":1,\"1153\":1,\"1159\":1,\"1205\":1},\"1\":{\"1025\":1}}],[\"常量表达式中\",{\"1\":{\"128\":1}}],[\"常量可以用len\",{\"1\":{\"128\":1}}],[\"常量用作枚举\",{\"1\":{\"128\":1}}],[\"常量定义格式\",{\"1\":{\"128\":1}}],[\"常量\",{\"0\":{\"128\":1}}],[\"只读\",{\"1\":{\"1486\":1}}],[\"只读变量\",{\"1\":{\"1219\":1}}],[\"只显示ipv4\",{\"1\":{\"1185\":1}}],[\"只升级wms\",{\"1\":{\"1123\":1}}],[\"只参与编译\",{\"1\":{\"1074\":1}}],[\"只在debug模式的编译和最终的debug\",{\"1\":{\"1074\":1}}],[\"只在生成apk的时候参与打包\",{\"1\":{\"1074\":1}}],[\"只在单元测试代码的编译以及最终打包测试apk时有效\",{\"1\":{\"1074\":1}}],[\"只在本模块使用\",{\"1\":{\"1074\":1}}],[\"只留下类名\",{\"1\":{\"1032\":1}}],[\"只是一个线程工厂\",{\"1\":{\"1445\":1}}],[\"只是多了一个mbap报文头和少了crc校验\",{\"1\":{\"1280\":1}}],[\"只是定义了全局变量\",{\"1\":{\"989\":1}}],[\"只是更新了属性值\",{\"1\":{\"476\":1}}],[\"只会更新实际改变了的内容\",{\"1\":{\"970\":1}}],[\"只会开放给context所使用\",{\"1\":{\"678\":1}}],[\"只更新它需要更新的部分\",{\"1\":{\"970\":1}}],[\"只用于开放索引\",{\"1\":{\"780\":1}}],[\"只要有一个分区不存在已提交的offset\",{\"1\":{\"801\":1,\"802\":1}}],[\"只要有一个包含在文档的字段的分词结果中\",{\"1\":{\"751\":1}}],[\"只要一个成功即返回\",{\"1\":{\"730\":1}}],[\"只要满足一个即可\",{\"1\":{\"282\":1}}],[\"只发起一次调用\",{\"1\":{\"730\":1}}],[\"只需实现serializable接口\",{\"1\":{\"730\":1}}],[\"只执行一次\",{\"1\":{\"652\":1}}],[\"只处理一个路径的多次请求\",{\"1\":{\"652\":1}}],[\"只支持单库事务\",{\"1\":{\"632\":1}}],[\"只不过使用注解方式\",{\"1\":{\"480\":1}}],[\"只有一次\",{\"1\":{\"1273\":1}}],[\"只有一个实例\",{\"1\":{\"1256\":1}}],[\"只有最后一个会生效\",{\"1\":{\"1113\":1}}],[\"只有使用\",{\"1\":{\"1074\":1}}],[\"只有创建数据表语句\",{\"1\":{\"1056\":1}}],[\"只有\",{\"1\":{\"992\":1,\"993\":1}}],[\"只有在双引号中体现出来\",{\"1\":{\"1220\":1}}],[\"只有在声明文件中使用\",{\"1\":{\"992\":1}}],[\"只有在spring中才有\",{\"1\":{\"479\":1}}],[\"只有重启后才会从偏移处offset拉取消息\",{\"1\":{\"797\":1}}],[\"只有对象安全的特征才行\",{\"1\":{\"298\":1}}],[\"只有其中的一种使用分号\",{\"1\":{\"133\":1}}],[\"只关心它的行为\",{\"1\":{\"272\":1}}],[\"只能操作属于自身的数据\",{\"1\":{\"1502\":1}}],[\"只能解决部分幻读\",{\"1\":{\"1051\":1}}],[\"只能通过\",{\"1\":{\"801\":1}}],[\"只能在迭代器中遍历做删除操作\",{\"1\":{\"229\":1}}],[\"只能在\",{\"1\":{\"160\":1}}],[\"只能被用在函数体内\",{\"1\":{\"126\":1}}],[\"只获取函数返回值的后两个\",{\"1\":{\"127\":1}}],[\"空调信息表\",{\"1\":{\"1477\":1}}],[\"空间\",{\"1\":{\"1062\":1}}],[\"空\",{\"1\":{\"148\":1,\"152\":1}}],[\"空指针\",{\"0\":{\"144\":1},\"1\":{\"230\":1}}],[\"空白标识符在函数返回值时的使用\",{\"0\":{\"127\":1}}],[\"空字符串\",{\"1\":{\"123\":1}}],[\"而订阅客户端发送\",{\"1\":{\"1275\":1}}],[\"而无需通过网络协议栈的封装和解封装来实现\",{\"1\":{\"1170\":1}}],[\"而无需以\",{\"1\":{\"286\":1}}],[\"而docker\",{\"1\":{\"1164\":1}}],[\"而nodes节点上的kubelet负责具体的容器创建和管理\",{\"1\":{\"1162\":1}}],[\"而nodes节点承担实际的容器创建和管理任务\",{\"1\":{\"1162\":1}}],[\"而插件模块没有类型声明文件\",{\"1\":{\"994\":1}}],[\"而只会在当前文件中声明一个局部变量\",{\"1\":{\"992\":1}}],[\"而默认更新策略是not\",{\"1\":{\"902\":1}}],[\"而实际上\",{\"1\":{\"774\":1}}],[\"而忽略yml文件中的配置\",{\"1\":{\"593\":1}}],[\"而原本我们知道那个spring\",{\"1\":{\"481\":1}}],[\"而是一个运行和管理容器化应用程序的基本单位\",{\"1\":{\"1163\":1}}],[\"而是git的版本库\",{\"1\":{\"1151\":1}}],[\"而是会一直向后消费\",{\"1\":{\"798\":1}}],[\"而是处理其他任务\",{\"1\":{\"500\":1}}],[\"而是后端返回响应数据\",{\"1\":{\"325\":1}}],[\"而是在main函数执行之前\",{\"1\":{\"137\":1}}],[\"而其他\",{\"1\":{\"295\":1}}],[\"而且不存在重复消费\",{\"1\":{\"905\":1}}],[\"而且语法也类似\",{\"1\":{\"767\":1}}],[\"而且默认必须都是连续的\",{\"1\":{\"751\":1}}],[\"而且顺序必须相同\",{\"1\":{\"751\":1}}],[\"而且只能用在数据库层面\",{\"1\":{\"668\":1}}],[\"而且这里的绑定相当于新变量\",{\"1\":{\"285\":1}}],[\"而且快速\",{\"1\":{\"240\":1}}],[\"而枚举值是该类型中的具体某个成员的实例\",{\"1\":{\"275\":1}}],[\"而str\",{\"1\":{\"270\":1}}],[\"而\",{\"1\":{\"264\":1,\"290\":1,\"668\":1,\"971\":1,\"1118\":1,\"1220\":1}}],[\"而不能越界操作其他租户的数据\",{\"1\":{\"1502\":1}}],[\"而不必注销并重新登录\",{\"1\":{\"1118\":1,\"1186\":1}}],[\"而不需要了解虚拟机指令\",{\"1\":{\"240\":1}}],[\"而不用mongdb\",{\"1\":{\"911\":1}}],[\"而不用程序员手动释放内存\",{\"1\":{\"201\":1,\"243\":1}}],[\"而不用立刻需要去同步读取数据\",{\"1\":{\"190\":1}}],[\"而不是直接创建\",{\"1\":{\"1167\":1}}],[\"而不是使用tools处理\",{\"1\":{\"1130\":1}}],[\"而不是一个全局变量的声明文件\",{\"1\":{\"993\":1}}],[\"而不是\",{\"1\":{\"992\":1,\"1222\":1}}],[\"而不是传统的\",{\"1\":{\"899\":1}}],[\"而不是在组成预测先行的字符后\",{\"1\":{\"635\":1}}],[\"而不是以往的按顺序同步执行方法\",{\"1\":{\"500\":1}}],[\"而不是从其它地方借用数据\",{\"1\":{\"273\":1}}],[\"而不是对记录加的锁\",{\"1\":{\"219\":1}}],[\"而不是立刻需要接收端去获取数据\",{\"1\":{\"190\":1}}],[\"而不是单纯地返回某个值\",{\"1\":{\"138\":1}}],[\"而不可以用于全局变量的声明与赋值\",{\"1\":{\"126\":1}}],[\"而转为重新扫描类路径下的\",{\"1\":{\"31\":1}}],[\"是bean处理器\",{\"1\":{\"1348\":1}}],[\"是指订阅者具体要使用的内容\",{\"1\":{\"1271\":1}}],[\"是逻辑卷\",{\"1\":{\"1197\":2}}],[\"是卷组\",{\"1\":{\"1197\":2}}],[\"是卷的最小单位\",{\"1\":{\"1197\":1}}],[\"是物理卷\",{\"1\":{\"1197\":2}}],[\"是最小的可调度单元\",{\"1\":{\"1170\":1}}],[\"是直接拼接在我们得entrypoint命令后面的\",{\"1\":{\"1114\":1}}],[\"是我比较推荐的方式\",{\"1\":{\"1078\":1}}],[\"是不允许出现\",{\"1\":{\"995\":1}}],[\"是不同的数组类型\",{\"1\":{\"296\":1}}],[\"是用于对集群资源进行逻辑隔离和组织的一种机制\",{\"1\":{\"1160\":1}}],[\"是用于描述构造函数的签名\",{\"1\":{\"991\":1}}],[\"是用来传递数据的一个数据结构\",{\"1\":{\"190\":1}}],[\"是什么东西\",{\"1\":{\"989\":1}}],[\"是javascript的拓展语法\",{\"1\":{\"968\":1}}],[\"是会话\",{\"1\":{\"722\":1}}],[\"是由\",{\"1\":{\"652\":1}}],[\"是处理connection请求的入口\",{\"1\":{\"509\":1}}],[\"是requestobjectfactory这个类的对象\",{\"1\":{\"354\":1}}],[\"是objectfactorydelegatinginvocationhandler的实例\",{\"1\":{\"354\":1}}],[\"是否是标准功能的必选服务\",{\"1\":{\"1486\":1}}],[\"是否是标准功能的必选事件\",{\"1\":{\"1486\":1}}],[\"是否是标准功能的必选属性\",{\"1\":{\"1486\":1}}],[\"是否是原值\",{\"1\":{\"911\":1}}],[\"是否并行\",{\"1\":{\"1311\":1}}],[\"是否存在\",{\"1\":{\"1227\":1}}],[\"是否提供消息最大保存时间设置\",{\"1\":{\"1015\":1}}],[\"是否落盘\",{\"1\":{\"1015\":1}}],[\"是否获取到\",{\"1\":{\"911\":1}}],[\"是否count数量\",{\"1\":{\"853\":1}}],[\"是否分词处理\",{\"1\":{\"748\":1}}],[\"是否有需写入的数据\",{\"1\":{\"1383\":1}}],[\"是否有\",{\"1\":{\"488\":1}}],[\"是否把空字符串\",{\"1\":{\"379\":1}}],[\"是否授权\",{\"1\":{\"346\":1}}],[\"是否对索引进行刷新\",{\"1\":{\"222\":1}}],[\"是security三大建造器\",{\"1\":{\"333\":1}}],[\"是对\",{\"1\":{\"311\":1}}],[\"是对象避免死亡的最后机会\",{\"1\":{\"243\":1}}],[\"是有效的\",{\"1\":{\"264\":1}}],[\"是一种补偿性事务思想\",{\"1\":{\"668\":1}}],[\"是一种强一致性事务\",{\"1\":{\"668\":1}}],[\"是一种基于可执行java代码的web技术\",{\"1\":{\"651\":1}}],[\"是一样的\",{\"1\":{\"290\":1,\"982\":1}}],[\"是一款开源的分布式事务解决方案\",{\"1\":{\"212\":1}}],[\"是一个在\",{\"1\":{\"912\":1}}],[\"是一个浏览器和应用程序controller交互的中间层\",{\"1\":{\"652\":1}}],[\"是一个预先或先行匹配\",{\"1\":{\"635\":1}}],[\"是一个由\",{\"1\":{\"616\":1}}],[\"是一个指针\",{\"1\":{\"290\":1}}],[\"是一个指针变量\",{\"1\":{\"130\":1}}],[\"是一个表达式\",{\"1\":{\"280\":1}}],[\"是一个\",{\"1\":{\"277\":1}}],[\"是一个声明语句\",{\"1\":{\"123\":1}}],[\"是带缓冲的通道\",{\"1\":{\"190\":1}}],[\"是\",{\"1\":{\"154\":1,\"989\":1,\"1425\":1,\"1486\":3,\"1531\":8,\"1532\":34,\"1533\":4,\"1534\":5,\"1535\":4,\"1539\":8,\"1540\":1,\"1541\":2,\"1542\":1,\"1543\":1,\"1544\":3,\"1548\":2,\"1549\":1,\"1550\":2,\"1551\":1,\"1552\":2,\"1553\":2,\"1555\":2,\"1559\":2,\"1560\":1,\"1561\":2,\"1562\":1,\"1563\":1,\"1566\":2,\"1570\":9,\"1571\":10,\"1572\":2,\"1573\":1,\"1574\":1,\"1575\":3,\"1579\":9,\"1580\":1,\"1581\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":2,\"1590\":6,\"1591\":1,\"1592\":2,\"1593\":1,\"1594\":1,\"1596\":2,\"1601\":3,\"1602\":2,\"1603\":2,\"1605\":1,\"1606\":2,\"1611\":4,\"1612\":1,\"1613\":2,\"1615\":1,\"1622\":2,\"1624\":1,\"1628\":2,\"1630\":1,\"1631\":1,\"1635\":2,\"1637\":1,\"1641\":2}}],[\"是之前切片的两倍容量\",{\"1\":{\"152\":1}}],[\"是数组\",{\"1\":{\"152\":1}}],[\"是数组的长度并且也是切片的初始长度\",{\"1\":{\"152\":1}}],[\"是接口\",{\"1\":{\"123\":1}}],[\"就像在使用一个常规的\",{\"1\":{\"1425\":1}}],[\"就像我们的数据是以页的形式存储一样\",{\"1\":{\"1197\":1}}],[\"就像我们在\",{\"1\":{\"173\":1}}],[\"就变成了\",{\"1\":{\"1151\":1}}],[\"就获取包下的所有文件\",{\"1\":{\"1032\":1}}],[\"就绪\",{\"1\":{\"935\":1}}],[\"就抛出异常\",{\"1\":{\"801\":1,\"802\":1}}],[\"就不再是全局变量的声明文件了\",{\"1\":{\"995\":1}}],[\"就不需要加\",{\"1\":{\"935\":1}}],[\"就不能以普通方式发送消息\",{\"1\":{\"801\":1}}],[\"就不会\",{\"1\":{\"305\":1}}],[\"就不会为null\",{\"1\":{\"25\":1}}],[\"就可以在浏览器和服务器之间建立一条连接通道\",{\"1\":{\"1425\":1}}],[\"就可以同时也生成\",{\"1\":{\"996\":1}}],[\"就可以实现对象传输响应\",{\"1\":{\"730\":1}}],[\"就可以快速的抛出异常或者拒绝请求\",{\"1\":{\"213\":1}}],[\"就可在事务开启之前顺利进行数据源切换\",{\"1\":{\"632\":1}}],[\"就需要使用到\",{\"1\":{\"992\":1}}],[\"就需要修改代码\",{\"1\":{\"481\":1}}],[\"就需要引入生命周期\",{\"1\":{\"273\":1}}],[\"就违反了可拔插的原则\",{\"1\":{\"481\":1}}],[\"就忘记\",{\"1\":{\"286\":1}}],[\"就自动释放其占用的内存\",{\"1\":{\"264\":1}}],[\"就能动态改变类的结构\",{\"1\":{\"240\":1}}],[\"就会收到该主题的消息内容\",{\"1\":{\"1271\":1}}],[\"就会导致类型不完整\",{\"1\":{\"994\":1}}],[\"就会导致\",{\"1\":{\"993\":1}}],[\"就会去执行\",{\"1\":{\"935\":1}}],[\"就会触发rebalance操作\",{\"1\":{\"801\":1,\"802\":1}}],[\"就会升级为表锁\",{\"1\":{\"219\":1}}],[\"就会把这次请求记录到服务中\",{\"1\":{\"213\":1}}],[\"就相当于try\",{\"1\":{\"213\":1}}],[\"就对这次请求进行处理\",{\"1\":{\"213\":1}}],[\"就加入该事务\",{\"1\":{\"202\":1}}],[\"就创建一个新事务\",{\"1\":{\"202\":1}}],[\"就为\",{\"1\":{\"190\":1}}],[\"就是让这个文件回到最近一次git\",{\"1\":{\"1151\":1}}],[\"就是将装配的控制权移到程序之外\",{\"1\":{\"481\":1}}],[\"就是闭包执行后的返回值\",{\"1\":{\"315\":1}}],[\"就是执行lambda表达式\",{\"1\":{\"248\":1}}],[\"就是会发起一个http请求\",{\"1\":{\"213\":1}}],[\"就是说发送端发送的数据可以放在缓冲区里面\",{\"1\":{\"190\":1}}],[\"就是在运行的过程中调用自己\",{\"1\":{\"155\":1}}],[\"就产生编译错误\",{\"1\":{\"123\":1}}],[\"再创建对应用户\",{\"1\":{\"1452\":1}}],[\"再创建deviceoperator\",{\"1\":{\"1342\":1}}],[\"再调用eventloop的register方法完成注册\",{\"1\":{\"1450\":1}}],[\"再查询数据库中已上线的设备实例\",{\"1\":{\"1342\":1}}],[\"再读redis缓存\",{\"1\":{\"1331\":1}}],[\"再根据handler找到合适的适配器\",{\"1\":{\"1259\":1}}],[\"再加上逻辑卷名称\",{\"1\":{\"1197\":1}}],[\"再次执行\",{\"1\":{\"1179\":1}}],[\"再次打包为可执行jar包\",{\"1\":{\"1077\":1}}],[\"再把这个分支合并到原先的分支\",{\"1\":{\"1150\":1}}],[\"再设置加密方式和密码\",{\"1\":{\"1141\":1}}],[\"再默认导出\",{\"1\":{\"992\":1}}],[\"再抽出一层子链表\",{\"1\":{\"911\":1}}],[\"再将所有用户迁移到新功能\",{\"1\":{\"730\":1}}],[\"再转到对应服务\",{\"1\":{\"723\":1}}],[\"再in查询id\",{\"1\":{\"716\":1}}],[\"再匹配是数字中英文结合\",{\"1\":{\"635\":1}}],[\"再执行回调方法处理\",{\"1\":{\"500\":1}}],[\"再执行beandefinitionregistrypostprocessor实现类中postprocessbeanfactory方法\",{\"1\":{\"483\":1}}],[\"再通过事件通知方式处理\",{\"1\":{\"500\":1}}],[\"再一次请求\",{\"1\":{\"348\":1}}],[\"再使用\",{\"1\":{\"123\":1,\"994\":1}}],[\"再订阅\",{\"1\":{\"8\":1}}],[\"声明式\",{\"0\":{\"1215\":1}}],[\"声明式流水线\",{\"1\":{\"1083\":1}}],[\"声明式事务管理\",{\"1\":{\"202\":1}}],[\"声明全局枚举类型\",{\"1\":{\"991\":1}}],[\"声明全局类型\",{\"1\":{\"991\":1}}],[\"声明全局类\",{\"1\":{\"991\":1}}],[\"声明全局方法\",{\"1\":{\"991\":1}}],[\"声明全局变量\",{\"1\":{\"140\":1,\"991\":1}}],[\"声明文件了\",{\"1\":{\"996\":1}}],[\"声明文件有时会依赖另一个声明文件中的类型\",{\"1\":{\"995\":1}}],[\"声明文件中的依赖\",{\"0\":{\"995\":1}}],[\"声明文件必需以\",{\"1\":{\"989\":1}}],[\"声明文件\",{\"0\":{\"989\":1},\"1\":{\"996\":1}}],[\"声明school对象\",{\"1\":{\"479\":1}}],[\"声明\",{\"1\":{\"151\":2,\"190\":1,\"277\":1,\"991\":1}}],[\"声明指针变量\",{\"1\":{\"143\":1}}],[\"声明实际变量\",{\"1\":{\"143\":1}}],[\"声明数组的同时快速初始化数组\",{\"1\":{\"140\":1}}],[\"声明数组\",{\"1\":{\"140\":1}}],[\"声明局部变量\",{\"1\":{\"139\":1}}],[\"声明变量不可变\",{\"1\":{\"265\":1}}],[\"声明变量\",{\"1\":{\"123\":1,\"154\":1}}],[\"声明变量的一般形式是使用\",{\"1\":{\"122\":1}}],[\"声明过了\",{\"1\":{\"123\":1}}],[\"第十一个参数为\",{\"1\":{\"1221\":1}}],[\"第十个参数为\",{\"1\":{\"1221\":2}}],[\"第四种是在classpath下直接放配置文件\",{\"1\":{\"593\":1}}],[\"第三方应用需\",{\"1\":{\"1506\":1}}],[\"第三方授权登录\",{\"1\":{\"723\":1}}],[\"第三层\",{\"1\":{\"1207\":1}}],[\"第三个元素是\",{\"1\":{\"304\":2}}],[\"第三种方式是\",{\"1\":{\"992\":1}}],[\"第三种在classpath下建一个config文件夹\",{\"1\":{\"593\":1}}],[\"第三种\",{\"1\":{\"123\":1}}],[\"第4秒执行完毕\",{\"1\":{\"192\":1}}],[\"第3秒开始执行\",{\"1\":{\"192\":2}}],[\"第二层\",{\"1\":{\"1207\":1}}],[\"第二个参数为\",{\"1\":{\"1221\":1}}],[\"第二个是仓库\",{\"1\":{\"1202\":1}}],[\"第二个指针存放变量的地址\",{\"1\":{\"146\":1}}],[\"第二次会覆盖前面\",{\"1\":{\"935\":1}}],[\"第二步是执行\",{\"1\":{\"173\":1}}],[\"第二种方式是\",{\"1\":{\"992\":1}}],[\"第二种是直接把配置文件放到jar包的同级目录\",{\"1\":{\"593\":1}}],[\"第二种\",{\"1\":{\"123\":1}}],[\"第\",{\"1\":{\"133\":1,\"174\":1,\"279\":1}}],[\"第一层\",{\"1\":{\"1207\":1}}],[\"第一次查询\",{\"1\":{\"216\":2}}],[\"第一步是下载源码包\",{\"1\":{\"173\":1}}],[\"第一个参数为\",{\"1\":{\"1221\":1}}],[\"第一个是用户\",{\"1\":{\"1202\":1}}],[\"第一个指针存放第二个指针的地址\",{\"1\":{\"146\":1}}],[\"第一个\",{\"1\":{\"129\":1}}],[\"第一种方式是\",{\"1\":{\"992\":1}}],[\"第一种是在jar包的同一目录下建一个config文件夹\",{\"1\":{\"593\":1}}],[\"第一种\",{\"1\":{\"123\":1}}],[\"布尔运算符\",{\"0\":{\"1223\":1}}],[\"布尔类型为\",{\"1\":{\"123\":1}}],[\"布尔型\",{\"0\":{\"119\":1}}],[\"其用于创建selector与channel\",{\"1\":{\"1445\":1}}],[\"其后的通讯数据都是以\",{\"1\":{\"1425\":1}}],[\"其内部的executor函数会立即执行\",{\"1\":{\"1000\":1}}],[\"其余类型的extensionloader都会使用extensioninjector类型的extensionloader的adaptiveextensioninjector作为injector\",{\"1\":{\"736\":1}}],[\"其余是可变的\",{\"1\":{\"199\":1}}],[\"其实是\",{\"1\":{\"289\":1}}],[\"其实就等于一个数组\",{\"1\":{\"277\":1}}],[\"其它语言要手动调用\",{\"1\":{\"264\":1}}],[\"其\",{\"1\":{\"152\":1}}],[\"其中set\",{\"1\":{\"1486\":1}}],[\"其中post是默认生成的属性上报事件\",{\"1\":{\"1486\":1}}],[\"其中这个crc校验为2个字节\",{\"1\":{\"1279\":1}}],[\"其中一个端点连接到\",{\"1\":{\"1170\":1}}],[\"其中最重要的就是称为stage\",{\"1\":{\"1151\":1}}],[\"其中dispatch可以处理action事件传回的promise对象\",{\"1\":{\"998\":1}}],[\"其中声明文件用于语义检查\",{\"1\":{\"984\":1}}],[\"其中包含三个属性\",{\"1\":{\"773\":1}}],[\"其中a最终产生代理对象\",{\"1\":{\"383\":1}}],[\"其中每一个元素都是一个数组\",{\"1\":{\"277\":1}}],[\"其中list和set接口继承collections\",{\"1\":{\"228\":1}}],[\"其中\",{\"1\":{\"152\":1,\"266\":1,\"1271\":1}}],[\"其中首个字符不能为数字\",{\"1\":{\"122\":1}}],[\"其他返回401\",{\"1\":{\"1532\":1}}],[\"其他\",{\"1\":{\"1309\":1}}],[\"其他任何值表明有错误\",{\"1\":{\"1220\":1}}],[\"其他组件和客户端可以通过service的ip地址和端口来访问后端pod中运行的应用程序\",{\"1\":{\"1171\":1}}],[\"其他容器将会在同一网络命名空间中启动\",{\"1\":{\"1170\":1}}],[\"其他容器在启动时会共享该网络命名空间和虚拟网络设备\",{\"1\":{\"1170\":1}}],[\"其他的变量需要先定义出来\",{\"1\":{\"992\":1}}],[\"其他的比如\",{\"1\":{\"103\":1}}],[\"其他要发送的消息\",{\"1\":{\"824\":1}}],[\"其他缓存方案\",{\"1\":{\"216\":1}}],[\"其他协程也会结束\",{\"1\":{\"185\":1}}],[\"其他不会执行\",{\"1\":{\"131\":1}}],[\"其他被忽略\",{\"1\":{\"131\":1}}],[\"切点为被\",{\"1\":{\"911\":1}}],[\"切点位置\",{\"1\":{\"382\":1}}],[\"切入点\",{\"1\":{\"382\":1}}],[\"切片操作并不会创建新的字符串对象\",{\"1\":{\"268\":1}}],[\"切片截取\",{\"1\":{\"152\":1}}],[\"切片是空的\",{\"1\":{\"152\":2}}],[\"切片是可索引的\",{\"1\":{\"152\":1}}],[\"切片\",{\"0\":{\"268\":1},\"1\":{\"152\":1,\"153\":1,\"174\":1}}],[\"切片提供了计算容量的方法\",{\"1\":{\"152\":1}}],[\"切片不需要说明长度\",{\"1\":{\"152\":1}}],[\"切片slice\",{\"0\":{\"152\":1}}],[\"切片类型\",{\"1\":{\"121\":1,\"268\":1}}],[\"切换工作目录\",{\"1\":{\"1215\":1}}],[\"切换到另一个分支\",{\"1\":{\"1151\":1}}],[\"切换\",{\"1\":{\"1148\":1}}],[\"切换数据库\",{\"1\":{\"1141\":1}}],[\"切换数据源的操作放在业务层进行操作\",{\"1\":{\"632\":1}}],[\"切换实例的重试次数\",{\"1\":{\"213\":1}}],[\"切换环境\",{\"1\":{\"96\":1}}],[\"切换淘宝源\",{\"1\":{\"29\":1}}],[\"指标1\",{\"1\":{\"1484\":1}}],[\"指示\",{\"1\":{\"1214\":1}}],[\"指令按照从上到下\",{\"1\":{\"1102\":1}}],[\"指向镜像的url\",{\"1\":{\"1202\":1}}],[\"指向同一个对象\",{\"1\":{\"200\":1}}],[\"指向指针\",{\"1\":{\"146\":1}}],[\"指向指针的指针变量\",{\"1\":{\"146\":1}}],[\"指向指针的指针变量声明格式如下\",{\"1\":{\"146\":1}}],[\"指向指针的指针\",{\"0\":{\"146\":1}}],[\"指向浮点型\",{\"1\":{\"142\":1}}],[\"指向整型\",{\"1\":{\"142\":1}}],[\"指针指向的数据被放置在了堆上\",{\"1\":{\"298\":1}}],[\"指针数组\",{\"0\":{\"145\":1}}],[\"指针也称为空指针\",{\"1\":{\"144\":1}}],[\"指针使用流程\",{\"1\":{\"143\":1}}],[\"指针声明格式如下\",{\"1\":{\"142\":1}}],[\"指针\",{\"0\":{\"141\":1},\"1\":{\"146\":1}}],[\"指针变量的存储地址\",{\"1\":{\"143\":2}}],[\"指针变量\",{\"1\":{\"130\":1,\"146\":1}}],[\"指针类型\",{\"1\":{\"121\":1}}],[\"指定将流量转发到的pod中容器的端口号\",{\"1\":{\"1171\":1}}],[\"指定service将公开的端口号\",{\"1\":{\"1171\":1}}],[\"指定端口使用的协议\",{\"1\":{\"1171\":1}}],[\"指定的浮点数\",{\"1\":{\"909\":1}}],[\"指定自定义分区器\",{\"1\":{\"802\":1}}],[\"指定自持字符长度\",{\"1\":{\"749\":1}}],[\"指定\",{\"1\":{\"801\":1,\"1450\":1}}],[\"指定字段查询\",{\"0\":{\"763\":1}}],[\"指定key\",{\"1\":{\"377\":1}}],[\"指定name\",{\"1\":{\"377\":1}}],[\"指定注解\",{\"1\":{\"376\":1}}],[\"指定包\",{\"1\":{\"376\":1}}],[\"指定变量类型\",{\"1\":{\"123\":1}}],[\"指定具体的版本号\",{\"1\":{\"57\":1}}],[\"数据等\",{\"1\":{\"1503\":1}}],[\"数据缓存\",{\"1\":{\"1501\":1}}],[\"数据长度\",{\"1\":{\"1486\":4}}],[\"数据调用方式咨询胡涛\",{\"1\":{\"1479\":1}}],[\"数据格式问题\",{\"1\":{\"1459\":1}}],[\"数据到\",{\"1\":{\"1425\":1}}],[\"数据转移\",{\"1\":{\"1402\":1}}],[\"数据流流转\",{\"0\":{\"1330\":1}}],[\"数据持久化与访问\",{\"1\":{\"1241\":1}}],[\"数据类\",{\"1\":{\"1240\":1}}],[\"数据类型\",{\"0\":{\"118\":1},\"1\":{\"773\":1}}],[\"数据架构\",{\"1\":{\"1237\":1}}],[\"数据一致性\",{\"1\":{\"1236\":1,\"1240\":1}}],[\"数据模型\",{\"0\":{\"1062\":1}}],[\"数据\",{\"0\":{\"1061\":1},\"1\":{\"1279\":1}}],[\"数据的导入导出\",{\"0\":{\"1055\":1}}],[\"数据改变组件刷新\",{\"1\":{\"1002\":1}}],[\"数据同步\",{\"0\":{\"922\":1}}],[\"数据存盘时\",{\"1\":{\"915\":1}}],[\"数据结构\",{\"1\":{\"911\":1}}],[\"数据恢复也比较快\",{\"1\":{\"911\":1}}],[\"数据库\",{\"0\":{\"1668\":1},\"1\":{\"1501\":1}}],[\"数据库架构\",{\"0\":{\"1063\":1}}],[\"数据库地址端口\",{\"1\":{\"850\":1}}],[\"数据库驱动名\",{\"1\":{\"850\":2}}],[\"数据库密码\",{\"1\":{\"850\":1}}],[\"数据库账号\",{\"1\":{\"850\":1}}],[\"数据库连接池配置\",{\"1\":{\"850\":1}}],[\"数据库连接池类型\",{\"1\":{\"850\":1}}],[\"数据库连接池名\",{\"1\":{\"850\":1}}],[\"数据库连接地址\",{\"1\":{\"850\":1}}],[\"数据库配置\",{\"1\":{\"850\":1,\"1515\":1}}],[\"数据库及连接池配置\",{\"0\":{\"595\":1}}],[\"数据加密脱敏\",{\"0\":{\"718\":1}}],[\"数据源datasource\",{\"1\":{\"849\":1}}],[\"数据源名称和数据源的映射\",{\"1\":{\"632\":1}}],[\"数据源上下文\",{\"1\":{\"632\":1}}],[\"数据源就不能再进行随意切换了\",{\"1\":{\"632\":1}}],[\"数据绑定\",{\"1\":{\"375\":1}}],[\"数据拷贝\",{\"1\":{\"266\":1}}],[\"数据可靠性\",{\"1\":{\"223\":1}}],[\"数据保持一致\",{\"1\":{\"212\":1}}],[\"数据之后就关闭了通道\",{\"1\":{\"190\":1}}],[\"数据发送端就无法再发送数据了\",{\"1\":{\"190\":1}}],[\"数组元素的类型\",{\"1\":{\"1486\":4}}],[\"数组元素的个数\",{\"1\":{\"1486\":4}}],[\"数组格式\",{\"1\":{\"1121\":1}}],[\"数组实现了\",{\"1\":{\"320\":1}}],[\"数组不是迭代器\",{\"1\":{\"320\":1}}],[\"数组到map的转换\",{\"0\":{\"309\":1}}],[\"数组变成一个迭代器\",{\"1\":{\"279\":1}}],[\"数组切片\",{\"1\":{\"277\":1}}],[\"数组越界\",{\"1\":{\"230\":1}}],[\"数组\",{\"0\":{\"277\":1},\"1\":{\"133\":1,\"228\":1,\"928\":1}}],[\"数组类型\",{\"1\":{\"121\":1,\"1486\":4}}],[\"数值类型\",{\"1\":{\"123\":1}}],[\"数字比较\",{\"1\":{\"1222\":1}}],[\"数字验证时\",{\"1\":{\"1222\":1}}],[\"数字类型\",{\"0\":{\"120\":1}}],[\"数字\",{\"1\":{\"117\":1,\"122\":1,\"928\":1}}],[\"下发指令到设备\",{\"0\":{\"1331\":1}}],[\"下发\",{\"1\":{\"1330\":1}}],[\"下面使用\",{\"1\":{\"1486\":4}}],[\"下面是对ports字段配置的解释\",{\"1\":{\"1171\":1}}],[\"下面是pod的创建和管理的基本流程\",{\"1\":{\"1162\":1}}],[\"下面的代码描述了从拷贝切片的\",{\"1\":{\"152\":1}}],[\"下\",{\"1\":{\"1065\":1}}],[\"下次从缓存中取\",{\"1\":{\"1345\":1}}],[\"下次事务id值\",{\"1\":{\"1049\":1}}],[\"下次请求只需验证session中是否有用户信息\",{\"1\":{\"722\":1}}],[\"下述样例等效\",{\"1\":{\"969\":1}}],[\"下一匹配的搜索紧随上一匹配之后\",{\"1\":{\"635\":1}}],[\"下一个过滤器链\",{\"1\":{\"471\":1}}],[\"下一次请求将saml信息到应用端使用密钥进行f认证\",{\"1\":{\"1491\":1}}],[\"下一次请求拿着token\",{\"1\":{\"723\":1}}],[\"下一次也不会拉取未确认的数据\",{\"1\":{\"797\":1}}],[\"下一次登录将token放在cookie中或者请求头中携带到后端服务器\",{\"1\":{\"722\":1}}],[\"下一次8秒开始执行\",{\"1\":{\"192\":1}}],[\"下一次9秒开始执行\",{\"1\":{\"192\":1}}],[\"下标索引与\",{\"0\":{\"305\":1}}],[\"下单锁定\",{\"1\":{\"236\":1}}],[\"下生成相应的文件\",{\"1\":{\"173\":2}}],[\"下载完毕后直接启动\",{\"1\":{\"1200\":1}}],[\"下载gradle进行构建\",{\"1\":{\"1073\":1}}],[\"下载后引用\",{\"1\":{\"934\":1}}],[\"下载jsencrypt\",{\"1\":{\"720\":1}}],[\"下载地址\",{\"1\":{\"642\":2}}],[\"下载protoc\",{\"1\":{\"642\":2}}],[\"下载\",{\"0\":{\"642\":1},\"1\":{\"1129\":1}}],[\"下载包到gopath的pkg中\",{\"1\":{\"173\":1}}],[\"下载新的依赖包\",{\"1\":{\"173\":1}}],[\"下载获取激活码\",{\"1\":{\"86\":1}}],[\"下的元素创建为一个新的切片\",{\"1\":{\"152\":1}}],[\"下划线组成\",{\"1\":{\"122\":1}}],[\"下划线\",{\"1\":{\"117\":1}}],[\"结果获取不到\",{\"1\":{\"1002\":1}}],[\"结合\",{\"1\":{\"1503\":1}}],[\"结合springboot的profile的使用\",{\"1\":{\"1078\":1}}],[\"结合paho\",{\"1\":{\"1023\":1}}],[\"结合箭头函数\",{\"1\":{\"985\":1}}],[\"结合aop使用\",{\"1\":{\"911\":1}}],[\"结束行p\",{\"1\":{\"1187\":1}}],[\"结束\",{\"1\":{\"421\":1,\"579\":1,\"703\":1}}],[\"结构型模式\",{\"1\":{\"1254\":1}}],[\"结构中的话\",{\"1\":{\"1222\":1}}],[\"结构化数据\",{\"1\":{\"1061\":1}}],[\"结构化类型\",{\"1\":{\"121\":1}}],[\"结构\",{\"1\":{\"158\":1}}],[\"结构体类型\",{\"1\":{\"1486\":4}}],[\"结构体中的闭包\",{\"0\":{\"316\":1}}],[\"结构体中有一个或多个成员\",{\"1\":{\"148\":1}}],[\"结构体从其它对象借用数据\",{\"1\":{\"273\":1}}],[\"结构体的定义中\",{\"1\":{\"273\":1}}],[\"结构体的格式如下\",{\"1\":{\"148\":1}}],[\"结构体数据的所有权\",{\"0\":{\"273\":1}}],[\"结构体样例\",{\"1\":{\"181\":1}}],[\"结构体作为指针\",{\"0\":{\"151\":1}}],[\"结构体作为函数参数\",{\"0\":{\"150\":1}}],[\"结构体定义需要使用\",{\"1\":{\"148\":1}}],[\"结构体是由一系列具有相同类型或不同类型的数据构成的数据集合\",{\"1\":{\"147\":1}}],[\"结构体\",{\"0\":{\"147\":1,\"271\":1},\"1\":{\"149\":1}}],[\"结构字段等等\",{\"1\":{\"116\":1}}],[\"结尾\",{\"1\":{\"117\":1,\"1425\":1}}],[\"家族中的其它语言一样以分号\",{\"1\":{\"117\":1}}],[\"表结构梳理\",{\"0\":{\"1463\":1}}],[\"表级锁\",{\"1\":{\"1047\":1}}],[\"表和字段的关系\",{\"1\":{\"748\":1}}],[\"表明哪些源可以访问资源\",{\"1\":{\"725\":1}}],[\"表关系\",{\"0\":{\"582\":1}}],[\"表\",{\"0\":{\"577\":1,\"701\":1,\"1303\":1},\"1\":{\"1477\":1}}],[\"表单登录成功或失败的处理逻辑\",{\"1\":{\"348\":1}}],[\"表示订阅所匹配到的多个主题\",{\"1\":{\"1272\":1}}],[\"表示订阅已处理完成\",{\"1\":{\"530\":1}}],[\"表示以当前分支的commitid提交节点创建新的分支并切换到新分支\",{\"1\":{\"1150\":1}}],[\"表示核查工作区相对于版本库修改过的文件\",{\"1\":{\"1150\":1}}],[\"表示映射宿主机指定端口到容器端口\",{\"1\":{\"1109\":1}}],[\"表示随机映射宿主机的端口到已暴露容器端口\",{\"1\":{\"1109\":1}}],[\"表示注释\",{\"1\":{\"1102\":1}}],[\"表示将会由\",{\"1\":{\"996\":1}}],[\"表示此时的全局变量是一个常量\",{\"1\":{\"991\":1}}],[\"表示此方法会在执行目标controller方法之前执行\",{\"1\":{\"375\":1}}],[\"表示变量是否可选\",{\"1\":{\"985\":1}}],[\"表示节点当前的负荷越大\",{\"1\":{\"756\":1}}],[\"表示是否允许请求带有凭证\",{\"1\":{\"725\":1}}],[\"表示是切片类型\",{\"1\":{\"152\":1}}],[\"表示离每月15号最近的那个工作日触发\",{\"1\":{\"656\":1}}],[\"表示离指定日期的最近工作日\",{\"1\":{\"656\":1}}],[\"表示当月的最后一天\",{\"1\":{\"656\":1}}],[\"表示最后的意思\",{\"1\":{\"656\":1}}],[\"表示在每月的第三个周六\",{\"1\":{\"656\":1}}],[\"表示每月的第几个周几\",{\"1\":{\"656\":1}}],[\"表示每一秒都会触发\",{\"1\":{\"656\":1}}],[\"表示从5秒开始\",{\"1\":{\"656\":1}}],[\"表示区间\",{\"1\":{\"656\":1}}],[\"表示周一\",{\"1\":{\"656\":1}}],[\"表示所有值\",{\"1\":{\"656\":1}}],[\"表示不指定值\",{\"1\":{\"656\":1}}],[\"表示要织入通用功能的方法和类的位置\",{\"1\":{\"382\":1}}],[\"表示可以从这个仓库下载snapshot版本的构件\",{\"1\":{\"1202\":1}}],[\"表示可以从这个仓库下载releases版本的构件\",{\"1\":{\"1202\":1}}],[\"表示可变借用\",{\"1\":{\"289\":1}}],[\"表示可克隆\",{\"1\":{\"200\":1}}],[\"表示该方法对\",{\"1\":{\"289\":1}}],[\"表示\",{\"1\":{\"289\":1,\"656\":1}}],[\"表示字符串\",{\"1\":{\"117\":1}}],[\"表示整型数字\",{\"1\":{\"117\":1}}],[\"表达式为\",{\"1\":{\"1223\":1}}],[\"表达式thymeleaf\",{\"1\":{\"982\":1}}],[\"表达式来配置任务执行时间\",{\"1\":{\"658\":1}}],[\"表达式赋值\",{\"1\":{\"282\":1}}],[\"表达式都会被求值\",{\"1\":{\"131\":1}}],[\"表达式\",{\"1\":{\"116\":1,\"584\":1,\"706\":1,\"982\":1}}],[\"关注读事件\",{\"1\":{\"1383\":1}}],[\"关联安装表主键\",{\"1\":{\"1468\":1}}],[\"关联软件包\",{\"1\":{\"1467\":1}}],[\"关联激活时间\",{\"1\":{\"1304\":1}}],[\"关联网关\",{\"1\":{\"1304\":1}}],[\"关联\",{\"1\":{\"1272\":1}}],[\"关联函数\",{\"0\":{\"291\":1}}],[\"关闭开机启动\",{\"1\":{\"1095\":1}}],[\"关闭httpclient\",{\"1\":{\"213\":1}}],[\"关系表达式或逻辑表达式\",{\"1\":{\"133\":1}}],[\"关键字jwt认证\",{\"1\":{\"1616\":2}}],[\"关键字的\",{\"1\":{\"995\":1}}],[\"关键字只用在特征对象的类型声明上\",{\"1\":{\"298\":1}}],[\"关键字来实现遍历读取到的数据\",{\"1\":{\"190\":1}}],[\"关键字来定义\",{\"1\":{\"154\":1}}],[\"关键字用于\",{\"1\":{\"153\":1}}],[\"关键字\",{\"0\":{\"189\":1},\"1\":{\"117\":1,\"122\":1,\"138\":2,\"1187\":1}}],[\"关于gradle\",{\"0\":{\"27\":1}}],[\"同步调用\",{\"1\":{\"1486\":1}}],[\"同步的\",{\"1\":{\"998\":1}}],[\"同步刷盘\",{\"1\":{\"915\":1}}],[\"同步发送\",{\"1\":{\"915\":1}}],[\"同步处理方式\",{\"1\":{\"223\":1}}],[\"同样此时变成了低优先级覆盖高优先级\",{\"1\":{\"593\":1}}],[\"同样会得到编译错误\",{\"1\":{\"126\":1}}],[\"同理\",{\"1\":{\"593\":1}}],[\"同意还是驳回\",{\"1\":{\"586\":1,\"708\":1}}],[\"同时支持手动添加api接口\",{\"1\":{\"1503\":1}}],[\"同时保证设备名称唯一性\",{\"1\":{\"1477\":1}}],[\"同时新增设备基础信息\",{\"1\":{\"1477\":1}}],[\"同时对localsession进行订阅\",{\"1\":{\"1321\":1}}],[\"同时对应的行记录加锁\",{\"1\":{\"219\":1}}],[\"同时我们可以通过\",{\"1\":{\"982\":1}}],[\"同时生成各种单据\",{\"1\":{\"915\":1}}],[\"同时更新对应的商品信息\",{\"1\":{\"911\":1}}],[\"同时发送服务调用请求到数据交换服务从缓存中取字节数组\",{\"1\":{\"911\":1}}],[\"同时设置\",{\"1\":{\"910\":1}}],[\"同时设置对象后置处理器\",{\"1\":{\"333\":1}}],[\"同时创建租户所属的角色或组\",{\"1\":{\"1452\":1}}],[\"同时创建nioendpoint\",{\"1\":{\"689\":1}}],[\"同时创建第二个代办任务\",{\"1\":{\"586\":1,\"708\":1}}],[\"同时创建新的线程替代它执行其他任务\",{\"1\":{\"233\":1}}],[\"同时借用多个数组元素\",{\"0\":{\"306\":1}}],[\"同时通过使用消息队列方式\",{\"1\":{\"224\":1}}],[\"同时添加多个元素\",{\"1\":{\"152\":1}}],[\"同时信任此位置的子文件夹\",{\"1\":{\"45\":1}}],[\"同一客户端的两个客户端角色\",{\"1\":{\"1030\":1}}],[\"同一clientid问题\",{\"1\":{\"846\":1}}],[\"同一时刻\",{\"1\":{\"265\":1}}],[\"同一个\",{\"0\":{\"1166\":1}}],[\"同一个程序中的所有\",{\"1\":{\"189\":1}}],[\"同一个文件夹下的文件只能有一个包名\",{\"1\":{\"117\":1}}],[\"同一包下的文件可以放在不同目录下\",{\"1\":{\"170\":1}}],[\"同一目录下\",{\"1\":{\"170\":1}}],[\"同一类型的多个变量可以声明在同一行\",{\"1\":{\"126\":1}}],[\"错误场景中恢复\",{\"1\":{\"160\":1}}],[\"错误处理\",{\"0\":{\"158\":1}}],[\"错误\",{\"1\":{\"116\":1}}],[\"但推荐使用\",{\"1\":{\"1171\":1}}],[\"但pod本身不是一个配置文件\",{\"1\":{\"1163\":1}}],[\"但耗时\",{\"1\":{\"1036\":1}}],[\"但实际上很好理解\",{\"1\":{\"995\":1}}],[\"但数据是静态的\",{\"1\":{\"980\":1}}],[\"但数据在经过一段时间后才能保持一致\",{\"1\":{\"212\":1}}],[\"但value是一个键值对\",{\"1\":{\"909\":1}}],[\"但会导致连接状态不准确\",{\"1\":{\"847\":1}}],[\"但不会在拉取数据之后立即提交\",{\"1\":{\"798\":2}}],[\"但当同时存在bootstrap和application时后者仍会覆盖前者中的配置\",{\"1\":{\"593\":1}}],[\"但当同一配置在bootstrap\",{\"1\":{\"593\":1}}],[\"但如果共享变量被其他线程使用\",{\"1\":{\"208\":1}}],[\"但一般不建议这么做\",{\"1\":{\"170\":1}}],[\"但一般取相同\",{\"1\":{\"170\":1}}],[\"但我们在使用递归时\",{\"1\":{\"155\":1}}],[\"但在结构体中我们可以为不同项定义不同的数据类型\",{\"1\":{\"147\":1}}],[\"但是如果出现在\",{\"1\":{\"1222\":1}}],[\"但是使用时加引号\",{\"1\":{\"1220\":1}}],[\"但是一般逻辑卷会在\",{\"1\":{\"1197\":1}}],[\"但是在\",{\"1\":{\"989\":1}}],[\"但是会对最后一个token在倒排序索引列表中进行通配符搜索\",{\"1\":{\"751\":1}}],[\"但是\",{\"1\":{\"305\":1,\"982\":1,\"1118\":1}}],[\"但是我们只关心\",{\"1\":{\"282\":1}}],[\"但是可以正常访问其它的字段\",{\"1\":{\"271\":1}}],[\"但是可以设置等待时间\",{\"1\":{\"232\":1}}],[\"但是不同的是\",{\"1\":{\"264\":1}}],[\"但是还没有调用start\",{\"1\":{\"232\":1}}],[\"但是有一个例外情况\",{\"1\":{\"209\":1,\"235\":1}}],[\"但是第一个字符必须是字母或下划线而不能是数字\",{\"1\":{\"117\":1}}],[\"但是他们在整个包的内部是可见并且可用的\",{\"1\":{\"116\":1}}],[\"但也有部分容器没有\",{\"1\":{\"50\":1}}],[\"像面向对象语言中的\",{\"1\":{\"116\":2}}],[\"如设备会话注册事件\",{\"1\":{\"1321\":1}}],[\"如executabledeleteoperator\",{\"1\":{\"1301\":1}}],[\"如searchrequest\",{\"1\":{\"1248\":1}}],[\"如http\",{\"1\":{\"1200\":1,\"1506\":1}}],[\"如docker\",{\"1\":{\"1162\":1}}],[\"如之前所说\",{\"1\":{\"993\":1}}],[\"如数据库\",{\"1\":{\"789\":1}}],[\"如cookie\",{\"1\":{\"725\":1}}],[\"如get\",{\"1\":{\"725\":1}}],[\"如在秒上面设置\",{\"1\":{\"656\":1}}],[\"如annotationconfigservletwebserverapplicationcontext\",{\"1\":{\"601\":1}}],[\"如$\",{\"1\":{\"584\":1,\"706\":1}}],[\"如日志功能\",{\"1\":{\"382\":1}}],[\"如用户信息\",{\"1\":{\"345\":1}}],[\"如一个下单操作\",{\"1\":{\"212\":1}}],[\"如何跳转\",{\"1\":{\"1506\":1}}],[\"如何携带附加信息进行验证\",{\"0\":{\"1408\":1}}],[\"如何使用vi编辑器请自行百度\",{\"1\":{\"1141\":1}}],[\"如何使用指针\",{\"0\":{\"143\":1}}],[\"如何解决幻读\",{\"0\":{\"1051\":1}}],[\"如何保证数据一致性\",{\"1\":{\"911\":1}}],[\"如何保证异步库存扣减数量不会出问题\",{\"1\":{\"224\":1}}],[\"如何处理客户端的连接\",{\"1\":{\"1015\":1}}],[\"如何处理多数据源\",{\"0\":{\"896\":1}}],[\"如何处理缓存穿透\",{\"0\":{\"216\":1}}],[\"如何分词处理\",{\"1\":{\"748\":1}}],[\"如何对获取的证书校验\",{\"1\":{\"626\":1}}],[\"如何重定向到缓存的请求\",{\"0\":{\"325\":1}}],[\"如何理解original\",{\"1\":{\"270\":1}}],[\"如何让所有线程都跑到安全点的方案\",{\"1\":{\"243\":1}}],[\"如何避免索引回查\",{\"0\":{\"220\":1}}],[\"如何将一个正在运行的容器重新制作成镜像文件\",{\"0\":{\"218\":1}}],[\"如何在springboot启动时\",{\"0\":{\"210\":1}}],[\"如何按类型将数据映射到不同的类上\",{\"0\":{\"207\":1}}],[\"如test\",{\"1\":{\"206\":1}}],[\"如token\",{\"1\":{\"203\":1}}],[\"如下面代码所示\",{\"1\":{\"983\":1}}],[\"如下即确认当前list中前5条消息\",{\"1\":{\"804\":1}}],[\"如下3000毫秒\",{\"1\":{\"804\":2}}],[\"如下语句将查询address\",{\"1\":{\"763\":1}}],[\"如下\",{\"1\":{\"202\":1}}],[\"如下所示\",{\"1\":{\"146\":1}}],[\"如\",{\"1\":{\"116\":1,\"243\":1,\"376\":1,\"652\":1,\"851\":1,\"1079\":1,\"1177\":2,\"1207\":1,\"1220\":1}}],[\"如果eventloop已绑定线程\",{\"1\":{\"1450\":1}}],[\"如果enable\",{\"1\":{\"798\":4}}],[\"如果已经有连接\",{\"1\":{\"1407\":1}}],[\"如果创建时报错磁盘不存在\",{\"1\":{\"1197\":1}}],[\"如果描述文件合法\",{\"1\":{\"1162\":1}}],[\"如果满足下面的指标\",{\"1\":{\"1155\":1}}],[\"如果gc时间超过1\",{\"1\":{\"1155\":1}}],[\"如果各项参数设置合理\",{\"1\":{\"1155\":1}}],[\"如果想把这临时性分支上的改动反映到原分支上\",{\"1\":{\"1150\":1}}],[\"如果想增加切片的容量\",{\"1\":{\"152\":1}}],[\"如果这些类型的文件存在\",{\"1\":{\"1115\":1}}],[\"如果这些子线程都是守护线程\",{\"1\":{\"209\":1,\"235\":1}}],[\"如果资源文件放在\",{\"1\":{\"1065\":1}}],[\"如果菜单层数适中\",{\"1\":{\"1036\":1}}],[\"如果可以循环\",{\"1\":{\"1032\":1}}],[\"如果存在\",{\"1\":{\"1032\":1}}],[\"如果库的源码本身就是由\",{\"1\":{\"996\":1}}],[\"如果导入此库之后会扩展全局变量\",{\"1\":{\"993\":1}}],[\"如果导入的类不是上述两种类型\",{\"1\":{\"489\":1}}],[\"如果script放在了元素后面\",{\"1\":{\"935\":1}}],[\"如果script标签在元素的前面\",{\"1\":{\"935\":1}}],[\"如果锁已经过期\",{\"1\":{\"911\":1}}],[\"如果获取锁失败\",{\"1\":{\"911\":1}}],[\"如果误操作点了两次\",{\"1\":{\"911\":1}}],[\"如果需要添加多个设备使用空格分隔\",{\"1\":{\"1197\":1}}],[\"如果需要引用另一个库的类型\",{\"1\":{\"995\":1}}],[\"如果需要这样处理的字段较多\",{\"1\":{\"902\":1}}],[\"如果需要替换一种实现\",{\"1\":{\"481\":1}}],[\"如果一些字段没有传值过来\",{\"1\":{\"902\":1}}],[\"如果一个线程发生oom\",{\"0\":{\"208\":1}}],[\"如果一个指针变量存放的又是另一个指针变量的地址\",{\"1\":{\"146\":1}}],[\"如果小于250毫秒\",{\"1\":{\"850\":1}}],[\"如果minidle>0则重置为minidle的值\",{\"1\":{\"850\":1}}],[\"如果maxpoolsize小于1\",{\"1\":{\"850\":1}}],[\"如果后面有消息的offset被提交\",{\"1\":{\"798\":1}}],[\"如果中间有一批数据没有提交\",{\"1\":{\"798\":1}}],[\"如果到达了\",{\"1\":{\"798\":2}}],[\"如果我们希望查询的条件是\",{\"1\":{\"766\":1}}],[\"如果出现网络抖动\",{\"1\":{\"730\":1}}],[\"如果匹配不到就把该请求交给路径名为\",{\"1\":{\"679\":1}}],[\"如果1号正是周六\",{\"1\":{\"656\":1}}],[\"如果15号正好在工作日\",{\"1\":{\"656\":1}}],[\"如果15号正好是周六\",{\"1\":{\"656\":1}}],[\"如果15号是周未\",{\"1\":{\"656\":1}}],[\"如果指定格式为\",{\"1\":{\"656\":1}}],[\"如果在日字段上设置\",{\"1\":{\"656\":1}}],[\"如果在\",{\"1\":{\"656\":1}}],[\"如果要使用逻辑卷\",{\"1\":{\"1197\":1}}],[\"如果要构造更复杂的查询\",{\"1\":{\"767\":1}}],[\"如果要在字段中搜索特定字词\",{\"1\":{\"763\":1}}],[\"如果要执行\",{\"1\":{\"652\":1,\"681\":1}}],[\"如果要访问结构体成员\",{\"1\":{\"149\":1}}],[\"如果队列的80\",{\"1\":{\"596\":2}}],[\"如果评审通过\",{\"1\":{\"562\":1}}],[\"如果bean的实例已注册到spring容器中\",{\"1\":{\"367\":1}}],[\"如果\",{\"1\":{\"290\":1}}],[\"如果对象被引用则数量加1\",{\"1\":{\"243\":1}}],[\"如果数组元素小于64\",{\"1\":{\"228\":1}}],[\"如果数组长度不确定\",{\"1\":{\"140\":1}}],[\"如果批量处理大量订单\",{\"1\":{\"224\":1}}],[\"如果字段加了索引\",{\"1\":{\"219\":1}}],[\"如果未传具体的货主\",{\"1\":{\"911\":1}}],[\"如果未设置超时时间\",{\"1\":{\"215\":1}}],[\"如果未指定方向\",{\"1\":{\"190\":1}}],[\"如果还没成功\",{\"1\":{\"213\":1}}],[\"如果主线程抛异常退出了\",{\"0\":{\"209\":1},\"1\":{\"209\":1}}],[\"如果当前服务器磁盘空间不足就可以增加一个新磁盘对当前系统不会产生任何影响\",{\"1\":{\"1197\":1}}],[\"如果当前存在事务\",{\"1\":{\"202\":1}}],[\"如果当前没有事务\",{\"1\":{\"202\":1}}],[\"如果上面的\",{\"1\":{\"190\":1}}],[\"如果缓冲区已满\",{\"1\":{\"190\":1}}],[\"如果通道接收不到数据后\",{\"1\":{\"190\":1}}],[\"如果通道带缓冲\",{\"1\":{\"190\":1}}],[\"如果通道不带缓冲\",{\"1\":{\"190\":1}}],[\"如果多个可以处理\",{\"1\":{\"188\":1}}],[\"如果都阻塞了\",{\"1\":{\"188\":1}}],[\"如果不适用双括号\",{\"1\":{\"1222\":1}}],[\"如果不指定\",{\"1\":{\"1171\":1}}],[\"如果不用git\",{\"1\":{\"1151\":1}}],[\"如果不等于0且小于30秒则会被重置回30分钟\",{\"1\":{\"850\":1}}],[\"如果不存在或者\",{\"1\":{\"1032\":1}}],[\"如果不存在\",{\"1\":{\"652\":1,\"910\":1}}],[\"如果不使用借用\",{\"1\":{\"311\":1}}],[\"如果不是main包\",{\"1\":{\"173\":1}}],[\"如果不初始化\",{\"1\":{\"154\":1}}],[\"如果包含main包\",{\"1\":{\"173\":1}}],[\"如果你的启动命令没有指定数据库那么就必须在数据库ddl脚本中声明并指定使用该数据库\",{\"1\":{\"1115\":1}}],[\"如果你使用同名变量\",{\"1\":{\"285\":1}}],[\"如果你需要在\",{\"1\":{\"173\":2}}],[\"如果你声明了一个局部变量却没有在相同的代码块中使用它\",{\"1\":{\"126\":1}}],[\"如果是java类文件\",{\"1\":{\"1032\":1}}],[\"如果是目录\",{\"1\":{\"1032\":1}}],[\"如果是需要扩展原有模块的话\",{\"1\":{\"994\":1}}],[\"如果是二月还会自动判断是否是润年\",{\"1\":{\"656\":1}}],[\"如果是\",{\"1\":{\"173\":1,\"1222\":4,\"1227\":12}}],[\"如果是普通包\",{\"1\":{\"173\":1}}],[\"如果是正常执行\",{\"1\":{\"160\":1}}],[\"如果是get请求\",{\"1\":{\"51\":1}}],[\"如果确定是真实的\",{\"1\":{\"154\":1}}],[\"如果设置了数组的长度\",{\"1\":{\"140\":1}}],[\"如果只想读取\",{\"1\":{\"133\":1}}],[\"如果没有通道操作可以处理并且写了\",{\"1\":{\"188\":1}}],[\"如果没有\",{\"1\":{\"131\":1}}],[\"如果没有初始化\",{\"1\":{\"123\":1}}],[\"如果有\",{\"1\":{\"131\":1}}],[\"如果有多个\",{\"1\":{\"131\":1}}],[\"如果任意某个通信可以进行\",{\"1\":{\"131\":1}}],[\"如果条件为\",{\"1\":{\"131\":1}}],[\"如果变量已经使用\",{\"1\":{\"123\":1}}],[\"如果为空\",{\"1\":{\"39\":1}}],[\"语法\",{\"0\":{\"936\":1}}],[\"语法糖\",{\"1\":{\"320\":1}}],[\"语法用于关联函数和模块创建的命名空间\",{\"1\":{\"291\":1}}],[\"语法表明凡是我们没有显式声明的字段\",{\"1\":{\"271\":1}}],[\"语法格式如下\",{\"1\":{\"139\":1,\"140\":1}}],[\"语言所用到的虚拟机\",{\"1\":{\"174\":1}}],[\"语言通过内置的错误接口提供了非常简单的错误处理机制\",{\"1\":{\"158\":1}}],[\"语言提供了另外一种数据类型即接口\",{\"1\":{\"157\":1}}],[\"语言支持递归\",{\"1\":{\"155\":1}}],[\"语言教程\",{\"1\":{\"148\":2,\"151\":2}}],[\"语言\",{\"1\":{\"148\":3,\"151\":1}}],[\"语言数组声明需要指定元素类型及元素个数\",{\"1\":{\"140\":1}}],[\"语言中\",{\"1\":{\"153\":1,\"290\":1}}],[\"语言中数组可以存储同一类型的数据\",{\"1\":{\"147\":1}}],[\"语言中变量可以在三个地方声明\",{\"1\":{\"140\":1}}],[\"语言中同时有函数和方法\",{\"1\":{\"139\":1}}],[\"语言中使用\",{\"1\":{\"117\":1}}],[\"语言的递归函数实现斐波那契数列\",{\"1\":{\"155\":1}}],[\"语言的取地址符是\",{\"1\":{\"141\":1}}],[\"语言的\",{\"1\":{\"133\":1}}],[\"语言变量名由字母\",{\"1\":{\"122\":1}}],[\"语言结构\",{\"0\":{\"116\":1}}],[\"语句2\",{\"1\":{\"315\":1}}],[\"语句1\",{\"1\":{\"315\":1}}],[\"语句使循环退出\",{\"1\":{\"188\":1}}],[\"语句实现了一种监听模式\",{\"1\":{\"188\":1}}],[\"语句都会保证执行并把控制权交还给接收到\",{\"1\":{\"159\":1}}],[\"语句设定了结构体的名称\",{\"1\":{\"148\":1}}],[\"语句定义一个新的数据类型\",{\"1\":{\"148\":1}}],[\"语句块\",{\"1\":{\"138\":1}}],[\"语句块中的行索引\",{\"1\":{\"129\":1}}],[\"语句同样可以包含一些操作\",{\"1\":{\"138\":1}}],[\"语句之后\",{\"1\":{\"138\":1}}],[\"语句判断布尔表达式\",{\"1\":{\"131\":1}}],[\"语句\",{\"1\":{\"116\":1,\"148\":1,\"188\":1}}],[\"函数1\",{\"1\":{\"1484\":1}}],[\"函数属性存放的是函数的地址\",{\"1\":{\"998\":1}}],[\"函数声明\",{\"1\":{\"986\":1}}],[\"函数的类型\",{\"0\":{\"986\":1}}],[\"函数的参数是\",{\"1\":{\"298\":2}}],[\"函数调用\",{\"1\":{\"969\":1}}],[\"函数位于一个\",{\"1\":{\"935\":1}}],[\"函数相同\",{\"1\":{\"264\":1}}],[\"函数式组件\",{\"1\":{\"971\":1}}],[\"函数式编程\",{\"0\":{\"314\":1}}],[\"函数式接口是lambda表达式的类型\",{\"1\":{\"248\":1}}],[\"函数式的多态\",{\"1\":{\"139\":1}}],[\"函数体\",{\"1\":{\"246\":1}}],[\"函数就不\",{\"1\":{\"190\":1}}],[\"函数在接收到\",{\"1\":{\"190\":1}}],[\"函数遍历每个从通道接收到的数据\",{\"1\":{\"190\":1}}],[\"函数来关闭\",{\"1\":{\"190\":1}}],[\"函数来创建切片\",{\"1\":{\"152\":1}}],[\"函数产生一个中止程序的运行时错误\",{\"1\":{\"159\":1}}],[\"函数用于删除集合的元素\",{\"1\":{\"154\":1}}],[\"函数定义\",{\"1\":{\"140\":1}}],[\"函数定义中的变量称为形式参数\",{\"1\":{\"140\":1}}],[\"函数中\",{\"1\":{\"140\":4,\"935\":1}}],[\"函数中声明局部变量\",{\"1\":{\"140\":1}}],[\"函数外定义的变量称为全局变量\",{\"1\":{\"140\":1}}],[\"函数内定义的变量称为局部变量\",{\"1\":{\"140\":1}}],[\"函数或包在源代码中的作用范围\",{\"1\":{\"140\":1}}],[\"函数方法\",{\"1\":{\"139\":1}}],[\"函数参数\",{\"1\":{\"139\":1}}],[\"函数返回中的\",{\"1\":{\"297\":1}}],[\"函数返回多个值\",{\"1\":{\"139\":1}}],[\"函数返回两个数的最大值\",{\"1\":{\"139\":1}}],[\"函数可以显示声明\",{\"1\":{\"139\":1}}],[\"函数和接口\",{\"0\":{\"139\":1}}],[\"函数必须是内置函数\",{\"1\":{\"128\":1}}],[\"函数计算表达式的值\",{\"1\":{\"128\":1}}],[\"函数类型\",{\"1\":{\"121\":1}}],[\"函数名\",{\"1\":{\"116\":1}}],[\"函数\",{\"0\":{\"136\":1,\"137\":1,\"1221\":1},\"1\":{\"116\":1,\"139\":2,\"152\":2,\"154\":2,\"264\":1}}],[\"包或者\",{\"1\":{\"993\":1}}],[\"包或\",{\"1\":{\"993\":2,\"995\":1}}],[\"包的类型声明文件\",{\"1\":{\"993\":1}}],[\"包的声明文件中\",{\"1\":{\"992\":1}}],[\"包的声明文件与全局变量的声明文件有很大区别\",{\"1\":{\"992\":1}}],[\"包的声明文件主要有以下几种语法\",{\"1\":{\"992\":1}}],[\"包含第三方登录用户信息的管理\",{\"1\":{\"1503\":1}}],[\"包含\",{\"1\":{\"1348\":1}}],[\"包含授权成功事件监听器\",{\"1\":{\"1345\":1}}],[\"包含usertokenmanager和reactiveauthenticationmanager\",{\"1\":{\"1345\":1}}],[\"包含tokenstorage和userstorage\",{\"1\":{\"1345\":1}}],[\"包含token等信息\",{\"1\":{\"345\":1}}],[\"包含authenticationmanagerprovider\",{\"1\":{\"1345\":1}}],[\"包含物模型信息\",{\"1\":{\"1344\":1}}],[\"包含可直接执行的任务执行器\",{\"1\":{\"1335\":1}}],[\"包含map=执行器名\",{\"1\":{\"1335\":1}}],[\"包含devicegatewayservice\",{\"1\":{\"1359\":1}}],[\"包含deviceregistry\",{\"1\":{\"1344\":1}}],[\"包含devicemessageconnector\",{\"1\":{\"1331\":1}}],[\"包含daoauthenticationprovider\",{\"1\":{\"330\":1}}],[\"包含产品类别等信息\",{\"1\":{\"1304\":1}}],[\"包含rdbschemametadata信息\",{\"1\":{\"1300\":1}}],[\"包含下方多个entitytablemetadataparser\",{\"1\":{\"1294\":1}}],[\"包含发布者\",{\"1\":{\"1271\":1}}],[\"包含泛型data属性\",{\"1\":{\"1244\":1}}],[\"包含子目录\",{\"1\":{\"1032\":1}}],[\"包含很多子属性\",{\"1\":{\"991\":1}}],[\"包含数据库基本信息\",{\"1\":{\"897\":1}}],[\"包含nacosservicediscovery\",{\"1\":{\"866\":1}}],[\"包含nacosdiscoveryproperties\",{\"1\":{\"865\":1}}],[\"包含xml等mappedstatement信息\",{\"1\":{\"852\":1}}],[\"包含xml信息\",{\"1\":{\"578\":1,\"702\":1}}],[\"包含事务\",{\"1\":{\"801\":2}}],[\"包含的字段\",{\"1\":{\"780\":1}}],[\"包含格式和签名算法\",{\"1\":{\"726\":1}}],[\"包含connection等信息用于发送设备消息\",{\"1\":{\"1342\":1}}],[\"包含connectionfactory\",{\"1\":{\"559\":1}}],[\"包含connector\",{\"1\":{\"693\":1}}],[\"包含supplier\",{\"1\":{\"1345\":1}}],[\"包含saveandrefresh\",{\"1\":{\"1248\":1}}],[\"包含service\",{\"1\":{\"693\":1}}],[\"包含sharedobjects\",{\"1\":{\"333\":1}}],[\"包含生成html的代码\",{\"1\":{\"651\":1}}],[\"包含公钥和私钥\",{\"1\":{\"627\":2}}],[\"包含filterwebhandler\",{\"1\":{\"473\":1}}],[\"包含了过滤器集\",{\"1\":{\"471\":1}}],[\"包含已认证主体\",{\"1\":{\"346\":1}}],[\"包含多个authenticationprovider\",{\"1\":{\"340\":1}}],[\"包含多个授权\",{\"1\":{\"338\":1}}],[\"包含安全过滤器链\",{\"1\":{\"332\":1}}],[\"包含bin\",{\"1\":{\"168\":1}}],[\"包那样\",{\"1\":{\"173\":1}}],[\"包括状态码\",{\"1\":{\"1229\":1}}],[\"包括编译后的\",{\"1\":{\"1065\":1}}],[\"包括数据表中的数据\",{\"1\":{\"1056\":1}}],[\"包括目录\",{\"1\":{\"1032\":1,\"1227\":1}}],[\"包括外部图片之类的文件加载完后\",{\"1\":{\"935\":1}}],[\"包括以下信息\",{\"1\":{\"850\":1}}],[\"包括闲置和使用中的连接\",{\"1\":{\"850\":1}}],[\"包括当前index及之前poll抛弃的消息\",{\"1\":{\"804\":1}}],[\"包括当前指定的index\",{\"1\":{\"804\":1}}],[\"包括之前poll被抛弃的消息\",{\"1\":{\"804\":1}}],[\"包括complex64\",{\"1\":{\"123\":1}}],[\"包括常量\",{\"1\":{\"116\":1}}],[\"包\",{\"1\":{\"117\":1,\"173\":1}}],[\"包声明\",{\"1\":{\"116\":1}}],[\"包中\",{\"1\":{\"31\":1}}],[\"映射路径到controllerendpoints\",{\"1\":{\"104\":1}}],[\"新密码\",{\"1\":{\"1553\":1}}],[\"新的mqtt客户端\",{\"1\":{\"1489\":1}}],[\"新的flux发布者对象\",{\"1\":{\"538\":1}}],[\"新分支名\",{\"1\":{\"1150\":1}}],[\"新一代java模板引擎\",{\"1\":{\"980\":1}}],[\"新生代\",{\"1\":{\"243\":2}}],[\"新纪录+收货中的待收货数\",{\"1\":{\"236\":1}}],[\"新德里\",{\"1\":{\"154\":1}}],[\"新增用户时绑定租户\",{\"1\":{\"1643\":1}}],[\"新增子典子项列表\",{\"1\":{\"1621\":1}}],[\"新增或修改字典子项\",{\"0\":{\"1621\":1}}],[\"新增或修改字典条目\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"新增平台\",{\"1\":{\"1607\":1}}],[\"新增租户\",{\"1\":{\"1586\":1}}],[\"新增租户时创建默认用户\",{\"1\":{\"1537\":1}}],[\"新增菜单\",{\"1\":{\"1586\":1}}],[\"新增区域及点位信息\",{\"1\":{\"1477\":1}}],[\"新增运行信息\",{\"1\":{\"1477\":1}}],[\"新增es数据\",{\"0\":{\"222\":1}}],[\"新增\",{\"0\":{\"1539\":1,\"1548\":1,\"1559\":1,\"1570\":1,\"1579\":1,\"1590\":1,\"1601\":1,\"1611\":1},\"1\":{\"103\":1}}],[\"新建租户下的子用户\",{\"1\":{\"1495\":1}}],[\"新建用户的权限\",{\"1\":{\"1495\":1}}],[\"新建用户绑定租户001\",{\"1\":{\"1495\":1}}],[\"新建\",{\"1\":{\"103\":2}}],[\"警告\",{\"1\":{\"103\":1}}],[\"卸载\",{\"1\":{\"102\":1}}],[\"项目环境信息\",{\"0\":{\"1645\":1}}],[\"项目技术\",{\"0\":{\"1501\":1}}],[\"项目背景\",{\"0\":{\"1500\":1}}],[\"项目介绍\",{\"0\":{\"1471\":1,\"1499\":1}}],[\"项目负责人\",{\"0\":{\"1470\":1,\"1498\":1}}],[\"项目id\",{\"1\":{\"1467\":1}}],[\"项目\",{\"1\":{\"1463\":1}}],[\"项目前缀\",{\"1\":{\"1455\":1}}],[\"项目输出路径\",{\"1\":{\"1065\":1}}],[\"项目的\",{\"1\":{\"1065\":1}}],[\"项目启动获取订阅组绑定的所有产品进行通配符订阅\",{\"1\":{\"1489\":1}}],[\"项目启动执行\",{\"0\":{\"1339\":1}}],[\"项目启动\",{\"0\":{\"1318\":1},\"1\":{\"1354\":1}}],[\"项目启动后\",{\"1\":{\"879\":1}}],[\"项目启动时加载\",{\"1\":{\"1472\":1}}],[\"项目启动时启用场景\",{\"1\":{\"1325\":1}}],[\"项目启动时\",{\"1\":{\"105\":1,\"1338\":1}}],[\"项目3\",{\"1\":{\"168\":1}}],[\"项目2\",{\"1\":{\"168\":1}}],[\"项目名称\",{\"1\":{\"102\":1}}],[\"项目构建\",{\"0\":{\"101\":1},\"1\":{\"1075\":1}}],[\"项目信息\",{\"0\":{\"88\":1}}],[\"传给对应订阅者进行处理\",{\"1\":{\"1331\":1}}],[\"传递了三个参数\",{\"1\":{\"1220\":1}}],[\"传递了一个参数\",{\"1\":{\"1220\":1}}],[\"传递过来的依赖\",{\"1\":{\"1068\":1,\"1076\":1}}],[\"传递字段\",{\"1\":{\"780\":1}}],[\"传递到上游发布者\",{\"1\":{\"557\":1}}],[\"传统js\",{\"1\":{\"720\":1}}],[\"传统的spring管理事务是放在service业务层操作的\",{\"1\":{\"632\":1}}],[\"传参\",{\"1\":{\"658\":1}}],[\"传参问题\",{\"1\":{\"222\":1}}],[\"传输层安全协议\",{\"1\":{\"625\":1}}],[\"传多个参数问题\",{\"1\":{\"609\":1}}],[\"传入token等信息\",{\"1\":{\"1408\":1}}],[\"传入getdynamicstu方法的参数\",{\"1\":{\"479\":1}}],[\"传入getstaticstu方法的参数\",{\"1\":{\"479\":1}}],[\"传入要过滤的数据\",{\"1\":{\"471\":1}}],[\"传入name的值\",{\"1\":{\"377\":1}}],[\"传入对象后置处理器objectpostprocessor\",{\"1\":{\"333\":1}}],[\"传标准字符串比较\",{\"1\":{\"256\":1}}],[\"传播增量数据\",{\"1\":{\"99\":1}}],[\"传播全量数据\",{\"1\":{\"99\":1}}],[\"传谣\",{\"1\":{\"99\":1}}],[\"奇数个节点\",{\"1\":{\"98\":1}}],[\"并配置报表参数\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"并更新租户表中的owner字段表示用户是租户管理员\",{\"1\":{\"1452\":1}}],[\"并更新数据库设备实例状态\",{\"1\":{\"1317\":1}}],[\"并绑定线程到eventloop\",{\"1\":{\"1445\":1}}],[\"并删除异步操作对象\",{\"1\":{\"1433\":1}}],[\"并阻塞\",{\"1\":{\"1433\":1}}],[\"并插入到链表头部\",{\"1\":{\"1396\":1}}],[\"并移除defaultconnectingioreactor的选择器selector中的channel\",{\"1\":{\"1382\":1}}],[\"并注册到容器\",{\"1\":{\"1357\":1}}],[\"并以网关id和设备网关为键值缓存\",{\"1\":{\"1342\":1}}],[\"并以网关id和网络为键值缓存\",{\"1\":{\"1342\":1}}],[\"并以线程局部变量对象为键\",{\"1\":{\"915\":1}}],[\"并流转到下一rule节点\",{\"1\":{\"1335\":1}}],[\"并对连接进行订阅\",{\"1\":{\"1360\":1}}],[\"并对设备消息使用devicegatewayhelper\",{\"1\":{\"1328\":1}}],[\"并对镜像进行提交\",{\"1\":{\"1102\":1}}],[\"并改变设备状态\",{\"1\":{\"1317\":1}}],[\"并向\",{\"1\":{\"1275\":1}}],[\"并开启定时清除任务\",{\"1\":{\"1249\":1}}],[\"并共享\",{\"1\":{\"1170\":1}}],[\"并为这些容器共享资源和环境\",{\"1\":{\"1161\":1}}],[\"并使它们在集群中的不同节点上运行\",{\"1\":{\"1161\":1}}],[\"并使用js表达式\",{\"1\":{\"968\":1}}],[\"并使用\",{\"1\":{\"657\":1}}],[\"并使用了只能用于浮点型的数学运算符\",{\"1\":{\"295\":1}}],[\"并根据内容定制当前bash的配置和环境\",{\"1\":{\"1118\":1}}],[\"并添加到集合中\",{\"1\":{\"1032\":1}}],[\"并没有真的定义一个变量\",{\"1\":{\"989\":1}}],[\"并没有包含在\",{\"1\":{\"308\":1}}],[\"并只会进行必要的更新来使\",{\"1\":{\"970\":1}}],[\"并生成设备会话到设备会话管理器\",{\"1\":{\"1360\":1}}],[\"并生成beandefinition\",{\"1\":{\"900\":1}}],[\"并生成索引\",{\"1\":{\"749\":1}}],[\"并后置处理为工厂bean\",{\"1\":{\"855\":1}}],[\"并不好用\",{\"1\":{\"1459\":1}}],[\"并不需要等待所有订阅客户端发送\",{\"1\":{\"1275\":1}}],[\"并不一定是github账户邮箱\",{\"1\":{\"1145\":1}}],[\"并不能完全解决幻读\",{\"1\":{\"1049\":1}}],[\"并不会阻塞\",{\"1\":{\"846\":1}}],[\"并不是把闭包执行后的结果赋值\",{\"1\":{\"315\":1}}],[\"并获得下一次的游标位置\",{\"1\":{\"780\":1}}],[\"并获取dubboconfigbeaninitializer对象触发afterproperties初始化\",{\"1\":{\"743\":1}}],[\"并获取执行结果参考\",{\"1\":{\"646\":1}}],[\"并存入了倒排索引以供搜索\",{\"1\":{\"774\":1}}],[\"并缓存类对象\",{\"1\":{\"737\":1}}],[\"并创建管理适配器注入器adaptiveextensioninjector\",{\"1\":{\"736\":1}}],[\"并创建实例进行管理\",{\"1\":{\"734\":1}}],[\"并行调用多个服务器\",{\"1\":{\"730\":1}}],[\"并设置连接状态\",{\"1\":{\"1383\":1}}],[\"并设置激活时不触发实体事件\",{\"1\":{\"1317\":1}}],[\"并设置有效期\",{\"1\":{\"910\":1}}],[\"并设置\",{\"1\":{\"692\":1}}],[\"并塞到protocolhandler中\",{\"1\":{\"688\":1}}],[\"并等待engine的回应\",{\"1\":{\"679\":1}}],[\"并实现默认的方法\",{\"1\":{\"658\":1}}],[\"并实现了determinecurrentlookupkey\",{\"1\":{\"632\":1}}],[\"并确定局部变量类型为map\",{\"1\":{\"602\":1}}],[\"并递归构造beandefinition的confiiguratonclass\",{\"1\":{\"488\":1}}],[\"并且是单例的\",{\"1\":{\"1445\":1}}],[\"并且local只能在函数体内使用\",{\"1\":{\"1219\":1}}],[\"并且leader分区的副本follower对消息进行了同步就任务发送成功\",{\"1\":{\"801\":1,\"802\":1}}],[\"并且它们可以相互之间通过本地的网络进行通信\",{\"1\":{\"1161\":1}}],[\"并且它是实时持久化的\",{\"1\":{\"911\":1}}],[\"并且这些环境变量只在当前阶段有效\",{\"1\":{\"1103\":1}}],[\"并且使用了\",{\"1\":{\"995\":1}}],[\"并且写入磁盘就认为发送成功\",{\"1\":{\"801\":1,\"802\":1}}],[\"并且将原始请求传递给\",{\"1\":{\"651\":1}}],[\"并且能够自动将服务器响应的数据转换成\",{\"1\":{\"616\":1}}],[\"并且需要使用spring\",{\"1\":{\"476\":1}}],[\"并且可以由\",{\"1\":{\"152\":1}}],[\"并启动\",{\"1\":{\"397\":1,\"828\":1}}],[\"并将eventloop绑定一个线程并启动\",{\"1\":{\"1445\":1}}],[\"并将socketchannel注册到baseioreactor的selector中\",{\"1\":{\"1382\":1}}],[\"并将其传入\",{\"1\":{\"970\":1}}],[\"并将授权信息存表\",{\"1\":{\"346\":1}}],[\"并将本地事务的执行结果告知事务协调者tc\",{\"1\":{\"212\":1}}],[\"并打印实现的方法名\",{\"1\":{\"252\":1}}],[\"并采用顺序消费的方式\",{\"1\":{\"224\":1}}],[\"并调用初始化方法\",{\"1\":{\"210\":1}}],[\"并把值赋给\",{\"1\":{\"190\":1}}],[\"并发无锁\",{\"0\":{\"1049\":1}}],[\"并发停顿收集器\",{\"1\":{\"243\":1}}],[\"并发度最高\",{\"1\":{\"219\":1}}],[\"并发的\",{\"1\":{\"186\":1}}],[\"并发\",{\"0\":{\"184\":1}}],[\"并发集合\",{\"1\":{\"113\":1}}],[\"并在连接的上下文设置defaultclientexchangehandlerimpl的实例handler\",{\"1\":{\"1384\":1}}],[\"并在引号中返回每个参数\",{\"1\":{\"1220\":1}}],[\"并在该命名空间中创建一个\",{\"1\":{\"1170\":1}}],[\"并在该环境中安装所需的软件包\",{\"1\":{\"96\":1}}],[\"并在代码中调用acknowledge\",{\"1\":{\"798\":2}}],[\"并在命令行中用传给\",{\"1\":{\"159\":1}}],[\"并执行\",{\"1\":{\"159\":1}}],[\"并分别为之赋值为nokiaphone和iphone\",{\"1\":{\"157\":1}}],[\"并查看结果\",{\"1\":{\"139\":1}}],[\"并返回任务执行器\",{\"1\":{\"1335\":1}}],[\"并返回sessionid存放在cookie中\",{\"1\":{\"722\":1}}],[\"并返回代理类的实例\",{\"1\":{\"386\":1}}],[\"并返回\",{\"1\":{\"139\":1,\"910\":1}}],[\"并非需要一致\",{\"1\":{\"117\":1}}],[\"并非可以任意使用\",{\"1\":{\"31\":1}}],[\"z9imm4x3d5c9qjhbdcfloba3cdoq8j7f\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"zxwkama7es+mvfutrtpxpxailqfwnk0qcnnqpjzwtkfema7z0nse6igfc5sean4z\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"zxvf\",{\"1\":{\"1129\":1,\"1181\":1}}],[\"zhansan\",{\"1\":{\"1455\":1}}],[\"zhouhangzooo\",{\"1\":{\"1374\":1}}],[\"zhuoqianmingyue\",{\"1\":{\"983\":2}}],[\"zset是基于跳表\",{\"1\":{\"911\":1}}],[\"zset\",{\"1\":{\"911\":1}}],[\"zysite\",{\"1\":{\"802\":2}}],[\"zone\",{\"1\":{\"1513\":1,\"1514\":1}}],[\"zoneinfo\",{\"1\":{\"1115\":1,\"1116\":1}}],[\"zoneid\",{\"1\":{\"786\":1}}],[\"zookeeper\",{\"0\":{\"93\":1},\"1\":{\"1126\":3}}],[\"z0\",{\"1\":{\"635\":1}}],[\"zillow\",{\"1\":{\"975\":1}}],[\"zip\",{\"1\":{\"642\":1}}],[\"zip方法\",{\"0\":{\"540\":1}}],[\"zidongzhuangpei\",{\"1\":{\"479\":1}}],[\"zwq\",{\"1\":{\"479\":1}}],[\"zuulprefix\",{\"1\":{\"471\":2}}],[\"za\",{\"1\":{\"635\":2}}],[\"zaxxer\",{\"1\":{\"373\":1,\"850\":2}}],[\"zab\",{\"1\":{\"97\":1}}],[\"z\",{\"1\":{\"284\":2,\"317\":1,\"318\":2,\"635\":1,\"1222\":2}}],[\"zero\",{\"1\":{\"158\":2,\"236\":13}}],[\"zk\",{\"1\":{\"71\":1}}],[\"破解\",{\"0\":{\"85\":1}}],[\"开源报表平台\",{\"1\":{\"1459\":1}}],[\"开源项目\",{\"0\":{\"82\":1}}],[\"开头\",{\"1\":{\"1425\":1}}],[\"开发架构\",{\"0\":{\"1652\":1}}],[\"开发分支合并到当前分支\",{\"1\":{\"1148\":1}}],[\"开发的用于构建\",{\"1\":{\"616\":1}}],[\"开发者需要设置退出条件\",{\"1\":{\"155\":1}}],[\"开启订阅\",{\"1\":{\"1338\":1}}],[\"开启网络\",{\"1\":{\"1198\":1}}],[\"开启docker实验特性\",{\"1\":{\"1093\":1}}],[\"开启redis客户端\",{\"1\":{\"908\":1}}],[\"开启重连问题\",{\"1\":{\"846\":1}}],[\"开启\",{\"1\":{\"632\":1,\"658\":1}}],[\"开启spring事件配置\",{\"1\":{\"589\":1,\"711\":1}}],[\"开启事务\",{\"1\":{\"429\":1,\"632\":1}}],[\"开启异步处理\",{\"1\":{\"406\":1}}],[\"开始行\",{\"1\":{\"1187\":1}}],[\"开始写\",{\"1\":{\"935\":2}}],[\"开始\",{\"1\":{\"421\":1,\"579\":1,\"703\":1}}],[\"开始就已经被限制了\",{\"1\":{\"11\":1}}],[\"开放源代码jboss\",{\"1\":{\"240\":1}}],[\"文本操作\",{\"1\":{\"1187\":1}}],[\"文本标签\",{\"1\":{\"982\":1}}],[\"文档编写人\",{\"1\":{\"1469\":1}}],[\"文档就绪\",{\"0\":{\"935\":1}}],[\"文档存在使用脚本更新\",{\"1\":{\"758\":1}}],[\"文档的内容\",{\"1\":{\"748\":1}}],[\"文档保存在分片内\",{\"1\":{\"748\":1}}],[\"文档\",{\"0\":{\"79\":1}}],[\"文件类型\",{\"1\":{\"1641\":1}}],[\"文件上传\",{\"1\":{\"1639\":1}}],[\"文件服务\",{\"1\":{\"1501\":1}}],[\"文件大小是否大于0\",{\"1\":{\"1227\":1}}],[\"文件运算符\",{\"0\":{\"1227\":1}}],[\"文件中\",{\"1\":{\"1177\":1}}],[\"文件中或系统属性中的\",{\"1\":{\"31\":1}}],[\"文件目录\",{\"1\":{\"1153\":1}}],[\"文件放入暂存区\",{\"1\":{\"1144\":1}}],[\"文件名\",{\"1\":{\"1144\":1,\"1147\":2,\"1153\":1,\"1187\":9,\"1189\":1}}],[\"文件名与包名没有直接关系\",{\"1\":{\"117\":1}}],[\"文件互相看不到变化\",{\"1\":{\"1098\":1}}],[\"文件自动生成\",{\"1\":{\"996\":1}}],[\"文件等\",{\"1\":{\"789\":1}}],[\"文件的存在或缺失\",{\"1\":{\"1079\":1}}],[\"文件的编译结果输出到\",{\"1\":{\"996\":1}}],[\"文件的内容\",{\"1\":{\"623\":1}}],[\"文件的扫描\",{\"1\":{\"31\":1}}],[\"文件相关\",{\"0\":{\"610\":1}}],[\"文件写入不到build的resource目录下\",{\"1\":{\"227\":1}}],[\"文件夹名\",{\"1\":{\"1182\":1}}],[\"文件夹名与包名没有直接关系\",{\"1\":{\"117\":1}}],[\"文件夹及文件添加权限\",{\"1\":{\"1177\":1}}],[\"文件夹\",{\"1\":{\"1144\":1}}],[\"文件夹互相同步\",{\"1\":{\"1098\":1}}],[\"文件夹下的根位置\",{\"1\":{\"1065\":1}}],[\"文件夹下需添加go\",{\"1\":{\"169\":1}}],[\"文件夹和\",{\"1\":{\"1065\":1}}],[\"文件过大\",{\"1\":{\"52\":1}}],[\"文件\",{\"1\":{\"31\":1,\"45\":1,\"103\":1,\"1054\":1,\"1062\":1,\"1641\":1}}],[\"文件时不会存在问题\",{\"1\":{\"31\":1}}],[\"文件到\",{\"1\":{\"31\":1}}],[\"分为auth认证服务\",{\"1\":{\"1511\":1}}],[\"分为静态和动态\",{\"1\":{\"479\":1}}],[\"分类\",{\"1\":{\"1440\":1}}],[\"分配权限\",{\"1\":{\"1495\":1}}],[\"分配角色权限\",{\"1\":{\"1495\":1}}],[\"分配缓存\",{\"1\":{\"1400\":1}}],[\"分配策略\",{\"1\":{\"920\":1}}],[\"分别是\",{\"1\":{\"1222\":1}}],[\"分隔\",{\"1\":{\"1188\":1,\"1570\":3,\"1571\":3}}],[\"分隔符\",{\"1\":{\"117\":1}}],[\"分支名\",{\"1\":{\"1150\":1}}],[\"分布式调度任务服务等等\",{\"1\":{\"912\":1}}],[\"分布式远程服务\",{\"1\":{\"912\":1}}],[\"分布式集合\",{\"1\":{\"912\":1}}],[\"分布式对象\",{\"1\":{\"912\":1}}],[\"分布式\",{\"0\":{\"894\":1}}],[\"分布式事务消息\",{\"1\":{\"223\":1}}],[\"分布式事务问题\",{\"1\":{\"221\":1}}],[\"分布式事务解决方案\",{\"1\":{\"212\":1}}],[\"分布式事务\",{\"0\":{\"76\":1,\"212\":1,\"661\":1},\"1\":{\"212\":1}}],[\"分区数\",{\"1\":{\"801\":1}}],[\"分词结果\",{\"0\":{\"774\":1}}],[\"分组\",{\"1\":{\"749\":1,\"1266\":1}}],[\"分片可进行备份\",{\"1\":{\"748\":1}}],[\"分片保存在集群节点\",{\"1\":{\"748\":1}}],[\"分片是底层的工作单元\",{\"1\":{\"748\":1}}],[\"分页获取操作日志\",{\"1\":{\"1586\":1}}],[\"分页获取字条目\",{\"1\":{\"1586\":1}}],[\"分页获取角色数据\",{\"1\":{\"1586\":1}}],[\"分页获取登录日志\",{\"1\":{\"1586\":1}}],[\"分页获取用户数据\",{\"0\":{\"1550\":1},\"1\":{\"1586\":1}}],[\"分页\",{\"1\":{\"1459\":1}}],[\"分页插件\",{\"1\":{\"853\":1}}],[\"分页查询字典子项\",{\"0\":{\"1622\":1}}],[\"分页查询租户角色\",{\"0\":{\"1561\":1}}],[\"分页查询\",{\"0\":{\"765\":1,\"1541\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1628\":1,\"1635\":1,\"1641\":1},\"1\":{\"716\":1}}],[\"分页参数\",{\"1\":{\"255\":1}}],[\"分析步骤\",{\"0\":{\"1229\":1}}],[\"分析\",{\"1\":{\"3\":1,\"56\":1,\"748\":1}}],[\"多个以英文\",{\"1\":{\"1570\":3,\"1571\":3}}],[\"多个锁实例创建多锁实例\",{\"1\":{\"1246\":1}}],[\"多组织管理的多领域集成应用\",{\"1\":{\"1500\":1}}],[\"多组件共享的状态\",{\"1\":{\"998\":1}}],[\"多handler链式调用\",{\"1\":{\"1451\":1}}],[\"多handler需要在channelread的方法尾部添加ctx\",{\"1\":{\"1451\":1}}],[\"多命令\",{\"1\":{\"1176\":1}}],[\"多层时采用\",{\"1\":{\"1036\":1}}],[\"多层循环处理\",{\"1\":{\"1036\":1}}],[\"多条件查询\",{\"0\":{\"767\":1}}],[\"多条件查询时\",{\"1\":{\"672\":1}}],[\"多版本\",{\"1\":{\"730\":1}}],[\"多重约束\",{\"1\":{\"297\":1}}],[\"多线程模型\",{\"1\":{\"1440\":1}}],[\"多线程消费\",{\"0\":{\"808\":1}}],[\"多线程\",{\"1\":{\"243\":2,\"256\":1}}],[\"多变量声明\",{\"0\":{\"124\":1}}],[\"多数据源\",{\"1\":{\"75\":1}}],[\"多模块开发\",{\"0\":{\"20\":1}}],[\"服务监控\",{\"1\":{\"1501\":1}}],[\"服务熔断\",{\"1\":{\"1501\":1}}],[\"服务消费\",{\"1\":{\"1501\":1}}],[\"服务消费者会一直等待下去\",{\"1\":{\"730\":1}}],[\"服务消费者在调用服务提供者的时候发生了阻塞\",{\"1\":{\"730\":1}}],[\"服务描述\",{\"1\":{\"1486\":1}}],[\"服务名称获取系统接口列表\",{\"0\":{\"1597\":1},\"1\":{\"1588\":1}}],[\"服务名称\",{\"1\":{\"1486\":1,\"1535\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1}}],[\"服务唯一标识符\",{\"1\":{\"1486\":1}}],[\"服务质量qos\",{\"0\":{\"1273\":1}}],[\"服务变更频率较高\",{\"1\":{\"1240\":1}}],[\"服务拆分原则\",{\"1\":{\"1240\":1}}],[\"服务类别\",{\"1\":{\"1240\":1}}],[\"服务网格\",{\"0\":{\"1235\":1},\"1\":{\"1234\":1}}],[\"服务端可以推送\",{\"1\":{\"1425\":1}}],[\"服务端初始化\",{\"0\":{\"1405\":1}}],[\"服务端\",{\"1\":{\"1229\":1}}],[\"服务端辨别客户身份的方式\",{\"1\":{\"203\":1}}],[\"服务\",{\"1\":{\"1136\":1,\"1238\":1,\"1240\":1}}],[\"服务中必须指定要使用的网络\",{\"1\":{\"1122\":1}}],[\"服务启动\",{\"0\":{\"1095\":1}}],[\"服务集群有多个节点\",{\"1\":{\"911\":1}}],[\"服务代理\",{\"1\":{\"872\":1}}],[\"服务发现\",{\"1\":{\"861\":1}}],[\"服务注册与发现\",{\"1\":{\"862\":1}}],[\"服务注册\",{\"1\":{\"861\":1,\"1501\":1}}],[\"服务注册发现\",{\"0\":{\"71\":1}}],[\"服务降级\",{\"1\":{\"730\":1}}],[\"服务方和消费方共同依赖\",{\"1\":{\"730\":1}}],[\"服务治理方案\",{\"1\":{\"729\":1}}],[\"服务调用\",{\"1\":{\"606\":1}}],[\"服务调用和网关调用时要先获取请求服务端token放在请求头中\",{\"1\":{\"471\":1}}],[\"服务状态更新为启用\",{\"1\":{\"213\":1}}],[\"服务器环境\",{\"0\":{\"1669\":1}}],[\"服务器端的快速配置类\",{\"1\":{\"1450\":1}}],[\"服务器端使用过滤器或拦截器进行校验处理\",{\"1\":{\"722\":1}}],[\"服务器在收到请求后\",{\"1\":{\"1425\":1}}],[\"服务器实现\",{\"0\":{\"1387\":1}}],[\"服务器的创建\",{\"1\":{\"1377\":1}}],[\"服务器通信\",{\"1\":{\"1276\":1}}],[\"服务器会将消息发送给订阅所匹配标签的每个客户端\",{\"1\":{\"1272\":1}}],[\"服务器判断是否客户端存活\",{\"1\":{\"845\":1}}],[\"服务器查询到用户信息后放在session中\",{\"1\":{\"722\":1}}],[\"服务器顶层\",{\"1\":{\"678\":1}}],[\"服务器之间的\",{\"1\":{\"652\":1}}],[\"服务器\",{\"0\":{\"89\":1},\"1\":{\"652\":1,\"1330\":1}}],[\"服务器侧未订阅\",{\"1\":{\"8\":1}}],[\"芋道源码xxljob\",{\"1\":{\"65\":1}}],[\"待完善\",{\"1\":{\"887\":1}}],[\"待质检的收货记录的实际收货数量\",{\"1\":{\"236\":1}}],[\"待质检量\",{\"1\":{\"236\":1}}],[\"待整理\",{\"0\":{\"110\":1,\"911\":1}}],[\"待研究\",{\"0\":{\"65\":1}}],[\"待补充\",{\"1\":{\"15\":1}}],[\"鸿蒙原生开发\",{\"1\":{\"63\":1}}],[\"以导入的excel表信息作为最终的维护信息\",{\"1\":{\"1477\":1}}],[\"以设备运行信息为基准\",{\"1\":{\"1477\":1}}],[\"以设备id和deviceproductoperator为键值对的map集合\",{\"1\":{\"1342\":1}}],[\"以设备id和deviceoperator为键值对的map集合\",{\"1\":{\"1342\":1}}],[\"以$\",{\"1\":{\"1455\":1,\"1460\":1}}],[\"以角色或组id标识用户拥有的权限\",{\"1\":{\"1452\":1}}],[\"以group\",{\"1\":{\"1452\":1}}],[\"以一个单字符串显示所有向脚本传递的参数\",{\"1\":{\"1220\":1}}],[\"以一个大写字母开头\",{\"1\":{\"116\":1}}],[\"以替换故障节点上的\",{\"1\":{\"1167\":1}}],[\"以增加应用程序的可用性和负载均衡能力\",{\"1\":{\"1161\":1}}],[\"以临时性分支的当前状态创建一个永久性分支\",{\"1\":{\"1150\":1}}],[\"以指定的提交节点创建了一个临时性分支\",{\"1\":{\"1150\":1}}],[\"以map构建树\",{\"1\":{\"1036\":1}}],[\"以map形式存储treenode\",{\"1\":{\"1036\":1}}],[\"以文件的方式扫描整个包下的文件\",{\"1\":{\"1032\":1}}],[\"以数据驱动的模型\",{\"1\":{\"1002\":1}}],[\"以\",{\"1\":{\"985\":3,\"1188\":1,\"1220\":1,\"1425\":1}}],[\"以dataid\",{\"1\":{\"880\":1}}],[\"以该方式配置事务管理器\",{\"1\":{\"801\":1}}],[\"以分词后的单词或词组作为键\",{\"1\":{\"752\":1}}],[\"以域名划分host容器\",{\"1\":{\"678\":1}}],[\"以前web服务器处理请求的入口是web\",{\"1\":{\"652\":1}}],[\"以项目形式管理镜像\",{\"1\":{\"567\":1}}],[\"以供评审\",{\"1\":{\"562\":1}}],[\"以此类推\",{\"1\":{\"548\":1}}],[\"以applicationcontext为装配单位\",{\"1\":{\"482\":1}}],[\"以便设备接入物联网平台\",{\"1\":{\"1269\":1}}],[\"以便稍后一次性刷入磁盘\",{\"1\":{\"1179\":1}}],[\"以便处理不同类型的流量或服务\",{\"1\":{\"1171\":1}}],[\"以便其他组件可以通过该端口与service进行通信\",{\"1\":{\"1171\":1}}],[\"以便认证成功后再次获取\",{\"1\":{\"346\":1}}],[\"以便使用configurationclass集合构建beandefinition对象\",{\"1\":{\"487\":1}}],[\"以便使\",{\"1\":{\"290\":1}}],[\"以便nashorn引擎了解脚本中定义的函数\",{\"1\":{\"16\":1}}],[\"以防止幻读\",{\"1\":{\"219\":1}}],[\"以及协议相关配置\",{\"1\":{\"1304\":1}}],[\"以及将结果集封装到对应实体\",{\"1\":{\"1292\":1}}],[\"以及指向master的一个指针叫head\",{\"1\":{\"1151\":1}}],[\"以及子组件\",{\"1\":{\"971\":1}}],[\"以及redis自身的较好事件处理模型\",{\"1\":{\"911\":1}}],[\"以及自动配置相关的\",{\"1\":{\"851\":1}}],[\"以及实例对象\",{\"1\":{\"737\":1}}],[\"以及\",{\"1\":{\"729\":1}}],[\"以及相应web过滤器\",{\"1\":{\"505\":1}}],[\"以及下一个过滤器的索引\",{\"1\":{\"471\":1}}],[\"以及是否需提前生成实际单例对象\",{\"1\":{\"438\":1}}],[\"以及通过\",{\"1\":{\"211\":1}}],[\"以及utf8mb4替换为utf8\",{\"1\":{\"56\":1}}],[\"以上实例运行输出结果为\",{\"1\":{\"152\":1}}],[\"以上实例执行结果为\",{\"1\":{\"135\":1}}],[\"以上为一维数组的定义方式\",{\"1\":{\"140\":1}}],[\"以下镜像支持arm64版本\",{\"1\":{\"1139\":1}}],[\"以下两种方式不能混用\",{\"1\":{\"1051\":1}}],[\"以下是一些关于pod的要点\",{\"1\":{\"1161\":1}}],[\"以下是一些常用的kubernetes\",{\"1\":{\"1159\":1}}],[\"以下是一个递归操作方法调用流程\",{\"1\":{\"487\":1}}],[\"以下是有效的指针声明\",{\"1\":{\"142\":1}}],[\"以下实例通过\",{\"1\":{\"155\":1}}],[\"以下实例中\",{\"1\":{\"139\":1}}],[\"以下演示了数组初始化\",{\"1\":{\"140\":1}}],[\"以下几种类型为\",{\"1\":{\"123\":1}}],[\"以后新建的时候\",{\"1\":{\"103\":1}}],[\"把信息写到头部\",{\"1\":{\"1523\":1}}],[\"把上面三个仓库组合在一起对外提供服务\",{\"1\":{\"1201\":1}}],[\"把本地库的内容推送到远程\",{\"1\":{\"1151\":1}}],[\"把readme\",{\"1\":{\"1151\":1}}],[\"把目录变为仓库\",{\"1\":{\"1144\":1}}],[\"把消息发送到kafka\",{\"1\":{\"801\":2,\"802\":2}}],[\"把消息发送到kafka就认为发送成功\",{\"1\":{\"801\":1,\"802\":1}}],[\"把请求传回过滤链\",{\"1\":{\"652\":1}}],[\"把配置的多个数据源会放在abstractroutingdatasource的\",{\"1\":{\"632\":1}}],[\"把结构体中具有所有权的字段转移出去后\",{\"1\":{\"271\":1}}],[\"把\",{\"1\":{\"190\":1}}],[\"把文件中的所有的utf8mb4\",{\"1\":{\"56\":1}}],[\"把修改还原\",{\"1\":{\"43\":1}}],[\"导出数据库结构\",{\"1\":{\"1056\":1}}],[\"导出数据库中的数据表\",{\"1\":{\"1056\":1}}],[\"导出整个数据库\",{\"1\":{\"1056\":1}}],[\"导出的类型声明才能被导入\",{\"1\":{\"993\":1}}],[\"导出模块\",{\"1\":{\"992\":1}}],[\"导出\",{\"0\":{\"1056\":1},\"1\":{\"992\":2,\"1455\":1,\"1460\":1}}],[\"导出变量\",{\"1\":{\"992\":1}}],[\"导出证书\",{\"1\":{\"623\":1}}],[\"导入\",{\"0\":{\"1057\":1},\"1\":{\"995\":1,\"1477\":1}}],[\"导入一个模块插件\",{\"1\":{\"994\":1}}],[\"导入的库\",{\"1\":{\"993\":1}}],[\"导入后\",{\"1\":{\"992\":1}}],[\"导入口令\",{\"1\":{\"623\":1}}],[\"导入证书或证书链\",{\"1\":{\"623\":1}}],[\"导入选择器组处理器\",{\"1\":{\"494\":1}}],[\"导入选择器组对象\",{\"1\":{\"492\":1}}],[\"导入选择器处理器\",{\"1\":{\"490\":1}}],[\"导入时出现版本不兼容的情况\",{\"1\":{\"56\":1}}],[\"导包顺序决定init函数执行顺序\",{\"1\":{\"137\":1}}],[\"导致幻读\",{\"1\":{\"1044\":1}}],[\"导致不可重复读\",{\"1\":{\"1044\":1}}],[\"导致客户端收到服务端断开连接的143响应\",{\"1\":{\"848\":1}}],[\"导致重复连接\",{\"1\":{\"846\":1}}],[\"导致注解失效\",{\"1\":{\"367\":1}}],[\"导致无法分配内存\",{\"1\":{\"243\":1}}],[\"导致无法二次打印\",{\"1\":{\"54\":1}}],[\"导致处理时间太长\",{\"1\":{\"224\":1}}],[\"导致效率问题\",{\"1\":{\"221\":1}}],[\"导致的查询效率问题\",{\"1\":{\"221\":1}}],[\"导致其余线程死亡\",{\"1\":{\"208\":1}}],[\"导致连接不可用\",{\"1\":{\"6\":1}}],[\"会创建一个executor\",{\"1\":{\"1446\":1}}],[\"会创建cglibmethodinvocation\",{\"1\":{\"436\":1}}],[\"会创建cglibaopproxy对象\",{\"1\":{\"435\":1}}],[\"会一直保持连接\",{\"1\":{\"1353\":1}}],[\"会一直等待\",{\"1\":{\"215\":1}}],[\"会先改变数据库设备装态\",{\"1\":{\"1317\":1}}],[\"会先进行扩容\",{\"1\":{\"228\":1}}],[\"会报错\",{\"1\":{\"1222\":1}}],[\"会为该\",{\"1\":{\"1170\":1}}],[\"会进行验证和处理\",{\"1\":{\"1162\":1}}],[\"会覆盖项目配置文件的配置项与\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"会在\",{\"1\":{\"1115\":1}}],[\"会导致脏读\",{\"1\":{\"1044\":1}}],[\"会导致栈被展开直到\",{\"1\":{\"160\":1}}],[\"会把\",{\"1\":{\"969\":1}}],[\"会把这个名字替换成其他\",{\"1\":{\"103\":1}}],[\"会生成操作日志\",{\"1\":{\"915\":1}}],[\"会根据指令在本地节点上创建并运行pod中的容器\",{\"1\":{\"1162\":1}}],[\"会根据拣货明细生成库存扣减消息\",{\"1\":{\"915\":1}}],[\"会根据导入的商品code查询商品信息给对应的订单实体类赋值\",{\"1\":{\"911\":1}}],[\"会顺序拉取数据\",{\"1\":{\"797\":1}}],[\"会对设备消息使用消息解码器进行解码\",{\"1\":{\"1328\":1}}],[\"会对所有字段忽略判断\",{\"1\":{\"902\":1}}],[\"会对查询条件分词后进行匹配查询\",{\"1\":{\"763\":1}}],[\"会对索引记录加锁\",{\"1\":{\"219\":1}}],[\"会让一部分用户先使用新功能\",{\"1\":{\"730\":1}}],[\"会造成线程的大量堆积\",{\"1\":{\"730\":1}}],[\"会发现绝大多数组件实现了lifecycle接口\",{\"1\":{\"680\":1}}],[\"会发生变量遮蔽\",{\"1\":{\"285\":1}}],[\"会话管理器判断是否在线\",{\"1\":{\"1327\":1}}],[\"会话存在于一个网络之间\",{\"1\":{\"1272\":1}}],[\"会话持续一个指定的时间段\",{\"1\":{\"652\":1}}],[\"会话\",{\"0\":{\"1272\":1},\"1\":{\"652\":3,\"1272\":1}}],[\"会当作\",{\"1\":{\"489\":1}}],[\"会初始化一个最核心的组件sessionrepositoryfilter\",{\"1\":{\"416\":1}}],[\"会初始化子认证管理器构造器\",{\"1\":{\"330\":1}}],[\"会将对应的设备注册到设备注册器当中\",{\"1\":{\"1317\":1}}],[\"会将以小写字母开头的组件视为原生\",{\"1\":{\"971\":1}}],[\"会将元素和它的子元素与它们之前的状态进行比较\",{\"1\":{\"970\":1}}],[\"会将检索关键词分词\",{\"1\":{\"751\":1}}],[\"会将数据源缓存到datasourcetransactionobject对象中进行后续的commit\",{\"1\":{\"632\":1}}],[\"会将\",{\"1\":{\"486\":1}}],[\"会将自定义的所有sessionlistener\",{\"1\":{\"416\":1}}],[\"会将同一仓库且同货主的库存变动任务发送到同一消息队列\",{\"1\":{\"224\":1}}],[\"会被直接更新为null\",{\"1\":{\"902\":1}}],[\"会被再次消费\",{\"1\":{\"798\":1}}],[\"会被过滤器拦截获取token等信息存放在authorizedclientrepository\",{\"1\":{\"345\":1}}],[\"会被自动删除\",{\"1\":{\"303\":1}}],[\"会自动分词\",{\"1\":{\"749\":1}}],[\"会自动为\",{\"1\":{\"290\":1}}],[\"会自动关闭流\",{\"1\":{\"54\":1}}],[\"会产生大量内存碎片\",{\"1\":{\"243\":1}}],[\"会重新刷新页面展示\",{\"1\":{\"224\":1}}],[\"会影响其他线程吗\",{\"0\":{\"208\":1}}],[\"会结束\",{\"1\":{\"190\":1}}],[\"会等待直到其中一个可以处理\",{\"1\":{\"188\":1}}],[\"会使用默认值\",{\"1\":{\"1456\":1}}],[\"会使用状态检查器checkstate获取设备最新状态\",{\"1\":{\"1317\":1}}],[\"会使\",{\"1\":{\"186\":1}}],[\"会有一个线程池管理众多线程\",{\"1\":{\"186\":1}}],[\"会尽可能有等同于核心数的线程在并行运行\",{\"1\":{\"186\":1}}],[\"会返回一个\",{\"1\":{\"311\":1}}],[\"会返回\",{\"1\":{\"160\":1}}],[\"会随机公平地选出一个执行\",{\"1\":{\"131\":1}}],[\"会携带消息id\",{\"1\":{\"15\":1}}],[\"启用1\",{\"1\":{\"1539\":1,\"1540\":1}}],[\"启用设备网关\",{\"1\":{\"1341\":1}}],[\"启用\",{\"1\":{\"1026\":1}}],[\"启用插件\",{\"1\":{\"1025\":1}}],[\"启用加了\",{\"1\":{\"370\":1}}],[\"启用okhttp\",{\"1\":{\"213\":1}}],[\"启用或关闭\",{\"1\":{\"53\":1}}],[\"启动线程任务\",{\"1\":{\"1445\":1}}],[\"启动任务执行器\",{\"1\":{\"1335\":1}}],[\"启动scenetaskexecutor\",{\"1\":{\"1325\":1}}],[\"启动servletrequest的异步处理\",{\"1\":{\"406\":1}}],[\"启动网关\",{\"1\":{\"1319\":1,\"1360\":1}}],[\"启动网络模块connect\",{\"1\":{\"833\":1}}],[\"启动设备协议加载\",{\"1\":{\"1318\":1}}],[\"启动设备网关\",{\"0\":{\"1339\":1},\"1\":{\"1318\":1,\"1319\":1}}],[\"启动设备时\",{\"1\":{\"1317\":1}}],[\"启动命令中有内网ip自行修改\",{\"1\":{\"1137\":1}}],[\"启动所有服务\",{\"1\":{\"1123\":1}}],[\"启动以下服务service\",{\"1\":{\"920\":1}}],[\"启动消费者\",{\"1\":{\"919\":1}}],[\"启动延迟执行任务\",{\"1\":{\"843\":1}}],[\"启动receiver\",{\"1\":{\"833\":1}}],[\"启动配置中心\",{\"1\":{\"744\":1}}],[\"启动model\",{\"1\":{\"742\":1}}],[\"启动流程\",{\"1\":{\"583\":1,\"585\":1,\"707\":1}}],[\"启动\",{\"1\":{\"566\":1,\"1123\":1,\"1161\":1,\"1194\":1}}],[\"启动服务器\",{\"1\":{\"455\":1}}],[\"启动类\",{\"1\":{\"488\":1,\"1066\":1}}],[\"启动类加载器\",{\"1\":{\"244\":1}}],[\"启动类显式调用\",{\"1\":{\"210\":1}}],[\"启动容器时添加以下参数\",{\"1\":{\"48\":1}}],[\"解释器模式\",{\"1\":{\"1254\":1}}],[\"解压\",{\"0\":{\"1181\":1}}],[\"解耦\",{\"1\":{\"915\":1}}],[\"解密\",{\"1\":{\"719\":1}}],[\"解析xml为mappedstatement\",{\"1\":{\"860\":1}}],[\"解析xml文件生成mappedstatement\",{\"1\":{\"852\":1}}],[\"解析并处理session\",{\"1\":{\"416\":1}}],[\"解析bindingresult的错误信息并返回\",{\"1\":{\"378\":1}}],[\"解析后若客户端已授权\",{\"1\":{\"345\":1}}],[\"解析\",{\"1\":{\"244\":1}}],[\"解除认证\",{\"1\":{\"52\":1}}],[\"解决channel还未注册到eventloop问题\",{\"1\":{\"1448\":1}}],[\"解决rr级别下的部分幻读问题\",{\"1\":{\"1049\":1}}],[\"解决幻读情况\",{\"1\":{\"1048\":1}}],[\"解决不可重复读\",{\"1\":{\"1044\":1}}],[\"解决脏读\",{\"1\":{\"1044\":1}}],[\"解决方法\",{\"0\":{\"847\":1}}],[\"解决方案\",{\"0\":{\"206\":1,\"848\":1},\"1\":{\"1002\":1,\"1241\":1}}],[\"解决方式\",{\"1\":{\"53\":1}}],[\"解决需手动开启允许循环依赖\",{\"1\":{\"58\":1}}],[\"解决\",{\"1\":{\"56\":1}}],[\"解决arm架构问题\",{\"0\":{\"37\":1}}],[\"解决启动类所在包组件装配失败问题\",{\"0\":{\"31\":1}}],[\"qq\",{\"1\":{\"1374\":1,\"1550\":1}}],[\"q\",{\"1\":{\"1187\":1}}],[\"qos2\",{\"0\":{\"1275\":1}}],[\"qos\",{\"1\":{\"596\":12,\"1272\":1,\"1275\":2}}],[\"qos1级别会等到服务器发送确认后释放消息id\",{\"1\":{\"15\":1}}],[\"q=postprocessorregistrationdelegate+is\",{\"1\":{\"399\":1}}],[\"qc\",{\"1\":{\"236\":1}}],[\"qcstatus\",{\"1\":{\"236\":1}}],[\"quietperiod\",{\"1\":{\"1445\":1}}],[\"quick\",{\"1\":{\"1132\":2}}],[\"quit\",{\"1\":{\"275\":2,\"292\":1,\"1205\":1}}],[\"quay\",{\"1\":{\"1131\":1}}],[\"quartzconfig\",{\"1\":{\"658\":1}}],[\"quartzjobbean\",{\"1\":{\"658\":2}}],[\"quartzjobbean类\",{\"1\":{\"658\":1}}],[\"quartz<\",{\"1\":{\"658\":1}}],[\"quartz\",{\"0\":{\"658\":1},\"1\":{\"655\":1,\"658\":2}}],[\"quality\",{\"1\":{\"561\":1}}],[\"quantity\",{\"1\":{\"236\":3}}],[\"question\",{\"0\":{\"253\":1}}],[\"queued\",{\"1\":{\"1445\":1}}],[\"queuesize>\",{\"1\":{\"596\":2}}],[\"queue队列\",{\"1\":{\"243\":1}}],[\"queue\",{\"0\":{\"239\":1},\"1\":{\"1445\":3}}],[\"queryparam\",{\"1\":{\"1455\":1}}],[\"queryoperator\",{\"1\":{\"1301\":1}}],[\"queryselector\",{\"1\":{\"946\":1}}],[\"querysql\",{\"1\":{\"924\":1}}],[\"query=select\",{\"1\":{\"850\":1}}],[\"querycache\",{\"1\":{\"786\":1}}],[\"querybuilders\",{\"1\":{\"1248\":1}}],[\"querybuilder\",{\"1\":{\"780\":5}}],[\"querywrapper<dbpatchschedulerequestentity>\",{\"1\":{\"902\":1}}],[\"querywrapper\",{\"1\":{\"672\":6}}],[\"querydto\",{\"1\":{\"672\":5}}],[\"query\",{\"0\":{\"760\":1},\"1\":{\"206\":1,\"255\":2,\"316\":1,\"748\":1,\"754\":1,\"758\":2,\"760\":4,\"762\":4,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":2,\"778\":1,\"780\":11,\"782\":1,\"783\":1,\"786\":1,\"853\":4,\"1248\":6,\"1515\":1,\"1532\":1,\"1534\":1}}],[\"qinhanapi\",{\"1\":{\"102\":1}}],[\"qinhan\",{\"1\":{\"102\":2}}],[\"qs处理参数\",{\"1\":{\"999\":1}}],[\"qs\",{\"1\":{\"51\":2}}],[\"3单点登录时序图\",{\"1\":{\"1506\":1}}],[\"38\",{\"1\":{\"1256\":1,\"1475\":3}}],[\"380000\",{\"1\":{\"716\":1}}],[\"39\",{\"1\":{\"1248\":2,\"1582\":1,\"1613\":1,\"1647\":1,\"1648\":1,\"1649\":3,\"1650\":1,\"1651\":1}}],[\"341\",{\"1\":{\"1458\":1}}],[\"34\",{\"1\":{\"1221\":1,\"1628\":1}}],[\"3秒后再次poll查询未消费消息\",{\"1\":{\"804\":1}}],[\"33\",{\"1\":{\"1198\":1,\"1613\":1,\"1628\":2}}],[\"3309\",{\"1\":{\"1120\":1}}],[\"3306\",{\"1\":{\"23\":1,\"90\":1,\"850\":1,\"924\":2,\"1120\":1,\"1140\":6,\"1141\":4}}],[\"33554432\",{\"1\":{\"801\":1,\"802\":1}}],[\"3204835798\",{\"1\":{\"1550\":1}}],[\"32766个utf\",{\"1\":{\"749\":1}}],[\"32个字符\",{\"1\":{\"719\":1,\"1515\":1}}],[\"3221225472\",{\"1\":{\"717\":1}}],[\"3pc\",{\"1\":{\"668\":1}}],[\"35\",{\"1\":{\"656\":1,\"1311\":2,\"1564\":1,\"1628\":1}}],[\"3<\",{\"1\":{\"646\":1}}],[\"3仅支持python2\",{\"1\":{\"646\":1}}],[\"36000\",{\"1\":{\"1531\":2,\"1570\":1,\"1571\":1}}],[\"36958104\",{\"1\":{\"1374\":1}}],[\"365\",{\"1\":{\"623\":2}}],[\"36\",{\"1\":{\"596\":2,\"1187\":1,\"1597\":5}}],[\"3a+declined\",{\"1\":{\"399\":1}}],[\"3a\",{\"1\":{\"399\":1}}],[\"3aclosed+label\",{\"1\":{\"399\":1}}],[\"30\",{\"1\":{\"274\":1,\"285\":1,\"288\":1,\"290\":1,\"1532\":16,\"1572\":1,\"1574\":1}}],[\"300000\",{\"1\":{\"1515\":1}}],[\"3000\",{\"1\":{\"146\":1,\"804\":2,\"1026\":4,\"1130\":2,\"1211\":2}}],[\"3100\",{\"1\":{\"1514\":1}}],[\"314\",{\"1\":{\"139\":1}}],[\"31\",{\"1\":{\"117\":1,\"801\":3,\"1541\":1,\"1592\":1}}],[\"3\",{\"0\":{\"1533\":1,\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1581\":1,\"1592\":1,\"1603\":1,\"1613\":1},\"1\":{\"49\":1,\"65\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"133\":2,\"138\":1,\"139\":1,\"140\":10,\"145\":1,\"152\":4,\"186\":1,\"234\":1,\"243\":2,\"277\":13,\"279\":1,\"282\":2,\"283\":1,\"287\":1,\"291\":2,\"296\":5,\"302\":1,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"315\":1,\"318\":4,\"377\":2,\"441\":1,\"585\":1,\"643\":1,\"647\":1,\"648\":1,\"649\":2,\"656\":4,\"707\":1,\"720\":2,\"783\":1,\"801\":2,\"802\":1,\"850\":1,\"851\":6,\"983\":2,\"1002\":1,\"1058\":1,\"1066\":1,\"1096\":1,\"1125\":1,\"1129\":1,\"1132\":1,\"1133\":1,\"1155\":1,\"1187\":1,\"1198\":3,\"1202\":1,\"1215\":5,\"1220\":3,\"1221\":1,\"1243\":4,\"1259\":1,\"1269\":1,\"1278\":1,\"1289\":2,\"1317\":1,\"1319\":2,\"1321\":1,\"1331\":1,\"1373\":1,\"1407\":1,\"1433\":1,\"1450\":1,\"1452\":1,\"1458\":2,\"1506\":1,\"1561\":1,\"1582\":2,\"1603\":1,\"1622\":1}}],[\"71\",{\"1\":{\"1628\":1,\"1635\":1}}],[\"7b05f1694587866e2fe6cb76690bbb18\",{\"1\":{\"1628\":1}}],[\"76cb66dcb3614a9995ec3d0a5aaa2916\",{\"1\":{\"1582\":1}}],[\"7dbc56c6fad129761a06b84b7f5e811076b0da9d99cf7cffe832fdee7a7c2b46\",{\"1\":{\"1550\":1}}],[\"7c0jq6tzdqh0+i28aqjbapx\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"72000\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"7200s\",{\"1\":{\"1210\":2,\"1211\":1}}],[\"726396234906161152\",{\"1\":{\"1455\":2}}],[\"73\",{\"1\":{\"1221\":1,\"1515\":1}}],[\"7加密方式mysql\",{\"1\":{\"1140\":1}}],[\"7和pkcs\",{\"1\":{\"625\":1}}],[\"7版本\",{\"1\":{\"326\":1}}],[\"7种\",{\"1\":{\"202\":1}}],[\"7\",{\"0\":{\"355\":1,\"758\":1,\"1554\":1,\"1565\":1,\"1585\":1,\"1596\":1,\"1607\":1,\"1617\":1},\"1\":{\"129\":2,\"140\":8,\"234\":1,\"241\":1,\"282\":2,\"585\":1,\"646\":3,\"647\":1,\"656\":1,\"707\":1,\"1137\":1,\"1139\":4,\"1140\":2,\"1221\":1,\"1248\":1,\"1331\":1,\"1491\":1}}],[\"75\",{\"1\":{\"48\":1,\"198\":1}}],[\"777\",{\"1\":{\"21\":1,\"1130\":1,\"1177\":2,\"1200\":1}}],[\"对请求头中的token解析校验\",{\"1\":{\"1521\":1}}],[\"对请求的封装使用了包装器requestfacade\",{\"1\":{\"678\":1}}],[\"对用户访问的路径鉴权\",{\"1\":{\"1520\":1}}],[\"对用户进行验证\",{\"1\":{\"203\":1}}],[\"对客户端进行认证\",{\"1\":{\"1517\":1}}],[\"对客户端验证授权\",{\"1\":{\"1516\":1}}],[\"对不同租户的数据存储进行隔离\",{\"1\":{\"1502\":1}}],[\"对不同租户来说\",{\"1\":{\"1502\":1}}],[\"对设备进行新增\",{\"1\":{\"1477\":1}}],[\"对channel中的信息进行链式处理\",{\"1\":{\"1447\":1}}],[\"对共享内存中进行超时判断\",{\"1\":{\"1433\":1}}],[\"对一下事件进行组合处理\",{\"1\":{\"1372\":1}}],[\"对deviceoperationbroker的发送消息发布器进行订阅\",{\"1\":{\"1331\":1}}],[\"对mqtt\",{\"1\":{\"1328\":1}}],[\"对相应设备事件进行处理\",{\"1\":{\"1321\":1}}],[\"对会话持久化\",{\"1\":{\"1321\":1}}],[\"对执行条件的直观描述\",{\"1\":{\"1311\":1}}],[\"对事件event进行了封装\",{\"1\":{\"1285\":1}}],[\"对集合分组处理collectionutil\",{\"1\":{\"1244\":1}}],[\"对内部暴露端口重写\",{\"1\":{\"1109\":1}}],[\"对内部datasource初始化\",{\"1\":{\"108\":1}}],[\"对指定字段单独设置field\",{\"1\":{\"902\":1}}],[\"对beanfactorypostprocessor的拓展\",{\"1\":{\"900\":1}}],[\"对数据库操作的jdbc模板\",{\"1\":{\"898\":1}}],[\"对结果处理\",{\"1\":{\"896\":1}}],[\"对spring的版本升级\",{\"1\":{\"851\":1}}],[\"对servlet进行初始化\",{\"1\":{\"401\":1,\"456\":1}}],[\"对嵌套计算出的avg\",{\"1\":{\"771\":1}}],[\"对聚合结果排序\",{\"0\":{\"771\":1}}],[\"对文本进行分词\",{\"1\":{\"749\":1}}],[\"对提前创建好的model\",{\"1\":{\"740\":1}}],[\"对token进行解析获取用户信息放在上下文中\",{\"1\":{\"722\":1}}],[\"对token进行校验\",{\"1\":{\"339\":1}}],[\"对称加密算法\",{\"1\":{\"719\":1}}],[\"对应的sink\",{\"1\":{\"1331\":1}}],[\"对应的消息\",{\"1\":{\"804\":1}}],[\"对应于th\",{\"1\":{\"983\":2}}],[\"对应于jspservlet类\",{\"1\":{\"679\":1}}],[\"对应连接池配置\",{\"1\":{\"850\":1}}],[\"对应用的用户信息和菜单权限统一管理\",{\"1\":{\"723\":1}}],[\"对应spring的\",{\"1\":{\"600\":1}}],[\"对应spring中的\",{\"1\":{\"600\":1}}],[\"对json操作需使用\",{\"1\":{\"648\":1}}],[\"对新的对象重新订阅\",{\"1\":{\"537\":2}}],[\"对上个节点发出的元素\",{\"1\":{\"536\":1}}],[\"对上下文进行自定义处理\",{\"1\":{\"451\":1}}],[\"对订阅信息处理\",{\"1\":{\"530\":1}}],[\"对当前最上级发出元素\",{\"1\":{\"526\":1}}],[\"对当前实例的重试次数\",{\"1\":{\"213\":1}}],[\"对导入选择器组进行处理\",{\"1\":{\"491\":1}}],[\"对导入选择器分组\",{\"1\":{\"491\":1}}],[\"对路由进行java代码形式自定义配置\",{\"1\":{\"468\":1}}],[\"对权限等进行校验\",{\"1\":{\"466\":1}}],[\"对生成的实现smartinitializingsingleton接口的单例对象调用aftersingletonsinstantiated进行一些自定义处理\",{\"1\":{\"438\":1}}],[\"对principle和session\",{\"1\":{\"419\":1}}],[\"对findbyindexnamesessionrepository仓库接口的实现\",{\"1\":{\"419\":1}}],[\"对处理器进行排序后执行处理方法\",{\"1\":{\"399\":1}}],[\"对子配置器oauth2clientauthenticationconfigurer等初始化\",{\"1\":{\"338\":1}}],[\"对对象处理执行aware\",{\"1\":{\"333\":1}}],[\"对对象进行初始化initializebean\",{\"1\":{\"329\":1}}],[\"对软引用回收\",{\"1\":{\"243\":1}}],[\"对象\",{\"1\":{\"616\":1,\"652\":1,\"928\":1,\"992\":1,\"998\":1,\"1062\":1}}],[\"对象的对应方法\",{\"1\":{\"354\":1}}],[\"对象的相互引用导致内存无法回收泄露\",{\"1\":{\"243\":1}}],[\"对象中维护一个引用计数器\",{\"1\":{\"243\":1}}],[\"对前端用户展示不友好\",{\"1\":{\"224\":1}}],[\"对已存在的记录进行等值匹配时\",{\"1\":{\"219\":1}}],[\"对所有操作请求都进行重试\",{\"1\":{\"213\":1}}],[\"对\",{\"1\":{\"153\":1}}],[\"对http开头的镜像地址做了限制\",{\"1\":{\"47\":1}}],[\"对于一个\",{\"1\":{\"993\":1}}],[\"对于这种使用\",{\"1\":{\"992\":1}}],[\"对于每一批poll\",{\"1\":{\"798\":2}}],[\"对于分布式应用来说\",{\"1\":{\"722\":1}}],[\"对于json格式数据不能多次绑定到实体中\",{\"1\":{\"180\":1}}],[\"对于\",{\"1\":{\"31\":2}}],[\"勾选\",{\"1\":{\"45\":1}}],[\"选择路由\",{\"1\":{\"974\":1}}],[\"选择器\",{\"0\":{\"937\":1,\"946\":1}}],[\"选择数据库\",{\"1\":{\"908\":1}}],[\"选择使用哪种延时执行器\",{\"1\":{\"843\":1}}],[\"选择搞版本下载\",{\"1\":{\"642\":1}}],[\"选择\",{\"1\":{\"642\":1}}],[\"选中文件所在位置\",{\"1\":{\"45\":1}}],[\"选项\",{\"0\":{\"643\":1},\"1\":{\"45\":1,\"173\":1,\"996\":4}}],[\"选项来开启这种默认不被允许的行为\",{\"1\":{\"11\":1}}],[\"浏览器不支持\",{\"1\":{\"1407\":1}}],[\"浏览器的dom\",{\"1\":{\"970\":1}}],[\"浏览器向服务器发起请求\",{\"1\":{\"722\":1}}],[\"浏览器请求可与重定向响应联合使用\",{\"1\":{\"46\":1}}],[\"浏览器请求与重定向响应混合使用报错问题\",{\"0\":{\"46\":1}}],[\"浏览\",{\"1\":{\"45\":1}}],[\"添加property\",{\"1\":{\"1479\":1}}],[\"添加元素\",{\"1\":{\"1452\":1}}],[\"添加serversocketchannel的handler\",{\"1\":{\"1450\":1}}],[\"添加service\",{\"1\":{\"893\":1}}],[\"添加任务到任务对列\",{\"1\":{\"1445\":1}}],[\"添加任务\",{\"1\":{\"1445\":1}}],[\"添加到rdbdatabasemetadata的feature\",{\"1\":{\"1371\":1}}],[\"添加到集合中去\",{\"1\":{\"1032\":1}}],[\"添加别名\",{\"1\":{\"1118\":1}}],[\"添加如下内容\",{\"1\":{\"925\":1}}],[\"添加字段\",{\"1\":{\"759\":1}}],[\"添加依赖\",{\"1\":{\"658\":1}}],[\"添加附加的appender\",{\"1\":{\"596\":2}}],[\"添加一些系统属性catalina\",{\"1\":{\"453\":1}}],[\"添加一下内容\",{\"1\":{\"32\":1}}],[\"添加生命周期监听器\",{\"1\":{\"451\":1,\"455\":1}}],[\"添加额外的连接器\",{\"1\":{\"450\":1}}],[\"添加host到engine\",{\"1\":{\"450\":1}}],[\"添加引擎engine到service\",{\"1\":{\"450\":1}}],[\"添加environmentaware\",{\"1\":{\"398\":1}}],[\"添加bean后置处理器applicationcontextawareprocessor\",{\"1\":{\"398\":1}}],[\"添加过滤器路径\",{\"1\":{\"421\":1}}],[\"添加过滤器\",{\"1\":{\"333\":1}}],[\"添加\",{\"1\":{\"290\":1,\"658\":1,\"910\":1,\"996\":1,\"1056\":1,\"1231\":1,\"1452\":1}}],[\"添加自定义方法\",{\"1\":{\"241\":1}}],[\"添加构造函数方法体\",{\"1\":{\"241\":1}}],[\"添加构造函数\",{\"1\":{\"241\":1}}],[\"添加getter\",{\"1\":{\"241\":1}}],[\"添加新位置\",{\"1\":{\"45\":1}}],[\"受信任的位置\",{\"1\":{\"45\":1}}],[\"受保护的视图\",{\"1\":{\"45\":1}}],[\"方式获取信息\",{\"1\":{\"1408\":1}}],[\"方式\",{\"1\":{\"1026\":1}}],[\"方案对比\",{\"1\":{\"1241\":1}}],[\"方案3\",{\"1\":{\"1141\":1}}],[\"方案2\",{\"1\":{\"1141\":1}}],[\"方案1\",{\"1\":{\"1141\":1}}],[\"方案\",{\"0\":{\"1016\":1,\"1477\":1},\"1\":{\"39\":1,\"1032\":1}}],[\"方法获取匹配的路径\",{\"1\":{\"976\":1}}],[\"方法获取长度\",{\"1\":{\"152\":1}}],[\"方法的最长阻塞时间\",{\"1\":{\"801\":1,\"802\":1}}],[\"方法的返回类型不能是\",{\"1\":{\"298\":1}}],[\"方法之后立即进行偏移量的提交\",{\"1\":{\"798\":1}}],[\"方法之后仅仅是将offset存放到本地map缓存\",{\"1\":{\"798\":1}}],[\"方法进行手动提交\",{\"1\":{\"798\":2}}],[\"方法执行脚本内容\",{\"1\":{\"648\":1}}],[\"方法是为了根据数据库标示符取得当前的数据库\",{\"1\":{\"632\":1}}],[\"方法是从requestcontextholder的threadlocal中去取值的\",{\"1\":{\"354\":1}}],[\"方法将会被执行\",{\"1\":{\"658\":1}}],[\"方法将数据源分别进行复制到resolveddatasources和resolveddefaultdatasource中\",{\"1\":{\"632\":1}}],[\"方法将string转换为\",{\"1\":{\"268\":1}}],[\"方法链\",{\"1\":{\"604\":1}}],[\"方法返回datasource在进行getconnection\",{\"1\":{\"632\":1}}],[\"方法返回flux<routedefinition>对象\",{\"1\":{\"468\":1}}],[\"方法返回一个\",{\"1\":{\"311\":1}}],[\"方法前后做什么\",{\"1\":{\"382\":1}}],[\"方法后\",{\"1\":{\"382\":1}}],[\"方法可以获取元素\",{\"0\":{\"311\":1}}],[\"方法插入键值对\",{\"1\":{\"308\":1}}],[\"方法来丢弃整个\",{\"1\":{\"652\":1}}],[\"方法来处理客户端的请求\",{\"1\":{\"652\":1}}],[\"方法来创建\",{\"1\":{\"308\":1}}],[\"方法来获取一个线程安全的集合\",{\"1\":{\"198\":1}}],[\"方法没有任何泛型参数\",{\"1\":{\"298\":1}}],[\"方法中使用泛型\",{\"0\":{\"295\":1}}],[\"方法调用是\",{\"1\":{\"290\":1}}],[\"方法跟字段同名\",{\"1\":{\"290\":1}}],[\"方法名跟结构体字段名相同\",{\"0\":{\"290\":1}}],[\"方法method\",{\"0\":{\"288\":1}}],[\"方法取出动态数组的最后一个元素并返回\",{\"1\":{\"287\":1}}],[\"方法把\",{\"1\":{\"279\":1}}],[\"方法区的常量\",{\"1\":{\"243\":1}}],[\"方法区的类变量\",{\"1\":{\"243\":1}}],[\"方法启动\",{\"1\":{\"232\":1}}],[\"方法用于区别普通错误\",{\"1\":{\"159\":1}}],[\"方法和向切片追加新元素的\",{\"1\":{\"152\":1}}],[\"方法\",{\"0\":{\"514\":1},\"1\":{\"16\":1,\"152\":1,\"157\":1,\"243\":1,\"298\":1,\"304\":1,\"330\":1,\"632\":1,\"652\":2,\"824\":1,\"843\":1,\"1342\":1}}],[\"验证码处理\",{\"1\":{\"1513\":1}}],[\"验证field是否存在\",{\"1\":{\"909\":1}}],[\"验证token\",{\"1\":{\"347\":1}}],[\"验证\",{\"1\":{\"244\":1}}],[\"验证你edge浏览器同步出现问题的原因是不是域名不能连通\",{\"1\":{\"39\":1}}],[\"验证是否是dns解析问题\",{\"1\":{\"39\":1}}],[\"$maven\",{\"1\":{\"1458\":1}}],[\"$my\",{\"1\":{\"1105\":1}}],[\"$file\",{\"1\":{\"1227\":13}}],[\"$b\",{\"1\":{\"1222\":8,\"1223\":2}}],[\"$body\",{\"1\":{\"1210\":1}}],[\"$a\",{\"1\":{\"1222\":17,\"1223\":2}}],[\"$$\",{\"1\":{\"1220\":1}}],[\"$0\",{\"1\":{\"1220\":1}}],[\"$proxy\",{\"1\":{\"1210\":5,\"1211\":1}}],[\"$path\",{\"0\":{\"4\":1},\"1\":{\"1130\":2}}],[\"$connection\",{\"1\":{\"1210\":1}}],[\"$host\",{\"1\":{\"1210\":5}}],[\"$home\",{\"1\":{\"1130\":2}}],[\"$http\",{\"1\":{\"1210\":7,\"1211\":1}}],[\"$request\",{\"1\":{\"1210\":1}}],[\"$remote\",{\"1\":{\"36\":2,\"1210\":7,\"1211\":1}}],[\"$time\",{\"1\":{\"1210\":1}}],[\"$tz\",{\"1\":{\"1115\":2}}],[\"$gitlab\",{\"1\":{\"1127\":6,\"1128\":1}}],[\"$gopath\",{\"1\":{\"173\":2}}],[\"$10\",{\"1\":{\"1221\":1}}],[\"$1\",{\"1\":{\"1087\":1,\"1220\":2,\"1221\":1}}],[\"$2\",{\"1\":{\"1087\":1,\"1220\":1,\"1221\":1}}],[\"$n\",{\"1\":{\"1220\":2}}],[\"$name\",{\"1\":{\"1219\":1}}],[\"$node\",{\"1\":{\"1182\":1}}],[\"$nexttick\",{\"1\":{\"1002\":1}}],[\"$nr\",{\"1\":{\"647\":3}}],[\"$status\",{\"1\":{\"1210\":1}}],[\"$store\",{\"1\":{\"998\":1}}],[\"$set\",{\"1\":{\"1002\":1}}],[\"$schema\",{\"1\":{\"103\":1}}],[\"$i++\",{\"1\":{\"647\":1}}],[\"$i<100\",{\"1\":{\"647\":1}}],[\"$i=0\",{\"1\":{\"647\":1}}],[\"$out\",{\"1\":{\"647\":2}}],[\"$java\",{\"1\":{\"218\":1,\"1116\":1,\"1458\":1}}],[\"$jvm\",{\"1\":{\"218\":1,\"1116\":1}}],[\"$uri\",{\"1\":{\"36\":2}}],[\"$\",{\"1\":{\"34\":3,\"584\":1,\"595\":4,\"635\":1,\"648\":1,\"649\":1,\"706\":1,\"719\":1,\"804\":11,\"850\":3,\"899\":1,\"935\":2,\"943\":2,\"944\":1,\"945\":1,\"946\":1,\"947\":1,\"948\":3,\"982\":14,\"983\":2,\"989\":3,\"991\":1,\"1032\":1,\"1087\":1,\"1092\":2,\"1118\":2,\"1130\":1,\"1215\":10,\"1219\":1,\"1220\":9,\"1221\":5,\"1222\":1,\"1225\":2,\"1407\":1}}],[\"连接注册\",{\"1\":{\"1440\":1}}],[\"连接便建立成功\",{\"1\":{\"1425\":1}}],[\"连接过程有了错误\",{\"1\":{\"1398\":1}}],[\"连接有了结果\",{\"1\":{\"1398\":1}}],[\"连接池\",{\"1\":{\"1382\":1}}],[\"连接池中的连接有过期时间和空闲最大存活时间60s\",{\"1\":{\"1381\":1}}],[\"连接池的用户定义名称\",{\"1\":{\"850\":1}}],[\"连接客户端\",{\"1\":{\"1353\":1}}],[\"连接到一个应用程序消息的标签\",{\"1\":{\"1272\":1}}],[\"连接健康测试的sql\",{\"1\":{\"850\":1}}],[\"连接允许在池中闲置的最长时间\",{\"1\":{\"850\":1}}],[\"连接服务器\",{\"1\":{\"840\":1}}],[\"连接容器和service\",{\"1\":{\"678\":1}}],[\"连接发布器列表\",{\"1\":{\"548\":1}}],[\"连接器自定义\",{\"1\":{\"450\":1}}],[\"连接\",{\"1\":{\"244\":3,\"1397\":1,\"1399\":2,\"1425\":1}}],[\"连接时添加配置\",{\"1\":{\"34\":1}}],[\"连接已被关闭\",{\"1\":{\"6\":1}}],[\"ywu\",{\"1\":{\"1531\":1}}],[\"y2xpzw50swq6mtizndu2\",{\"1\":{\"1531\":1,\"1534\":1,\"1535\":1}}],[\"yin\",{\"1\":{\"1116\":2,\"1120\":1,\"1121\":2}}],[\"yahoo\",{\"1\":{\"975\":1}}],[\"yarn\",{\"1\":{\"720\":1,\"965\":3}}],[\"yq\",{\"1\":{\"780\":1}}],[\"yudaosourcecode\",{\"1\":{\"479\":2}}],[\"yum\",{\"1\":{\"33\":1}}],[\"yes\",{\"1\":{\"1139\":1}}],[\"year\",{\"1\":{\"649\":2}}],[\"yet\",{\"1\":{\"411\":1,\"977\":1}}],[\"yellow\",{\"1\":{\"311\":1,\"312\":2}}],[\"yyyy\",{\"1\":{\"379\":1,\"596\":5,\"649\":1,\"1513\":1,\"1514\":1,\"1539\":2,\"1540\":2,\"1570\":1,\"1571\":1}}],[\"yml文件说明\",{\"1\":{\"1475\":1}}],[\"yml文件格式\",{\"1\":{\"902\":1}}],[\"yml文件中都存在时\",{\"1\":{\"593\":1}}],[\"yml中的配置\",{\"1\":{\"593\":1,\"850\":1}}],[\"yml\",{\"1\":{\"164\":1,\"593\":5,\"1121\":3,\"1123\":16,\"1129\":2,\"1474\":2,\"1475\":1}}],[\"yml对$符号敏感\",{\"1\":{\"35\":1}}],[\"you\",{\"1\":{\"157\":4,\"494\":1,\"974\":2,\"977\":1}}],[\"youremail\",{\"1\":{\"1145\":1}}],[\"your\",{\"0\":{\"43\":1},\"1\":{\"10\":1,\"399\":1,\"900\":1,\"1146\":1}}],[\"y\",{\"1\":{\"33\":1,\"124\":2,\"139\":2,\"190\":3,\"275\":2,\"282\":4,\"292\":1,\"295\":3,\"298\":5,\"315\":1,\"317\":2,\"1130\":2}}],[\"~selectionkey\",{\"1\":{\"1445\":1}}],[\"~\",{\"1\":{\"32\":2,\"1093\":1,\"1118\":1,\"1130\":1,\"1186\":1}}],[\"为角色权限分配\",{\"1\":{\"1503\":1}}],[\"为用户设置的重定向地址第一个\",{\"1\":{\"1506\":1}}],[\"为用户分配角色来授权用户可访问的平台\",{\"1\":{\"1503\":1}}],[\"为用户打造一站式的分布式解决方案\",{\"1\":{\"212\":1}}],[\"为业务系统提供统一的用户资源和权限资源进行集中的管理\",{\"1\":{\"1500\":1}}],[\"为监听客户端read\",{\"1\":{\"1447\":1}}],[\"为监听端口accept事件的channel添加serverbootstrapacceptor\",{\"1\":{\"1447\":1}}],[\"为0返回\",{\"1\":{\"1222\":1}}],[\"为整个流水线分配一个执行器\",{\"1\":{\"1214\":1}}],[\"为端口指定一个可读性强的名称\",{\"1\":{\"1171\":1}}],[\"为例\",{\"1\":{\"996\":1}}],[\"为后缀\",{\"1\":{\"989\":1}}],[\"为两个\",{\"1\":{\"652\":1}}],[\"为某个接口寻找服务实现的机制\",{\"1\":{\"481\":1}}],[\"为请求request分配servlet时\",{\"1\":{\"401\":1}}],[\"为具体的泛型类型实现方法\",{\"1\":{\"295\":1}}],[\"为枚举实现方法\",{\"0\":{\"292\":1}}],[\"为什么不用sychronized\",{\"1\":{\"911\":1}}],[\"为什么使用redis\",{\"1\":{\"911\":1}}],[\"为什么使用jwt\",{\"1\":{\"722\":1}}],[\"为什么使用aop\",{\"1\":{\"382\":1}}],[\"为什么使用分库分表\",{\"0\":{\"221\":1}}],[\"为什么要在返回之后才执行这些语句\",{\"1\":{\"138\":1}}],[\"为一个大于默认值\",{\"1\":{\"186\":1}}],[\"为一个函数\",{\"1\":{\"139\":1}}],[\"为可选参数\",{\"1\":{\"152\":1}}],[\"为指针变量赋值\",{\"1\":{\"143\":1}}],[\"为指针变量名\",{\"1\":{\"142\":1}}],[\"为指针类型\",{\"1\":{\"142\":1}}],[\"为\",{\"1\":{\"123\":1,\"139\":1,\"151\":2}}],[\"为避免这种问题\",{\"1\":{\"31\":1}}],[\"为了支持响应式订阅\",{\"1\":{\"1285\":1}}],[\"为了解决读写冲突\",{\"1\":{\"1049\":1}}],[\"为了解决单库单表的数量量太大\",{\"1\":{\"221\":1}}],[\"为了实现即时通信\",{\"1\":{\"1425\":1}}],[\"为了实现\",{\"1\":{\"1170\":1}}],[\"为了实现这种方式\",{\"1\":{\"993\":1}}],[\"为了实现在模块装配的时候能不在程序里动态指明\",{\"1\":{\"481\":1}}],[\"为了更好的做成一个单独的模块\",{\"1\":{\"932\":1}}],[\"为了简化用户使用\",{\"1\":{\"308\":1}}],[\"为了在java中成功调用javascript函数\",{\"1\":{\"16\":1}}],[\"为了兼容原先的版本\",{\"1\":{\"11\":1}}],[\"然而如果依赖的模块只有部分模块存在\",{\"1\":{\"31\":1}}],[\"然后挂载到某一个目录上就可以了\",{\"1\":{\"1197\":1}}],[\"然后添加了\",{\"1\":{\"996\":1}}],[\"然后添加一个set方法\",{\"1\":{\"25\":1}}],[\"然后在使用方\",{\"1\":{\"992\":1}}],[\"然后就可以使用全局变量\",{\"1\":{\"989\":1}}],[\"然后就会尝试向其他服务发请求\",{\"1\":{\"213\":1}}],[\"然后为任何给定的连接请求\",{\"1\":{\"850\":1}}],[\"然后把配置文件放进去\",{\"1\":{\"593\":1}}],[\"然后把配置文件放到这个文件夹下\",{\"1\":{\"593\":1}}],[\"然后再删除这个分支即可\",{\"1\":{\"1150\":1}}],[\"然后再订阅下一个源\",{\"1\":{\"548\":1}}],[\"然后再为它实现某个特征\",{\"1\":{\"272\":1}}],[\"然后等待它完成\",{\"1\":{\"548\":1}}],[\"然后等待服务返回信息\",{\"1\":{\"213\":1}}],[\"然后通过afterpropertiesset\",{\"1\":{\"632\":1}}],[\"然后通过\",{\"1\":{\"308\":1}}],[\"然后调用该值对应的类型上定义的\",{\"1\":{\"298\":1}}],[\"然后调用call\",{\"1\":{\"157\":1}}],[\"然后线程池中限定线程数\",{\"1\":{\"213\":1}}],[\"然后相同的uri可以开启一个线程池\",{\"1\":{\"213\":1}}],[\"然后我们在main函数里面定义了一个phone类型变量\",{\"1\":{\"157\":1}}],[\"然后\",{\"1\":{\"16\":1,\"679\":1}}],[\"在token过期用其获取新的token\",{\"1\":{\"1531\":1}}],[\"在type自定义对象类型或interface类型中\",{\"1\":{\"991\":1}}],[\"在登陆成功之后默认跳转到用户面板\",{\"1\":{\"1506\":1}}],[\"在分布式系统中每一个服务都有一套账号\",{\"1\":{\"1500\":1}}],[\"在分布式事务执行前后\",{\"1\":{\"212\":1}}],[\"在导入设备时进行推送\",{\"1\":{\"1477\":1}}],[\"在有新链接进入时\",{\"1\":{\"1447\":1}}],[\"在初始化时\",{\"1\":{\"1446\":1}}],[\"在注册channel时\",{\"1\":{\"1445\":1}}],[\"在注册时\",{\"1\":{\"1317\":1}}],[\"在其生命周期内只会绑定一个线程\",{\"1\":{\"1445\":1}}],[\"在通信过程加了密钥处理\",{\"1\":{\"1426\":1}}],[\"在通过oss的sdk工具将数据上传到阿里云的oss中\",{\"1\":{\"911\":1}}],[\"在客户端\",{\"1\":{\"1425\":1}}],[\"在conn\",{\"1\":{\"1381\":1}}],[\"在class语法糖出现之前\",{\"1\":{\"932\":1}}],[\"在收到响应后\",{\"1\":{\"1381\":1}}],[\"在对协议增删改查时\",{\"1\":{\"1358\":1}}],[\"在对实时库存明细扣减时\",{\"1\":{\"915\":1}}],[\"在发送时缓存了消息id\",{\"1\":{\"1331\":1}}],[\"在发送完\",{\"1\":{\"190\":1}}],[\"在线\",{\"1\":{\"1327\":1}}],[\"在线引用\",{\"1\":{\"934\":1}}],[\"在实例化devicemessageconnector时通过向devicesessionmanager中注册事件监听器对\",{\"1\":{\"1321\":1}}],[\"在项目启动时\",{\"1\":{\"1319\":1,\"1320\":1}}],[\"在构建repository时\",{\"1\":{\"1300\":1}}],[\"在构造全局认证管理器时\",{\"1\":{\"341\":1}}],[\"在构造httpsecurity时\",{\"1\":{\"330\":1}}],[\"在mysql的配置文件my\",{\"1\":{\"1231\":1}}],[\"在main函数之前执行\",{\"1\":{\"137\":1}}],[\"在提交前过一遍业务逻辑\",{\"1\":{\"1229\":1}}],[\"在声明式流水线语法中\",{\"1\":{\"1215\":1}}],[\"在本地\",{\"1\":{\"1201\":1}}],[\"在lvm中pe\",{\"1\":{\"1197\":1}}],[\"在上述示例中\",{\"1\":{\"1171\":2}}],[\"在上面的例子中\",{\"1\":{\"157\":1}}],[\"在kubernetes中\",{\"1\":{\"1162\":1,\"1168\":1,\"1171\":1}}],[\"在kubernetes\",{\"1\":{\"1161\":1}}],[\"在特定pod中执行命令\",{\"1\":{\"1159\":1}}],[\"在以后的推送或者拉取时就可以简化命令\",{\"1\":{\"1151\":1}}],[\"在vi编辑器中输入以下内容\",{\"1\":{\"1141\":1}}],[\"在vmoptions文件中加\",{\"1\":{\"55\":1}}],[\"在管理员打开的cmd\",{\"1\":{\"1141\":1}}],[\"在jetlinks中大量使用到事件驱动来实现功能解耦\",{\"1\":{\"1284\":1}}],[\"在jenkins单节点上映射宿主机的docker\",{\"1\":{\"1130\":1}}],[\"在jenkins配置maven\",{\"1\":{\"1130\":1}}],[\"在javascript\",{\"1\":{\"983\":1}}],[\"在bean初始化时添加token解析器和产生器\",{\"1\":{\"1345\":1}}],[\"在bean初始化时执行init方法\",{\"1\":{\"1321\":1}}],[\"在bean对象初始化前\",{\"1\":{\"383\":1}}],[\"在bean对象初始化\",{\"1\":{\"383\":1}}],[\"在bash每次启动时都会加载\",{\"1\":{\"1118\":1}}],[\"在windows和macos上\",{\"1\":{\"1093\":1}}],[\"在同一事务中同时使用当前读与快照读\",{\"1\":{\"1050\":1}}],[\"在同为bootstrap或同为application的情况下\",{\"1\":{\"593\":1}}],[\"在事务\",{\"1\":{\"1049\":1}}],[\"在事务执行完毕\",{\"1\":{\"212\":1}}],[\"在事务执行前后\",{\"1\":{\"212\":1}}],[\"在当前读下\",{\"1\":{\"1048\":1}}],[\"在加锁之前会先在表加意向锁\",{\"1\":{\"1048\":2}}],[\"在微信公众号中点击按钮\",{\"1\":{\"1007\":1}}],[\"在组件渲染后执行\",{\"1\":{\"1002\":1}}],[\"在子组件中监听父组件传入的值\",{\"1\":{\"1002\":1}}],[\"在子不成功时启用父\",{\"1\":{\"341\":1}}],[\"在另一个场景下\",{\"1\":{\"995\":1}}],[\"在全局变量的声明文件中\",{\"1\":{\"995\":1}}],[\"在编译结果中会被删除\",{\"1\":{\"989\":1}}],[\"在父组件改变子组件的值后\",{\"1\":{\"1002\":1}}],[\"在父标签声明\",{\"1\":{\"983\":1}}],[\"在父认证管理器中\",{\"1\":{\"341\":1}}],[\"在已存在的项目引入ts检查和支持\",{\"1\":{\"965\":1}}],[\"在dockerfile文件中指定要暴露的端口\",{\"1\":{\"1109\":1}}],[\"在dockerfile中\",{\"1\":{\"1103\":1}}],[\"在dom对象创建之后执行js\",{\"1\":{\"944\":1}}],[\"在dispatchhandler分发之后的网关过滤器中处理\",{\"0\":{\"471\":1}}],[\"在大括号中\",{\"1\":{\"928\":1}}],[\"在中括号中\",{\"1\":{\"928\":1}}],[\"在双括号中\",{\"1\":{\"928\":1}}],[\"在生成单据的报表信息\",{\"1\":{\"915\":1}}],[\"在进行相应操作时\",{\"1\":{\"915\":1}}],[\"在点击一键发货功能对库存扣减\",{\"1\":{\"915\":1}}],[\"在操作共享变量时\",{\"1\":{\"911\":1}}],[\"在订单导入时\",{\"1\":{\"911\":1}}],[\"在订阅表达式中使用\",{\"1\":{\"1272\":1}}],[\"在订阅处理方法中又可以创建一系列管道\",{\"1\":{\"526\":1}}],[\"在订阅时处理\",{\"1\":{\"526\":1}}],[\"在容器初始化时使用classpathmapperscanner\",{\"1\":{\"854\":1}}],[\"在容器启动时\",{\"1\":{\"211\":1}}],[\"在回调中进行订阅的问题\",{\"1\":{\"846\":1}}],[\"在保活时间内发送ping到server验证server是否存活\",{\"1\":{\"824\":1}}],[\"在下一次拉取消息之前批量提交\",{\"1\":{\"798\":1}}],[\"在下一次poll的时候\",{\"1\":{\"798\":1}}],[\"在poll新数据之前从缓存中拿出来批量提交\",{\"1\":{\"798\":1}}],[\"在preparecontext的applyinitializers时设置上下文\",{\"1\":{\"389\":1}}],[\"在计算机语言中\",{\"1\":{\"789\":1}}],[\"在具体查询过程中\",{\"1\":{\"780\":1}}],[\"在滚动的有效时间范围内\",{\"1\":{\"780\":1}}],[\"在es中它叫aggregation\",{\"1\":{\"768\":1}}],[\"在这个时间段内\",{\"1\":{\"730\":2}}],[\"在这里\",{\"1\":{\"354\":1}}],[\"在这里定义方法体\",{\"1\":{\"292\":1}}],[\"在某个峰值时刻\",{\"1\":{\"730\":1}}],[\"在某种情况下\",{\"1\":{\"188\":1}}],[\"在网关校验\",{\"1\":{\"723\":1}}],[\"在它的mapping\",{\"1\":{\"679\":1}}],[\"在业务层面实现\",{\"1\":{\"668\":1}}],[\"在每天下午2点到2\",{\"1\":{\"656\":1}}],[\"在每天下午2点到下午2\",{\"1\":{\"656\":3}}],[\"在每一个flux对象中记录订阅者信息\",{\"1\":{\"526\":1}}],[\"在周字段上表示星期六\",{\"1\":{\"656\":1}}],[\"在日字段设置上\",{\"1\":{\"656\":1}}],[\"在母亲节和父亲节再合适不过了\",{\"1\":{\"656\":1}}],[\"在秒的字段上设置\",{\"1\":{\"656\":1}}],[\"在响应头中添加两个\",{\"1\":{\"652\":1}}],[\"在后端设置cookie\",{\"1\":{\"652\":1}}],[\"在后置处理beanfactory之前\",{\"1\":{\"399\":1}}],[\"在做具体查询操作前切换数据源\",{\"1\":{\"632\":1}}],[\"在请求拦截器\",{\"1\":{\"609\":1}}],[\"在请求缓存httpsessionrequestcache中保存被拒绝的请求\",{\"1\":{\"346\":1}}],[\"在代码中使用\",{\"1\":{\"599\":1}}],[\"在执行过程中从可运行对象内部调用时将返回eventexecutor\",{\"1\":{\"1445\":1}}],[\"在执行requestready和outputready过程中\",{\"1\":{\"1383\":1}}],[\"在执行jdbc查询前\",{\"1\":{\"853\":1}}],[\"在执行query方法时\",{\"1\":{\"852\":1}}],[\"在执行订阅方法后\",{\"1\":{\"526\":1}}],[\"在执行创建flux对象及链式调用方法返回最终flux对象时\",{\"1\":{\"526\":1}}],[\"在执行代理实例对象的方法时会调用处理器的intercept方法进行处理\",{\"1\":{\"436\":1}}],[\"在模块化设计中这个机制尤其重要\",{\"1\":{\"481\":1}}],[\"在host下添加tomcatembeddedcontext\",{\"1\":{\"451\":1}}],[\"在onrefresh的preparebeanfactory方法中注册到bean工厂\",{\"1\":{\"442\":1}}],[\"在类的上方使用\",{\"1\":{\"421\":1}}],[\"在启动类上面增加注解\",{\"1\":{\"421\":1}}],[\"在调用初始化init方法时会传入servletconfig接口的实例servletconfigimpl包含对servletcontext的引用\",{\"1\":{\"401\":1}}],[\"在调用方法时\",{\"1\":{\"54\":1}}],[\"在sdk重启后\",{\"1\":{\"1489\":1}}],[\"在serverbootstrap初始化时\",{\"1\":{\"1447\":1}}],[\"在servlet引擎创建servlet实例时\",{\"1\":{\"401\":1}}],[\"在sql执行时触发相应事件\",{\"1\":{\"1371\":1}}],[\"在subscribe时创建\",{\"1\":{\"546\":1}}],[\"在spring\",{\"0\":{\"470\":1}}],[\"在springsecurityfilterchain之前\",{\"1\":{\"418\":1}}],[\"在src目录下加入项目1\",{\"1\":{\"168\":1}}],[\"在第一次\",{\"1\":{\"1425\":1}}],[\"在第一次创建servlet时执行\",{\"1\":{\"652\":1}}],[\"在第一次处理请求\",{\"1\":{\"401\":1}}],[\"在第一次垃圾回收时\",{\"1\":{\"243\":1}}],[\"在方法上加\",{\"1\":{\"801\":1}}],[\"在方法上声明throws\",{\"1\":{\"230\":1}}],[\"在方法前\",{\"1\":{\"382\":1}}],[\"在什么时机\",{\"1\":{\"382\":1}}],[\"在使用http握手时\",{\"1\":{\"1408\":1}}],[\"在使用时手动设置环境变量\",{\"1\":{\"1130\":1}}],[\"在使用时将非核心功能织入到业务功能上\",{\"1\":{\"382\":1}}],[\"在使用过程中\",{\"1\":{\"658\":1}}],[\"在使用指针前你需要声明指针\",{\"1\":{\"142\":1}}],[\"在我们调用这个成员变量的方法时\",{\"1\":{\"354\":1}}],[\"在用户名和密码校验成功后\",{\"1\":{\"348\":1}}],[\"在安全过滤器链中配置userdetailservice\",{\"1\":{\"348\":1}}],[\"在认证成功后\",{\"1\":{\"346\":1}}],[\"在认证时\",{\"1\":{\"341\":1}}],[\"在授权服务器根据重定向url\",{\"1\":{\"345\":1}}],[\"在获取已授权信息时\",{\"1\":{\"345\":1}}],[\"在创建flatmapmain订阅者对象时创建内部对象\",{\"1\":{\"537\":1}}],[\"在创建对象时已初始化\",{\"1\":{\"338\":1}}],[\"在创建时无需使用\",{\"1\":{\"298\":1}}],[\"在4\",{\"1\":{\"333\":1}}],[\"在配置时添加配置器\",{\"1\":{\"333\":1}}],[\"在一次poll的数据处理完毕之后\",{\"1\":{\"798\":2}}],[\"在一个对象的指针上调用方法\",{\"1\":{\"290\":1}}],[\"在一台核心数多于\",{\"1\":{\"186\":1}}],[\"在匹配不是全部英文字符\",{\"1\":{\"635\":1}}],[\"在匹配后\",{\"1\":{\"285\":1}}],[\"在匹配前\",{\"1\":{\"285\":1}}],[\"在之前的\",{\"1\":{\"273\":1}}],[\"在rust中\",{\"1\":{\"268\":1}}],[\"在replication时性能更好\",{\"1\":{\"223\":1}}],[\"在结尾的\",{\"1\":{\"264\":1}}],[\"在application\",{\"1\":{\"1078\":1}}],[\"在autoconfigurationsorter类中\",{\"1\":{\"857\":1}}],[\"在act\",{\"1\":{\"583\":1}}],[\"在accept之前进行判断\",{\"1\":{\"215\":1}}],[\"在axios的拦截器配置参数序列化处理\",{\"1\":{\"51\":1}}],[\"在接口中定义枚举类型\",{\"1\":{\"207\":1}}],[\"在多线程环境下若使用hashmap需要使用collections\",{\"1\":{\"198\":1}}],[\"在多层嵌套的函数调用中调用\",{\"1\":{\"159\":1}}],[\"在栈顶处程序崩溃\",{\"1\":{\"159\":1}}],[\"在程序死亡时被打印出来\",{\"1\":{\"159\":1}}],[\"在集合中返回\",{\"1\":{\"153\":1}}],[\"在数据流处理框架中\",{\"1\":{\"789\":1}}],[\"在数据库中\",{\"1\":{\"207\":1}}],[\"在数据库层面做时间偏移操作\",{\"1\":{\"14\":1}}],[\"在数组和切片中它返回元素的索引和索引对应的值\",{\"1\":{\"153\":1}}],[\"在指针类型前面加上\",{\"1\":{\"143\":1}}],[\"在新的一行被使用时\",{\"1\":{\"129\":1}}],[\"在\",{\"1\":{\"103\":1,\"117\":1,\"129\":1,\"186\":1,\"290\":1,\"298\":1,\"354\":1,\"442\":1,\"652\":1,\"992\":4,\"993\":1,\"1167\":1,\"1170\":1,\"1214\":1,\"1425\":2}}],[\"在没有其他模块依赖或者所依赖的模块都生成了\",{\"1\":{\"31\":1}}],[\"或其他编码\",{\"1\":{\"1542\":1,\"1543\":1,\"1551\":1,\"1552\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1574\":1,\"1581\":1,\"1593\":1,\"1594\":1,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"或获取产品和设备信息进行精确订阅\",{\"1\":{\"1489\":1}}],[\"或sync\",{\"1\":{\"1486\":1}}],[\"或读写\",{\"1\":{\"1486\":1}}],[\"或是\",{\"1\":{\"1425\":1}}],[\"或channeloutboundbuffer缓存区没有数据\",{\"1\":{\"1402\":1}}],[\"或运算\",{\"1\":{\"1223\":1}}],[\"或项目\",{\"1\":{\"1201\":1}}],[\"或则是以\",{\"1\":{\"1032\":1}}],[\"或设置值到线程局部变量中\",{\"1\":{\"915\":1}}],[\"或$\",{\"1\":{\"584\":1,\"706\":1}}],[\"或统计sql执行时长\",{\"1\":{\"382\":1}}],[\"或xml配置方式\",{\"1\":{\"202\":1}}],[\"或者参考转换\",{\"1\":{\"1478\":1}}],[\"或者if\",{\"1\":{\"1222\":1}}],[\"或者频繁g\",{\"1\":{\"1155\":1}}],[\"或者叫index\",{\"1\":{\"1151\":1}}],[\"或者在\",{\"1\":{\"996\":1}}],[\"或者在数据处理流程中终止数据流的操作\",{\"1\":{\"789\":1}}],[\"或者commitsync\",{\"1\":{\"798\":1}}],[\"或者保存到localstorage中\",{\"1\":{\"722\":1}}],[\"或者也可以选择重载该方法\",{\"1\":{\"297\":1}}],[\"或者动态生成类\",{\"1\":{\"240\":1}}],[\"或者\",{\"1\":{\"186\":1,\"763\":1,\"1197\":2,\"1219\":1}}],[\"或者使用\",{\"1\":{\"173\":1}}],[\"或集合\",{\"1\":{\"153\":1}}],[\"或使用\",{\"1\":{\"152\":1}}],[\"或\",{\"1\":{\"140\":1,\"148\":1,\"160\":1,\"282\":1,\"290\":1,\"656\":1,\"789\":1,\"801\":1,\"989\":2,\"1098\":1}}],[\"或任意位置执行\",{\"1\":{\"138\":1}}],[\"或值进行求值\",{\"1\":{\"131\":1}}],[\"或包驻留的任意库中必须是唯一的\",{\"1\":{\"103\":1}}],[\"或以后的版本\",{\"1\":{\"31\":1}}],[\"或更早的版本\",{\"1\":{\"31\":1}}],[\"或匹配行前后\",{\"1\":{\"12\":1}}],[\"4a46bd5905f24e94b4426802a15a4021\",{\"1\":{\"1641\":1}}],[\"49\",{\"1\":{\"1582\":1}}],[\"46\",{\"1\":{\"1564\":1,\"1565\":1}}],[\"45c8d78ce9854edc93c9ccba15a3d097\",{\"1\":{\"1607\":1}}],[\"45\",{\"1\":{\"1484\":1,\"1550\":1}}],[\"43b59399d55346dca94a80e9e77838f6\",{\"1\":{\"1525\":1,\"1550\":1,\"1564\":1,\"1582\":8,\"1592\":10,\"1628\":2,\"1635\":1}}],[\"435363\",{\"1\":{\"1484\":1}}],[\"43436457\",{\"1\":{\"1373\":1}}],[\"43\",{\"1\":{\"1311\":2}}],[\"479968903020281856\",{\"1\":{\"1248\":1}}],[\"4d5d\",{\"1\":{\"1198\":1}}],[\"48\",{\"1\":{\"1136\":1,\"1582\":2}}],[\"41<\",{\"1\":{\"982\":1}}],[\"4种\",{\"1\":{\"730\":1}}],[\"441d\",{\"1\":{\"1514\":1,\"1564\":1,\"1565\":2,\"1572\":1,\"1574\":1}}],[\"44触发\",{\"1\":{\"656\":1}}],[\"44\",{\"1\":{\"656\":1}}],[\"443\",{\"1\":{\"32\":1,\"1127\":4,\"1210\":1,\"1211\":2}}],[\"42\",{\"1\":{\"643\":1}}],[\"4<\",{\"1\":{\"621\":1}}],[\"40x\",{\"1\":{\"1211\":1}}],[\"4096\",{\"1\":{\"801\":1,\"802\":1,\"1210\":1}}],[\"40\",{\"1\":{\"767\":1,\"1475\":3}}],[\"404\",{\"1\":{\"360\":1,\"1211\":2,\"1653\":1}}],[\"400\",{\"1\":{\"360\":2,\"480\":1}}],[\"4\",{\"0\":{\"1534\":1,\"1542\":1,\"1551\":1,\"1562\":1,\"1573\":1,\"1582\":1,\"1593\":1,\"1604\":1,\"1614\":1,\"1623\":1,\"1629\":1,\"1636\":1},\"1\":{\"31\":2,\"49\":1,\"138\":1,\"140\":6,\"152\":1,\"160\":1,\"241\":1,\"243\":1,\"277\":4,\"279\":1,\"282\":1,\"284\":1,\"304\":1,\"305\":1,\"317\":2,\"318\":2,\"377\":1,\"585\":1,\"649\":1,\"707\":1,\"759\":1,\"799\":1,\"804\":1,\"934\":2,\"983\":2,\"1002\":1,\"1134\":1,\"1138\":1,\"1202\":1,\"1221\":1,\"1259\":1,\"1278\":1,\"1317\":1,\"1319\":2,\"1331\":1,\"1450\":1,\"1451\":1,\"1452\":1,\"1484\":1,\"1582\":2}}],[\"63\",{\"1\":{\"1647\":1,\"1648\":1,\"1649\":3,\"1650\":1,\"1651\":1}}],[\"6379\",{\"1\":{\"1135\":2,\"1139\":2}}],[\"671\",{\"1\":{\"1628\":1}}],[\"6ddf18b38a46401bb304fbaae1549c66\",{\"1\":{\"1582\":1}}],[\"61cbc5c662dd4d6cbbd2eec8de49376a\",{\"1\":{\"1582\":1}}],[\"61\",{\"1\":{\"1475\":3}}],[\"69\",{\"1\":{\"1248\":1}}],[\"62\",{\"1\":{\"1210\":1}}],[\"6596\",{\"1\":{\"1445\":1}}],[\"65\",{\"1\":{\"1210\":1}}],[\"65535\",{\"1\":{\"15\":1}}],[\"6l\",{\"1\":{\"656\":3}}],[\"64\",{\"1\":{\"643\":1,\"852\":1,\"1466\":1}}],[\"6495700\",{\"1\":{\"151\":1}}],[\"6495407\",{\"1\":{\"148\":2,\"151\":1}}],[\"60s\",{\"1\":{\"1210\":4,\"1211\":2}}],[\"60000\",{\"1\":{\"1026\":2,\"1515\":3}}],[\"6000\",{\"1\":{\"801\":1,\"802\":1}}],[\"60天\",{\"1\":{\"596\":2}}],[\"60\",{\"1\":{\"236\":1,\"596\":1,\"649\":2,\"652\":4}}],[\"6g\",{\"1\":{\"186\":1}}],[\"6版本\",{\"1\":{\"56\":1}}],[\"6\",{\"0\":{\"1544\":1,\"1553\":1,\"1564\":1,\"1575\":1,\"1584\":1,\"1595\":1,\"1606\":1,\"1616\":1},\"1\":{\"31\":3,\"59\":1,\"133\":1,\"160\":1,\"282\":1,\"635\":1,\"656\":2,\"1032\":1,\"1130\":1,\"1137\":1,\"1215\":2,\"1221\":1,\"1248\":1,\"1249\":1,\"1256\":1,\"1278\":1,\"1331\":1,\"1452\":1,\"1458\":1}}],[\"<body>\",{\"1\":{\"1407\":1}}],[\"<bean\",{\"1\":{\"479\":7,\"480\":1}}],[\"<beans>\",{\"1\":{\"479\":1}}],[\"<beans\",{\"1\":{\"479\":1}}],[\"<和>\",{\"1\":{\"1222\":1}}],[\"<name>nexus\",{\"1\":{\"1202\":2}}],[\"<name>成长轨迹仓库<\",{\"1\":{\"1202\":1}}],[\"<name>env<\",{\"1\":{\"1079\":1}}],[\"<name>windows\",{\"1\":{\"1079\":1}}],[\"<family>windows<\",{\"1\":{\"1079\":1}}],[\"<filter>\",{\"1\":{\"652\":1}}],[\"<filter\",{\"1\":{\"596\":3,\"652\":4}}],[\"<filename>\",{\"1\":{\"1159\":2}}],[\"<filenamepattern>$\",{\"1\":{\"596\":3}}],[\"<file>可以把暂存区的修改撤销掉\",{\"1\":{\"1151\":1}}],[\"<file>\",{\"1\":{\"1079\":1,\"1147\":1}}],[\"<file>$\",{\"1\":{\"596\":3}}],[\"<jdk>\",{\"1\":{\"1079\":1}}],[\"<jdk>1\",{\"1\":{\"1079\":1,\"1202\":1}}],[\"<title>首页<\",{\"1\":{\"1407\":1}}],[\"<td\",{\"1\":{\"982\":3}}],[\"<tr\",{\"1\":{\"982\":2}}],[\"<tr>\",{\"1\":{\"982\":2}}],[\"<tbody>\",{\"1\":{\"982\":2}}],[\"<th>用户年龄<\",{\"1\":{\"982\":1}}],[\"<th>用户名称<\",{\"1\":{\"982\":2}}],[\"<thead>\",{\"1\":{\"982\":2}}],[\"<table>\",{\"1\":{\"982\":2}}],[\"<t>\",{\"1\":{\"249\":2,\"413\":1,\"780\":2,\"1247\":1}}],[\"<welcome\",{\"1\":{\"971\":2}}],[\"<web\",{\"1\":{\"652\":1}}],[\"<html\",{\"1\":{\"981\":1,\"1407\":1}}],[\"<h3>id\",{\"1\":{\"975\":1}}],[\"<h2>accounts<\",{\"1\":{\"975\":1}}],[\"<h2>it\",{\"1\":{\"970\":1}}],[\"<home\",{\"1\":{\"974\":1}}],[\"<hr\",{\"1\":{\"974\":1}}],[\"<h1\",{\"1\":{\"969\":1}}],[\"<h1>hello\",{\"1\":{\"970\":2,\"971\":3}}],[\"<h1>\",{\"1\":{\"652\":1}}],[\"<head>\",{\"1\":{\"934\":2,\"1407\":1}}],[\"<=\",{\"1\":{\"804\":1}}],[\"<snapshotrepository>\",{\"1\":{\"1203\":1}}],[\"<snapshots>\",{\"1\":{\"49\":2,\"621\":1,\"1202\":2}}],[\"<source\",{\"1\":{\"1111\":2}}],[\"<server>\",{\"1\":{\"1202\":2}}],[\"<servers>\",{\"1\":{\"1202\":1}}],[\"<service\",{\"1\":{\"1159\":2}}],[\"<servlet\",{\"1\":{\"652\":4}}],[\"<servlet>\",{\"1\":{\"652\":1}}],[\"<select\",{\"1\":{\"1059\":2}}],[\"<string>getparameter\",{\"1\":{\"1345\":1}}],[\"<string\",{\"1\":{\"1013\":1}}],[\"<switch>\",{\"1\":{\"974\":3,\"975\":1}}],[\"<script>\",{\"1\":{\"1407\":1}}],[\"<script\",{\"1\":{\"934\":3,\"943\":3,\"983\":2,\"1407\":1}}],[\"<queuesize>512<\",{\"1\":{\"596\":2}}],[\"<dashboard\",{\"1\":{\"974\":1}}],[\"<distributionmanagement>\",{\"1\":{\"1203\":1}}],[\"<discardingthreshold>0<\",{\"1\":{\"596\":2}}],[\"<div\",{\"1\":{\"982\":2,\"983\":1,\"1407\":1}}],[\"<div>\",{\"1\":{\"970\":1,\"974\":1,\"975\":2,\"983\":2}}],[\"<deployment\",{\"1\":{\"1159\":3}}],[\"<dependency>\",{\"1\":{\"31\":1,\"476\":2,\"621\":1,\"639\":1,\"646\":1,\"658\":1,\"790\":8,\"799\":1,\"862\":5,\"981\":1,\"1249\":1}}],[\"<dependencies>\",{\"1\":{\"31\":1,\"646\":1}}],[\"<destination\",{\"1\":{\"1111\":2}}],[\"<description>\",{\"1\":{\"103\":1}}],[\"<deviceproductcategory>lambdaquery\",{\"1\":{\"672\":1}}],[\"<object>singletonlist\",{\"1\":{\"1246\":1}}],[\"<os>\",{\"1\":{\"1079\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"596\":2}}],[\"<onmatch>accept<\",{\"1\":{\"596\":2}}],[\"<optional>true<\",{\"1\":{\"31\":1}}],[\"<layout>default<\",{\"1\":{\"1202\":2}}],[\"<link\",{\"1\":{\"974\":3,\"975\":4}}],[\"<li>\",{\"1\":{\"974\":3,\"975\":4}}],[\"<list>\",{\"1\":{\"479\":2}}],[\"<level>error<\",{\"1\":{\"596\":1}}],[\"<level>info<\",{\"1\":{\"596\":2}}],[\"<meta\",{\"1\":{\"1407\":3}}],[\"<metadata>\",{\"1\":{\"103\":1}}],[\"<mirrorof>\",{\"1\":{\"1202\":1}}],[\"<mirror>\",{\"1\":{\"1202\":1}}],[\"<mirrors>\",{\"1\":{\"1202\":1}}],[\"<missing>target\",{\"1\":{\"1079\":1}}],[\"<maven\",{\"1\":{\"1202\":3}}],[\"<mapper>\",{\"1\":{\"1059\":1}}],[\"<maxhistory>60<\",{\"1\":{\"596\":2}}],[\"<maxhistory>1<\",{\"1\":{\"596\":1}}],[\"<img\",{\"1\":{\"982\":2}}],[\"<input\",{\"1\":{\"1407\":1}}],[\"<init\",{\"1\":{\"652\":1}}],[\"<integer>getnumber\",{\"1\":{\"430\":1}}],[\"<id>nexus<\",{\"1\":{\"1202\":2}}],[\"<id>nexus\",{\"1\":{\"1202\":1}}],[\"<id>jdk\",{\"1\":{\"1202\":1}}],[\"<id>jsqlparser\",{\"1\":{\"621\":1}}],[\"<id>snapshots<\",{\"1\":{\"1202\":1,\"1203\":1}}],[\"<id>releases<\",{\"1\":{\"1202\":2,\"1203\":1}}],[\"<id>test<\",{\"1\":{\"1078\":1}}],[\"<id>tangsong\",{\"1\":{\"103\":1}}],[\"<id>prod<\",{\"1\":{\"1078\":1,\"1079\":1}}],[\"<id>dev<\",{\"1\":{\"1078\":1}}],[\"<id>enforce\",{\"1\":{\"49\":1}}],[\"<id>maven\",{\"1\":{\"49\":2}}],[\"<value>test<\",{\"1\":{\"1079\":1}}],[\"<value>星晴<\",{\"1\":{\"479\":1}}],[\"<value>反方向的钟<\",{\"1\":{\"479\":1}}],[\"<value>龙卷风<\",{\"1\":{\"479\":1}}],[\"<value>可爱女人<\",{\"1\":{\"479\":1}}],[\"<value>黑色幽默<\",{\"1\":{\"479\":1}}],[\"<v>\",{\"1\":{\"249\":4}}],[\"<version>$\",{\"1\":{\"790\":7}}],[\"<version>2\",{\"1\":{\"646\":1,\"799\":1}}],[\"<version>4\",{\"1\":{\"621\":1}}],[\"<version>1\",{\"1\":{\"103\":1,\"1249\":1}}],[\"<version>\",{\"1\":{\"49\":1}}],[\"<version>3\",{\"1\":{\"49\":1}}],[\"<version>5\",{\"1\":{\"31\":1,\"1079\":1}}],[\"<arch>x86<\",{\"1\":{\"1079\":1}}],[\"<artifactid>mysql\",{\"1\":{\"790\":1}}],[\"<artifactid>maven\",{\"1\":{\"49\":1}}],[\"<artifactid>flink\",{\"1\":{\"790\":7}}],[\"<artifactid>javax\",{\"1\":{\"1249\":1}}],[\"<artifactid>jython\",{\"1\":{\"646\":1}}],[\"<artifactid>jsqlparser<\",{\"1\":{\"621\":1}}],[\"<artifactid>grpc\",{\"1\":{\"639\":1}}],[\"<artifactid>spring\",{\"1\":{\"31\":1,\"476\":2,\"658\":1,\"799\":1,\"862\":5,\"981\":1}}],[\"<activeprofile>jdk\",{\"1\":{\"1202\":1}}],[\"<activeprofile>nexus\",{\"1\":{\"1202\":1}}],[\"<activeprofiles>\",{\"1\":{\"1202\":1}}],[\"<activebydefault>true<\",{\"1\":{\"1078\":1,\"1079\":1,\"1202\":1}}],[\"<activation>\",{\"1\":{\"1078\":1,\"1079\":1,\"1202\":1}}],[\"<a\",{\"1\":{\"982\":2}}],[\"<about\",{\"1\":{\"974\":1}}],[\"<appender\",{\"1\":{\"596\":12}}],[\"<authors>walnut<\",{\"1\":{\"103\":1}}],[\"<pod\",{\"1\":{\"1159\":4}}],[\"<port>\",{\"1\":{\"756\":1}}],[\"<properties>\",{\"1\":{\"1078\":3,\"1079\":1,\"1202\":1}}],[\"<property>\",{\"1\":{\"1079\":1}}],[\"<property\",{\"1\":{\"479\":7,\"480\":1,\"596\":3}}],[\"<profiles\",{\"1\":{\"1078\":3,\"1079\":1}}],[\"<profiles>\",{\"1\":{\"1078\":1,\"1202\":1}}],[\"<profile>\",{\"1\":{\"1078\":3,\"1079\":1,\"1202\":2}}],[\"<p>接收\",{\"1\":{\"1407\":1}}],[\"<p>a\",{\"1\":{\"983\":1}}],[\"<p>hello\",{\"1\":{\"983\":2}}],[\"<p\",{\"1\":{\"982\":9,\"983\":2}}],[\"<password>czgj\",{\"1\":{\"1202\":2}}],[\"<param\",{\"1\":{\"652\":2}}],[\"<pattern>$\",{\"1\":{\"596\":4}}],[\"<packagetype\",{\"1\":{\"103\":1}}],[\"<packagetypes>\",{\"1\":{\"103\":1}}],[\"<package\",{\"1\":{\"103\":1}}],[\"<plugin>\",{\"1\":{\"49\":1}}],[\"<pluginrepository>\",{\"1\":{\"49\":1,\"1202\":1}}],[\"<pluginrepositories>\",{\"1\":{\"49\":1,\"1202\":1}}],[\"<route\",{\"1\":{\"974\":3,\"975\":1,\"977\":1}}],[\"<route>\",{\"1\":{\"974\":1,\"977\":1}}],[\"<router>\",{\"1\":{\"974\":1,\"975\":1}}],[\"<root\",{\"1\":{\"596\":1}}],[\"<rollingpolicy\",{\"1\":{\"596\":3}}],[\"<rules>\",{\"1\":{\"49\":1}}],[\"<result\",{\"1\":{\"1059\":1}}],[\"<resultmap\",{\"1\":{\"1059\":1}}],[\"<redirect\",{\"1\":{\"977\":1}}],[\"<reference\",{\"1\":{\"995\":2}}],[\"<ref\",{\"1\":{\"479\":2}}],[\"<requiremavenversion>\",{\"1\":{\"49\":1}}],[\"<releases>\",{\"1\":{\"49\":2,\"1202\":2}}],[\"<repository>\",{\"1\":{\"49\":1,\"621\":1,\"1202\":1,\"1203\":1}}],[\"<repositories>\",{\"1\":{\"49\":1,\"621\":1,\"1202\":1}}],[\"<command>\",{\"1\":{\"1159\":1}}],[\"<configuration\",{\"1\":{\"596\":1}}],[\"<configuration>\",{\"1\":{\"49\":1}}],[\"<constructor\",{\"1\":{\"479\":6}}],[\"<child\",{\"1\":{\"975\":1}}],[\"<charset>utf\",{\"1\":{\"596\":2}}],[\"<checksumpolicy>fail<\",{\"1\":{\"49\":2}}],[\"<githup服务器ip>\",{\"1\":{\"1130\":1}}],[\"<groupid>mysql<\",{\"1\":{\"790\":1}}],[\"<groupid>net\",{\"1\":{\"639\":1}}],[\"<groupid>com\",{\"1\":{\"621\":1,\"862\":2,\"1249\":1}}],[\"<groupid>org\",{\"1\":{\"31\":1,\"49\":1,\"476\":2,\"646\":1,\"658\":1,\"790\":7,\"799\":1,\"862\":3,\"981\":1}}],[\"<goal>enforce<\",{\"1\":{\"49\":1}}],[\"<goals>\",{\"1\":{\"49\":1}}],[\"<exists\",{\"1\":{\"1079\":1}}],[\"<execution>\",{\"1\":{\"49\":1}}],[\"<executions>\",{\"1\":{\"49\":1}}],[\"<e>\",{\"1\":{\"852\":2}}],[\"<elasticsearch\",{\"1\":{\"756\":1}}],[\"<encoder>\",{\"1\":{\"596\":4}}],[\"<enabled>true<\",{\"1\":{\"49\":4,\"621\":1,\"1202\":4}}],[\"<username>admin<\",{\"1\":{\"1202\":2}}],[\"<ul>\",{\"1\":{\"974\":1,\"975\":1}}],[\"<url>http\",{\"1\":{\"1202\":3,\"1203\":2}}],[\"<url>https\",{\"1\":{\"49\":2,\"621\":1}}],[\"<url\",{\"1\":{\"652\":2}}],[\"<updatepolicy>always<\",{\"1\":{\"49\":2}}],[\"<\",{\"1\":{\"31\":2,\"49\":16,\"103\":5,\"131\":1,\"135\":1,\"138\":1,\"140\":3,\"145\":2,\"155\":2,\"189\":1,\"190\":10,\"234\":1,\"297\":1,\"303\":1,\"386\":1,\"476\":2,\"479\":20,\"480\":1,\"596\":52,\"621\":5,\"639\":1,\"646\":2,\"647\":2,\"649\":2,\"652\":12,\"658\":1,\"780\":1,\"790\":15,\"799\":1,\"862\":5,\"911\":2,\"934\":4,\"943\":1,\"969\":1,\"970\":3,\"971\":3,\"974\":10,\"975\":10,\"981\":2,\"982\":12,\"983\":9,\"1043\":1,\"1059\":4,\"1078\":10,\"1079\":15,\"1202\":35,\"1203\":9,\"1249\":1,\"1407\":8}}],[\"注销设备时\",{\"1\":{\"1317\":1}}],[\"注\",{\"1\":{\"656\":1,\"1531\":1}}],[\"注入connectionfactory\",{\"1\":{\"1295\":1}}],[\"注入rocketmqtemplate\",{\"1\":{\"1245\":1}}],[\"注入redistemplate\",{\"1\":{\"468\":1}}],[\"注入platformtransactionmanager类型txmanager\",{\"1\":{\"1244\":1}}],[\"注入业务层\",{\"1\":{\"1244\":1}}],[\"注入了mapper接口\",{\"1\":{\"1244\":1}}],[\"注入防护\",{\"1\":{\"1207\":1}}],[\"注入全局变量\",{\"1\":{\"991\":1}}],[\"注入\",{\"1\":{\"860\":1}}],[\"注入mvcvalidator的validator\",{\"1\":{\"353\":1}}],[\"注册成功后执行pipeline\",{\"1\":{\"1450\":1}}],[\"注册socketchannel到baseioreactor的selector中\",{\"1\":{\"1382\":1}}],[\"注册servlet和filter到容器上下文standardcontext中\",{\"1\":{\"447\":1}}],[\"注册sessionrepositoryfilter到容器\",{\"1\":{\"417\":1}}],[\"注册networkprovider\",{\"1\":{\"1348\":1}}],[\"注册即reactiverepositoryfactorybean\",{\"1\":{\"1297\":1}}],[\"注册时配置默认镜像\",{\"1\":{\"1128\":1}}],[\"注册\",{\"1\":{\"1128\":1}}],[\"注册所有监听器容器\",{\"1\":{\"918\":1}}],[\"注册监听器\",{\"1\":{\"879\":1}}],[\"注册实例\",{\"1\":{\"872\":1,\"893\":1}}],[\"注册deploylisteneradapter监听器到deployer中\",{\"1\":{\"742\":1}}],[\"注册dispatcherhandler到容器中\",{\"1\":{\"504\":1}}],[\"注册configmanager到单例对象集合中\",{\"1\":{\"740\":1}}],[\"注册基础配置对象到beandefinition\",{\"1\":{\"738\":1}}],[\"注册上下文和模型对象到容器的单例对象集合中\",{\"1\":{\"738\":1}}],[\"注册httphandler接口的实现类httpwebhandleradapter到容器中\",{\"1\":{\"505\":1}}],[\"注册路由配置类到spring的ioc容器中\",{\"1\":{\"468\":1}}],[\"注册启停\",{\"1\":{\"446\":1}}],[\"注册redisindexedsessionrepository到容器中\",{\"1\":{\"417\":1}}],[\"注册environment单例bean\",{\"1\":{\"398\":1}}],[\"注册自定义编辑器\",{\"1\":{\"379\":1}}],[\"注册指定配置实例到容器\",{\"1\":{\"106\":1}}],[\"注意多层异步回调\",{\"1\":{\"1381\":1}}],[\"注意双向绑定和属性绑定的区别\",{\"1\":{\"1002\":1}}],[\"注意mutations是\",{\"1\":{\"998\":1}}],[\"注意即使此声明文件不需要导出任何东西\",{\"1\":{\"993\":1}}],[\"注意针对整体导出\",{\"1\":{\"992\":1}}],[\"注意如果消息队列中消息大于10条\",{\"1\":{\"834\":1}}],[\"注意事项\",{\"0\":{\"797\":1,\"1456\":1}}],[\"注意周日算是第一天\",{\"1\":{\"656\":1}}],[\"注意点\",{\"1\":{\"593\":1,\"1275\":1}}],[\"注意大小写\",{\"1\":{\"289\":1}}],[\"注意流的自动关闭\",{\"1\":{\"256\":1}}],[\"注意线程池的工作线程是循环执行的\",{\"1\":{\"233\":1}}],[\"注意\",{\"1\":{\"116\":1,\"190\":1,\"971\":1,\"992\":1,\"995\":1,\"1048\":1,\"1383\":1}}],[\"注释掉https\",{\"1\":{\"1129\":1}}],[\"注释\",{\"0\":{\"1218\":1},\"1\":{\"116\":1}}],[\"注解来发送消息\",{\"1\":{\"801\":1}}],[\"注解来创建filter即可\",{\"1\":{\"421\":1}}],[\"注解的位置\",{\"1\":{\"382\":1}}],[\"注解的接口中的方法必须唯一\",{\"1\":{\"247\":1}}],[\"注解\",{\"0\":{\"359\":1,\"364\":1,\"640\":1},\"1\":{\"31\":1,\"376\":1}}],[\"注在子类内部的main中只能用子类实例调用父类的protected方法和属性\",{\"1\":{\"24\":1}}],[\"中介者模式\",{\"1\":{\"1254\":1}}],[\"中括号旁边和运算符两边必须添加空格\",{\"1\":{\"1222\":3}}],[\"中央库\",{\"1\":{\"1201\":1}}],[\"中加一句的\",{\"1\":{\"1141\":1}}],[\"中添加\",{\"1\":{\"996\":1}}],[\"中通过\",{\"1\":{\"989\":1}}],[\"中定义了多个\",{\"1\":{\"658\":1}}],[\"中进行传递\",{\"1\":{\"658\":1}}],[\"中文转码\",{\"1\":{\"652\":1}}],[\"中间证书\",{\"1\":{\"626\":1}}],[\"中间证书和用户证书分开存放\",{\"1\":{\"625\":1}}],[\"中间件使用goroutine\",{\"0\":{\"179\":1}}],[\"中间件\",{\"0\":{\"1664\":1},\"1\":{\"176\":1}}],[\"中去\",{\"1\":{\"354\":1}}],[\"中注入作为成员变量的\",{\"1\":{\"354\":1}}],[\"中注入\",{\"0\":{\"354\":1}}],[\"中对应的值\",{\"1\":{\"312\":1}}],[\"中值的借用\",{\"1\":{\"311\":1}}],[\"中国队\",{\"1\":{\"309\":1}}],[\"中读取元素\",{\"0\":{\"304\":1}}],[\"中的第一个容器\",{\"1\":{\"1170\":1}}],[\"中的所有容器\",{\"0\":{\"1166\":1}}],[\"中的记录修改日志\",{\"1\":{\"1050\":1}}],[\"中的语法类似\",{\"1\":{\"992\":1}}],[\"中的负载平均值通常是指节点的负载平均1分钟值\",{\"1\":{\"756\":1}}],[\"中的\",{\"1\":{\"298\":1}}],[\"中有一个约定俗成的规则\",{\"1\":{\"291\":1}}],[\"中有关反射相关的功能自从\",{\"1\":{\"11\":1}}],[\"中且没有\",{\"1\":{\"291\":1}}],[\"中少数几个拥有这种行为的地方\",{\"1\":{\"290\":1}}],[\"中\",{\"1\":{\"286\":1,\"291\":1,\"298\":1,\"308\":1,\"310\":1,\"989\":2,\"992\":1,\"1065\":1,\"1161\":1,\"1167\":1,\"1170\":1}}],[\"中变量是否有值的问题\",{\"1\":{\"286\":1}}],[\"中自动获取\",{\"1\":{\"271\":1}}],[\"中启动新的\",{\"1\":{\"179\":1}}],[\"中使用内联操作\",{\"1\":{\"983\":1}}],[\"中使用version\",{\"1\":{\"730\":1}}],[\"中使用的副本\",{\"1\":{\"179\":1}}],[\"中使用\",{\"1\":{\"160\":1,\"1201\":1}}],[\"中恢复\",{\"0\":{\"160\":1}}],[\"中从下标\",{\"1\":{\"152\":1}}],[\"中每新增一行常量声明将使\",{\"1\":{\"129\":1}}],[\"中新增了一个模块\",{\"1\":{\"31\":1}}],[\"xff\",{\"1\":{\"1425\":1}}],[\"xfs\",{\"1\":{\"1197\":1}}],[\"x00\",{\"1\":{\"1425\":1}}],[\"xp<\",{\"1\":{\"1079\":1}}],[\"x的apk类似\",{\"1\":{\"1074\":1}}],[\"x的provided类似\",{\"1\":{\"1074\":1}}],[\"x的testcompile类似\",{\"1\":{\"1074\":1}}],[\"x的compile类似\",{\"1\":{\"1074\":2}}],[\"x86\",{\"1\":{\"643\":1}}],[\"x++\",{\"1\":{\"386\":1}}],[\"x+y\",{\"1\":{\"190\":1}}],[\"xsi\",{\"1\":{\"479\":1}}],[\"xsi=\",{\"1\":{\"479\":1}}],[\"xssfilter跨站脚本攻击过滤器\",{\"1\":{\"468\":1}}],[\"xss\",{\"1\":{\"214\":1,\"1207\":1}}],[\"xsd\",{\"1\":{\"103\":1,\"479\":1}}],[\"xmn256m\",{\"1\":{\"1136\":1}}],[\"xmn1200m\",{\"1\":{\"214\":1}}],[\"xmx512m\",{\"1\":{\"1136\":1,\"1139\":1}}],[\"xmx1g\",{\"1\":{\"214\":1,\"1137\":1}}],[\"xms512m\",{\"1\":{\"1136\":1,\"1139\":1}}],[\"xms1g\",{\"1\":{\"214\":1,\"1137\":1}}],[\"xml文件中的id\",{\"1\":{\"1203\":2}}],[\"xmlmapperbuilder\",{\"1\":{\"852\":4,\"860\":1}}],[\"xmls\",{\"1\":{\"852\":1}}],[\"xmlschema\",{\"1\":{\"479\":1}}],[\"xmlconfigbuilder\",{\"1\":{\"852\":7}}],[\"xml解析模块\",{\"1\":{\"481\":1}}],[\"xmlns\",{\"1\":{\"479\":1,\"981\":1,\"1407\":1}}],[\"xmlns=\",{\"1\":{\"103\":1,\"479\":1}}],[\"xml等绑定\",{\"1\":{\"181\":1}}],[\"xml\",{\"0\":{\"1043\":1,\"1202\":1},\"1\":{\"103\":2,\"181\":2,\"441\":1,\"479\":1,\"596\":2,\"652\":3,\"852\":2,\"995\":1,\"1201\":2,\"1515\":1}}],[\"xml置灰\",{\"0\":{\"44\":1}}],[\"xargs\",{\"1\":{\"1087\":1}}],[\"xa\",{\"1\":{\"212\":1}}],[\"xx\",{\"1\":{\"214\":5,\"1137\":8}}],[\"xxl\",{\"0\":{\"1651\":1},\"1\":{\"77\":1,\"655\":1,\"1651\":1}}],[\"xxxx\",{\"1\":{\"760\":1}}],[\"xxx\",{\"0\":{\"3\":1},\"1\":{\"20\":1,\"1066\":2,\"1078\":1,\"1136\":3,\"1137\":1}}],[\"xhr\",{\"0\":{\"46\":1}}],[\"x\",{\"0\":{\"1074\":1},\"1\":{\"31\":1,\"124\":2,\"133\":3,\"139\":2,\"141\":1,\"143\":2,\"152\":8,\"190\":3,\"275\":2,\"282\":4,\"284\":2,\"285\":2,\"292\":1,\"295\":7,\"298\":12,\"315\":2,\"317\":4,\"318\":4,\"386\":4,\"625\":1,\"627\":1,\"749\":1,\"1048\":1,\"1137\":1,\"1210\":16,\"1211\":3,\"1227\":2,\"1248\":2,\"1407\":1,\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"55\",{\"1\":{\"1564\":1,\"1565\":1}}],[\"55期间和下午6点到6\",{\"1\":{\"656\":1}}],[\"55期间的每5分钟触发\",{\"1\":{\"656\":2}}],[\"59\",{\"1\":{\"1541\":4,\"1628\":1}}],[\"59期间的每1分钟触发\",{\"1\":{\"656\":1}}],[\"5分钟有效\",{\"1\":{\"1531\":1}}],[\"54\",{\"1\":{\"1582\":3}}],[\"542f9f57db9d\",{\"1\":{\"1514\":1,\"1564\":1,\"1565\":2,\"1572\":1,\"1574\":1}}],[\"5436576587\",{\"1\":{\"1215\":1}}],[\"5432\",{\"1\":{\"1139\":2}}],[\"58\",{\"1\":{\"1248\":1,\"1564\":1,\"1582\":1,\"1592\":2,\"1628\":1}}],[\"56\",{\"1\":{\"1592\":10,\"1635\":2}}],[\"56f3\",{\"1\":{\"1514\":1,\"1564\":1,\"1565\":2,\"1572\":1,\"1574\":1}}],[\"5601\",{\"1\":{\"1139\":2}}],[\"5672\",{\"1\":{\"91\":1,\"1026\":1,\"1125\":2}}],[\"5或以上时\",{\"1\":{\"1079\":1}}],[\"5<\",{\"1\":{\"1079\":1}}],[\"5时\",{\"1\":{\"1079\":1}}],[\"5倍保活时间内未收到客户端任何报文则断开连接\",{\"1\":{\"845\":1}}],[\"57\",{\"1\":{\"801\":1,\"1541\":1,\"1582\":1,\"1592\":1,\"1613\":1}}],[\"5m\",{\"1\":{\"780\":1,\"1210\":1}}],[\"5level\",{\"1\":{\"596\":2}}],[\"50x\",{\"1\":{\"1210\":2,\"1211\":2}}],[\"504\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"503\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"502\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"509中定义的pem和der\",{\"1\":{\"625\":1}}],[\"509\",{\"1\":{\"625\":1,\"627\":1}}],[\"500\",{\"1\":{\"360\":1,\"1210\":1,\"1211\":1}}],[\"50000\",{\"1\":{\"1130\":12}}],[\"500000\",{\"1\":{\"779\":1,\"1210\":1}}],[\"5000\",{\"1\":{\"234\":2,\"1025\":1}}],[\"50\",{\"1\":{\"140\":6,\"274\":1,\"288\":1,\"290\":1,\"309\":1,\"311\":1,\"312\":1,\"656\":1,\"1210\":1,\"1244\":1,\"1465\":1,\"1550\":1,\"1582\":3,\"1613\":1}}],[\"5242880003\",{\"1\":{\"52\":1}}],[\"52\",{\"1\":{\"39\":3,\"1026\":4,\"1120\":1,\"1121\":2,\"1514\":1,\"1592\":1,\"1628\":2}}],[\"510af772b398499d84e910b82ef000dc\",{\"1\":{\"1550\":1}}],[\"5125\",{\"1\":{\"1445\":1}}],[\"5119\",{\"1\":{\"1197\":1}}],[\"51\",{\"1\":{\"34\":1,\"595\":1,\"1139\":1,\"1210\":3,\"1506\":1,\"1513\":3,\"1514\":4,\"1515\":3,\"1550\":1,\"1564\":1,\"1572\":1,\"1574\":2,\"1641\":1}}],[\"5\",{\"0\":{\"1535\":1,\"1543\":1,\"1552\":1,\"1563\":1,\"1574\":1,\"1583\":1,\"1594\":1,\"1605\":1,\"1615\":1,\"1624\":1,\"1630\":1,\"1631\":1,\"1637\":1},\"1\":{\"31\":3,\"49\":1,\"56\":1,\"133\":1,\"138\":1,\"140\":8,\"156\":1,\"179\":2,\"189\":1,\"234\":1,\"243\":1,\"275\":1,\"277\":5,\"282\":2,\"295\":1,\"304\":1,\"305\":1,\"312\":3,\"326\":1,\"585\":1,\"647\":2,\"656\":5,\"658\":2,\"707\":1,\"804\":1,\"851\":6,\"965\":1,\"983\":2,\"1002\":1,\"1079\":1,\"1129\":1,\"1140\":3,\"1187\":1,\"1202\":1,\"1221\":1,\"1278\":1,\"1283\":1,\"1319\":1,\"1331\":1,\"1450\":1,\"1452\":1,\"1635\":1}}],[\"版本号\",{\"1\":{\"1465\":1}}],[\"版本更新\",{\"1\":{\"1167\":1}}],[\"版本管理\",{\"1\":{\"1075\":1}}],[\"版本冲突\",{\"0\":{\"1068\":1,\"1076\":1}}],[\"版本\",{\"1\":{\"31\":1}}],[\"wf0sewqzwgbhmqnwirbdkvplkut5tmeqd2b7jsonacr0oupwmhk0dkwyebptdyzv\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"wq\",{\"1\":{\"1187\":1}}],[\"wq退出执行以下命令\",{\"1\":{\"32\":1}}],[\"w9cgx3yb\",{\"1\":{\"1096\":1}}],[\"wms样例\",{\"0\":{\"1123\":1}}],[\"wms\",{\"0\":{\"1452\":1},\"1\":{\"852\":1,\"911\":1,\"1059\":4,\"1123\":4,\"1243\":4}}],[\"wmsconstant\",{\"1\":{\"236\":13}}],[\"w3\",{\"1\":{\"479\":1}}],[\"ws客户端连接\",{\"1\":{\"1488\":1}}],[\"wss\",{\"1\":{\"1425\":1}}],[\"wssession\",{\"1\":{\"1421\":6}}],[\"wsservercontainer\",{\"0\":{\"1413\":1}}],[\"wsfilter\",{\"0\":{\"1422\":1}}],[\"wsframeserver\",{\"1\":{\"1421\":1}}],[\"wsframe\",{\"1\":{\"1421\":3}}],[\"wsremoteendpointimplserver\",{\"1\":{\"1421\":1}}],[\"wsremoteendpointserver\",{\"1\":{\"1421\":3}}],[\"wshttpupgradehandler\",{\"0\":{\"1420\":1}}],[\"wsdl2java\",{\"1\":{\"1079\":1}}],[\"ws\",{\"1\":{\"441\":1,\"1210\":1,\"1211\":1,\"1407\":10,\"1425\":1}}],[\"wt\",{\"1\":{\"422\":1}}],[\"wrapnamespace\",{\"1\":{\"914\":1}}],[\"wrap\",{\"1\":{\"853\":1}}],[\"wrapexception\",{\"1\":{\"852\":1}}],[\"wrapperfactory\",{\"1\":{\"1296\":1}}],[\"wrapper\",{\"1\":{\"678\":1,\"786\":3,\"977\":1,\"1073\":1,\"1419\":1}}],[\"wrappers\",{\"1\":{\"672\":1}}],[\"wrapifnecessary\",{\"1\":{\"383\":1,\"432\":1,\"433\":1,\"434\":1}}],[\"wrapifnecessary是aop代理对象创建的入口\",{\"1\":{\"383\":1}}],[\"wrong\",{\"1\":{\"399\":1}}],[\"write事件的channel添加用户自定义的channelhandler\",{\"1\":{\"1447\":1}}],[\"writeobject\",{\"1\":{\"1257\":1}}],[\"writeiottopic\",{\"1\":{\"649\":1}}],[\"writer\",{\"1\":{\"924\":1}}],[\"writerds\",{\"1\":{\"649\":1}}],[\"writereplacemethodresult\",{\"1\":{\"252\":3}}],[\"writereplace\",{\"1\":{\"252\":1}}],[\"writetfdb\",{\"1\":{\"649\":1}}],[\"write\",{\"1\":{\"241\":1,\"275\":1,\"292\":2,\"1445\":6,\"1484\":2,\"1531\":2,\"1532\":4,\"1570\":1}}],[\"whtest\",{\"1\":{\"1541\":3}}],[\"when\",{\"1\":{\"1311\":5,\"1451\":1}}],[\"where\",{\"1\":{\"297\":1,\"316\":1,\"318\":2,\"716\":1,\"749\":1,\"899\":1,\"1243\":2,\"1292\":1}}],[\"where约束\",{\"1\":{\"297\":1}}],[\"wherywan\",{\"1\":{\"32\":1}}],[\"whj123456\",{\"1\":{\"1127\":1}}],[\"whose\",{\"1\":{\"974\":1}}],[\"whole\",{\"1\":{\"647\":1}}],[\"wh344566\",{\"1\":{\"635\":1}}],[\"whatever\",{\"1\":{\"410\":1}}],[\"whites\",{\"1\":{\"1513\":1}}],[\"whitespace\",{\"1\":{\"312\":1}}],[\"whitelistauthorizationfilter\",{\"1\":{\"422\":1,\"467\":3}}],[\"which\",{\"1\":{\"411\":1,\"438\":1,\"1445\":3}}],[\"while\",{\"1\":{\"287\":2,\"399\":1,\"438\":1,\"471\":1,\"535\":1,\"556\":1,\"602\":1,\"780\":2,\"1013\":1,\"1032\":2,\"1226\":1,\"1451\":1,\"1515\":1}}],[\"weight\",{\"1\":{\"1582\":4}}],[\"weibo\",{\"1\":{\"297\":2}}],[\"wenzhou\",{\"1\":{\"1474\":1,\"1475\":3}}],[\"week\",{\"1\":{\"1311\":1}}],[\"wechat\",{\"0\":{\"1004\":1}}],[\"welcome\",{\"1\":{\"971\":3}}],[\"well\",{\"1\":{\"329\":1,\"1259\":1}}],[\"wed\",{\"1\":{\"656\":2}}],[\"weaver\",{\"1\":{\"397\":1}}],[\"weaving\",{\"1\":{\"397\":1}}],[\"we\",{\"1\":{\"345\":1,\"383\":1,\"397\":1,\"399\":5,\"434\":1,\"975\":1,\"1259\":1,\"1445\":13}}],[\"west\",{\"1\":{\"282\":4}}],[\"webutils\",{\"1\":{\"1525\":3}}],[\"webconnection\",{\"1\":{\"1419\":2}}],[\"webconfig\",{\"1\":{\"594\":1}}],[\"web客户端样例\",{\"0\":{\"1407\":1}}],[\"websockethttprequesthandler\",{\"0\":{\"1423\":1}}],[\"websocketcontainer\",{\"1\":{\"1421\":3}}],[\"websocket连接已断开\",{\"1\":{\"1407\":1}}],[\"websocket连接已建立\",{\"1\":{\"1407\":1}}],[\"websocket\",{\"0\":{\"1406\":1,\"1425\":1},\"1\":{\"1407\":6,\"1408\":1,\"1412\":1,\"1425\":7}}],[\"webservermanager\",{\"1\":{\"473\":1}}],[\"webserverexception\",{\"1\":{\"456\":2}}],[\"webserverfactorycustomizerbeanpostprocessor处理\",{\"1\":{\"451\":1}}],[\"webserverstartstop\",{\"1\":{\"446\":1}}],[\"webserverstartstoplifecycle\",{\"1\":{\"400\":1,\"446\":1}}],[\"webservergracefulshutdownlifecycle\",{\"1\":{\"446\":1}}],[\"webservergracefulshutdown\",{\"1\":{\"446\":1}}],[\"webserver\",{\"1\":{\"446\":8,\"450\":1}}],[\"webservicecontext\",{\"1\":{\"441\":1}}],[\"websecurity>\",{\"1\":{\"329\":2}}],[\"websecurity>>\",{\"1\":{\"329\":1}}],[\"websecurityconfigurer\",{\"1\":{\"329\":2}}],[\"websecurityconfigureradapter实现websecurityconfigurer对websecurity进行配置\",{\"1\":{\"343\":1}}],[\"websecurityconfigureradapter\",{\"1\":{\"329\":3,\"330\":3,\"341\":1}}],[\"websecurityconfigurers\",{\"1\":{\"329\":9}}],[\"websecurityconfiguration\",{\"0\":{\"329\":1},\"1\":{\"329\":1}}],[\"websecuritycustomizers\",{\"1\":{\"329\":1}}],[\"websecuritycustomizer\",{\"1\":{\"326\":2,\"329\":1}}],[\"websecurityfilterchain\",{\"1\":{\"326\":1}}],[\"websecurity\",{\"0\":{\"332\":1},\"1\":{\"326\":1,\"329\":9,\"333\":1}}],[\"webpack\",{\"0\":{\"962\":1}}],[\"webmvc\",{\"1\":{\"851\":2}}],[\"webmvcconfigurer\",{\"1\":{\"594\":1}}],[\"web服务器\",{\"0\":{\"673\":1},\"1\":{\"674\":1}}],[\"web处理器\",{\"1\":{\"505\":1,\"513\":1}}],[\"webhook\",{\"1\":{\"783\":1}}],[\"webhandler\",{\"0\":{\"501\":1},\"1\":{\"513\":1}}],[\"webhander装饰器\",{\"1\":{\"473\":1}}],[\"webhttphandlerbuilder\",{\"1\":{\"505\":1}}],[\"webhttphandlerbuilder的build构建httpwebhandleradapter\",{\"1\":{\"473\":1}}],[\"webhttphandlerbuilder构造httpwebhandleradapter\",{\"1\":{\"473\":1}}],[\"webfilterchain\",{\"1\":{\"422\":1,\"557\":1,\"1345\":1}}],[\"webfilter\",{\"1\":{\"421\":2,\"422\":1,\"557\":1,\"1345\":1}}],[\"webfluxlocalefilter\",{\"1\":{\"557\":1}}],[\"webflux执行流程\",{\"0\":{\"526\":1}}],[\"webfluxproperties\",{\"1\":{\"505\":1}}],[\"webfluxconfigurationsupport\",{\"1\":{\"504\":1}}],[\"webfluxautoconfiguration\",{\"0\":{\"504\":1}}],[\"webflux基于reactor的响应式web框架\",{\"1\":{\"500\":1}}],[\"webflux\",{\"0\":{\"84\":1,\"500\":1}}],[\"webdatabinder\",{\"1\":{\"379\":1}}],[\"webdatabinderfactory\",{\"1\":{\"345\":1}}],[\"webrequest\",{\"1\":{\"345\":3,\"403\":1,\"406\":1}}],[\"webasyncmanager\",{\"1\":{\"406\":1,\"1259\":1}}],[\"webasyncmanagerintegrationfilter\",{\"1\":{\"330\":1}}],[\"webasyncutils\",{\"1\":{\"406\":1,\"1259\":1}}],[\"webasyncutils的webasyncmanager\",{\"0\":{\"362\":1}}],[\"webapp\",{\"1\":{\"585\":1,\"707\":1}}],[\"webapplicationcontextutils\",{\"1\":{\"411\":1,\"447\":1}}],[\"webapplicationcontext\",{\"0\":{\"601\":1},\"1\":{\"411\":6,\"601\":1}}],[\"webapplicationbuilder构建应用\",{\"1\":{\"104\":1}}],[\"webapi\",{\"1\":{\"103\":2}}],[\"web构建web环境\",{\"1\":{\"211\":1}}],[\"web\",{\"0\":{\"165\":1,\"1663\":1},\"1\":{\"103\":1,\"326\":3,\"445\":1,\"585\":1,\"594\":1,\"601\":2,\"652\":4,\"707\":1,\"851\":1,\"1262\":1,\"1425\":3,\"1514\":1,\"1515\":1},\"2\":{\"571\":1,\"590\":1,\"597\":1,\"603\":1,\"605\":1,\"619\":1,\"628\":1,\"630\":1,\"633\":1,\"636\":1,\"653\":1,\"659\":1,\"699\":1,\"712\":1,\"721\":1,\"727\":1}}],[\"web框架\",{\"0\":{\"67\":1}}],[\"web3\",{\"1\":{\"63\":1}}],[\"window\",{\"1\":{\"778\":1,\"779\":1,\"935\":3,\"988\":2,\"1407\":1}}],[\"windows共享网络\",{\"0\":{\"1432\":1}}],[\"windows中通过set命令设置环境变量\",{\"1\":{\"1188\":1}}],[\"windows中hyper\",{\"0\":{\"53\":1}}],[\"windows下pem或der存储格式的证书格式\",{\"1\":{\"627\":1}}],[\"windows系统使用cer\",{\"1\":{\"625\":1}}],[\"windows\",{\"1\":{\"30\":1,\"39\":3,\"643\":1}}],[\"win64\",{\"1\":{\"642\":1,\"643\":1}}],[\"without\",{\"1\":{\"411\":1,\"1445\":1}}],[\"withclientregistration\",{\"1\":{\"345\":1}}],[\"withclientregistrationid\",{\"1\":{\"345\":1}}],[\"withauthorizedclient\",{\"1\":{\"345\":2}}],[\"withdefaults\",{\"1\":{\"330\":9}}],[\"with\",{\"1\":{\"302\":1,\"345\":1,\"399\":1,\"411\":1,\"456\":1,\"852\":1,\"1058\":1,\"1137\":1,\"1141\":3,\"1445\":3}}],[\"width=device\",{\"1\":{\"1407\":1}}],[\"width\",{\"1\":{\"274\":2,\"288\":3,\"290\":6,\"291\":1,\"1407\":1}}],[\"will\",{\"1\":{\"250\":1,\"411\":1,\"535\":1,\"556\":1,\"833\":1,\"1445\":6}}],[\"w\",{\"1\":{\"139\":3,\"173\":2,\"291\":2,\"656\":3,\"1227\":2}}],[\"wo\",{\"1\":{\"1059\":1}}],[\"worst\",{\"1\":{\"1445\":1}}],[\"workaround\",{\"1\":{\"1445\":1}}],[\"workspace\",{\"1\":{\"1215\":1}}],[\"workflow\",{\"1\":{\"1130\":1}}],[\"workdir\",{\"0\":{\"1107\":1},\"1\":{\"1105\":1,\"1116\":1}}],[\"workergroup\",{\"1\":{\"1450\":1}}],[\"workerid\",{\"1\":{\"1335\":1}}],[\"worker用于创建任务\",{\"1\":{\"1335\":1}}],[\"worker进程能打开的文件描述符\",{\"1\":{\"1210\":1}}],[\"worker进程数\",{\"1\":{\"1210\":1}}],[\"workerselector\",{\"1\":{\"1335\":1}}],[\"workers缓存\",{\"1\":{\"1335\":1}}],[\"workers\",{\"1\":{\"1013\":1}}],[\"worker\",{\"0\":{\"959\":1},\"1\":{\"1013\":3,\"1210\":4,\"1335\":1}}],[\"worker线程池\",{\"1\":{\"683\":1}}],[\"workbox\",{\"0\":{\"957\":1}}],[\"work\",{\"1\":{\"438\":1}}],[\"word\",{\"1\":{\"312\":2}}],[\"world<\",{\"1\":{\"970\":1}}],[\"world\",{\"1\":{\"116\":1,\"189\":1,\"243\":1,\"267\":3,\"269\":3,\"270\":1,\"312\":2,\"652\":1,\"969\":2,\"970\":1,\"1215\":2}}],[\"wonderful\",{\"1\":{\"312\":1}}],[\"would\",{\"0\":{\"43\":1}}],[\"wakeups\",{\"1\":{\"1445\":1}}],[\"wakeup\",{\"1\":{\"1445\":2}}],[\"way\",{\"1\":{\"1304\":1}}],[\"wan\",{\"1\":{\"1115\":1,\"1116\":1}}],[\"want\",{\"1\":{\"974\":1,\"1445\":1}}],[\"wanhongji\",{\"1\":{\"657\":1,\"1093\":1,\"1097\":2,\"1127\":1,\"1130\":5,\"1132\":1,\"1133\":3,\"1215\":6,\"1256\":1}}],[\"wall\",{\"1\":{\"1515\":1}}],[\"walk\",{\"1\":{\"932\":3}}],[\"walnut\",{\"1\":{\"103\":1}}],[\"watermarkstrategy\",{\"1\":{\"792\":2}}],[\"wac\",{\"1\":{\"411\":11}}],[\"warehouse\",{\"1\":{\"1243\":2,\"1249\":1}}],[\"warehouseid\",{\"1\":{\"236\":1,\"1248\":1}}],[\"warehouseid或customerid信息\",{\"1\":{\"224\":1}}],[\"warning\",{\"1\":{\"399\":1}}],[\"warn\",{\"1\":{\"397\":1,\"596\":3,\"900\":1,\"914\":1,\"1353\":1,\"1445\":2}}],[\"waittimemillsinsendqueue=30000\",{\"1\":{\"1136\":1}}],[\"waiting\",{\"1\":{\"232\":2}}],[\"wait\",{\"1\":{\"113\":1,\"236\":1,\"237\":1,\"647\":1,\"1445\":2,\"1515\":1}}],[\"was\",{\"0\":{\"52\":1},\"1\":{\"329\":1,\"411\":3,\"833\":1,\"852\":1,\"900\":1,\"1445\":1}}],[\"www\",{\"1\":{\"86\":1,\"148\":3,\"151\":2,\"479\":4,\"652\":1,\"981\":1,\"1407\":1,\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1541\":1}}],[\"wc\",{\"1\":{\"5\":1,\"17\":1}}],[\"去加载对应的application\",{\"1\":{\"1078\":1}}],[\"去掉后面的\",{\"1\":{\"1032\":1}}],[\"去除响应式\",{\"1\":{\"1478\":1}}],[\"去除连接事件\",{\"1\":{\"1398\":1}}],[\"去除前缀\",{\"1\":{\"649\":1}}],[\"去除热启动devtools依赖包\",{\"1\":{\"28\":1}}],[\"去你的第三个元素\",{\"1\":{\"304\":1}}],[\"去启动项目\",{\"1\":{\"164\":1}}],[\"去初始化或配置数据或启动项目\",{\"1\":{\"164\":1}}],[\"去调用protected方法和属性\",{\"1\":{\"24\":1}}],[\"2fa8840945b56abc8ba90054788f5ea0\",{\"1\":{\"1635\":1}}],[\"28\",{\"1\":{\"1550\":1,\"1564\":1,\"1592\":12}}],[\"28952\",{\"1\":{\"1206\":1}}],[\"26t16\",{\"1\":{\"1532\":2}}],[\"26t06\",{\"1\":{\"1532\":4}}],[\"26\",{\"1\":{\"1532\":4,\"1541\":1,\"1613\":1}}],[\"2600<\",{\"1\":{\"1079\":1}}],[\"2h\",{\"1\":{\"1514\":1}}],[\"2<\",{\"1\":{\"1249\":1}}],[\"29\",{\"1\":{\"1118\":1,\"1130\":1,\"1564\":1}}],[\"2表示认证顺序\",{\"1\":{\"1025\":1}}],[\"2表示已过期\",{\"1\":{\"908\":1}}],[\"2+\",{\"1\":{\"965\":1}}],[\"23\",{\"1\":{\"1514\":2,\"1541\":2}}],[\"230277cdcd684105945aaa246707e0a3\",{\"1\":{\"776\":1}}],[\"2376\",{\"1\":{\"1130\":6}}],[\"237\",{\"1\":{\"39\":3}}],[\"2pc\",{\"1\":{\"668\":1}}],[\"24\",{\"1\":{\"643\":1,\"652\":3,\"719\":1,\"1515\":1,\"1613\":1}}],[\"2一直增加到到a\",{\"1\":{\"277\":1}}],[\"27\",{\"1\":{\"241\":1,\"1532\":16,\"1550\":1,\"1564\":1,\"1582\":1,\"1597\":5}}],[\"251\",{\"1\":{\"1635\":1}}],[\"256m\",{\"1\":{\"1127\":2}}],[\"256\",{\"1\":{\"773\":1}}],[\"2508368a0e09809582b58dbd8d59d003\",{\"1\":{\"716\":1}}],[\"255\",{\"1\":{\"275\":2,\"282\":4,\"1042\":2,\"1198\":2,\"1464\":4,\"1465\":2,\"1466\":2,\"1467\":3}}],[\"25\",{\"1\":{\"236\":1,\"241\":1,\"1130\":1,\"1180\":1,\"1514\":1,\"1613\":2,\"1628\":1}}],[\"253\",{\"1\":{\"39\":3}}],[\"209\",{\"1\":{\"833\":1}}],[\"209=connect\",{\"1\":{\"833\":1}}],[\"209715200\",{\"1\":{\"780\":1}}],[\"201\",{\"1\":{\"1635\":1}}],[\"2014\",{\"1\":{\"1187\":2}}],[\"2019\",{\"1\":{\"656\":1}}],[\"2012\",{\"1\":{\"103\":1}}],[\"2048\",{\"1\":{\"623\":2}}],[\"2030\",{\"1\":{\"1541\":1}}],[\"203\",{\"1\":{\"360\":1}}],[\"200000\",{\"1\":{\"778\":1}}],[\"2000000\",{\"1\":{\"480\":1}}],[\"2000\",{\"1\":{\"658\":1}}],[\"2009年至2019年的每月的最后一个星期五上午10\",{\"1\":{\"656\":1}}],[\"2009\",{\"1\":{\"656\":1}}],[\"2005年的每天上午10\",{\"1\":{\"656\":1}}],[\"2005\",{\"1\":{\"656\":1}}],[\"2001\",{\"1\":{\"479\":1}}],[\"200\",{\"1\":{\"145\":1,\"360\":1}}],[\"20\",{\"1\":{\"131\":2,\"135\":1,\"140\":2,\"143\":1,\"236\":1,\"312\":2,\"479\":2,\"656\":1,\"792\":1,\"982\":1,\"1140\":2,\"1141\":4,\"1187\":1,\"1223\":2,\"1515\":2,\"1541\":1,\"1564\":2,\"1565\":1,\"1592\":4,\"1597\":5,\"1613\":1}}],[\"2023\",{\"1\":{\"783\":1,\"1541\":1}}],[\"2022\",{\"1\":{\"657\":1,\"1248\":1,\"1256\":1,\"1532\":14,\"1541\":2,\"1550\":2,\"1564\":6,\"1565\":2,\"1572\":1,\"1574\":1,\"1582\":8,\"1592\":20,\"1597\":5,\"1613\":4,\"1622\":2,\"1628\":4,\"1635\":2,\"1641\":1}}],[\"20211204\",{\"1\":{\"1248\":1}}],[\"2021\",{\"1\":{\"648\":1,\"1248\":1}}],[\"2020\",{\"1\":{\"117\":1,\"241\":1,\"801\":3}}],[\"20241010方向\",{\"0\":{\"63\":1}}],[\"214master\",{\"1\":{\"1123\":1}}],[\"212\",{\"1\":{\"833\":1,\"1137\":1}}],[\"212=connect\",{\"1\":{\"833\":1}}],[\"21\",{\"1\":{\"648\":1,\"982\":1,\"1134\":1,\"1311\":2,\"1592\":1,\"1622\":2}}],[\"2181\",{\"1\":{\"93\":1,\"1126\":1}}],[\"215\",{\"1\":{\"48\":1}}],[\"223\",{\"1\":{\"1475\":3}}],[\"220\",{\"1\":{\"833\":1}}],[\"220=>\",{\"1\":{\"833\":1}}],[\"22status\",{\"1\":{\"399\":1}}],[\"22\",{\"0\":{\"32\":1},\"1\":{\"399\":1,\"852\":1,\"1127\":4,\"1592\":20,\"1622\":2}}],[\"2\",{\"0\":{\"355\":1,\"1532\":1,\"1540\":1,\"1549\":1,\"1560\":1,\"1571\":1,\"1580\":1,\"1591\":1,\"1602\":1,\"1612\":1,\"1622\":1},\"1\":{\"26\":1,\"31\":2,\"51\":1,\"122\":1,\"124\":1,\"127\":1,\"128\":1,\"129\":2,\"133\":1,\"138\":1,\"140\":8,\"151\":1,\"152\":5,\"155\":2,\"173\":1,\"186\":1,\"190\":2,\"200\":1,\"201\":1,\"206\":1,\"243\":5,\"277\":6,\"279\":1,\"280\":1,\"282\":2,\"284\":1,\"287\":1,\"295\":2,\"296\":7,\"302\":1,\"303\":1,\"304\":3,\"305\":1,\"306\":2,\"315\":1,\"318\":2,\"377\":2,\"421\":1,\"468\":1,\"471\":2,\"585\":2,\"643\":1,\"648\":2,\"707\":2,\"720\":2,\"730\":1,\"758\":1,\"782\":3,\"801\":1,\"804\":2,\"850\":1,\"851\":8,\"902\":2,\"934\":3,\"983\":2,\"1002\":1,\"1025\":2,\"1026\":1,\"1066\":2,\"1079\":1,\"1092\":1,\"1093\":1,\"1109\":1,\"1118\":1,\"1120\":1,\"1122\":1,\"1132\":1,\"1133\":3,\"1137\":1,\"1139\":1,\"1187\":1,\"1202\":1,\"1215\":8,\"1220\":3,\"1221\":1,\"1222\":3,\"1246\":3,\"1248\":1,\"1256\":1,\"1269\":1,\"1271\":1,\"1273\":1,\"1275\":2,\"1278\":1,\"1283\":1,\"1302\":1,\"1311\":1,\"1317\":1,\"1319\":2,\"1321\":1,\"1330\":1,\"1331\":1,\"1407\":1,\"1408\":1,\"1433\":1,\"1450\":1,\"1451\":2,\"1452\":1,\"1467\":1,\"1475\":1,\"1484\":1,\"1515\":1,\"1541\":1,\"1582\":2}}],[\"g8r1nz670daswqdl89aljk\",{\"1\":{\"1531\":1}}],[\"g42rt\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"guava工具包\",{\"1\":{\"1290\":1}}],[\"guest\",{\"1\":{\"1026\":1}}],[\"gpt与mbr\",{\"1\":{\"1197\":1}}],[\"gpg\",{\"1\":{\"1130\":1}}],[\"gz类型的文件\",{\"1\":{\"1115\":1}}],[\"gzip\",{\"1\":{\"801\":2,\"802\":2,\"1210\":1}}],[\"gap和record的结合\",{\"1\":{\"1048\":1}}],[\"gap\",{\"1\":{\"1048\":2}}],[\"gatewayserviceuri\",{\"1\":{\"1514\":1}}],[\"gatewayuri\",{\"1\":{\"1513\":1}}],[\"gateway网关服务\",{\"1\":{\"1511\":1}}],[\"gateway=192\",{\"1\":{\"1198\":1}}],[\"gateway<\",{\"1\":{\"862\":1}}],[\"gatewayfilterfactories\",{\"1\":{\"473\":1}}],[\"gatewayfilters\",{\"1\":{\"473\":2}}],[\"gatewayfilterchain\",{\"1\":{\"471\":2,\"1523\":1}}],[\"gateway\",{\"0\":{\"465\":1,\"1359\":1},\"1\":{\"36\":2,\"471\":1,\"473\":3,\"1123\":1,\"1210\":2,\"1305\":1,\"1501\":1,\"1506\":2,\"1513\":1,\"1520\":1}}],[\"gt\",{\"1\":{\"1043\":2,\"1222\":2,\"1223\":2}}],[\"gtvglogo\",{\"1\":{\"982\":2}}],[\"gmt\",{\"1\":{\"649\":1}}],[\"gmt+8\",{\"1\":{\"649\":2,\"1513\":1,\"1514\":1}}],[\"g1\",{\"1\":{\"243\":1}}],[\"gc执行时间不到1s\",{\"1\":{\"1155\":1}}],[\"gc执行时间不到50ms\",{\"1\":{\"1155\":1}}],[\"gc执行不频繁\",{\"1\":{\"1155\":1}}],[\"gc耗时不高\",{\"1\":{\"1155\":1}}],[\"gc频率不高\",{\"1\":{\"1155\":1}}],[\"gc是否优化\",{\"0\":{\"1155\":1}}],[\"gc分析\",{\"0\":{\"1154\":1}}],[\"gcutil\",{\"1\":{\"1153\":1}}],[\"gc情况\",{\"1\":{\"1153\":1}}],[\"gc可以帮助程序员实现自动内存管理\",{\"1\":{\"201\":1,\"243\":1}}],[\"gc即垃圾回收\",{\"1\":{\"201\":1,\"243\":1}}],[\"gc的作用\",{\"0\":{\"201\":1}}],[\"gccgo\",{\"1\":{\"186\":1}}],[\"gc\",{\"0\":{\"201\":1,\"243\":1,\"264\":1},\"1\":{\"186\":1,\"1153\":1}}],[\"g\",{\"1\":{\"121\":1,\"124\":3,\"129\":2,\"282\":3,\"397\":1,\"399\":1,\"647\":1,\"833\":1,\"1177\":2,\"1183\":2,\"1187\":1,\"1215\":1,\"1227\":2}}],[\"good\",{\"1\":{\"277\":1}}],[\"google\",{\"1\":{\"133\":1,\"139\":1,\"1425\":1}}],[\"gomaxprocs\",{\"0\":{\"186\":1},\"1\":{\"186\":4}}],[\"go111module=on\",{\"1\":{\"173\":1}}],[\"goproxy\",{\"1\":{\"173\":1}}],[\"goproxy=https\",{\"1\":{\"173\":1}}],[\"gopath\",{\"0\":{\"168\":1}}],[\"go文件的package名无须与文件夹名相同\",{\"1\":{\"170\":1}}],[\"go目录2\",{\"1\":{\"168\":1}}],[\"go目录1\",{\"1\":{\"168\":1}}],[\"go程序运行所需的文件及公共依赖\",{\"1\":{\"167\":1}}],[\"goroutine\",{\"1\":{\"174\":1,\"179\":3,\"189\":1,\"190\":1}}],[\"goroot\",{\"0\":{\"167\":1}}],[\"gorm\",{\"1\":{\"68\":1,\"165\":1}}],[\"goto\",{\"0\":{\"135\":1},\"1\":{\"132\":1,\"135\":1}}],[\"go特殊运算符\",{\"1\":{\"130\":1}}],[\"gossip\",{\"0\":{\"99\":1},\"1\":{\"97\":1}}],[\"goland\",{\"1\":{\"86\":1}}],[\"goadmin\",{\"1\":{\"83\":1}}],[\"goals>\",{\"1\":{\"49\":1}}],[\"goal>\",{\"1\":{\"49\":1}}],[\"go\",{\"0\":{\"66\":1,\"83\":1,\"114\":1,\"137\":1,\"164\":1,\"172\":1,\"174\":1,\"189\":1,\"1658\":1},\"1\":{\"67\":1,\"115\":4,\"117\":2,\"122\":1,\"131\":2,\"133\":1,\"137\":1,\"139\":1,\"140\":2,\"141\":1,\"147\":1,\"148\":5,\"151\":2,\"153\":1,\"155\":2,\"156\":1,\"157\":1,\"158\":1,\"159\":3,\"164\":2,\"172\":1,\"173\":24,\"174\":2,\"179\":1,\"189\":1,\"190\":3}}],[\"gender\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1554\":1}}],[\"gen\",{\"1\":{\"642\":2,\"643\":2}}],[\"gencert\",{\"1\":{\"623\":1}}],[\"genseckey\",{\"1\":{\"623\":1}}],[\"genkeypair\",{\"1\":{\"623\":3}}],[\"genericbeandefinition\",{\"1\":{\"900\":2}}],[\"genericservlet\",{\"0\":{\"408\":1}}],[\"generator\",{\"1\":{\"1345\":6}}],[\"generatedaccesstoken\",{\"1\":{\"1519\":1}}],[\"generatedtoken\",{\"1\":{\"1345\":1}}],[\"generated\",{\"1\":{\"647\":1,\"1079\":1}}],[\"generate\",{\"1\":{\"386\":1,\"1345\":1,\"1519\":2}}],[\"generalflag\",{\"1\":{\"1582\":4}}],[\"general\",{\"1\":{\"56\":1,\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"ge\",{\"1\":{\"578\":1,\"702\":1,\"786\":1,\"1222\":2}}],[\"get是根据属性的accessmode默认生成的服务\",{\"1\":{\"1486\":1}}],[\"getversion\",{\"1\":{\"1251\":1}}],[\"getvalue\",{\"1\":{\"1032\":1}}],[\"getvariables\",{\"1\":{\"852\":2}}],[\"getjobid\",{\"1\":{\"1013\":1}}],[\"getjdbcdriver\",{\"1\":{\"792\":1}}],[\"getget\",{\"1\":{\"1032\":1}}],[\"getgenericreturntype\",{\"1\":{\"911\":1}}],[\"getgroupid\",{\"1\":{\"801\":1}}],[\"getgoodscode\",{\"1\":{\"236\":1}}],[\"getkey\",{\"1\":{\"792\":1,\"911\":1,\"1032\":1}}],[\"getkeyasstring\",{\"1\":{\"786\":1}}],[\"getkeepalivetime\",{\"1\":{\"476\":1}}],[\"get请求\",{\"0\":{\"609\":1}}],[\"get方法\",{\"1\":{\"602\":1}}],[\"getbody\",{\"1\":{\"1245\":2}}],[\"getbyid\",{\"1\":{\"902\":1}}],[\"getbytes\",{\"1\":{\"719\":1,\"911\":5}}],[\"getbuckets\",{\"1\":{\"786\":1}}],[\"getbasepath\",{\"1\":{\"505\":2}}],[\"getblockqueuesize\",{\"1\":{\"476\":1}}],[\"getbeannamesforannotation\",{\"1\":{\"1411\":1}}],[\"getbeannamesfortype\",{\"1\":{\"399\":4}}],[\"getbeanclassname\",{\"1\":{\"900\":2}}],[\"getbeanclassloader\",{\"1\":{\"397\":1,\"494\":2}}],[\"getbeandefinition\",{\"1\":{\"900\":2}}],[\"getbeanfactory\",{\"1\":{\"446\":2,\"447\":1}}],[\"getbeanfactorypostprocessors\",{\"1\":{\"397\":1,\"399\":1}}],[\"getbeanpostprocessorcache\",{\"1\":{\"359\":1}}],[\"getbean\",{\"1\":{\"210\":1,\"331\":1,\"399\":7,\"413\":2,\"438\":3,\"1247\":2}}],[\"getheader\",{\"1\":{\"1525\":3}}],[\"getheaders\",{\"1\":{\"422\":1,\"1408\":1}}],[\"gethttpupgradehandler\",{\"1\":{\"1419\":1}}],[\"gethttpservletresponseordefault\",{\"1\":{\"345\":1}}],[\"gethttpservletrequestordefault\",{\"1\":{\"345\":1}}],[\"gethits\",{\"1\":{\"780\":8,\"786\":2,\"1248\":4}}],[\"gethandleradapter\",{\"1\":{\"1259\":2}}],[\"gethandler\",{\"1\":{\"513\":1,\"1259\":6}}],[\"gethost\",{\"1\":{\"450\":2}}],[\"geturl\",{\"1\":{\"792\":1}}],[\"geturi\",{\"1\":{\"422\":1,\"1522\":2}}],[\"getutcseconds\",{\"1\":{\"649\":1}}],[\"getutchours\",{\"1\":{\"649\":1}}],[\"getutcdate\",{\"1\":{\"649\":1}}],[\"getutcminutes\",{\"1\":{\"649\":1}}],[\"getutcmilliseconds\",{\"1\":{\"649\":1}}],[\"getutcmonth\",{\"1\":{\"649\":1}}],[\"getutcfullyear\",{\"1\":{\"649\":1}}],[\"getutcoffset\",{\"1\":{\"649\":2}}],[\"getupload\",{\"1\":{\"594\":1}}],[\"getuserprincipal\",{\"1\":{\"1421\":1}}],[\"getuser\",{\"1\":{\"792\":1,\"1345\":1}}],[\"getuserservice\",{\"1\":{\"658\":1}}],[\"getuserid\",{\"1\":{\"602\":1,\"1345\":1,\"1522\":3,\"1523\":1}}],[\"getusername\",{\"1\":{\"241\":1,\"602\":1,\"1522\":1,\"1523\":1}}],[\"getusablequantity\",{\"1\":{\"236\":4}}],[\"getelementbyid\",{\"1\":{\"970\":2,\"971\":1}}],[\"getexecutorservice\",{\"1\":{\"1013\":5}}],[\"getexecutionenvironment\",{\"1\":{\"792\":1}}],[\"getexpectedquantity\",{\"1\":{\"236\":1}}],[\"getendpointclass\",{\"1\":{\"1415\":1}}],[\"getendtime\",{\"1\":{\"786\":2}}],[\"getencoded\",{\"1\":{\"719\":1}}],[\"getenginebyname\",{\"1\":{\"647\":2,\"648\":1}}],[\"getengine\",{\"1\":{\"450\":1}}],[\"getenvironment\",{\"1\":{\"410\":1,\"852\":1}}],[\"getmsg\",{\"1\":{\"1526\":1}}],[\"getmillis\",{\"1\":{\"1249\":1}}],[\"getmysql\",{\"1\":{\"792\":5}}],[\"getmaxpoolsize\",{\"1\":{\"476\":1}}],[\"getmapping\",{\"1\":{\"377\":3}}],[\"getmetada\",{\"1\":{\"1480\":1}}],[\"getmetadata\",{\"1\":{\"491\":2}}],[\"getmethodvalue\",{\"1\":{\"1522\":1}}],[\"getmethod\",{\"1\":{\"241\":1,\"421\":1,\"471\":1,\"911\":1,\"1259\":1}}],[\"getmergedlocalbeandefinition\",{\"1\":{\"438\":1}}],[\"getmessagelistenerinner\",{\"1\":{\"914\":4}}],[\"getmessagemodel\",{\"1\":{\"914\":4}}],[\"getmessage\",{\"1\":{\"378\":1,\"801\":1,\"1518\":3}}],[\"getqueryparams\",{\"1\":{\"557\":1}}],[\"getquerystring\",{\"1\":{\"354\":6,\"1421\":1}}],[\"getquantity\",{\"1\":{\"236\":1}}],[\"getannotation\",{\"1\":{\"1414\":1}}],[\"getandcreatemqclientinstance\",{\"1\":{\"914\":1}}],[\"getandset\",{\"1\":{\"331\":1}}],[\"getaccesschannel\",{\"1\":{\"914\":1}}],[\"getaccesscontrolcontext\",{\"1\":{\"438\":2}}],[\"getargs\",{\"1\":{\"911\":1}}],[\"getarea\",{\"1\":{\"139\":2}}],[\"getaggregations\",{\"1\":{\"786\":1}}],[\"getallerrors\",{\"1\":{\"1526\":1}}],[\"getallnode\",{\"1\":{\"1452\":3}}],[\"getallocateqty\",{\"1\":{\"1251\":1}}],[\"getallocatemessagequeuestrategy\",{\"1\":{\"914\":1}}],[\"getallclassbypackagename\",{\"1\":{\"1032\":2}}],[\"getallcategorytree\",{\"1\":{\"672\":1}}],[\"getall\",{\"1\":{\"602\":1}}],[\"getabsolutepath\",{\"1\":{\"450\":1,\"1032\":1}}],[\"getapplicationcontext\",{\"1\":{\"413\":1,\"1247\":1}}],[\"getapplicationstartup\",{\"1\":{\"399\":3,\"438\":1,\"446\":1}}],[\"getasyncmanager\",{\"1\":{\"406\":1,\"1259\":1}}],[\"getadvicesandadvisorsforbean\",{\"1\":{\"383\":1,\"434\":1}}],[\"getattribute\",{\"1\":{\"346\":1,\"1412\":1}}],[\"getattributes\",{\"1\":{\"345\":2}}],[\"getauthorizedclient\",{\"1\":{\"345\":3}}],[\"getauthentication\",{\"1\":{\"345\":1,\"346\":1,\"1345\":2}}],[\"getauthenticationmanagerbean\",{\"1\":{\"331\":1}}],[\"getauthenticationmanager\",{\"1\":{\"331\":1}}],[\"getwrapper\",{\"1\":{\"1296\":1}}],[\"getwrappedinstance\",{\"1\":{\"359\":2}}],[\"getwriter\",{\"1\":{\"652\":1}}],[\"getwhites\",{\"1\":{\"422\":1,\"467\":1,\"1031\":1}}],[\"getwebserver\",{\"0\":{\"450\":1},\"1\":{\"446\":1,\"450\":1}}],[\"getwebserverfactory\",{\"1\":{\"446\":1}}],[\"getwebserver工厂生产webserver\",{\"1\":{\"446\":1}}],[\"getwebsecurityconfigurers\",{\"1\":{\"329\":1}}],[\"getwebapplicationcontext\",{\"1\":{\"411\":1}}],[\"getwarehouseid\",{\"1\":{\"236\":3}}],[\"getfailedshards\",{\"1\":{\"786\":1}}],[\"getfactorymethodname\",{\"1\":{\"357\":1}}],[\"getfile\",{\"1\":{\"592\":2,\"1032\":1}}],[\"getfilters\",{\"1\":{\"329\":1,\"473\":1}}],[\"getfirst\",{\"1\":{\"422\":1,\"557\":1}}],[\"getfirstthrowableoftype\",{\"1\":{\"345\":1}}],[\"getfield\",{\"1\":{\"378\":1}}],[\"getfielderrors\",{\"1\":{\"378\":1}}],[\"getfielderror\",{\"1\":{\"353\":1}}],[\"getfrozenquantity\",{\"1\":{\"236\":1}}],[\"getlastmodified\",{\"1\":{\"1259\":1}}],[\"getlastaccessedtime\",{\"1\":{\"652\":1}}],[\"getlistmultimap\",{\"1\":{\"1013\":1}}],[\"getlimit\",{\"1\":{\"255\":1,\"853\":1}}],[\"getlogger\",{\"1\":{\"780\":1}}],[\"getlockname\",{\"1\":{\"1246\":1}}],[\"getlock\",{\"1\":{\"1246\":1}}],[\"getlockquantity\",{\"1\":{\"236\":1}}],[\"getlocal\",{\"1\":{\"1421\":1}}],[\"getlocale\",{\"1\":{\"557\":1}}],[\"getlocalecontext\",{\"1\":{\"557\":3}}],[\"getlocation\",{\"1\":{\"592\":2}}],[\"getlocationtype\",{\"1\":{\"236\":10}}],[\"getport\",{\"1\":{\"456\":1}}],[\"getportsdescription\",{\"1\":{\"456\":1}}],[\"getpassword\",{\"1\":{\"1518\":1}}],[\"getpasswd\",{\"1\":{\"792\":1}}],[\"getpatcheddate\",{\"1\":{\"902\":1}}],[\"getpathparams\",{\"1\":{\"1422\":1}}],[\"getpaths\",{\"1\":{\"1032\":2}}],[\"getpath\",{\"1\":{\"422\":1,\"471\":3,\"592\":1,\"594\":1,\"1415\":1,\"1421\":1}}],[\"getparametermap\",{\"1\":{\"1421\":1}}],[\"getparametertypes\",{\"1\":{\"911\":1}}],[\"getparameter\",{\"1\":{\"652\":2,\"1345\":1}}],[\"getparentid\",{\"1\":{\"672\":7,\"1036\":1,\"1452\":2}}],[\"getparent\",{\"1\":{\"411\":1}}],[\"getpage\",{\"1\":{\"255\":1,\"853\":1}}],[\"getprivatekey\",{\"1\":{\"1518\":1}}],[\"getprincipal\",{\"1\":{\"345\":1,\"1522\":1}}],[\"getproduct\",{\"1\":{\"1342\":1}}],[\"getproductid\",{\"1\":{\"786\":1}}],[\"getprotocol\",{\"1\":{\"1032\":1,\"1419\":1}}],[\"getprotectiondomain\",{\"1\":{\"592\":2}}],[\"getpropertymetadata\",{\"1\":{\"1480\":2}}],[\"getproperty\",{\"1\":{\"592\":1}}],[\"getpropertyvalues\",{\"1\":{\"359\":1,\"900\":2,\"1297\":1}}],[\"getproxyclassloader\",{\"1\":{\"435\":1}}],[\"getproxy\",{\"1\":{\"383\":1,\"435\":1,\"900\":1}}],[\"getpiecenum\",{\"1\":{\"236\":1}}],[\"getsalt\",{\"1\":{\"1518\":1}}],[\"getstring\",{\"1\":{\"1414\":1}}],[\"getstarttime\",{\"1\":{\"786\":2}}],[\"getstaticstu\",{\"1\":{\"479\":1}}],[\"getschedulestatus\",{\"1\":{\"902\":1}}],[\"getscheduleid\",{\"1\":{\"902\":1}}],[\"getscrollid\",{\"1\":{\"780\":4}}],[\"getsqlsession\",{\"1\":{\"852\":1}}],[\"getsqlfragments\",{\"1\":{\"852\":1}}],[\"getsortindex\",{\"1\":{\"672\":2}}],[\"getsourceparallelism\",{\"1\":{\"792\":1}}],[\"getsourceasstring\",{\"1\":{\"786\":1,\"1248\":2}}],[\"getsource\",{\"1\":{\"413\":2}}],[\"getspringfactoriesloaderfactoryclass\",{\"1\":{\"494\":1}}],[\"getsignature\",{\"1\":{\"911\":1}}],[\"getsinkparallelism\",{\"1\":{\"792\":1}}],[\"getsingleton\",{\"1\":{\"438\":1,\"439\":1}}],[\"getsimplename\",{\"1\":{\"353\":1,\"411\":1,\"1297\":1,\"1445\":3}}],[\"gets\",{\"1\":{\"251\":1}}],[\"getsearchindexnames\",{\"1\":{\"1248\":2}}],[\"getsearchsourcebuilder\",{\"1\":{\"786\":2}}],[\"getset方法\",{\"1\":{\"911\":1}}],[\"getset\",{\"1\":{\"910\":1,\"911\":1}}],[\"getservicebypath\",{\"1\":{\"1522\":1}}],[\"getservices\",{\"1\":{\"874\":1,\"875\":1}}],[\"getservice\",{\"1\":{\"450\":2}}],[\"getservercontainer\",{\"0\":{\"1412\":1},\"1\":{\"1412\":1}}],[\"getserverconfig\",{\"1\":{\"880\":1}}],[\"getserver\",{\"0\":{\"453\":1},\"1\":{\"450\":1}}],[\"getservletname\",{\"1\":{\"410\":1,\"411\":2}}],[\"getservletcontextinitializerbeans\",{\"1\":{\"447\":1}}],[\"getservletcontextattributename\",{\"1\":{\"411\":1}}],[\"getservletcontext\",{\"1\":{\"410\":1,\"411\":3,\"446\":1,\"676\":1}}],[\"getservletconfig\",{\"1\":{\"410\":1}}],[\"getselfinitializer\",{\"1\":{\"446\":2}}],[\"getsecondinterval\",{\"1\":{\"792\":1}}],[\"getsecretkey\",{\"1\":{\"719\":1}}],[\"getsecuritymanager\",{\"1\":{\"438\":2}}],[\"getsection\",{\"1\":{\"106\":2}}],[\"getsession\",{\"1\":{\"346\":1,\"652\":2}}],[\"getsequence\",{\"1\":{\"139\":4}}],[\"getdoccount\",{\"1\":{\"786\":2}}],[\"getdynamicstu\",{\"1\":{\"479\":1}}],[\"getdecoders\",{\"1\":{\"1415\":1}}],[\"getdeclaredconstructor\",{\"1\":{\"1257\":1}}],[\"getdeclaredmethod\",{\"1\":{\"252\":1}}],[\"getdevice\",{\"1\":{\"1342\":1}}],[\"getdeviceurl\",{\"1\":{\"792\":1}}],[\"getdescription\",{\"1\":{\"672\":3}}],[\"getdependencycheck\",{\"1\":{\"359\":1}}],[\"getdefaultmqproducerimpl\",{\"1\":{\"914\":1}}],[\"getdefaultmessage\",{\"1\":{\"353\":1,\"378\":1,\"1526\":1}}],[\"getdefault\",{\"1\":{\"241\":1,\"557\":1}}],[\"getdatasource\",{\"1\":{\"852\":1}}],[\"getdatasourcetype\",{\"1\":{\"632\":2}}],[\"getdatabaseid\",{\"1\":{\"852\":1}}],[\"getdata\",{\"1\":{\"236\":1,\"1522\":1}}],[\"getonclose\",{\"1\":{\"1415\":1}}],[\"getonopen\",{\"1\":{\"1415\":1}}],[\"getoffsetstore\",{\"1\":{\"914\":2}}],[\"getoutputstream\",{\"1\":{\"833\":1}}],[\"getoutstandingdeltokens\",{\"1\":{\"833\":1}}],[\"getornull\",{\"1\":{\"649\":2}}],[\"getorder\",{\"1\":{\"1523\":1}}],[\"getorderqty\",{\"1\":{\"236\":1}}],[\"getordefault\",{\"1\":{\"557\":1}}],[\"getoriginalclassloader\",{\"1\":{\"435\":1}}],[\"getobject获取实例\",{\"1\":{\"1296\":1}}],[\"getobject会调用afterpropertiesset方法\",{\"1\":{\"852\":1}}],[\"getobjectvalue\",{\"1\":{\"602\":3}}],[\"getobjecttype\",{\"1\":{\"480\":1,\"900\":1}}],[\"getobjectforbeaninstance\",{\"1\":{\"439\":1}}],[\"getobject\",{\"1\":{\"354\":2,\"480\":1,\"658\":4,\"852\":2,\"900\":1,\"1296\":1}}],[\"getoddquantity\",{\"1\":{\"236\":1}}],[\"getrawpath\",{\"1\":{\"1522\":1}}],[\"getrange\",{\"1\":{\"910\":1}}],[\"getrulescenesstream\",{\"1\":{\"792\":2}}],[\"getrole\",{\"1\":{\"584\":1,\"706\":1}}],[\"getrows\",{\"1\":{\"236\":1}}],[\"getremotehost\",{\"1\":{\"1353\":2}}],[\"getremoteport\",{\"1\":{\"1353\":2}}],[\"getremoteaddr\",{\"1\":{\"421\":1}}],[\"getreplid\",{\"1\":{\"1251\":1}}],[\"getrepllockquantity\",{\"1\":{\"236\":1}}],[\"getregistry\",{\"1\":{\"900\":1}}],[\"getrequiredattribute\",{\"1\":{\"471\":1,\"473\":1}}],[\"getrequesturi\",{\"1\":{\"1421\":1}}],[\"getrequesturl\",{\"1\":{\"421\":1}}],[\"getrequestid\",{\"1\":{\"902\":1}}],[\"getrequestdispatcher\",{\"0\":{\"463\":1}}],[\"getrequest\",{\"1\":{\"346\":2,\"422\":1,\"471\":1,\"513\":1,\"557\":1,\"1345\":2,\"1522\":1,\"1523\":1}}],[\"getresult\",{\"1\":{\"911\":1,\"1345\":3}}],[\"getresources\",{\"1\":{\"1032\":1}}],[\"getresource\",{\"1\":{\"592\":1,\"852\":1}}],[\"getresolvedautowiremode\",{\"1\":{\"358\":1}}],[\"getresponse\",{\"1\":{\"346\":2,\"1345\":1}}],[\"getreceivedquantity\",{\"1\":{\"236\":2}}],[\"getnormalizedpath\",{\"1\":{\"1415\":1}}],[\"getnormalflag\",{\"1\":{\"236\":2}}],[\"getnamingservice\",{\"1\":{\"869\":1}}],[\"getnamingtoken\",{\"1\":{\"456\":1}}],[\"getnamesrvaddr\",{\"1\":{\"914\":2}}],[\"getnamespace\",{\"1\":{\"914\":1}}],[\"getname\",{\"1\":{\"234\":1,\"236\":1,\"345\":2,\"602\":1,\"658\":2,\"672\":3,\"801\":6,\"992\":5,\"1032\":4,\"1246\":2,\"1414\":1}}],[\"getnativeresponse\",{\"1\":{\"345\":1}}],[\"getnativerequest\",{\"1\":{\"345\":1}}],[\"getisdelete\",{\"1\":{\"786\":1}}],[\"getindextype\",{\"1\":{\"1248\":1}}],[\"getinstancemanager\",{\"1\":{\"1415\":1,\"1419\":1}}],[\"getinstance\",{\"1\":{\"914\":1,\"1256\":1,\"1257\":3}}],[\"getinstances\",{\"1\":{\"874\":1,\"875\":1}}],[\"getinputstream\",{\"1\":{\"833\":1,\"852\":2}}],[\"getinitparameter\",{\"1\":{\"652\":1}}],[\"getinterface\",{\"1\":{\"647\":3}}],[\"getinterfaces\",{\"1\":{\"435\":1}}],[\"getifavailable\",{\"1\":{\"505\":1}}],[\"getimportclassname\",{\"1\":{\"491\":1}}],[\"getimports\",{\"1\":{\"491\":2}}],[\"getimplmethodname\",{\"1\":{\"252\":1}}],[\"getitemid\",{\"1\":{\"236\":2}}],[\"getid\",{\"1\":{\"192\":1,\"241\":1,\"346\":1,\"658\":1,\"672\":3,\"786\":1,\"902\":2,\"1036\":1,\"1345\":3,\"1352\":1,\"1353\":1}}],[\"getcredentials\",{\"1\":{\"1517\":1,\"1518\":2}}],[\"getcreatetime\",{\"1\":{\"786\":3}}],[\"getcreationtime\",{\"1\":{\"652\":1}}],[\"getcron\",{\"1\":{\"657\":2}}],[\"getcandidateconfigurations\",{\"1\":{\"494\":2}}],[\"getcandidatefilter\",{\"1\":{\"491\":1}}],[\"getcachedata<cat>\",{\"1\":{\"988\":1}}],[\"getcachedata<t>\",{\"1\":{\"988\":1}}],[\"getcachedata\",{\"1\":{\"988\":2}}],[\"getcachedresult获取controlleractioninvokercacheentry\",{\"1\":{\"108\":1}}],[\"getcachekey\",{\"1\":{\"433\":1}}],[\"getcallbacks\",{\"1\":{\"386\":2}}],[\"getclientauthenticationmethod\",{\"1\":{\"1517\":1}}],[\"getclient\",{\"1\":{\"833\":3}}],[\"getclientid\",{\"1\":{\"602\":1,\"833\":3,\"914\":1,\"1353\":1}}],[\"getclientregistrationid\",{\"1\":{\"345\":2}}],[\"getclassname\",{\"1\":{\"491\":1}}],[\"getclassloader\",{\"1\":{\"435\":1,\"456\":1,\"592\":1,\"900\":1}}],[\"getclass\",{\"1\":{\"252\":1,\"383\":5,\"386\":1,\"411\":1,\"433\":1,\"434\":5,\"446\":1,\"456\":1}}],[\"getcompletecategory\",{\"1\":{\"672\":3}}],[\"getcookies\",{\"1\":{\"652\":1}}],[\"getcorepoolsize\",{\"1\":{\"476\":1}}],[\"getconnection\",{\"1\":{\"1295\":1}}],[\"getconnector\",{\"1\":{\"456\":2}}],[\"getconsumergroup\",{\"1\":{\"914\":8}}],[\"getconstructor\",{\"1\":{\"871\":1}}],[\"getconfiglocation\",{\"1\":{\"852\":2}}],[\"getconfig\",{\"1\":{\"792\":4,\"1422\":1}}],[\"getconfiguration\",{\"1\":{\"852\":1}}],[\"getconfigurationproperties\",{\"1\":{\"852\":2}}],[\"getconfigurationonlycopy\",{\"1\":{\"386\":1}}],[\"getconfigurers\",{\"1\":{\"334\":2}}],[\"getcontextbind\",{\"1\":{\"1419\":2}}],[\"getcontextclassloader\",{\"1\":{\"1032\":1,\"1415\":1}}],[\"getcontextpath\",{\"1\":{\"456\":1}}],[\"getcontext\",{\"1\":{\"345\":1,\"346\":1}}],[\"getcodesource\",{\"1\":{\"592\":2}}],[\"getcode\",{\"1\":{\"236\":13,\"1522\":2,\"1526\":2}}],[\"getchildren\",{\"1\":{\"672\":5,\"1036\":1}}],[\"getchild\",{\"1\":{\"256\":2}}],[\"getctclass\",{\"1\":{\"241\":2}}],[\"getcustomerid\",{\"1\":{\"236\":3}}],[\"gettransformation\",{\"1\":{\"1421\":1}}],[\"gettransactionfactoryfromenvironment\",{\"1\":{\"852\":1}}],[\"gettransactionparallelism\",{\"1\":{\"792\":1}}],[\"gettransactionsstream\",{\"1\":{\"792\":2}}],[\"gettransaction\",{\"1\":{\"202\":1}}],[\"gettargettenantid\",{\"1\":{\"1248\":2}}],[\"gettaskid\",{\"1\":{\"1013\":1}}],[\"getting\",{\"1\":{\"852\":1}}],[\"gettimeout\",{\"1\":{\"1345\":1}}],[\"gettime\",{\"1\":{\"236\":2,\"648\":2,\"786\":2}}],[\"gettypehandlerregistry\",{\"1\":{\"852\":2}}],[\"gettypehandlerspackage\",{\"1\":{\"852\":2}}],[\"gettypealiasregistry\",{\"1\":{\"852\":2}}],[\"gettypealiasessupertype\",{\"1\":{\"852\":2}}],[\"gettypealiasespackage\",{\"1\":{\"852\":2}}],[\"gettype\",{\"1\":{\"786\":3,\"1345\":1}}],[\"gettopicprefix\",{\"1\":{\"1353\":1}}],[\"gettopickey\",{\"1\":{\"1013\":1}}],[\"gettokentype\",{\"1\":{\"1345\":1}}],[\"gettoken\",{\"1\":{\"602\":1,\"1345\":3}}],[\"gettomcatwebserver\",{\"1\":{\"450\":2}}],[\"gettempclassloader\",{\"1\":{\"397\":1}}],[\"getters属性\",{\"1\":{\"998\":1}}],[\"getter\",{\"1\":{\"241\":4,\"290\":1}}],[\"gettenantid\",{\"1\":{\"236\":3,\"602\":1,\"1248\":1,\"1522\":1,\"1523\":1}}],[\"get\",{\"0\":{\"305\":1,\"311\":1},\"1\":{\"29\":1,\"51\":1,\"173\":2,\"179\":2,\"234\":5,\"251\":1,\"255\":4,\"304\":2,\"305\":3,\"311\":2,\"312\":1,\"377\":3,\"383\":1,\"434\":1,\"491\":1,\"575\":1,\"602\":12,\"632\":1,\"658\":1,\"672\":1,\"748\":1,\"756\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"769\":1,\"770\":1,\"774\":1,\"775\":2,\"776\":1,\"778\":1,\"780\":2,\"782\":1,\"783\":1,\"786\":1,\"804\":2,\"910\":1,\"911\":2,\"991\":2,\"1013\":1,\"1036\":1,\"1130\":4,\"1159\":4,\"1185\":1,\"1259\":1,\"1345\":2,\"1408\":1,\"1513\":8,\"1522\":1,\"1526\":1,\"1532\":1,\"1534\":1,\"1535\":3,\"1541\":1,\"1550\":1,\"1561\":1,\"1564\":1,\"1565\":1,\"1572\":1,\"1574\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":18,\"1592\":3,\"1595\":1,\"1596\":1,\"1597\":4,\"1603\":1,\"1607\":1,\"1613\":1,\"1616\":1,\"1617\":1,\"1622\":1,\"1628\":1,\"1635\":1}}],[\"gid\",{\"1\":{\"1177\":1}}],[\"gin\",{\"0\":{\"176\":1},\"1\":{\"67\":1,\"83\":1,\"165\":1,\"179\":3}}],[\"given\",{\"0\":{\"40\":1},\"1\":{\"249\":1,\"250\":1}}],[\"gitee\",{\"1\":{\"1215\":2,\"1458\":1}}],[\"git不但会把本地的master分支内容推送的远程新的master分支\",{\"1\":{\"1151\":1}}],[\"git同样告诉我们\",{\"1\":{\"1151\":1}}],[\"git的版本库里存了很多东西\",{\"1\":{\"1151\":1}}],[\"git的使用\",{\"0\":{\"1147\":1}}],[\"git工作区和暂存区\",{\"0\":{\"1151\":1}}],[\"git命令所在的位置\",{\"1\":{\"1149\":1}}],[\"git分支\",{\"0\":{\"1148\":1}}],[\"git推送时需输入token作为密码\",{\"1\":{\"1147\":1}}],[\"git获取配置信息\",{\"1\":{\"1146\":1}}],[\"git配置\",{\"0\":{\"1146\":1}}],[\"gitskills\",{\"1\":{\"1144\":1}}],[\"gitscm\",{\"1\":{\"1130\":2}}],[\"git邮箱\",{\"1\":{\"1130\":1}}],[\"gitlab\",{\"0\":{\"565\":1,\"1127\":1,\"1128\":1},\"1\":{\"1127\":17,\"1128\":7}}],[\"github配置ssh公钥key\",{\"1\":{\"1145\":1}}],[\"github\",{\"0\":{\"32\":1},\"1\":{\"32\":3,\"173\":1,\"399\":1,\"621\":1,\"642\":1,\"1092\":1,\"1118\":2,\"1144\":2,\"1445\":4}}],[\"git\",{\"0\":{\"32\":1,\"52\":1,\"1143\":1,\"1149\":1,\"1150\":1},\"1\":{\"26\":1,\"32\":1,\"43\":3,\"52\":2,\"1130\":2,\"1144\":15,\"1146\":5,\"1147\":11,\"1148\":7,\"1149\":5,\"1150\":3,\"1151\":2,\"1215\":4,\"1458\":2}}],[\"grunt\",{\"0\":{\"956\":1}}],[\"grid\",{\"1\":{\"912\":1}}],[\"growattapi\",{\"1\":{\"758\":2}}],[\"groovy\",{\"0\":{\"568\":1,\"648\":1},\"1\":{\"648\":6}}],[\"groupname\",{\"1\":{\"1032\":2,\"1177\":1}}],[\"group<\",{\"1\":{\"975\":1,\"1079\":1}}],[\"group2\",{\"1\":{\"804\":1}}],[\"group\",{\"1\":{\"769\":1,\"770\":1,\"801\":1,\"802\":1,\"804\":9,\"880\":1,\"914\":2,\"975\":1,\"1032\":1,\"1177\":1,\"1197\":2,\"1450\":3}}],[\"groups\",{\"1\":{\"621\":1}}],[\"groupid\",{\"1\":{\"801\":1,\"804\":3}}],[\"groupid>\",{\"1\":{\"31\":1,\"49\":1,\"476\":2,\"621\":1,\"639\":1,\"646\":1,\"658\":1,\"790\":8,\"799\":1,\"862\":5,\"981\":1,\"1249\":1}}],[\"groupings\",{\"1\":{\"491\":1}}],[\"grouping\",{\"1\":{\"491\":4}}],[\"group1\",{\"1\":{\"116\":1,\"804\":2}}],[\"greeting\",{\"1\":{\"969\":2}}],[\"greetings\",{\"1\":{\"172\":4}}],[\"green\",{\"1\":{\"596\":1}}],[\"grep\",{\"1\":{\"12\":1,\"1087\":2,\"1095\":1,\"1127\":1,\"1180\":1,\"1187\":2,\"1190\":1}}],[\"grep显示附近行信息\",{\"0\":{\"12\":1}}],[\"grpcprotocol\",{\"1\":{\"745\":1}}],[\"grpcserverlifecycle\",{\"1\":{\"640\":1}}],[\"grpcservice\",{\"1\":{\"640\":1}}],[\"grpc\",{\"0\":{\"638\":1},\"1\":{\"165\":1,\"642\":3,\"643\":3}}],[\"graceful\",{\"1\":{\"1445\":1}}],[\"gracefulshutdownstarttime\",{\"1\":{\"1445\":1}}],[\"grant\",{\"1\":{\"1141\":1,\"1531\":2}}],[\"graalvm\",{\"1\":{\"69\":1}}],[\"gradle配置\",{\"1\":{\"1130\":1}}],[\"gradle添加以下配置\",{\"1\":{\"40\":1}}],[\"gradle编译脚本添加test编译器\",{\"1\":{\"40\":1}}],[\"gradle\",{\"0\":{\"1067\":1},\"1\":{\"31\":3,\"585\":1,\"707\":1,\"1065\":1,\"1072\":1,\"1073\":3,\"1130\":1}}],[\"gradlew\",{\"0\":{\"27\":1,\"1073\":1},\"1\":{\"27\":1,\"1073\":1,\"1130\":1}}],[\"globalfilter\",{\"1\":{\"1523\":1}}],[\"globalfilters\",{\"1\":{\"473\":2}}],[\"globalattr\",{\"1\":{\"377\":2}}],[\"globalauthconfigurers\",{\"1\":{\"331\":1}}],[\"globalauthenticationconfigureradapter\",{\"1\":{\"331\":1}}],[\"global\",{\"1\":{\"26\":1,\"52\":1,\"212\":1,\"717\":1,\"902\":1,\"993\":2,\"995\":1,\"1146\":2,\"1215\":1,\"1243\":1,\"1515\":1,\"1613\":1}}],[\"katxlvolznhrmq==\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"kafkaconsumer\",{\"0\":{\"815\":1}}],[\"kafkaconsumerconfiguration\",{\"1\":{\"801\":1}}],[\"kafkamessagelistenercontainer\",{\"0\":{\"813\":1}}],[\"kafkabootstrapconfiguration\",{\"0\":{\"810\":1}}],[\"kafka自身并没有多线程消费的模式\",{\"1\":{\"808\":1}}],[\"kafka集群地址\",{\"1\":{\"801\":1}}],[\"kafkalistenerendpointregistry\",{\"1\":{\"811\":2}}],[\"kafkalistenerendpointregistrar\",{\"1\":{\"811\":1}}],[\"kafkalistener注解的类或方法\",{\"1\":{\"811\":1}}],[\"kafkalistener注解只能循环拉取数据\",{\"1\":{\"797\":1}}],[\"kafkalistenerannotationbeanpostprocessor\",{\"0\":{\"811\":1}}],[\"kafkalistener\",{\"1\":{\"804\":3}}],[\"kafkalistenercontainerfactory\",{\"1\":{\"801\":1}}],[\"kafkalistenercontainerfactory<concurrentmessagelistenercontainer<string\",{\"1\":{\"801\":1}}],[\"kafkatransactionmanager<>\",{\"1\":{\"801\":1}}],[\"kafkatransactionmanager<integer\",{\"1\":{\"801\":1}}],[\"kafkatransactionmanager\",{\"1\":{\"801\":1}}],[\"kafkatemplatewithtransaction\",{\"1\":{\"801\":2}}],[\"kafkatemplate<>\",{\"1\":{\"801\":2}}],[\"kafkatemplate<string\",{\"1\":{\"801\":2}}],[\"kafkatemplate\",{\"1\":{\"801\":5}}],[\"kafkatopicconfiguration\",{\"1\":{\"801\":1}}],[\"kafkaproducer\",{\"1\":{\"801\":1,\"802\":1}}],[\"kafkaproducerconfiguration\",{\"1\":{\"801\":1}}],[\"kafkaadmin\",{\"1\":{\"801\":3}}],[\"kafkaamin\",{\"1\":{\"801\":1}}],[\"kafkaasyncproperties\",{\"1\":{\"476\":6}}],[\"kafkasource<consumerrecord<string\",{\"1\":{\"792\":1}}],[\"kafkasource\",{\"1\":{\"791\":1,\"792\":1}}],[\"kafka<\",{\"1\":{\"790\":1,\"799\":2}}],[\"kafka\",{\"0\":{\"92\":1,\"795\":1,\"1126\":1},\"1\":{\"792\":3,\"798\":2,\"801\":6,\"802\":9,\"804\":17,\"1126\":7}}],[\"kafak\",{\"1\":{\"72\":1}}],[\"koi8\",{\"1\":{\"1210\":1}}],[\"kill\",{\"0\":{\"1191\":1},\"1\":{\"1191\":4}}],[\"kibana\",{\"1\":{\"780\":1,\"1139\":3}}],[\"kuboard\",{\"0\":{\"1172\":1}}],[\"kuber\",{\"0\":{\"1173\":1}}],[\"kubernetes会自动在每个容器的\",{\"1\":{\"1168\":1}}],[\"kubernetes\",{\"1\":{\"1167\":1,\"1170\":3,\"1233\":1}}],[\"kubernetes实现了对容器化应用程序的高效调度\",{\"1\":{\"1161\":1}}],[\"kubernetes中的命名空间\",{\"1\":{\"1160\":1}}],[\"kubelet会将容器的状态信息反馈给master节点\",{\"1\":{\"1162\":1}}],[\"kubelet会与容器运行时\",{\"1\":{\"1162\":1}}],[\"kubelet在接收到来自master节点的调度指令后\",{\"1\":{\"1162\":1}}],[\"kubelet组件\",{\"1\":{\"1162\":1}}],[\"kubectl\",{\"1\":{\"1159\":15}}],[\"k8s搭建\",{\"0\":{\"1158\":1}}],[\"k8s\",{\"0\":{\"1157\":1},\"1\":{\"1159\":1}}],[\"k++\",{\"1\":{\"140\":1}}],[\"k\",{\"1\":{\"140\":5,\"602\":2,\"1227\":2,\"1445\":5,\"1480\":2}}],[\"knownmappers\",{\"1\":{\"860\":1}}],[\"known\",{\"0\":{\"26\":1},\"1\":{\"1130\":1}}],[\"kerberos认证协议\",{\"0\":{\"1426\":1}}],[\"kernel\",{\"1\":{\"5\":3,\"17\":3}}],[\"keepalive\",{\"1\":{\"1210\":2,\"1582\":4,\"1607\":2}}],[\"keep\",{\"1\":{\"1058\":5}}],[\"key=2845a410fb4b\",{\"1\":{\"1475\":3}}],[\"keyring\",{\"1\":{\"1130\":2}}],[\"keyrings\",{\"1\":{\"1130\":2}}],[\"keygen\",{\"1\":{\"1130\":1,\"1145\":1}}],[\"key和当前读\",{\"1\":{\"1051\":1}}],[\"key和证书\",{\"0\":{\"622\":1}}],[\"key用于范围查询\",{\"1\":{\"1048\":1}}],[\"key值\",{\"1\":{\"911\":1}}],[\"keyed\",{\"1\":{\"792\":2}}],[\"keyby\",{\"1\":{\"792\":1}}],[\"keyword对整个字段统计\",{\"1\":{\"769\":1}}],[\"keyword\",{\"1\":{\"749\":4,\"769\":1,\"770\":1,\"773\":2}}],[\"keyalg\",{\"1\":{\"623\":2}}],[\"keyscan\",{\"1\":{\"1130\":1}}],[\"keys\",{\"1\":{\"649\":5,\"908\":1,\"930\":1,\"1246\":7,\"1515\":1}}],[\"keysize\",{\"1\":{\"623\":2}}],[\"keystore\",{\"1\":{\"623\":5}}],[\"keyset\",{\"1\":{\"602\":1}}],[\"keypasswd\",{\"1\":{\"623\":1}}],[\"keytool\",{\"0\":{\"623\":1},\"1\":{\"623\":4,\"627\":1}}],[\"key2\",{\"1\":{\"377\":1}}],[\"key就是name\",{\"1\":{\"377\":1}}],[\"key就是map\",{\"1\":{\"377\":1}}],[\"key1\",{\"1\":{\"377\":1}}],[\"key大面积失效\",{\"1\":{\"216\":1}}],[\"key\",{\"0\":{\"26\":1,\"34\":1},\"1\":{\"26\":1,\"133\":2,\"148\":1,\"153\":3,\"154\":3,\"219\":1,\"348\":2,\"377\":1,\"602\":18,\"625\":1,\"627\":1,\"649\":3,\"719\":2,\"782\":2,\"801\":4,\"802\":4,\"908\":5,\"909\":1,\"910\":4,\"911\":14,\"988\":4,\"1048\":2,\"1058\":4,\"1145\":1,\"1210\":2,\"1211\":1,\"1445\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":2,\"1503\":1,\"1616\":1}}],[\"h2\",{\"1\":{\"1302\":1}}],[\"h2>\",{\"1\":{\"970\":1,\"975\":1}}],[\"hj\",{\"1\":{\"1177\":2}}],[\"hj❌1000\",{\"1\":{\"1177\":2}}],[\"hp\",{\"1\":{\"1153\":1}}],[\"hprof\",{\"1\":{\"1153\":2}}],[\"hrsoft\",{\"1\":{\"1137\":1}}],[\"href=\",{\"1\":{\"982\":2}}],[\"href\",{\"1\":{\"982\":1}}],[\"href方式发起新的请求\",{\"1\":{\"46\":1}}],[\"hunter\",{\"0\":{\"1211\":1},\"1\":{\"1211\":1}}],[\"hundred\",{\"1\":{\"297\":1}}],[\"hudson\",{\"1\":{\"1130\":2,\"1188\":2}}],[\"hub=credentials\",{\"1\":{\"1215\":1}}],[\"hub\",{\"1\":{\"1096\":1,\"1191\":1,\"1215\":3}}],[\"hutool的treeutil\",{\"1\":{\"1036\":1}}],[\"h3>\",{\"1\":{\"975\":1}}],[\"h1\",{\"1\":{\"969\":1}}],[\"h1>\",{\"1\":{\"652\":1,\"969\":1,\"970\":2,\"971\":3}}],[\"hvals\",{\"1\":{\"909\":1}}],[\"hkeys\",{\"1\":{\"909\":1}}],[\"hlen\",{\"1\":{\"909\":1}}],[\"hdel\",{\"1\":{\"909\":1}}],[\"hmget\",{\"1\":{\"909\":1}}],[\"hmset\",{\"1\":{\"909\":1}}],[\"hgetall\",{\"1\":{\"909\":1}}],[\"hget\",{\"1\":{\"909\":1}}],[\"hset设置值\",{\"1\":{\"1246\":1}}],[\"hset给hash设值\",{\"1\":{\"911\":1}}],[\"hsetnx\",{\"1\":{\"909\":1}}],[\"hset\",{\"1\":{\"909\":1,\"1246\":1}}],[\"hh\",{\"1\":{\"379\":1,\"596\":2,\"649\":1,\"1513\":1,\"1514\":1,\"1539\":2,\"1540\":2,\"1570\":1,\"1571\":1}}],[\"hope\",{\"1\":{\"1445\":1}}],[\"home\",{\"1\":{\"1127\":6,\"1128\":1,\"1130\":19,\"1133\":3,\"1177\":1,\"1182\":1,\"1188\":2,\"1200\":3,\"1458\":3}}],[\"home=$home\",{\"1\":{\"1127\":1}}],[\"home=\",{\"1\":{\"1127\":1,\"1130\":2,\"1136\":1,\"1182\":1,\"1458\":2}}],[\"hongji\",{\"1\":{\"1115\":1,\"1116\":1}}],[\"honor\",{\"1\":{\"399\":1}}],[\"hooks\",{\"1\":{\"1445\":1}}],[\"hook\",{\"1\":{\"975\":1}}],[\"hour\",{\"1\":{\"786\":3}}],[\"hours\",{\"1\":{\"649\":4}}],[\"holder\",{\"1\":{\"346\":6,\"900\":2}}],[\"host=\",{\"1\":{\"1215\":1}}],[\"host=172\",{\"1\":{\"1137\":1}}],[\"host=127\",{\"1\":{\"1137\":2}}],[\"host=192\",{\"1\":{\"1132\":1}}],[\"host=tcp\",{\"1\":{\"1130\":2}}],[\"host=bai\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"host=repo\",{\"1\":{\"48\":1}}],[\"hostreactor\",{\"1\":{\"872\":3}}],[\"host>\",{\"1\":{\"756\":1}}],[\"host把httpservletresponse对象返回给engine\",{\"1\":{\"679\":1}}],[\"host匹配到路径为\",{\"1\":{\"679\":1}}],[\"host获得请求\",{\"1\":{\"679\":1}}],[\"host可配置多个context\",{\"1\":{\"678\":1}}],[\"hostname\",{\"1\":{\"32\":1,\"1133\":6}}],[\"hosts文件中添加一条记录\",{\"1\":{\"1168\":1}}],[\"hosts文件中添加以下内容\",{\"1\":{\"39\":1}}],[\"hosts文件通常会包含pod的ip地址和pod名称的映射关系\",{\"1\":{\"1168\":1}}],[\"hosts\",{\"1\":{\"30\":1,\"1130\":1,\"1139\":1}}],[\"host\",{\"0\":{\"26\":1,\"32\":1},\"1\":{\"26\":1,\"32\":1,\"34\":1,\"104\":1,\"450\":1,\"595\":1,\"678\":2,\"850\":1,\"1126\":1,\"1139\":3,\"1140\":1,\"1210\":7,\"1215\":5,\"1506\":2,\"1514\":1,\"1515\":1}}],[\"harmless\",{\"1\":{\"1445\":1}}],[\"hard\",{\"1\":{\"1147\":2}}],[\"harbor=credentials\",{\"1\":{\"1215\":1}}],[\"harbor12345\",{\"1\":{\"1129\":1}}],[\"harbor\",{\"0\":{\"567\":1,\"1129\":1},\"1\":{\"1129\":3,\"1215\":10}}],[\"hangzhou\",{\"1\":{\"1137\":1}}],[\"handshake\",{\"1\":{\"1425\":1}}],[\"handshakerequest\",{\"1\":{\"1421\":4}}],[\"handling\",{\"1\":{\"435\":1}}],[\"handleloopexception\",{\"1\":{\"1445\":3}}],[\"handle对象\",{\"1\":{\"1400\":1}}],[\"handleprotocoldelete\",{\"1\":{\"1358\":1}}],[\"handlepreflight\",{\"1\":{\"513\":1}}],[\"handlemodify\",{\"1\":{\"1358\":1}}],[\"handlesaved\",{\"1\":{\"1358\":1}}],[\"handlecreated\",{\"1\":{\"1358\":1}}],[\"handleusersign\",{\"1\":{\"1345\":1}}],[\"handleerror\",{\"1\":{\"801\":1}}],[\"handleinternal方法\",{\"1\":{\"403\":1}}],[\"handle方法会将全局过滤器装饰为有序网关过滤器和默认网关过滤器defaultgatewayfilteradapter合并到集合中\",{\"1\":{\"1262\":1}}],[\"handle方法\",{\"1\":{\"403\":1}}],[\"handled\",{\"1\":{\"399\":1}}],[\"handle\",{\"1\":{\"345\":1,\"473\":1,\"513\":1,\"1259\":1,\"1308\":1,\"1391\":1,\"1445\":1}}],[\"handlercontext维护channelhandler\",{\"1\":{\"1395\":1}}],[\"handler的responsecompleted\",{\"1\":{\"1381\":1}}],[\"handler找到适配器处理\",{\"1\":{\"1262\":1}}],[\"handleradapters\",{\"1\":{\"1259\":2}}],[\"handleradapter\",{\"1\":{\"1259\":4}}],[\"handlers\",{\"1\":{\"852\":1}}],[\"handlersmap\",{\"1\":{\"505\":2}}],[\"handlerexecutionchain\",{\"1\":{\"1259\":3}}],[\"handleresult\",{\"1\":{\"513\":1}}],[\"handlereturnvalue查找返回值处理器\",{\"1\":{\"405\":1}}],[\"handlereturnvalue\",{\"1\":{\"363\":1,\"406\":1}}],[\"handlermapping\",{\"1\":{\"1259\":1}}],[\"handlermappings\",{\"1\":{\"513\":2,\"1259\":2}}],[\"handlermethodreturnvaluehandlercomposite\",{\"0\":{\"405\":1}}],[\"handlermethod\",{\"1\":{\"403\":1,\"1525\":1}}],[\"handler\",{\"0\":{\"1451\":1},\"1\":{\"139\":1,\"179\":1,\"490\":3,\"509\":3,\"513\":2,\"852\":1,\"1259\":15,\"1383\":4,\"1450\":5,\"1525\":2}}],[\"handlerfunctionmethodadapter\",{\"1\":{\"1259\":1}}],[\"handlerfunc\",{\"1\":{\"139\":3}}],[\"handoop\",{\"1\":{\"81\":1}}],[\"had\",{\"1\":{\"411\":1}}],[\"have\",{\"1\":{\"383\":1,\"399\":1,\"434\":1,\"439\":1,\"833\":1,\"852\":1,\"974\":1,\"1445\":2}}],[\"havingvalue\",{\"1\":{\"373\":1}}],[\"hastasks\",{\"1\":{\"1445\":2}}],[\"hastext\",{\"1\":{\"422\":1,\"505\":1,\"557\":1,\"852\":1,\"1345\":1}}],[\"hasbufferedoutput\",{\"1\":{\"1383\":1}}],[\"hasdata\",{\"1\":{\"1383\":4}}],[\"hasmoreelements\",{\"1\":{\"1032\":1}}],[\"hasnext\",{\"1\":{\"471\":1,\"602\":1,\"1013\":1,\"1032\":1}}],[\"hasanyauthority\",{\"1\":{\"467\":1}}],[\"haslength\",{\"1\":{\"383\":1,\"434\":1,\"852\":4}}],[\"hasinstantiationawarebeanpostprocessors\",{\"1\":{\"359\":1}}],[\"hasinstawarebpps\",{\"1\":{\"359\":2}}],[\"haserrors\",{\"1\":{\"353\":1}}],[\"hasfilterchain\",{\"1\":{\"329\":3}}],[\"hasconfigurers\",{\"1\":{\"329\":3}}],[\"has\",{\"1\":{\"282\":1,\"411\":4,\"647\":1,\"914\":2,\"1445\":1}}],[\"hash\",{\"0\":{\"909\":1},\"1\":{\"730\":1,\"909\":2,\"911\":1}}],[\"hashset<>\",{\"1\":{\"399\":1}}],[\"hashset底层是基于hashmap结构\",{\"1\":{\"228\":1}}],[\"hashset是其实现类\",{\"1\":{\"228\":1}}],[\"hashmap<string\",{\"1\":{\"377\":2,\"602\":2}}],[\"hashmap<\",{\"1\":{\"309\":1}}],[\"hashmap<>\",{\"1\":{\"236\":1,\"792\":1,\"801\":3,\"1345\":1}}],[\"hashmap\",{\"1\":{\"308\":2,\"309\":1,\"310\":2,\"311\":3,\"312\":4,\"792\":1}}],[\"hashmap是其实现类\",{\"1\":{\"228\":1}}],[\"hashmap的扩容是2的n次方\",{\"1\":{\"198\":1}}],[\"hashmap的初始容量为16\",{\"1\":{\"198\":1}}],[\"hashmap与之相反\",{\"1\":{\"198\":1}}],[\"hashtable是2倍加1\",{\"1\":{\"198\":1}}],[\"hashtable是一个线程安全的类\",{\"1\":{\"198\":1}}],[\"hashtable初始容量为11\",{\"1\":{\"198\":1}}],[\"hashtable不可以用null作为键\",{\"1\":{\"198\":1}}],[\"hashtable与hashmap的区别\",{\"0\":{\"198\":1}}],[\"ha\",{\"1\":{\"129\":4,\"1259\":3}}],[\"h\",{\"1\":{\"121\":1,\"124\":3,\"129\":2,\"291\":2,\"1130\":1,\"1230\":1,\"1248\":2}}],[\"help\",{\"1\":{\"1445\":1}}],[\"help命令来查看所有可用的kubectl命令及其选项\",{\"1\":{\"1159\":1}}],[\"helloserverhandler\",{\"1\":{\"1450\":1}}],[\"helloworld\",{\"1\":{\"652\":1}}],[\"hellopython\",{\"1\":{\"646\":1}}],[\"hello\",{\"1\":{\"115\":3,\"116\":1,\"124\":3,\"172\":1,\"189\":1,\"264\":1,\"267\":3,\"269\":7,\"270\":1,\"282\":1,\"292\":1,\"312\":1,\"318\":2,\"592\":1,\"652\":1,\"801\":2,\"802\":4,\"969\":2,\"983\":1,\"1215\":2}}],[\"hexists\",{\"1\":{\"909\":1,\"1246\":1}}],[\"here\",{\"1\":{\"399\":2,\"411\":1,\"975\":1,\"1445\":2}}],[\"healthy\",{\"1\":{\"1445\":1}}],[\"healthcontroller\",{\"0\":{\"889\":1}}],[\"healing\",{\"1\":{\"1167\":1}}],[\"heap\",{\"1\":{\"1153\":3}}],[\"head属性\",{\"1\":{\"1448\":1}}],[\"head与之相反\",{\"1\":{\"1187\":1}}],[\"head\",{\"1\":{\"1147\":2,\"1149\":2,\"1151\":1,\"1187\":1,\"1259\":1}}],[\"head^\",{\"1\":{\"1147\":1}}],[\"head>\",{\"1\":{\"934\":2,\"1407\":1}}],[\"headerinterceptor\",{\"1\":{\"1525\":1}}],[\"header和payload使用base64加密\",{\"1\":{\"726\":1}}],[\"headers=x\",{\"1\":{\"1137\":1}}],[\"headers\",{\"1\":{\"330\":1,\"348\":1,\"411\":1,\"725\":1,\"1210\":1}}],[\"header\",{\"1\":{\"36\":2,\"422\":2,\"726\":1,\"1210\":21,\"1211\":4,\"1259\":1,\"1523\":1}}],[\"hearts\",{\"1\":{\"275\":2}}],[\"heart\",{\"1\":{\"275\":2}}],[\"height\",{\"1\":{\"274\":2,\"288\":3,\"290\":3,\"291\":1}}],[\"high\",{\"1\":{\"1210\":1,\"1248\":1}}],[\"highlight\",{\"1\":{\"596\":1}}],[\"hidechildreninmenu\",{\"1\":{\"1583\":5}}],[\"hidemenu\",{\"1\":{\"1583\":5}}],[\"hide\",{\"1\":{\"948\":1}}],[\"hincrbyfloat\",{\"1\":{\"909\":1}}],[\"hincrby\",{\"1\":{\"909\":1,\"1246\":1}}],[\"history`\",{\"1\":{\"1468\":1}}],[\"history\",{\"1\":{\"1308\":1,\"1312\":1}}],[\"history=true\",{\"1\":{\"589\":1,\"711\":1}}],[\"histo\",{\"1\":{\"1153\":1}}],[\"histogram\",{\"1\":{\"786\":5}}],[\"hitcount\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"hit\",{\"1\":{\"780\":2,\"786\":2,\"1248\":4}}],[\"hits\",{\"1\":{\"778\":1,\"780\":5,\"782\":1,\"786\":2,\"1248\":4}}],[\"him\",{\"1\":{\"648\":1}}],[\"hi\",{\"1\":{\"579\":3,\"582\":3,\"583\":3,\"703\":3}}],[\"hikaridatasource\",{\"1\":{\"373\":1,\"850\":2}}],[\"hikari\",{\"0\":{\"793\":1},\"1\":{\"373\":1,\"850\":10}}],[\"hikari的idletimeout和maxlifetime的区别\",{\"0\":{\"18\":1}}],[\"hikari的max\",{\"0\":{\"6\":1},\"1\":{\"6\":1}}],[\"hive\",{\"1\":{\"81\":1,\"1039\":1}}],[\"hystrix提供了熔断和降级\",{\"1\":{\"213\":1}}],[\"hystrix是一个容错组件\",{\"1\":{\"213\":1}}],[\"hystrix\",{\"1\":{\"73\":1,\"213\":1}}],[\"hypervisorlaunchtype\",{\"1\":{\"53\":2}}],[\"httpupgradehandler\",{\"1\":{\"1419\":4}}],[\"httpasyncrequestexecutor处理派发的事件\",{\"1\":{\"1382\":1}}],[\"http连接\",{\"1\":{\"1288\":1}}],[\"httprequesthandleradapter\",{\"1\":{\"1259\":1}}],[\"httprequestresponseholder\",{\"1\":{\"346\":2}}],[\"http2\",{\"1\":{\"1211\":2}}],[\"http请求shell命令\",{\"1\":{\"1189\":1}}],[\"http插件\",{\"1\":{\"1024\":1}}],[\"httperror\",{\"1\":{\"988\":1}}],[\"http11\",{\"1\":{\"1419\":1}}],[\"http11processor\",{\"0\":{\"691\":1}}],[\"http11nio2protocol\",{\"0\":{\"689\":1}}],[\"http11nioprotocol\",{\"0\":{\"689\":1}}],[\"http是一个无状态协议\",{\"1\":{\"652\":1}}],[\"httphandler>\",{\"1\":{\"505\":1}}],[\"httphandlerautoconfiguration\",{\"0\":{\"505\":1},\"1\":{\"505\":1}}],[\"httphandler\",{\"0\":{\"502\":1},\"1\":{\"505\":6}}],[\"httpheaders\",{\"1\":{\"422\":3}}],[\"httpwebhandleradapter的handle方法会找到dispatchhandler被filteringwebhandler\",{\"1\":{\"1262\":1}}],[\"httpwebhandleradapter是filteringwebhandler上层类\",{\"1\":{\"473\":1}}],[\"httpwebhandleradapter\",{\"0\":{\"512\":1},\"1\":{\"473\":1}}],[\"http接受客户端的授权请求\",{\"1\":{\"346\":1}}],[\"http向授权服务器发起请求\",{\"1\":{\"345\":1}}],[\"httpclient\",{\"0\":{\"615\":1},\"1\":{\"213\":1}}],[\"http\",{\"0\":{\"612\":1,\"1379\":1},\"1\":{\"36\":3,\"52\":2,\"103\":2,\"326\":2,\"330\":5,\"348\":3,\"360\":1,\"479\":4,\"652\":3,\"679\":2,\"756\":1,\"981\":1,\"1025\":13,\"1026\":16,\"1137\":7,\"1139\":2,\"1171\":1,\"1210\":11,\"1211\":3,\"1248\":2,\"1407\":2,\"1425\":2,\"1455\":2,\"1458\":1,\"1513\":3,\"1514\":4,\"1515\":1,\"1532\":2,\"1550\":1,\"1572\":1,\"1574\":2,\"1641\":1,\"1649\":1,\"1650\":1,\"1651\":1}}],[\"httpstatus\",{\"1\":{\"360\":1}}],[\"httpserverdevicegateway\",{\"1\":{\"1359\":1}}],[\"httpserveroperations\",{\"1\":{\"509\":2}}],[\"httpserverstate\",{\"1\":{\"509\":1}}],[\"httpserverhandle\",{\"1\":{\"509\":1}}],[\"httpserver\",{\"0\":{\"509\":1}}],[\"httpservletbean\",{\"0\":{\"410\":1},\"1\":{\"410\":1}}],[\"httpservlet\",{\"0\":{\"409\":1},\"1\":{\"652\":1}}],[\"httpservletresponse\",{\"1\":{\"345\":5,\"346\":1,\"652\":2,\"1259\":1,\"1525\":1}}],[\"httpservletrequest的startasync启动异步处理\",{\"1\":{\"695\":1}}],[\"httpservletrequestwrapper\",{\"1\":{\"678\":1}}],[\"httpservletrequest\",{\"0\":{\"354\":1},\"1\":{\"345\":5,\"346\":1,\"354\":5,\"421\":2,\"652\":2,\"1259\":3,\"1525\":1,\"1526\":1}}],[\"httpsessionid\",{\"1\":{\"1421\":1}}],[\"httpsession接口\",{\"1\":{\"652\":1}}],[\"httpsession\",{\"1\":{\"346\":1,\"652\":1}}],[\"httpsessionrequestcache\",{\"1\":{\"327\":1,\"348\":2}}],[\"httpsessionsecuritycontextrepository\",{\"1\":{\"327\":1,\"348\":2}}],[\"httpsecurity的init方法\",{\"1\":{\"334\":1}}],[\"httpsecurity的认证管理器构造器\",{\"1\":{\"330\":1}}],[\"httpsecurityconfiguration\",{\"0\":{\"330\":1},\"1\":{\"330\":1}}],[\"httpsecurity\",{\"0\":{\"333\":1},\"1\":{\"326\":2,\"330\":5,\"333\":1,\"334\":1,\"341\":1,\"348\":1,\"467\":5,\"1031\":4}}],[\"httpsredirectionmiddleware的invoke方法\",{\"1\":{\"109\":1}}],[\"https\",{\"1\":{\"29\":1,\"86\":1,\"399\":1,\"642\":2,\"934\":2,\"1092\":1,\"1096\":4,\"1118\":2,\"1130\":2,\"1201\":1,\"1210\":1,\"1215\":2,\"1374\":2,\"1445\":4,\"1455\":1,\"1458\":1,\"1646\":1}}],[\"htm\",{\"1\":{\"36\":1,\"1210\":2}}],[\"html5\",{\"1\":{\"1425\":1}}],[\"html>\",{\"1\":{\"1407\":2}}],[\"html声明\",{\"1\":{\"981\":1}}],[\"html加载到浏览器会转变为一个文档对象模型dom来渲染\",{\"1\":{\"970\":1}}],[\"html\",{\"0\":{\"939\":1},\"1\":{\"36\":3,\"652\":1,\"935\":1,\"971\":1,\"989\":1,\"1210\":7,\"1211\":4,\"1407\":1,\"1514\":2}}],[\"凭证后\",{\"0\":{\"26\":1}}],[\"不通用\",{\"1\":{\"1500\":1}}],[\"不通过索引条件检索数据\",{\"1\":{\"219\":1}}],[\"不断发送请求到服务器\",{\"1\":{\"1434\":1}}],[\"不必添加空格\",{\"1\":{\"1225\":2}}],[\"不为null\",{\"1\":{\"1452\":2}}],[\"不为空返回\",{\"1\":{\"1222\":1,\"1227\":1}}],[\"不为0返回\",{\"1\":{\"1222\":1}}],[\"不相等返回\",{\"1\":{\"1222\":2}}],[\"不保存退出\",{\"1\":{\"1187\":1}}],[\"不设密码登录\",{\"1\":{\"1141\":1}}],[\"不挂载就需安装docker\",{\"1\":{\"1128\":1}}],[\"不仅如此\",{\"1\":{\"1117\":1}}],[\"不参与打包\",{\"1\":{\"1074\":1}}],[\"不传递\",{\"1\":{\"1074\":1}}],[\"不包括数据\",{\"1\":{\"1056\":1}}],[\"不包含事务\",{\"1\":{\"801\":2}}],[\"不管事务是否提交成功\",{\"1\":{\"1052\":1}}],[\"不再会声明一个全局变量\",{\"1\":{\"992\":1}}],[\"不再有效\",{\"1\":{\"264\":1}}],[\"不允许再去修改它的值了\",{\"1\":{\"991\":1}}],[\"不允许区间\",{\"1\":{\"656\":1}}],[\"不推荐\",{\"1\":{\"902\":1,\"1222\":1}}],[\"不进行分词索引\",{\"1\":{\"773\":1}}],[\"不进行拦截的地址\",{\"1\":{\"471\":1}}],[\"不分词存储\",{\"1\":{\"762\":1}}],[\"不适用\",{\"1\":{\"722\":1}}],[\"不支持聚合和排序操作\",{\"1\":{\"749\":1}}],[\"不支持传参\",{\"1\":{\"658\":1}}],[\"不支持隐式转换类型\",{\"1\":{\"156\":1}}],[\"不丢失日志\",{\"1\":{\"596\":2}}],[\"不记录\",{\"1\":{\"596\":2}}],[\"不匹配时的操作\",{\"1\":{\"596\":2}}],[\"不用一直等待数据的返回\",{\"1\":{\"500\":1}}],[\"不用显式开启spring\",{\"1\":{\"415\":1}}],[\"不有指定name\",{\"1\":{\"377\":1}}],[\"不存在的情况下设置hash的field为value\",{\"1\":{\"909\":1}}],[\"不存在则创建\",{\"1\":{\"801\":1}}],[\"不存在插入后\",{\"1\":{\"758\":1}}],[\"不存在使用upsert要更新字段插入\",{\"1\":{\"758\":1}}],[\"不存在使用要更新字段插入\",{\"1\":{\"758\":1}}],[\"不存在\",{\"1\":{\"312\":1,\"1319\":1}}],[\"不稳定排序\",{\"1\":{\"307\":1}}],[\"不是开源项目\",{\"1\":{\"1454\":1}}],[\"不是所有特征都能拥有特征对象\",{\"1\":{\"298\":1}}],[\"不是\",{\"1\":{\"295\":1}}],[\"不想列出其它的\",{\"1\":{\"282\":1}}],[\"不可横向展示列表数据\",{\"1\":{\"1456\":1}}],[\"不可变基础设施和声明式\",{\"1\":{\"1234\":1}}],[\"不可变借用\",{\"1\":{\"279\":1,\"318\":1}}],[\"不可被修改\",{\"1\":{\"1219\":1}}],[\"不可达并不是真正死亡\",{\"1\":{\"243\":1}}],[\"不过还是有数据不一致\",{\"1\":{\"668\":1}}],[\"不过这么做\",{\"1\":{\"273\":1}}],[\"不过需要注意的是\",{\"1\":{\"270\":1}}],[\"不过由于缓冲区的大小是有限的\",{\"1\":{\"190\":1}}],[\"不同点\",{\"1\":{\"1220\":1}}],[\"不同网络间容器通信\",{\"0\":{\"1089\":1}}],[\"不同环境profile的唯一id\",{\"1\":{\"1078\":1}}],[\"不同的配置会进行互补操作\",{\"1\":{\"593\":1}}],[\"不同配置相互互补\",{\"1\":{\"593\":1}}],[\"不同于jsp\",{\"1\":{\"980\":1}}],[\"不同于函数的是\",{\"1\":{\"315\":1}}],[\"不同于其他语言\",{\"1\":{\"267\":1}}],[\"不同模块之间的包名需要相同\",{\"1\":{\"20\":1}}],[\"不同模块之间的service注入的注意事项\",{\"0\":{\"20\":1}}],[\"不会继承上一个阶段的环境变量\",{\"1\":{\"1103\":1}}],[\"不会分词建立索引\",{\"1\":{\"749\":1}}],[\"不会记录上一次请求记录\",{\"1\":{\"652\":1}}],[\"不会再出现切换失败了\",{\"1\":{\"632\":1}}],[\"不会回收\",{\"1\":{\"243\":1}}],[\"不会报错\",{\"1\":{\"239\":2}}],[\"不会重新对\",{\"1\":{\"131\":1}}],[\"不影响\",{\"1\":{\"208\":1}}],[\"不需要直接指定\",{\"1\":{\"1026\":1}}],[\"不需要对捕获变量进行改变的闭包自动实现了\",{\"1\":{\"319\":1}}],[\"不需要拷贝上下文\",{\"1\":{\"179\":1}}],[\"不需要显示声明类型\",{\"1\":{\"124\":1}}],[\"不需要重新声明\",{\"1\":{\"123\":1}}],[\"不一定要将文件名与包名定成同一个\",{\"1\":{\"117\":1}}],[\"不能使用共享订阅订阅所有属性值设置\",{\"1\":{\"1489\":1}}],[\"不能使用原始的上下文\",{\"1\":{\"179\":1}}],[\"不能直接接入物联网平台的设备\",{\"1\":{\"1269\":1}}],[\"不能避免幻读\",{\"1\":{\"1050\":1}}],[\"不能有阻塞操作\",{\"1\":{\"500\":1}}],[\"不能有多个package\",{\"1\":{\"170\":1}}],[\"不能有传入参数和返回值\",{\"1\":{\"137\":1}}],[\"不能用\",{\"1\":{\"291\":1}}],[\"不能用来存放键值对\",{\"1\":{\"154\":1}}],[\"不能用父类实例或父类引用\",{\"1\":{\"24\":1}}],[\"不能被其他函数调用\",{\"1\":{\"137\":1}}],[\"不能在单独的行上\",{\"1\":{\"116\":1}}],[\"不能单独放在一行\",{\"1\":{\"116\":1}}],[\"修饰的\",{\"1\":{\"160\":1}}],[\"修饰的函数\",{\"1\":{\"160\":1}}],[\"修饰的方法和属性只能在包内或包外子类内部可见\",{\"1\":{\"24\":1}}],[\"修改字典子项列表\",{\"1\":{\"1621\":1}}],[\"修改平台角色信息\",{\"1\":{\"1586\":1}}],[\"修改平台密码\",{\"0\":{\"1575\":1},\"1\":{\"1568\":1}}],[\"修改当前租户\",{\"1\":{\"1586\":1}}],[\"修改租户默认用户密码\",{\"1\":{\"1586\":1}}],[\"修改租户默认密码\",{\"0\":{\"1544\":1}}],[\"修改租户信息\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"修改菜单\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"修改个人基本信息\",{\"0\":{\"1554\":1}}],[\"修改用户状态\",{\"0\":{\"1552\":1},\"1\":{\"1586\":1}}],[\"修改用户基本信息\",{\"0\":{\"1549\":1},\"1\":{\"1586\":1}}],[\"修改密码\",{\"0\":{\"1553\":1},\"1\":{\"1546\":1,\"1586\":1}}],[\"修改数据\",{\"1\":{\"1246\":1}}],[\"修改文件位置\",{\"1\":{\"1129\":1}}],[\"修改文件权限\",{\"1\":{\"27\":1}}],[\"修改时间\",{\"1\":{\"1042\":1}}],[\"修改人\",{\"1\":{\"1042\":1}}],[\"修改查询限制\",{\"0\":{\"777\":1}}],[\"修改后的值\",{\"1\":{\"760\":1}}],[\"修改依赖包地址\",{\"1\":{\"173\":1}}],[\"修改配置\",{\"1\":{\"86\":1}}],[\"修改\",{\"0\":{\"1540\":1,\"1560\":1,\"1571\":1,\"1580\":1,\"1591\":1,\"1602\":1,\"1612\":1},\"1\":{\"36\":1}}],[\"修改域名映射\",{\"0\":{\"30\":1}}],[\"修改jvm空间分配\",{\"1\":{\"22\":1}}],[\"修改系统最大进程数\",{\"1\":{\"5\":1,\"17\":1}}],[\"可同时更新\",{\"1\":{\"1644\":1}}],[\"可新增\",{\"1\":{\"1644\":1}}],[\"可导入\",{\"1\":{\"1644\":1}}],[\"可为每个平台创建平台所需的菜单\",{\"1\":{\"1503\":1}}],[\"可包含前面7种类型\",{\"1\":{\"1486\":4}}],[\"可包含pem格式的证书或私钥或完整信息\",{\"1\":{\"627\":1}}],[\"可在新增空调运行信息\",{\"1\":{\"1477\":1}}],[\"可在yml文件配置新的镜像\",{\"1\":{\"1128\":1}}],[\"可操作性强\",{\"1\":{\"1459\":1}}],[\"可控制写出的消息数\",{\"1\":{\"1401\":1}}],[\"可直接以照明区域为基准\",{\"1\":{\"1477\":1}}],[\"可直接接入物联网平台的设备\",{\"1\":{\"1269\":1}}],[\"可直接使用docker\",{\"1\":{\"1128\":1}}],[\"可自动下载gradle\",{\"1\":{\"1130\":1}}],[\"可通过用户访问的路径进行鉴权\",{\"1\":{\"1503\":1}}],[\"可通过挂载宿主机maven或gradle的目录到jenkins\",{\"1\":{\"1130\":1}}],[\"可通过命令docker\",{\"1\":{\"1093\":1}}],[\"可连接外部网络容器\",{\"1\":{\"1122\":1}}],[\"可追加命令\",{\"1\":{\"1114\":1}}],[\"可被替代\",{\"1\":{\"1113\":1}}],[\"可被浏览器直接打开\",{\"1\":{\"980\":1}}],[\"可执行jar包\",{\"1\":{\"1066\":1}}],[\"可重复读\",{\"1\":{\"1044\":1}}],[\"可是此全局变量的类型却没有相应的更新过来\",{\"1\":{\"993\":1}}],[\"可是这样操作会造成controller层代码混乱的结果\",{\"1\":{\"632\":1}}],[\"可跨端的ui框架\",{\"1\":{\"926\":1}}],[\"可能连接上\",{\"1\":{\"1398\":1}}],[\"可能生成多张拣货单\",{\"1\":{\"911\":1}}],[\"可能会失效\",{\"1\":{\"998\":1}}],[\"可能会影响其他业务数据的准确性\",{\"1\":{\"902\":1}}],[\"可能会发生所有权的转移\",{\"1\":{\"311\":1}}],[\"可能性不大\",{\"1\":{\"846\":1}}],[\"可采用如rocketmq的方式进行消费\",{\"1\":{\"808\":1}}],[\"可设置结果维持的查询时间\",{\"1\":{\"780\":1}}],[\"可进行分片存储数据\",{\"1\":{\"748\":1}}],[\"可配置设备接入网关\",{\"1\":{\"1269\":1}}],[\"可配置多数据源\",{\"1\":{\"897\":1}}],[\"可配置多个host\",{\"1\":{\"678\":1}}],[\"可配置是否启用\",{\"1\":{\"893\":1}}],[\"可配置其他文件夹\",{\"1\":{\"678\":1}}],[\"可配置定时时间的定时任务\",{\"1\":{\"657\":1}}],[\"可配置\",{\"1\":{\"657\":1}}],[\"可顺序获取对应元素\",{\"1\":{\"649\":1}}],[\"可使用关联保证数据与接口管理最新\",{\"1\":{\"1644\":1}}],[\"可使用localhost进行通信\",{\"1\":{\"1174\":1}}],[\"可使用\",{\"1\":{\"1130\":1}}],[\"可使用下述命令构建\",{\"1\":{\"1073\":1}}],[\"可使用redis\",{\"1\":{\"327\":1}}],[\"可使用gin\",{\"1\":{\"176\":1}}],[\"可变借用\",{\"1\":{\"279\":1,\"318\":1}}],[\"可变所有权\",{\"1\":{\"265\":1}}],[\"可作为gc\",{\"1\":{\"243\":1}}],[\"可用作单例对象\",{\"1\":{\"1256\":1}}],[\"可用量减少\",{\"1\":{\"1252\":1}}],[\"可用在方法上\",{\"1\":{\"372\":1}}],[\"可用库存+锁定库存+差异数量+冻结数量+入库缓存+出库缓存+返库数量+补货锁定数量\",{\"1\":{\"236\":1}}],[\"可用库存\",{\"1\":{\"236\":1}}],[\"可用性\",{\"1\":{\"212\":1}}],[\"可分为强一致性和弱一致性\",{\"1\":{\"212\":1}}],[\"可分为浅克隆和深克隆\",{\"1\":{\"200\":1}}],[\"可达性分析算法\",{\"1\":{\"201\":1,\"243\":2}}],[\"可类比java中的类概念\",{\"1\":{\"147\":1}}],[\"可理解为\",{\"1\":{\"129\":1}}],[\"可选\",{\"1\":{\"103\":2,\"131\":1,\"1171\":2}}],[\"可取到路径后\",{\"1\":{\"46\":1}}],[\"可见性\",{\"0\":{\"24\":1}}],[\"可以理解为消息的内容\",{\"1\":{\"1271\":1}}],[\"可以理解为消息的类型\",{\"1\":{\"1271\":1}}],[\"可以绑定网关子设备\",{\"1\":{\"1269\":1}}],[\"可以和请求经过过滤器到达dispatchservlet类比\",{\"1\":{\"1262\":1}}],[\"可以将tableobjectresponse合并到objectresponse中定义内部tabledata类\",{\"1\":{\"1244\":1}}],[\"可以尝试添加日志\",{\"1\":{\"1229\":1}}],[\"可以是物理磁盘\",{\"1\":{\"1197\":1}}],[\"可以是tcp或udp\",{\"1\":{\"1171\":1}}],[\"可以选择合适的协议类型\",{\"1\":{\"1171\":1}}],[\"可以更好地理解和维护service配置\",{\"1\":{\"1171\":1}}],[\"可以创建多个相同配置的副本\",{\"1\":{\"1161\":1}}],[\"可以根据需要进行水平伸缩\",{\"1\":{\"1161\":1}}],[\"可以根据jdk环境\",{\"1\":{\"1079\":1}}],[\"可以确保pod中的容器能够可靠地被其他容器或服务访问\",{\"1\":{\"1161\":1}}],[\"可以跨cpu架构编译镜像\",{\"1\":{\"1093\":1}}],[\"可以改变另一个原有模块的结构\",{\"1\":{\"994\":1}}],[\"可以导出一个默认值\",{\"1\":{\"992\":1}}],[\"可以帮助我们拼接上web应用访问的全路径\",{\"1\":{\"982\":1}}],[\"可以翻译为\",{\"1\":{\"789\":1}}],[\"可以保持搜索的上下文环境的时间\",{\"1\":{\"780\":1}}],[\"可以通过运行kubectl\",{\"1\":{\"1159\":1}}],[\"可以通过git\",{\"1\":{\"1150\":1}}],[\"可以通过将store实例放入vue根实例的方式将状态实例注入到每一个组件\",{\"1\":{\"998\":1}}],[\"可以通过在aggs中对嵌套聚合的结果进行排序\",{\"1\":{\"771\":1}}],[\"可以通过设置env指令来定义环境变量\",{\"1\":{\"1103\":1}}],[\"可以通过设置\",{\"1\":{\"749\":1}}],[\"可以有多个connector处理不同协议的请求\",{\"1\":{\"678\":1}}],[\"可以包含多个service\",{\"1\":{\"678\":1}}],[\"可以看出\",{\"1\":{\"668\":1}}],[\"可以一组合使用\",{\"1\":{\"656\":1}}],[\"可以写多个\",{\"1\":{\"643\":1}}],[\"可以进⼊⽣产阶段\",{\"1\":{\"562\":1}}],[\"可以接受请求参数\",{\"1\":{\"377\":1}}],[\"可以这么写\",{\"1\":{\"376\":1}}],[\"可以自动检测集群中是否存在topic\",{\"1\":{\"801\":1}}],[\"可以自动推断\",{\"1\":{\"181\":1}}],[\"可以自定义客户端消息的业务处理逻辑\",{\"1\":{\"1450\":1}}],[\"可以自定义是否装饰响应结果\",{\"1\":{\"423\":1}}],[\"可以自定义userinfoservice接口和实现jpauserinfoservice\",{\"1\":{\"349\":1}}],[\"可以配置目标\",{\"1\":{\"658\":1}}],[\"可以配置使用jdbc方式\",{\"1\":{\"343\":1}}],[\"可以配置拦截器向请求头添加信息\",{\"1\":{\"213\":1}}],[\"可以设置认证入口点即认证失败时的处理逻辑\",{\"1\":{\"337\":1}}],[\"可以在跨多节点同时编译镜像\",{\"1\":{\"1093\":1}}],[\"可以在函数调用时隐式地被转换为特征对象\",{\"1\":{\"298\":1}}],[\"可以在启动类注解\",{\"1\":{\"20\":1}}],[\"可以被隐式转换成函数参数签名中的\",{\"1\":{\"298\":1}}],[\"可以被用作枚举值\",{\"1\":{\"129\":1}}],[\"可以拥有\",{\"1\":{\"282\":1}}],[\"可以单独使用\",{\"1\":{\"280\":1}}],[\"可以直接默认导出\",{\"1\":{\"992\":1}}],[\"可以直接在赋值时进行\",{\"1\":{\"266\":1}}],[\"可以直接从代码初始化\",{\"1\":{\"159\":1}}],[\"可以当作参数传递的函数\",{\"1\":{\"246\":1}}],[\"可以采用数据字典的方式\",{\"1\":{\"207\":1}}],[\"可以等待接收端去获取数据\",{\"1\":{\"190\":1}}],[\"可以执行\",{\"1\":{\"188\":1}}],[\"可以马上中止当前函数的执行\",{\"1\":{\"159\":1}}],[\"可以测量切片最长可以达到多少\",{\"1\":{\"152\":1}}],[\"可以简写为如下形式\",{\"1\":{\"129\":1}}],[\"可以认为是一个可以被编译器修改的常量\",{\"1\":{\"129\":1}}],[\"可以高效地创建一个新的变量\",{\"1\":{\"126\":1}}],[\"可以使用串口线或者网线链接两端设备\",{\"1\":{\"1276\":1}}],[\"可以使用工具类进行树的构造\",{\"1\":{\"1036\":1}}],[\"可以使用花括号\",{\"1\":{\"968\":1}}],[\"可以使用具体名称形式的占位符\",{\"1\":{\"899\":1}}],[\"可以使用fun转换为t结果\",{\"1\":{\"780\":1}}],[\"可以使用bool查询来组合多个查询条件\",{\"1\":{\"767\":1}}],[\"可以使用match\",{\"1\":{\"763\":1}}],[\"可以使用microsoft\",{\"1\":{\"39\":1}}],[\"可以使用多次关联\",{\"1\":{\"716\":1}}],[\"可以使用内建函数\",{\"1\":{\"154\":1}}],[\"可以使用\",{\"1\":{\"12\":1,\"140\":1,\"159\":1,\"282\":1,\"308\":1,\"1222\":1}}],[\"icon\",{\"1\":{\"1582\":4,\"1583\":5,\"1607\":2}}],[\"iconfiguration\",{\"1\":{\"106\":1}}],[\"ibatis\",{\"1\":{\"1515\":1}}],[\"ie=edge\",{\"1\":{\"1407\":1}}],[\"iexceptionfilter\",{\"1\":{\"111\":1}}],[\"ix\",{\"1\":{\"1048\":1}}],[\"i<thread\",{\"1\":{\"647\":3}}],[\"i=0\",{\"1\":{\"647\":3}}],[\"illegalargumentexception\",{\"1\":{\"345\":1}}],[\"illegalstateexception\",{\"1\":{\"329\":1,\"397\":1}}],[\"ignoring\",{\"1\":{\"326\":1}}],[\"ignoringcustomizer\",{\"1\":{\"326\":1}}],[\"ignoreresourcetype\",{\"1\":{\"441\":1}}],[\"ignoreurlproperties\",{\"1\":{\"422\":3,\"467\":3,\"1031\":3}}],[\"ignore2\",{\"1\":{\"326\":1}}],[\"ignore1\",{\"1\":{\"326\":1}}],[\"ignored\",{\"1\":{\"282\":1,\"902\":2,\"1445\":2}}],[\"ignore\",{\"1\":{\"31\":1,\"749\":1,\"773\":1,\"1445\":1,\"1513\":1}}],[\"i|\",{\"1\":{\"277\":1}}],[\"i32>\",{\"1\":{\"311\":2}}],[\"i32\",{\"1\":{\"275\":5,\"277\":3,\"282\":2,\"292\":5,\"296\":7,\"297\":2,\"304\":1,\"311\":2}}],[\"itd\",{\"1\":{\"1200\":1}}],[\"iterator<map\",{\"1\":{\"1032\":1}}],[\"iterator<string>\",{\"1\":{\"602\":1,\"1013\":1}}],[\"iterator<uri>\",{\"1\":{\"471\":1}}],[\"iterator\",{\"1\":{\"471\":4,\"602\":5,\"1013\":1,\"1032\":4}}],[\"iterate\",{\"1\":{\"438\":1}}],[\"iter\",{\"1\":{\"277\":1,\"279\":5,\"309\":1}}],[\"itemdict\",{\"1\":{\"1586\":4,\"1592\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1631\":1}}],[\"itemn\",{\"1\":{\"1226\":1}}],[\"item2\",{\"1\":{\"1226\":1}}],[\"item1\",{\"1\":{\"1226\":1}}],[\"itemstockvo\",{\"1\":{\"236\":23}}],[\"itemstockvolist\",{\"1\":{\"236\":3}}],[\"itemstocklist\",{\"1\":{\"236\":2}}],[\"itemstockbiz\",{\"1\":{\"236\":9}}],[\"itemid\",{\"1\":{\"236\":1}}],[\"item\",{\"1\":{\"236\":17,\"279\":6,\"297\":6,\"672\":12,\"786\":4,\"991\":1,\"1059\":1,\"1243\":6,\"1249\":3,\"1486\":4}}],[\"it\",{\"1\":{\"249\":2,\"250\":1,\"329\":1,\"345\":1,\"399\":1,\"411\":2,\"438\":1,\"439\":1,\"1013\":4,\"1087\":1,\"1127\":1,\"1128\":1,\"1136\":1,\"1159\":1,\"1230\":1,\"1445\":1}}],[\"its\",{\"1\":{\"249\":4,\"974\":1,\"1445\":2}}],[\"italy\",{\"1\":{\"154\":1}}],[\"imageuri\",{\"1\":{\"1572\":1,\"1574\":1}}],[\"image\",{\"1\":{\"1097\":1,\"1120\":2,\"1122\":1,\"1133\":3,\"1139\":4,\"1475\":1}}],[\"images\",{\"1\":{\"218\":1,\"982\":2,\"1087\":2}}],[\"immediate是消费完一个消息就提交\",{\"1\":{\"798\":1}}],[\"immediate的区别\",{\"1\":{\"798\":1}}],[\"immediate\",{\"1\":{\"798\":1,\"1445\":2}}],[\"img\",{\"1\":{\"594\":1}}],[\"implicit\",{\"1\":{\"723\":1}}],[\"implementations\",{\"1\":{\"647\":1}}],[\"implementation\",{\"1\":{\"585\":6,\"647\":1,\"648\":1,\"707\":6,\"1074\":1,\"1445\":4}}],[\"implement\",{\"1\":{\"399\":6,\"647\":1}}],[\"implements实现databaseoperator\",{\"1\":{\"1301\":1}}],[\"implements\",{\"1\":{\"210\":1,\"236\":1,\"252\":1,\"329\":1,\"397\":1,\"413\":1,\"421\":2,\"422\":1,\"471\":1,\"509\":1,\"513\":1,\"557\":1,\"594\":1,\"652\":1,\"657\":1,\"852\":1,\"853\":1,\"858\":1,\"900\":2,\"1032\":1,\"1256\":1,\"1345\":1,\"1455\":1,\"1517\":1,\"1519\":2,\"1521\":1,\"1522\":1,\"1523\":1,\"1525\":1}}],[\"impl<t>\",{\"1\":{\"295\":1}}],[\"impl\",{\"1\":{\"272\":1,\"288\":1,\"290\":1,\"291\":3,\"292\":1,\"295\":1,\"297\":6,\"298\":3,\"1515\":1}}],[\"implmethodname\",{\"1\":{\"252\":2}}],[\"importkeystore\",{\"1\":{\"623\":3}}],[\"importpass\",{\"1\":{\"623\":1}}],[\"importcert\",{\"1\":{\"623\":1}}],[\"importcandidates\",{\"1\":{\"494\":1}}],[\"importapi\",{\"1\":{\"1592\":1,\"1596\":1}}],[\"importautoconfigurantionimportselector\",{\"1\":{\"493\":1}}],[\"importaware\",{\"1\":{\"329\":1}}],[\"importresource\",{\"1\":{\"488\":1}}],[\"importselector\",{\"0\":{\"493\":1},\"1\":{\"489\":1}}],[\"imports\",{\"1\":{\"481\":1,\"494\":1}}],[\"importbeannamegenerator\",{\"1\":{\"480\":1}}],[\"importbeandefinitionregistrar\",{\"1\":{\"480\":2,\"489\":1}}],[\"importingclassmetadata\",{\"1\":{\"480\":2}}],[\"import导入按照module导入\",{\"1\":{\"171\":1}}],[\"import引入需起别名\",{\"1\":{\"170\":1}}],[\"import\",{\"0\":{\"365\":1,\"371\":1},\"1\":{\"116\":1,\"117\":1,\"122\":1,\"127\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"139\":3,\"140\":2,\"141\":1,\"143\":1,\"145\":1,\"146\":1,\"148\":1,\"151\":1,\"152\":2,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"189\":1,\"190\":2,\"241\":3,\"480\":1,\"488\":3,\"490\":1,\"491\":1,\"646\":1,\"647\":6,\"648\":4,\"780\":20,\"792\":26,\"858\":1,\"973\":2,\"992\":13,\"993\":1,\"994\":6,\"995\":7,\"1584\":1}}],[\"i+1\",{\"1\":{\"647\":1}}],[\"i+=1\",{\"1\":{\"139\":1}}],[\"i++\",{\"1\":{\"138\":1,\"140\":1,\"145\":2,\"155\":1,\"189\":1,\"190\":1,\"234\":1,\"647\":3,\"649\":1}}],[\"iresultfilter\",{\"1\":{\"111\":1}}],[\"iris\",{\"0\":{\"182\":1},\"1\":{\"67\":1}}],[\"iat\",{\"1\":{\"1532\":2}}],[\"iactionfilter\",{\"1\":{\"111\":1}}],[\"iauthorizationfilter\",{\"1\":{\"111\":1}}],[\"ion\",{\"1\":{\"1583\":5}}],[\"iostarttime\",{\"1\":{\"1445\":2}}],[\"iosessionimpl\",{\"1\":{\"1382\":1}}],[\"ioratio\",{\"1\":{\"1445\":5}}],[\"ioreactor\",{\"1\":{\"1382\":1}}],[\"io事件\",{\"1\":{\"1440\":1}}],[\"io通信模型\",{\"0\":{\"1439\":1}}],[\"io流\",{\"0\":{\"1436\":1}}],[\"ioexception\",{\"1\":{\"345\":2,\"346\":1,\"421\":2,\"652\":3,\"852\":1,\"1032\":1,\"1257\":1,\"1445\":2}}],[\"io\",{\"1\":{\"241\":2,\"642\":1,\"647\":4,\"652\":1,\"1131\":1,\"1445\":2,\"1450\":1}}],[\"ioptions<configtest>\",{\"1\":{\"106\":1}}],[\"iotime\",{\"1\":{\"1445\":2}}],[\"iottopic\",{\"1\":{\"649\":1}}],[\"iota\",{\"0\":{\"129\":1},\"1\":{\"129\":16}}],[\"iot\",{\"0\":{\"1268\":1,\"1676\":1},\"1\":{\"102\":1,\"103\":1,\"792\":11,\"924\":1}}],[\"i\",{\"1\":{\"59\":1,\"129\":2,\"133\":4,\"138\":3,\"139\":5,\"140\":5,\"145\":9,\"155\":4,\"157\":8,\"189\":2,\"190\":4,\"234\":3,\"236\":5,\"277\":2,\"279\":2,\"306\":4,\"535\":1,\"556\":1,\"647\":10,\"649\":4,\"1183\":2,\"1215\":1}}],[\"if=\",{\"1\":{\"982\":1}}],[\"ifcfg\",{\"1\":{\"1198\":1}}],[\"ifconfig\",{\"1\":{\"1185\":1}}],[\"ifc\",{\"1\":{\"435\":2}}],[\"if\",{\"0\":{\"283\":1},\"1\":{\"51\":1,\"131\":3,\"135\":1,\"139\":1,\"152\":1,\"154\":1,\"155\":1,\"158\":3,\"234\":3,\"236\":9,\"249\":4,\"250\":3,\"252\":1,\"255\":2,\"256\":1,\"280\":1,\"283\":2,\"284\":1,\"285\":1,\"297\":1,\"329\":4,\"331\":3,\"345\":14,\"346\":5,\"353\":1,\"357\":3,\"358\":5,\"359\":5,\"383\":5,\"386\":2,\"397\":3,\"399\":9,\"403\":2,\"406\":1,\"410\":2,\"411\":15,\"413\":4,\"422\":2,\"430\":2,\"433\":2,\"434\":5,\"435\":7,\"438\":8,\"439\":1,\"441\":1,\"446\":2,\"450\":1,\"456\":2,\"471\":3,\"473\":1,\"490\":1,\"494\":1,\"505\":1,\"509\":3,\"513\":2,\"535\":3,\"537\":1,\"556\":5,\"557\":2,\"602\":3,\"647\":1,\"649\":18,\"672\":13,\"780\":4,\"786\":7,\"833\":2,\"852\":42,\"853\":1,\"869\":1,\"900\":2,\"910\":1,\"911\":5,\"914\":8,\"977\":1,\"982\":2,\"988\":2,\"1002\":1,\"1013\":1,\"1032\":6,\"1036\":7,\"1226\":1,\"1246\":2,\"1251\":1,\"1256\":2,\"1259\":13,\"1345\":4,\"1353\":1,\"1383\":8,\"1407\":2,\"1412\":1,\"1414\":1,\"1419\":1,\"1445\":35,\"1450\":2,\"1518\":3,\"1521\":3,\"1522\":3,\"1523\":1,\"1525\":1}}],[\"idlist\",{\"1\":{\"1596\":1}}],[\"idle\",{\"1\":{\"850\":1,\"1515\":3}}],[\"idle=5\",{\"1\":{\"850\":1}}],[\"idcard\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1554\":1}}],[\"id列表\",{\"1\":{\"1543\":1,\"1563\":1,\"1594\":1,\"1605\":1,\"1615\":1,\"1624\":1,\"1630\":1,\"1631\":1,\"1637\":1}}],[\"idp和sp通过用户的浏览器的重定向访问来实现交换数据\",{\"1\":{\"1491\":1}}],[\"idp\",{\"1\":{\"1491\":1}}],[\"id`\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":3,\"1468\":1}}],[\"id标识\",{\"1\":{\"1452\":1}}],[\"id区分权限是可下发的还是租户所属角色权限还是租户模板权限\",{\"1\":{\"1452\":1}}],[\"idx\",{\"1\":{\"1059\":1,\"1066\":1}}],[\"idtreemap\",{\"1\":{\"1036\":3}}],[\"idmap\",{\"1\":{\"672\":2}}],[\"ids\",{\"1\":{\"672\":2,\"1543\":1,\"1563\":1,\"1594\":1,\"1605\":1,\"1615\":1,\"1624\":1,\"1630\":1,\"1631\":1,\"1637\":1}}],[\"id=客户端id\",{\"1\":{\"1506\":1}}],[\"id=techsel\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"id=\",{\"1\":{\"479\":7,\"480\":1,\"1059\":3,\"1407\":1}}],[\"idg\",{\"1\":{\"218\":1,\"1123\":1}}],[\"idextra\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1}}],[\"ide自动提示mapper为原值\",{\"1\":{\"852\":1}}],[\"identification`\",{\"1\":{\"1465\":1,\"1466\":1}}],[\"identified\",{\"1\":{\"1141\":3}}],[\"identifier\",{\"1\":{\"128\":1,\"152\":1,\"345\":1,\"1480\":2,\"1486\":6}}],[\"identity=mysql\",{\"1\":{\"852\":1}}],[\"identitylink\",{\"1\":{\"580\":1,\"582\":1,\"704\":1}}],[\"identity\",{\"1\":{\"103\":1,\"249\":1,\"1345\":1}}],[\"identityfile\",{\"1\":{\"32\":1}}],[\"idea自动执行git\",{\"1\":{\"1147\":1}}],[\"idea测试类运行失败\",{\"1\":{\"256\":1}}],[\"idea\",{\"1\":{\"86\":1}}],[\"idea乱码问题\",{\"0\":{\"55\":1}}],[\"id>\",{\"1\":{\"49\":3,\"103\":1,\"621\":1,\"1078\":3,\"1079\":1,\"1202\":7,\"1203\":2}}],[\"id\",{\"1\":{\"32\":1,\"148\":2,\"151\":5,\"218\":2,\"241\":4,\"256\":1,\"345\":1,\"348\":2,\"411\":2,\"602\":6,\"658\":7,\"716\":15,\"760\":1,\"762\":1,\"767\":1,\"780\":5,\"801\":2,\"802\":2,\"804\":3,\"924\":1,\"975\":3,\"982\":1,\"989\":1,\"1013\":4,\"1034\":2,\"1042\":2,\"1058\":29,\"1121\":1,\"1243\":4,\"1246\":1,\"1248\":1,\"1292\":2,\"1304\":2,\"1312\":1,\"1482\":1,\"1484\":7,\"1491\":2,\"1513\":2,\"1523\":2,\"1525\":2,\"1535\":2,\"1540\":1,\"1541\":2,\"1542\":2,\"1544\":1,\"1551\":2,\"1562\":2,\"1564\":3,\"1565\":2,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":4,\"1575\":1,\"1580\":1,\"1581\":2,\"1582\":4,\"1584\":2,\"1585\":2,\"1586\":54,\"1591\":1,\"1592\":15,\"1593\":2,\"1597\":5,\"1602\":1,\"1603\":3,\"1604\":1,\"1607\":3,\"1612\":1,\"1613\":2,\"1614\":1,\"1617\":1,\"1622\":1,\"1623\":1,\"1628\":2,\"1629\":1,\"1635\":1,\"1636\":1}}],[\"isignoreauth\",{\"1\":{\"1522\":1}}],[\"isinfoenabled\",{\"1\":{\"411\":2,\"900\":1,\"1522\":1}}],[\"isinfrastructureclass\",{\"1\":{\"383\":1,\"434\":1}}],[\"isreadable\",{\"1\":{\"1451\":1}}],[\"isvalid\",{\"1\":{\"1445\":1,\"1480\":1}}],[\"iscompleted\",{\"1\":{\"1383\":1}}],[\"isconcurrenthandlingstarted\",{\"1\":{\"1259\":2}}],[\"isclassreloadable\",{\"1\":{\"386\":1}}],[\"isget\",{\"1\":{\"1259\":3}}],[\"isdirectory\",{\"1\":{\"1032\":3}}],[\"isdebugenabled\",{\"1\":{\"346\":2,\"406\":1,\"411\":1,\"413\":1,\"473\":1,\"509\":1,\"852\":9,\"1445\":2}}],[\"isfinal\",{\"1\":{\"991\":1}}],[\"isfish\",{\"1\":{\"988\":1}}],[\"isfactorybean\",{\"1\":{\"438\":1}}],[\"isunitmode\",{\"1\":{\"914\":2}}],[\"isunitmode=\",{\"1\":{\"914\":1}}],[\"ispushemptyprotect\",{\"1\":{\"872\":1}}],[\"ispreflightrequest\",{\"1\":{\"513\":1}}],[\"isproxyclass\",{\"1\":{\"435\":1}}],[\"isproxytargetclass\",{\"1\":{\"435\":1}}],[\"isloadcacheatstart\",{\"1\":{\"872\":1}}],[\"islazyinit\",{\"1\":{\"438\":1}}],[\"islambdaclass\",{\"1\":{\"435\":1}}],[\"isblank\",{\"1\":{\"786\":1,\"1521\":2}}],[\"isnull\",{\"1\":{\"869\":1}}],[\"isnotblank\",{\"1\":{\"672\":3,\"911\":1}}],[\"isnotempty\",{\"1\":{\"672\":3,\"780\":1,\"786\":2,\"1032\":1,\"1036\":1}}],[\"isnew\",{\"1\":{\"346\":1}}],[\"isapierror\",{\"1\":{\"988\":1}}],[\"isabstract\",{\"1\":{\"438\":1}}],[\"isactive\",{\"1\":{\"411\":1}}],[\"istraceenabled\",{\"1\":{\"438\":1}}],[\"istypematch\",{\"1\":{\"399\":4}}],[\"iseagerinit\",{\"1\":{\"438\":6}}],[\"iserrorenabled\",{\"1\":{\"410\":1,\"1445\":1}}],[\"isempty\",{\"1\":{\"236\":1,\"329\":2,\"345\":2,\"410\":1,\"672\":1,\"786\":1,\"852\":6,\"900\":1,\"1036\":1}}],[\"iss\",{\"1\":{\"1532\":2}}],[\"isshuttingdown\",{\"1\":{\"1445\":1}}],[\"isshutdown\",{\"1\":{\"234\":1,\"1445\":1}}],[\"issqlsessiontransactional\",{\"1\":{\"852\":1}}],[\"issuccess\",{\"1\":{\"1450\":1}}],[\"issucceeded\",{\"1\":{\"780\":1}}],[\"issuedat\",{\"1\":{\"1532\":4}}],[\"issueruri\",{\"1\":{\"1514\":1}}],[\"issue\",{\"1\":{\"852\":1}}],[\"issues\",{\"1\":{\"399\":1,\"1445\":4}}],[\"isstartwith\",{\"1\":{\"471\":1}}],[\"issingleton\",{\"1\":{\"438\":1,\"439\":1,\"480\":1,\"900\":1}}],[\"iswarnenabled\",{\"1\":{\"397\":1,\"1445\":1}}],[\"is\",{\"0\":{\"26\":1,\"34\":1},\"1\":{\"158\":4,\"249\":6,\"250\":2,\"274\":1,\"277\":1,\"280\":1,\"288\":1,\"297\":1,\"345\":1,\"346\":1,\"399\":1,\"411\":3,\"494\":1,\"509\":2,\"648\":3,\"716\":3,\"748\":1,\"782\":1,\"852\":3,\"900\":1,\"970\":1,\"982\":2,\"1048\":1,\"1058\":7,\"1445\":16,\"1451\":1}}],[\"ip协议上传输的轻量级通信协议\",{\"1\":{\"1271\":1}}],[\"iptables\",{\"1\":{\"1174\":1}}],[\"ip=172\",{\"1\":{\"1134\":1}}],[\"ip+端口\",{\"1\":{\"893\":1}}],[\"ip1\",{\"1\":{\"282\":2}}],[\"ipv6init=yes\",{\"1\":{\"1198\":1}}],[\"ipv6\",{\"1\":{\"282\":2,\"1198\":3}}],[\"ipv4\",{\"1\":{\"282\":2,\"1198\":1}}],[\"ipaddr=192\",{\"1\":{\"1198\":1}}],[\"ipaddr\",{\"1\":{\"282\":3}}],[\"iphone\",{\"1\":{\"157\":6}}],[\"ipconfig\",{\"1\":{\"30\":1}}],[\"ip\",{\"0\":{\"1166\":1,\"1185\":1},\"1\":{\"23\":1,\"142\":1,\"143\":6,\"282\":2,\"1170\":2,\"1185\":1,\"1200\":1,\"1202\":3,\"1203\":2,\"1210\":6,\"1211\":1,\"1276\":1}}],[\"ineventloop\",{\"1\":{\"1445\":4}}],[\"inetutils\",{\"1\":{\"1137\":1}}],[\"ini文件中\",{\"1\":{\"1141\":1}}],[\"initmqttclient\",{\"0\":{\"1353\":1},\"1\":{\"1352\":1,\"1353\":1}}],[\"initmethod\",{\"1\":{\"440\":1}}],[\"initmessagesource\",{\"1\":{\"397\":2}}],[\"init配置发布处理器\",{\"1\":{\"1349\":1}}],[\"initdb\",{\"1\":{\"1115\":2}}],[\"initrocketmqpushconsumer初始化\",{\"1\":{\"919\":1}}],[\"initrocketmqpushconsumer\",{\"1\":{\"914\":1}}],[\"initpollingthreadcount\",{\"1\":{\"872\":1}}],[\"initpropertysources\",{\"1\":{\"446\":1}}],[\"initchannel\",{\"1\":{\"1450\":2}}],[\"initclientbeatthreadcount\",{\"1\":{\"872\":1}}],[\"initcachedir\",{\"1\":{\"872\":1}}],[\"initlogname\",{\"1\":{\"872\":1}}],[\"initwebrootcontext\",{\"1\":{\"872\":1}}],[\"initwebapplicationcontext\",{\"1\":{\"411\":2}}],[\"initservice\",{\"1\":{\"1522\":1}}],[\"initservletcontext\",{\"0\":{\"1412\":1},\"1\":{\"1412\":1}}],[\"initservletbean\",{\"1\":{\"410\":1,\"411\":1}}],[\"initserveraddr\",{\"1\":{\"872\":1}}],[\"initserialization\",{\"1\":{\"872\":1}}],[\"initnamespacefornaming\",{\"1\":{\"872\":1}}],[\"initutils\",{\"1\":{\"872\":3}}],[\"initandregister\",{\"1\":{\"1450\":2}}],[\"initassignedpartitions\",{\"1\":{\"814\":1}}],[\"initapplicationeventmulticaster\",{\"1\":{\"397\":2}}],[\"initinternal\",{\"1\":{\"457\":1,\"688\":1}}],[\"initial\",{\"1\":{\"411\":1,\"584\":1,\"706\":1,\"1127\":1,\"1407\":1,\"1515\":1}}],[\"initialization\",{\"1\":{\"397\":1,\"410\":1,\"411\":3,\"438\":2}}],[\"initializingbean\",{\"1\":{\"858\":1}}],[\"initializing\",{\"1\":{\"334\":1,\"411\":2}}],[\"initializers\",{\"1\":{\"450\":2}}],[\"initializebean\",{\"1\":{\"392\":1,\"440\":1}}],[\"initialize\",{\"0\":{\"455\":1},\"1\":{\"108\":1,\"397\":3,\"399\":2,\"438\":1,\"446\":1}}],[\"initframeworkservlet\",{\"1\":{\"411\":1}}],[\"initbeanwrapper\",{\"1\":{\"410\":1}}],[\"initbinder\",{\"0\":{\"379\":1},\"1\":{\"379\":2}}],[\"initbinder注解标注的方法\",{\"1\":{\"375\":1}}],[\"init方法\",{\"0\":{\"1421\":1},\"1\":{\"338\":1}}],[\"init函数不能作为参数传入\",{\"1\":{\"137\":1}}],[\"init\",{\"0\":{\"137\":1},\"1\":{\"133\":2,\"137\":1,\"210\":1,\"334\":4,\"397\":1,\"410\":2,\"421\":2,\"438\":1,\"457\":1,\"652\":4,\"719\":1,\"843\":1,\"872\":1,\"1144\":1,\"1193\":1,\"1194\":3,\"1249\":1,\"1419\":2,\"1450\":2}}],[\"inline=\",{\"1\":{\"943\":1,\"983\":7}}],[\"include\",{\"1\":{\"1210\":2,\"1248\":2,\"1259\":1,\"1514\":1,\"1515\":1}}],[\"includes\",{\"0\":{\"40\":1},\"1\":{\"780\":4,\"782\":1}}],[\"increment=120\",{\"1\":{\"1467\":1}}],[\"increment=160\",{\"1\":{\"1465\":1}}],[\"increment=77\",{\"1\":{\"1466\":1}}],[\"increment=41\",{\"1\":{\"1464\":1}}],[\"increment\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"incrementbytestransferred\",{\"1\":{\"1383\":1}}],[\"incrby\",{\"1\":{\"910\":1}}],[\"incr\",{\"1\":{\"910\":1}}],[\"inusemsgids\",{\"1\":{\"824\":1}}],[\"invalidbearertokenexception\",{\"1\":{\"1521\":3,\"1522\":1}}],[\"invalid\",{\"1\":{\"871\":1}}],[\"invalidate\",{\"1\":{\"652\":1}}],[\"inverter\",{\"1\":{\"758\":2}}],[\"invocation\",{\"1\":{\"911\":4}}],[\"invocationhandler\",{\"1\":{\"852\":1}}],[\"invocations\",{\"1\":{\"399\":1}}],[\"invocable\",{\"1\":{\"647\":3,\"648\":8}}],[\"invocablemethod\",{\"1\":{\"403\":3}}],[\"involving\",{\"1\":{\"399\":1}}],[\"invokepartitionsassigned\",{\"1\":{\"816\":1}}],[\"invokemethod\",{\"1\":{\"648\":1}}],[\"invokefunction\",{\"1\":{\"648\":1}}],[\"invokefunction问题\",{\"0\":{\"16\":1}}],[\"invokehandleraddedifneeded\",{\"1\":{\"1450\":1}}],[\"invokehandler\",{\"1\":{\"513\":1}}],[\"invokehandlermethod\",{\"1\":{\"403\":1}}],[\"invokeinitmethods\",{\"1\":{\"440\":1}}],[\"invokeawaremethods\",{\"1\":{\"440\":1}}],[\"invokeandhandle\",{\"1\":{\"404\":1}}],[\"invokebeandefinitionregistrypostprocessors\",{\"1\":{\"399\":3}}],[\"invokebeanfactorypostprocessors\",{\"0\":{\"399\":1},\"1\":{\"397\":4,\"399\":8,\"482\":1,\"483\":1}}],[\"invoke\",{\"1\":{\"241\":1,\"252\":1,\"397\":1,\"399\":9,\"647\":1,\"852\":2,\"1259\":1}}],[\"injected\",{\"1\":{\"411\":4}}],[\"inner\",{\"1\":{\"413\":2,\"1526\":1}}],[\"innativeimage\",{\"1\":{\"397\":1}}],[\"innodb引擎层\",{\"1\":{\"1052\":1}}],[\"innodb\",{\"1\":{\"717\":3,\"1231\":1}}],[\"innodb的行锁是针对于索引加的锁\",{\"1\":{\"219\":1}}],[\"innodb的数据是基于索引组织的\",{\"1\":{\"219\":1}}],[\"innodb使用\",{\"1\":{\"219\":1}}],[\"innodb在\",{\"1\":{\"219\":1}}],[\"instead\",{\"1\":{\"1259\":1}}],[\"instantiating\",{\"1\":{\"438\":1}}],[\"instantiationaware\",{\"1\":{\"359\":1}}],[\"instantiationawarebeanpostprocessor\",{\"1\":{\"359\":1}}],[\"instantiated\",{\"1\":{\"399\":1}}],[\"instantiate\",{\"1\":{\"397\":1}}],[\"instantiatebean\",{\"1\":{\"357\":1}}],[\"instantiateusingfactorymethod\",{\"1\":{\"357\":1}}],[\"instancemetadataprocessor\",{\"1\":{\"893\":1}}],[\"instances信息已发生改变\",{\"1\":{\"893\":1}}],[\"instance到客户端\",{\"1\":{\"893\":1}}],[\"instancecontroller\",{\"0\":{\"893\":1}}],[\"instanceof\",{\"1\":{\"252\":1,\"329\":1,\"345\":2,\"386\":1,\"399\":2,\"411\":1,\"413\":2,\"435\":2,\"438\":4,\"535\":1,\"556\":1,\"649\":1,\"852\":1,\"853\":1,\"914\":2,\"1345\":2,\"1518\":1,\"1525\":1}}],[\"instance\",{\"0\":{\"1310\":1},\"1\":{\"243\":2,\"329\":1,\"386\":2,\"399\":1,\"411\":4,\"439\":1,\"479\":1,\"717\":1,\"852\":3,\"1042\":2,\"1246\":1,\"1256\":3,\"1308\":1}}],[\"installid\",{\"1\":{\"1463\":1}}],[\"installer\",{\"1\":{\"1129\":1}}],[\"install\",{\"0\":{\"59\":1},\"1\":{\"33\":1,\"51\":1,\"96\":1,\"102\":1,\"103\":1,\"173\":4,\"720\":1,\"965\":1,\"1093\":1,\"1129\":1,\"1130\":2,\"1178\":1,\"1185\":1}}],[\"inspect\",{\"1\":{\"1100\":1}}],[\"insecure\",{\"1\":{\"1096\":1,\"1129\":1}}],[\"insertlist\",{\"1\":{\"1621\":1}}],[\"insertresultoperator\",{\"1\":{\"1301\":1}}],[\"insertoperator\",{\"1\":{\"1301\":1}}],[\"insert\",{\"1\":{\"308\":1,\"311\":2,\"312\":6,\"1048\":1,\"1635\":1}}],[\"inputdata\",{\"1\":{\"1486\":1}}],[\"inputs\",{\"1\":{\"1484\":1}}],[\"inputstream\",{\"1\":{\"1257\":2}}],[\"input\",{\"1\":{\"249\":6,\"250\":1}}],[\"indices\",{\"1\":{\"780\":6,\"786\":1}}],[\"indicesoptions\",{\"1\":{\"780\":3}}],[\"india\",{\"1\":{\"154\":1}}],[\"indextools\",{\"1\":{\"1248\":1}}],[\"indexparam\",{\"1\":{\"1248\":7}}],[\"indexof\",{\"1\":{\"931\":1}}],[\"indexconstants\",{\"1\":{\"786\":1}}],[\"indexname\",{\"1\":{\"775\":2,\"786\":4}}],[\"index\",{\"1\":{\"31\":1,\"36\":4,\"206\":1,\"649\":4,\"679\":4,\"748\":2,\"760\":1,\"773\":2,\"778\":1,\"779\":1,\"780\":1,\"786\":1,\"943\":1,\"991\":6,\"992\":9,\"993\":4,\"994\":3,\"995\":5,\"1059\":1,\"1066\":1,\"1210\":6,\"1506\":1,\"1514\":2,\"1574\":1,\"1579\":1,\"1580\":1,\"1583\":5}}],[\"indexed\",{\"0\":{\"495\":1},\"1\":{\"31\":2,\"748\":1}}],[\"indexer<\",{\"1\":{\"31\":1}}],[\"indexer\",{\"1\":{\"31\":3}}],[\"int类型\",{\"1\":{\"1486\":4}}],[\"introspect\",{\"1\":{\"1521\":1}}],[\"introspect请求\",{\"1\":{\"1031\":1}}],[\"introspector\",{\"1\":{\"467\":1,\"1031\":1}}],[\"introspection\",{\"1\":{\"397\":1}}],[\"introductions\",{\"1\":{\"435\":1}}],[\"introduction\",{\"1\":{\"435\":1}}],[\"int等\",{\"1\":{\"377\":2}}],[\"into\",{\"1\":{\"279\":1,\"282\":1,\"297\":1,\"309\":1}}],[\"intoiterator\",{\"1\":{\"279\":1,\"320\":1}}],[\"intentional\",{\"1\":{\"399\":1}}],[\"integer\",{\"1\":{\"255\":2,\"329\":2,\"647\":1,\"792\":2,\"853\":1,\"1531\":1}}],[\"interestops\",{\"1\":{\"1445\":2}}],[\"interrupt\",{\"1\":{\"1445\":1}}],[\"interrupted\",{\"1\":{\"1445\":1}}],[\"interruptedexception\",{\"1\":{\"234\":2,\"236\":1}}],[\"interval\",{\"1\":{\"792\":1,\"798\":2,\"801\":1,\"802\":1,\"1058\":5,\"1320\":1}}],[\"interview\",{\"0\":{\"193\":1}}],[\"interpreter\",{\"1\":{\"646\":2}}],[\"intercepts\",{\"1\":{\"853\":2}}],[\"interceptor\",{\"1\":{\"430\":4,\"801\":1,\"802\":2,\"852\":1,\"853\":1,\"911\":1,\"1331\":1}}],[\"interceptors\",{\"1\":{\"51\":1,\"852\":2}}],[\"intercept\",{\"1\":{\"397\":1}}],[\"interfaces\",{\"1\":{\"435\":2}}],[\"interface\",{\"0\":{\"528\":1},\"1\":{\"121\":1,\"139\":1,\"157\":1,\"158\":1,\"249\":1,\"250\":1,\"251\":1,\"252\":1,\"343\":1,\"480\":2,\"481\":1,\"530\":1,\"531\":1,\"900\":1,\"985\":1,\"986\":1,\"988\":6,\"991\":4,\"992\":3,\"993\":4,\"994\":1,\"1397\":1,\"1583\":3,\"1584\":1}}],[\"internaldispatch派发事件\",{\"1\":{\"1382\":1}}],[\"internallockleasetime\",{\"1\":{\"1246\":1}}],[\"internaltok\",{\"1\":{\"833\":1}}],[\"internal\",{\"1\":{\"86\":2,\"360\":1,\"397\":1,\"1025\":1,\"1026\":1}}],[\"internalsend\",{\"1\":{\"833\":1}}],[\"internalsend发送验证信息进行验证\",{\"1\":{\"833\":1}}],[\"internalsend方法\",{\"0\":{\"829\":1}}],[\"internals\",{\"1\":{\"39\":1}}],[\"int=\",{\"1\":{\"143\":1}}],[\"intvalue\",{\"1\":{\"236\":1,\"647\":1}}],[\"intval\",{\"1\":{\"123\":4}}],[\"int\",{\"1\":{\"122\":1,\"123\":6,\"124\":3,\"127\":2,\"131\":1,\"133\":1,\"135\":1,\"139\":5,\"140\":7,\"141\":1,\"142\":1,\"143\":1,\"145\":4,\"146\":4,\"148\":1,\"151\":1,\"152\":9,\"155\":3,\"156\":2,\"158\":5,\"190\":6,\"234\":1,\"241\":2,\"255\":6,\"358\":1,\"386\":1,\"647\":5,\"780\":2,\"792\":2,\"911\":1,\"1036\":2,\"1251\":1,\"1383\":1,\"1445\":8,\"1467\":1,\"1484\":3,\"1486\":20,\"1523\":1}}],[\"infra\",{\"1\":{\"1170\":1}}],[\"infrastructure\",{\"1\":{\"430\":4}}],[\"information\",{\"1\":{\"1583\":3,\"1584\":1}}],[\"info证书\",{\"1\":{\"1305\":1}}],[\"info级别的日志\",{\"1\":{\"596\":2}}],[\"info异步输出\",{\"1\":{\"596\":1}}],[\"info\",{\"1\":{\"96\":1,\"236\":1,\"411\":2,\"413\":1,\"456\":1,\"471\":1,\"596\":7,\"657\":1,\"716\":2,\"776\":1,\"782\":1,\"786\":2,\"792\":2,\"804\":5,\"900\":1,\"914\":3,\"924\":1,\"1032\":1,\"1058\":2,\"1087\":1,\"1210\":1,\"1251\":1,\"1450\":1,\"1486\":1,\"1513\":1,\"1522\":1,\"1570\":1,\"1586\":2,\"1635\":1}}],[\"inf\",{\"1\":{\"31\":1,\"481\":2,\"494\":2,\"495\":1,\"594\":1,\"1066\":6}}],[\"in\",{\"0\":{\"4\":1,\"7\":1},\"1\":{\"179\":2,\"241\":1,\"250\":2,\"271\":5,\"277\":4,\"279\":7,\"282\":1,\"306\":2,\"312\":1,\"345\":1,\"397\":6,\"399\":5,\"411\":2,\"435\":1,\"438\":2,\"486\":1,\"494\":2,\"649\":2,\"786\":1,\"833\":1,\"900\":1,\"912\":1,\"1048\":1,\"1050\":1,\"1128\":1,\"1130\":1,\"1210\":1,\"1215\":1,\"1226\":1,\"1345\":1,\"1407\":1,\"1445\":4,\"1451\":3,\"1531\":2}}],[\"+z9faljuanejksn5tkaht8oflc2hi04ix7uqw5hhyobnvfw8arxawd51t3nsqdv5\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"+evt\",{\"1\":{\"1407\":1}}],[\"+uuid\",{\"1\":{\"1407\":1}}],[\"+5\",{\"1\":{\"1187\":1}}],[\"+result+\",{\"1\":{\"647\":1}}],[\"+$\",{\"1\":{\"635\":2,\"983\":1}}],[\"+f\",{\"1\":{\"378\":1}}],[\"++++++++++\",{\"1\":{\"719\":2}}],[\"++\",{\"1\":{\"234\":1}}],[\"+printtenuringdistribution\",{\"1\":{\"214\":1,\"1137\":1}}],[\"+printgcdatestamps\",{\"1\":{\"214\":1,\"1137\":1}}],[\"+printgcdetails\",{\"1\":{\"214\":1,\"1137\":1}}],[\"+printgctimestamps\",{\"1\":{\"214\":1,\"1137\":1}}],[\"+=1\",{\"1\":{\"129\":2}}],[\"+=\",{\"1\":{\"129\":2,\"277\":1,\"280\":1,\"306\":1,\"312\":1,\"758\":1,\"759\":1}}],[\"+x\",{\"1\":{\"27\":1,\"1118\":1}}],[\"+\",{\"0\":{\"23\":1,\"724\":2},\"1\":{\"103\":1,\"135\":1,\"140\":1,\"155\":1,\"179\":2,\"192\":1,\"234\":2,\"236\":3,\"252\":1,\"277\":1,\"279\":1,\"295\":1,\"297\":4,\"315\":1,\"318\":1,\"329\":6,\"345\":4,\"378\":1,\"382\":1,\"397\":2,\"410\":2,\"411\":11,\"438\":2,\"456\":4,\"473\":1,\"491\":2,\"494\":1,\"594\":2,\"647\":13,\"648\":7,\"649\":4,\"652\":3,\"658\":6,\"833\":3,\"852\":18,\"900\":4,\"911\":7,\"914\":7,\"986\":2,\"1032\":4,\"1036\":1,\"1049\":1,\"1179\":2,\"1187\":1,\"1246\":10,\"1259\":2,\"1445\":9,\"1480\":1,\"1522\":1}}],[\"重置租户默认用户密码\",{\"1\":{\"1537\":1}}],[\"重置读取字节数和消息数\",{\"1\":{\"1400\":1}}],[\"重置为分区中最新的offset\",{\"1\":{\"801\":1,\"802\":1}}],[\"重置为分区中最小的offset\",{\"1\":{\"801\":1,\"802\":1}}],[\"重点\",{\"1\":{\"1228\":1}}],[\"重复消费解决方式\",{\"1\":{\"915\":1}}],[\"重复订阅分析\",{\"0\":{\"844\":1}}],[\"重连时判断订阅主题是否为空\",{\"1\":{\"848\":1}}],[\"重连回调\",{\"1\":{\"819\":1}}],[\"重试次数\",{\"1\":{\"801\":1,\"802\":1}}],[\"重试其它服务器\",{\"1\":{\"730\":1}}],[\"重写onmessage方法\",{\"1\":{\"1245\":1}}],[\"重写了handle方法\",{\"1\":{\"473\":1}}],[\"重写getroutedefinitions\",{\"1\":{\"468\":1}}],[\"重写intercept方法\",{\"1\":{\"386\":1,\"853\":1}}],[\"重写invoke方法\",{\"1\":{\"385\":1}}],[\"重写run方法\",{\"1\":{\"236\":1}}],[\"重定向地址\",{\"1\":{\"1570\":1,\"1571\":1,\"1579\":1,\"1580\":1}}],[\"重定向uri校验后\",{\"1\":{\"1519\":1}}],[\"重定向的目标路由\",{\"1\":{\"977\":1}}],[\"重定向请求\",{\"1\":{\"346\":1}}],[\"重定向到客户端\",{\"1\":{\"346\":1}}],[\"重定向到登录页面\",{\"1\":{\"337\":1,\"346\":2}}],[\"重定向并不是\",{\"1\":{\"325\":1}}],[\"重新加载协议\",{\"1\":{\"1358\":1}}],[\"重新加载配置\",{\"1\":{\"1205\":1}}],[\"重新加载进程\",{\"1\":{\"1191\":1}}],[\"重新放回工作区\",{\"1\":{\"1151\":1}}],[\"重新添加新的工厂后置处理器的beandefinition\",{\"1\":{\"399\":1}}],[\"重新根据session缓存重定向授权请求\",{\"1\":{\"346\":1}}],[\"重新设置securitycontext和其中的authentication\",{\"1\":{\"339\":1}}],[\"重新与引用链或路径连接\",{\"1\":{\"243\":1}}],[\"重新获得控制权\",{\"1\":{\"160\":1}}],[\"重新创建原始对象\",{\"1\":{\"476\":1}}],[\"重新创建\",{\"1\":{\"18\":1}}],[\"重启宝塔\",{\"0\":{\"1194\":1}}],[\"重启mysql\",{\"1\":{\"1193\":1}}],[\"重启之后也不会被再次消费\",{\"1\":{\"798\":1}}],[\"重启\",{\"1\":{\"36\":1,\"1025\":1,\"1194\":1}}],[\"重启解决\",{\"1\":{\"3\":1}}],[\"重要的是handle方法\",{\"1\":{\"473\":1}}],[\"重要\",{\"1\":{\"25\":1}}],[\"一样\",{\"1\":{\"1425\":1}}],[\"一共为7个字节长度\",{\"1\":{\"1280\":1}}],[\"一\",{\"1\":{\"1272\":1,\"1445\":1}}],[\"一组具有相同功能的设备集合\",{\"1\":{\"1269\":1}}],[\"一条明细对应多条实时库存明细\",{\"1\":{\"1252\":1}}],[\"一会要用到\",{\"1\":{\"1202\":2}}],[\"一端连接网桥\",{\"1\":{\"1088\":1}}],[\"一端连接容器\",{\"1\":{\"1088\":1}}],[\"一种是readme\",{\"1\":{\"1151\":2}}],[\"一种常见的方式是在\",{\"1\":{\"989\":1}}],[\"一种专注于某一领域\",{\"1\":{\"604\":1}}],[\"一旦pod中的容器成功创建并运行\",{\"1\":{\"1162\":1}}],[\"一旦出现了\",{\"1\":{\"995\":1}}],[\"一旦被创建\",{\"1\":{\"970\":1}}],[\"一旦代码里涉及具体的实现类\",{\"1\":{\"481\":1}}],[\"一定要是数字才能加减\",{\"1\":{\"910\":1}}],[\"一定是响应到前端\",{\"1\":{\"325\":1}}],[\"一次性导出\",{\"1\":{\"992\":1}}],[\"一次从各分片中查到所有匹配的文档\",{\"1\":{\"780\":1}}],[\"一次创建\",{\"1\":{\"652\":1}}],[\"一级一级节点往下传递订阅信息subscription\",{\"1\":{\"527\":1}}],[\"一直传递到最上面\",{\"1\":{\"527\":1}}],[\"一直到\",{\"1\":{\"282\":1}}],[\"一阶段\",{\"1\":{\"212\":1}}],[\"一致性\",{\"1\":{\"212\":2,\"730\":1}}],[\"一刻才执行某个语句或函数\",{\"1\":{\"138\":1}}],[\"一个\",{\"1\":{\"1425\":1}}],[\"一个对主题名通配符筛选器\",{\"1\":{\"1272\":1}}],[\"一个会话可以包含多个订阅\",{\"1\":{\"1272\":1}}],[\"一个拣货明细对应一条库存明细\",{\"1\":{\"1252\":1}}],[\"一个事务只能读取另一事务已提交的数据\",{\"1\":{\"1044\":1}}],[\"一个事务读到了另一个事务未提交的数据\",{\"1\":{\"1044\":1}}],[\"一个事务对应一个数据源\",{\"1\":{\"632\":1}}],[\"一个元素就像电影的单帧\",{\"1\":{\"970\":1}}],[\"一个或多个设置\",{\"1\":{\"909\":1}}],[\"一个ip对应多个域名\",{\"1\":{\"678\":1}}],[\"一个service只有一个engine\",{\"1\":{\"678\":1}}],[\"一个是\",{\"1\":{\"658\":2}}],[\"一个是空闲连接\",{\"1\":{\"18\":1}}],[\"一个闭包并不仅仅实现某一种\",{\"1\":{\"319\":1}}],[\"一个指代实现特征或者方法类型\",{\"1\":{\"298\":1}}],[\"一个指代当前的实例对象\",{\"1\":{\"298\":1}}],[\"一个指针变量通常缩写为\",{\"1\":{\"144\":1}}],[\"一个指针变量指向了一个值的内存地址\",{\"1\":{\"142\":1}}],[\"一个变量要么有值\",{\"1\":{\"286\":1}}],[\"一个清晰明确的结构体\",{\"1\":{\"271\":1}}],[\"一个结构体由几部分组成\",{\"1\":{\"271\":1}}],[\"一个开源的分析\",{\"1\":{\"240\":1}}],[\"一个rocketmq实例只有一个partition\",{\"1\":{\"223\":1}}],[\"一个进程中的线程之间是没有父子之分的\",{\"1\":{\"209\":1,\"235\":1}}],[\"一个切片在未初始化之前默认为\",{\"1\":{\"152\":1}}],[\"一个方法就是一个包含了接受者的函数\",{\"1\":{\"139\":1}}],[\"一个可以返回多个值的函数\",{\"1\":{\"127\":1}}],[\"一个标识符实际上就是一个或是多个字母\",{\"1\":{\"117\":1}}],[\"一行代表一个语句结束\",{\"1\":{\"117\":1}}],[\"一般追加存储\",{\"1\":{\"1054\":1}}],[\"一般使用\",{\"1\":{\"988\":1}}],[\"一般和\",{\"1\":{\"982\":2}}],[\"一般用于读操作\",{\"1\":{\"730\":1}}],[\"一般用于全局异常处理\",{\"1\":{\"375\":1}}],[\"一般指发工资\",{\"1\":{\"656\":1}}],[\"一般采用aof的方式进行持久化\",{\"1\":{\"911\":1}}],[\"一般采用pem格式加密\",{\"1\":{\"625\":1,\"627\":1}}],[\"一般采用der\",{\"1\":{\"625\":1}}],[\"一般单表达到500万进行分库分表\",{\"1\":{\"221\":1}}],[\"一般单核cpu\",{\"1\":{\"185\":1}}],[\"一般包含bin\",{\"1\":{\"168\":1}}],[\"一般为赋值表达式\",{\"1\":{\"133\":2}}],[\"一般的容器都可以执行\",{\"1\":{\"50\":1}}],[\"一般id范围为1\",{\"1\":{\"15\":1}}],[\"发起\",{\"1\":{\"1506\":1}}],[\"发起改变socket请求状态的action的操作\",{\"1\":{\"1422\":1}}],[\"发起重定向\",{\"1\":{\"325\":1}}],[\"发生错误的消息index\",{\"1\":{\"804\":1}}],[\"发生锁冲突的概率最低\",{\"1\":{\"219\":1}}],[\"发出服务器已被初始化事件servletwebserverinitializedevent\",{\"1\":{\"400\":1}}],[\"发表了微博\",{\"1\":{\"297\":1}}],[\"发货异常的库存总量\",{\"1\":{\"236\":1}}],[\"发货单保存到es数据库\",{\"1\":{\"212\":1}}],[\"发送验证码\",{\"1\":{\"1597\":1}}],[\"发送一条消息\",{\"1\":{\"1407\":1}}],[\"发送一个带有\",{\"1\":{\"1275\":1}}],[\"发送\",{\"1\":{\"1275\":4,\"1407\":1}}],[\"发送失败\",{\"1\":{\"915\":1}}],[\"发送到操作日志消息队列\",{\"1\":{\"915\":1}}],[\"发送到通道\",{\"1\":{\"190\":1}}],[\"发送延时\",{\"1\":{\"801\":1,\"802\":2}}],[\"发送config初始化事件到dubboconfigapplicationlistener\",{\"1\":{\"741\":1}}],[\"发送token到认证入口点loginurlauthenticationentrypoint\",{\"1\":{\"346\":1}}],[\"发送库存扣减消息时\",{\"1\":{\"224\":1}}],[\"发送消息到deviceoperationbroker的已维护的发布器sink中\",{\"1\":{\"1331\":1}}],[\"发送消息到broker表示已经消费\",{\"1\":{\"915\":1}}],[\"发送消息进行处理\",{\"1\":{\"1331\":1}}],[\"发送消息\",{\"1\":{\"212\":1}}],[\"发送方\",{\"1\":{\"1275\":4}}],[\"发送方则会阻塞直到发送的值被拷贝到缓冲区内\",{\"1\":{\"190\":1}}],[\"发送方会阻塞直到接收方从通道中接收了值\",{\"1\":{\"190\":1}}],[\"发送或接收\",{\"1\":{\"190\":1}}],[\"发现和配置中心\",{\"1\":{\"1501\":1}}],[\"发现接近系统设置的最大pid个数\",{\"1\":{\"17\":1}}],[\"发现内存还有很多空闲\",{\"1\":{\"17\":1}}],[\"发布对应事件\",{\"1\":{\"1358\":1}}],[\"发布设备已上线消息到eventbus\",{\"1\":{\"1328\":1}}],[\"发布设备到设备注册中心\",{\"1\":{\"1327\":1}}],[\"发布消息到事件总线\",{\"1\":{\"1328\":1}}],[\"发布和订阅消息\",{\"1\":{\"1288\":1}}],[\"发布和订阅的思想\",{\"1\":{\"500\":1}}],[\"发布模块启动事件\",{\"1\":{\"742\":1}}],[\"发布事件\",{\"1\":{\"413\":1}}],[\"发布上下文已刷新事件\",{\"1\":{\"400\":1}}],[\"发布\",{\"0\":{\"1203\":1,\"1267\":1},\"1\":{\"15\":1}}],[\"且此连接会保持在活动状态\",{\"1\":{\"1425\":1}}],[\"且\",{\"1\":{\"1112\":1}}],[\"且后面至少要跟随一个参数\",{\"1\":{\"1102\":1}}],[\"且自己也可以返回promise\",{\"1\":{\"998\":1}}],[\"且可以执行异步操作\",{\"1\":{\"998\":1}}],[\"且当前消费线程在阻塞指定sleep\",{\"1\":{\"804\":2}}],[\"且同属性配置的覆盖问题和之前一样\",{\"1\":{\"593\":1}}],[\"且忽略其他条件时就用\",{\"1\":{\"283\":1}}],[\"且所有分支的表达式最终返回值的类型必须相同\",{\"1\":{\"282\":1}}],[\"且只能用迭代器的remove方法\",{\"1\":{\"229\":1}}],[\"且失败率达到50以上\",{\"1\":{\"213\":1}}],[\"且默认情况下\",{\"1\":{\"190\":1}}],[\"且没有其它效果\",{\"1\":{\"160\":1}}],[\"且params是数组类型如arr=\",{\"1\":{\"51\":1}}],[\"且发送给另一客户端才会释放消息id\",{\"1\":{\"15\":1}}],[\"且消息id会被标记为已使用\",{\"1\":{\"15\":1}}],[\"则保留\",{\"1\":{\"1644\":1}}],[\"则跳转到三方应用\",{\"1\":{\"1506\":1}}],[\"则跳过\",{\"1\":{\"367\":1}}],[\"则不会创建新的线程\",{\"1\":{\"1450\":1}}],[\"则不会gc\",{\"1\":{\"208\":1}}],[\"则立即返回\",{\"1\":{\"1434\":1}}],[\"则断开并重新连接\",{\"1\":{\"1407\":1}}],[\"则直接写入数据\",{\"1\":{\"1402\":1}}],[\"则直接抛出异常\",{\"1\":{\"1398\":1}}],[\"则直接释放消息id\",{\"1\":{\"15\":1}}],[\"则向上级网关发送消息\",{\"1\":{\"1331\":1}}],[\"则重新加载网络组件\",{\"1\":{\"1320\":1}}],[\"则创建设备会话devicesession\",{\"1\":{\"1338\":1}}],[\"则创建新的的设备网关\",{\"1\":{\"1319\":1}}],[\"则创建deviceoperator并存放到内存缓存中\",{\"1\":{\"1317\":1}}],[\"则创建一个\",{\"1\":{\"652\":1}}],[\"则存储储位可用库存有多少补多少\",{\"1\":{\"1251\":1}}],[\"则存在\",{\"1\":{\"154\":1}}],[\"则在channel的pipeline\",{\"1\":{\"1450\":1}}],[\"则在超时时间内挂起等待\",{\"1\":{\"1434\":1}}],[\"则在本地debug调试\",{\"1\":{\"1229\":1}}],[\"则在变量离开作用域时\",{\"1\":{\"264\":1}}],[\"则返回\",{\"1\":{\"1222\":4,\"1223\":2,\"1227\":12}}],[\"则返回false或true\",{\"1\":{\"929\":1}}],[\"则返回false\",{\"1\":{\"239\":2}}],[\"则为if\",{\"1\":{\"1222\":1}}],[\"则为双向通道\",{\"1\":{\"190\":1}}],[\"则\",{\"1\":{\"1220\":1}}],[\"则一般不需要进行gc\",{\"1\":{\"1155\":1}}],[\"则必须优化\",{\"1\":{\"1155\":1}}],[\"则修改autocreatetopicenable=true\",{\"1\":{\"1136\":1}}],[\"则修改brokerip1\",{\"1\":{\"1136\":1}}],[\"则每一次查询都会生成read\",{\"1\":{\"1049\":1}}],[\"则继续扫描\",{\"1\":{\"1032\":1}}],[\"则需要使用另一种语法在声明文件中扩展全局变量的类型\",{\"1\":{\"993\":1}}],[\"则需要在一个容器里面才能执行\",{\"1\":{\"652\":1,\"681\":1}}],[\"则显示\",{\"1\":{\"982\":1}}],[\"则set\",{\"1\":{\"910\":1}}],[\"则被重置回30秒\",{\"1\":{\"850\":1}}],[\"则可以使用match\",{\"1\":{\"766\":1}}],[\"则这一次请求就会失败\",{\"1\":{\"730\":1}}],[\"则自动断开连接\",{\"1\":{\"730\":2}}],[\"则将在3号下周一触发\",{\"1\":{\"656\":1}}],[\"则将当前节点的订阅对象传递构造上一级的订阅对象\",{\"1\":{\"527\":1}}],[\"则就在该天触发\",{\"1\":{\"656\":1}}],[\"则找最近的下周一\",{\"1\":{\"656\":1}}],[\"则找最近的周五\",{\"1\":{\"656\":1}}],[\"则表示手动提交\",{\"1\":{\"798\":2}}],[\"则表示自动提交\",{\"1\":{\"798\":2}}],[\"则表示在本月的最后一个工作日触发\",{\"1\":{\"656\":1}}],[\"则表示\",{\"1\":{\"656\":1}}],[\"则表示该数据的最后一个\",{\"1\":{\"656\":1}}],[\"则使用networkprovider创建network\",{\"1\":{\"1319\":1}}],[\"则使用application\",{\"1\":{\"593\":1}}],[\"则使用bootstrap\",{\"1\":{\"593\":1}}],[\"则成功返回mono对象\",{\"1\":{\"552\":1}}],[\"则会去下载\",{\"1\":{\"1200\":1}}],[\"则会被重置\",{\"1\":{\"850\":1}}],[\"则会丢弃tract\",{\"1\":{\"596\":2}}],[\"则会找到beanfactorytransactionattributesourceadvisor\",{\"1\":{\"434\":1}}],[\"则会在pkg下生成\",{\"1\":{\"173\":1}}],[\"则会在bin下生成可执行文件\",{\"1\":{\"173\":1}}],[\"则是advice所有controller\",{\"1\":{\"376\":1}}],[\"则指代的是\",{\"1\":{\"298\":1}}],[\"则调用该函数时传入的\",{\"1\":{\"298\":1}}],[\"则主动跑到安全点\",{\"1\":{\"243\":1}}],[\"则没有必要执行\",{\"1\":{\"243\":1}}],[\"则对象不再被使用\",{\"1\":{\"243\":1}}],[\"则对包外是不可见的\",{\"1\":{\"116\":1}}],[\"则销毁线程\",{\"1\":{\"236\":1}}],[\"则意味着需要等待直到某个接收方获取到一个值\",{\"1\":{\"190\":1}}],[\"则无法直接导入使用\",{\"1\":{\"169\":1}}],[\"则称这个指针变量为指向指针的指针变量\",{\"1\":{\"146\":1}}],[\"则test2包中的init函数先执行\",{\"1\":{\"137\":1}}],[\"则执行该语句\",{\"1\":{\"131\":1}}],[\"则执行以下语句\",{\"1\":{\"131\":1}}],[\"则变量默认为零值\",{\"1\":{\"123\":1}}],[\"则转换成arr=1\",{\"1\":{\"51\":1}}],[\"则问题很可能出这里\",{\"1\":{\"39\":1}}],[\"则其他模块的\",{\"1\":{\"31\":1}}],[\"则再次订阅会被客户端侧校验拦截\",{\"1\":{\"8\":1}}],[\"当javachannel有空间\",{\"1\":{\"1402\":1}}],[\"当jdk环境版本1\",{\"1\":{\"1079\":1}}],[\"当jdk环境版本为1\",{\"1\":{\"1079\":1}}],[\"当channel有写出事件后\",{\"1\":{\"1401\":1}}],[\"当收到回复消息后\",{\"1\":{\"1331\":1}}],[\"当收到订阅的消息时\",{\"1\":{\"1328\":1}}],[\"当容器运行在pod中时\",{\"1\":{\"1168\":1}}],[\"当mysql容器首次启动时\",{\"1\":{\"1115\":1}}],[\"当minidle<=0被重置为default\",{\"1\":{\"850\":1}}],[\"当使用from指令时\",{\"1\":{\"1103\":1}}],[\"当值改变时进行操作\",{\"1\":{\"1002\":1}}],[\"当执行到await时async函数会挂起\",{\"1\":{\"1000\":1}}],[\"当执行到methodb时\",{\"1\":{\"202\":1}}],[\"当promise对象创建完成后\",{\"1\":{\"1000\":1}}],[\"当且仅当在以下几个场景下\",{\"1\":{\"995\":1}}],[\"当条件为false\",{\"1\":{\"982\":1}}],[\"当条件为true则显示\",{\"1\":{\"982\":1}}],[\"当在发货单页面时\",{\"1\":{\"911\":1}}],[\"当在中间件或\",{\"1\":{\"179\":1}}],[\"当存在多个消费者时\",{\"1\":{\"804\":1}}],[\"当kafka中没有初始offset或offset超出范围时将自动重置offset\",{\"1\":{\"801\":1,\"802\":1}}],[\"当生产端积累的消息达到batch\",{\"1\":{\"801\":1,\"802\":2}}],[\"当每一条记录被消费者监听器\",{\"1\":{\"798\":1}}],[\"当每一批poll\",{\"1\":{\"798\":3}}],[\"当字段需要进行排序\",{\"1\":{\"749\":1}}],[\"当出现失败\",{\"1\":{\"730\":1}}],[\"当出现新功能时\",{\"1\":{\"730\":1}}],[\"当同一个配置属性在bootstrap\",{\"1\":{\"593\":1}}],[\"当处理完成后发出\",{\"1\":{\"554\":1}}],[\"当得到元素\",{\"1\":{\"500\":1}}],[\"当然这里的pe是可以跨磁盘的\",{\"1\":{\"1197\":1}}],[\"当然也就必须使用三斜线指令来引入了29\",{\"1\":{\"995\":1}}],[\"当然也可以用数组的形式指定\",{\"1\":{\"376\":1}}],[\"当然你也可以通过下列的方式指定规则\",{\"1\":{\"376\":1}}],[\"当然hystrix底层使用aop来实现的\",{\"1\":{\"213\":1}}],[\"当编译器推导出一种类型后\",{\"1\":{\"315\":1}}],[\"当查询不到时\",{\"1\":{\"311\":1}}],[\"当你只要匹配一个条件\",{\"1\":{\"283\":1}}],[\"当你执行\",{\"1\":{\"173\":2}}],[\"当我们需要依赖一个全局变量的声明文件时\",{\"1\":{\"995\":2}}],[\"当我们在书写一个全局变量的声明文件时\",{\"1\":{\"995\":1}}],[\"当我们使用\",{\"1\":{\"991\":1}}],[\"当我们不想在匹配时列出所有值的时候\",{\"1\":{\"282\":1}}],[\"当我们向一个服务发起请求\",{\"1\":{\"213\":1}}],[\"当调用flush时就是将channeloutboundbuffer数据写入到javachannel中\",{\"1\":{\"1402\":1}}],[\"当调用\",{\"1\":{\"268\":1}}],[\"当任务队列为空\",{\"1\":{\"233\":1}}],[\"当切换仓库时\",{\"1\":{\"224\":1}}],[\"当达到一定次数不再向服务发起请求\",{\"1\":{\"213\":1}}],[\"当线程池满了\",{\"1\":{\"213\":1}}],[\"当请求超时了\",{\"1\":{\"213\":1}}],[\"当一个\",{\"1\":{\"1170\":1}}],[\"当一个节点出现故障\",{\"1\":{\"1167\":1}}],[\"当一个driver类被加载时\",{\"1\":{\"850\":1}}],[\"当一个请求发出\",{\"1\":{\"500\":1}}],[\"当一个特征的所有方法都有如下属性时\",{\"1\":{\"298\":1}}],[\"当一个线程抛出oom异常后\",{\"1\":{\"208\":1}}],[\"当一个指针被定义后没有分配到任何变量时\",{\"1\":{\"144\":1}}],[\"当\",{\"1\":{\"186\":1,\"971\":1}}],[\"当错误条件\",{\"1\":{\"159\":1}}],[\"当发生像数组下标越界或类型断言失败这样的运行错误时\",{\"1\":{\"159\":1}}],[\"当除数为零的时候会返回错误信息\",{\"1\":{\"158\":1}}],[\"当定义一个指向指针的指针变量时\",{\"1\":{\"146\":1}}],[\"当有多个\",{\"1\":{\"138\":1}}],[\"当标识符\",{\"1\":{\"116\":1}}],[\"当前用户密码\",{\"1\":{\"1544\":1,\"1575\":1}}],[\"当前统一从数据库获取\",{\"1\":{\"1521\":1}}],[\"当前前端登录采用授权码模式\",{\"1\":{\"1508\":1}}],[\"当前产品的productkey\",{\"1\":{\"1486\":1}}],[\"当前设备所连接的服务器id\",{\"1\":{\"1331\":1}}],[\"当前读会使快照读失效\",{\"1\":{\"1050\":1}}],[\"当前读\",{\"1\":{\"1050\":1}}],[\"当前读与快照读\",{\"0\":{\"1050\":1}}],[\"当前最大事务id\",{\"1\":{\"1049\":1}}],[\"当前最小事务id\",{\"1\":{\"1049\":1}}],[\"当前活跃事务id集\",{\"1\":{\"1049\":1}}],[\"当前层级\",{\"1\":{\"1036\":1}}],[\"当前数据库所有key数量\",{\"1\":{\"908\":1}}],[\"当前页\",{\"1\":{\"853\":1,\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1622\":1,\"1628\":1,\"1635\":1}}],[\"当前页码\",{\"1\":{\"255\":1}}],[\"当前poll查询出的剩余消息记录\",{\"1\":{\"804\":1}}],[\"当前poll查询出的剩余消息记录均被抛弃\",{\"1\":{\"804\":1}}],[\"当前指定index之前的消息会被成功提交\",{\"1\":{\"804\":1}}],[\"当前待执行的任务表\",{\"1\":{\"580\":1,\"704\":1}}],[\"当前的版本\",{\"1\":{\"173\":1}}],[\"当前路径\",{\"1\":{\"103\":1}}],[\"当前路径下\",{\"1\":{\"103\":1}}],[\"当前节点收到最新信息后\",{\"1\":{\"99\":1}}],[\"当订阅或发布消息时\",{\"1\":{\"15\":1}}],[\"当ssh连接linux系统时\",{\"0\":{\"5\":1}}],[\"vpn\",{\"0\":{\"1431\":1}}],[\"vgremove\",{\"1\":{\"1197\":2}}],[\"vgs\",{\"1\":{\"1197\":1}}],[\"vgdisplay\",{\"1\":{\"1197\":2}}],[\"vgcreate是创建命令myvg是这个vg组的名称\",{\"1\":{\"1197\":1}}],[\"vgcreate\",{\"1\":{\"1197\":2}}],[\"vg就是将很多pe组合在一起生成一个卷组\",{\"1\":{\"1197\":1}}],[\"vg\",{\"1\":{\"1197\":2}}],[\"vhost\",{\"1\":{\"1025\":2,\"1026\":2}}],[\"vs\",{\"1\":{\"988\":1}}],[\"vfs\",{\"1\":{\"852\":2}}],[\"v超出作用域并在此处被删除\",{\"1\":{\"303\":1}}],[\"veth\",{\"1\":{\"1169\":1,\"1170\":2}}],[\"vendorimpl\",{\"1\":{\"871\":2}}],[\"vec<i32>\",{\"1\":{\"302\":1}}],[\"vec\",{\"1\":{\"287\":1,\"302\":5,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"309\":1,\"318\":2}}],[\"vec是动态数组\",{\"1\":{\"287\":1}}],[\"vector\",{\"0\":{\"301\":1,\"303\":1,\"304\":1},\"1\":{\"277\":1,\"303\":1}}],[\"vertxmqttconnection实现mqttconnection\",{\"0\":{\"1349\":1}}],[\"vertxmqttclient\",{\"1\":{\"1347\":1,\"1352\":2,\"1353\":1}}],[\"vertxmqttserver实现mqttserver\",{\"1\":{\"1347\":1}}],[\"vertx\",{\"0\":{\"1375\":1,\"1376\":1},\"1\":{\"1290\":1,\"1338\":2,\"1350\":2,\"1353\":2}}],[\"verify=1\",{\"1\":{\"1130\":2}}],[\"verificationcode\",{\"1\":{\"946\":2}}],[\"verification\",{\"1\":{\"26\":1}}],[\"version`\",{\"1\":{\"1464\":1,\"1465\":1}}],[\"version=\",{\"1\":{\"103\":1,\"479\":1,\"596\":1,\"652\":1}}],[\"version\",{\"0\":{\"326\":1},\"1\":{\"31\":1,\"173\":1,\"790\":7,\"991\":2,\"1066\":2,\"1093\":1,\"1120\":1,\"1133\":1,\"1139\":1,\"1210\":3,\"1211\":1,\"1215\":2,\"1464\":1,\"1465\":1,\"1475\":1,\"1486\":1}}],[\"version>\",{\"1\":{\"31\":1,\"49\":2,\"103\":1,\"621\":1,\"646\":1,\"790\":7,\"799\":1,\"1079\":1,\"1249\":1}}],[\"v>\",{\"1\":{\"249\":2}}],[\"volatile\",{\"1\":{\"1256\":2}}],[\"volatile修饰静态变量\",{\"1\":{\"1256\":1}}],[\"volumes\",{\"1\":{\"1133\":3,\"1139\":3}}],[\"volume\",{\"0\":{\"1098\":1,\"1106\":1},\"1\":{\"218\":1,\"1098\":1,\"1100\":1,\"1127\":6,\"1130\":6,\"1131\":1,\"1139\":4,\"1197\":6}}],[\"vo\",{\"1\":{\"1059\":1,\"1515\":1}}],[\"voidpromise\",{\"1\":{\"1445\":2}}],[\"voidtype\",{\"1\":{\"241\":1}}],[\"void\",{\"1\":{\"9\":2,\"202\":2,\"210\":2,\"234\":1,\"236\":1,\"241\":1,\"250\":1,\"252\":2,\"255\":2,\"329\":1,\"334\":2,\"343\":3,\"345\":1,\"346\":1,\"377\":2,\"379\":1,\"397\":2,\"399\":1,\"406\":1,\"410\":1,\"411\":1,\"413\":4,\"421\":6,\"438\":1,\"445\":1,\"446\":1,\"447\":1,\"456\":1,\"476\":1,\"480\":1,\"490\":1,\"491\":1,\"509\":1,\"530\":4,\"531\":1,\"535\":1,\"537\":1,\"556\":4,\"589\":1,\"594\":1,\"602\":10,\"632\":5,\"646\":1,\"647\":1,\"648\":3,\"652\":8,\"657\":1,\"658\":4,\"672\":2,\"711\":1,\"719\":2,\"792\":1,\"804\":3,\"833\":1,\"852\":1,\"858\":1,\"872\":1,\"900\":2,\"911\":2,\"914\":3,\"988\":4,\"991\":3,\"1013\":3,\"1032\":2,\"1036\":2,\"1249\":1,\"1256\":2,\"1257\":2,\"1259\":1,\"1320\":1,\"1345\":1,\"1383\":1,\"1397\":3,\"1412\":1,\"1445\":8,\"1450\":6,\"1451\":2,\"1480\":1,\"1518\":1,\"1523\":1}}],[\"v2\",{\"1\":{\"124\":3,\"1092\":1,\"1129\":1,\"1132\":1,\"1133\":3}}],[\"v1\",{\"1\":{\"124\":3,\"1513\":12,\"1534\":1,\"1535\":3,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":45,\"1590\":1,\"1591\":1,\"1592\":11,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":2,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"vname3\",{\"1\":{\"124\":4}}],[\"vname2\",{\"1\":{\"124\":5}}],[\"vname1\",{\"1\":{\"124\":5}}],[\"vmware安装\",{\"0\":{\"87\":1}}],[\"v3vuvsxpl2i4o\",{\"1\":{\"1531\":1}}],[\"v3\",{\"1\":{\"86\":1,\"124\":3}}],[\"vue父子组件传值不刷新问题\",{\"0\":{\"1002\":1}}],[\"vuex状态管理模式的核心是store实例相当于应用的仓库\",{\"1\":{\"998\":1}}],[\"vuex是vue中的状态管理模式\",{\"1\":{\"998\":1}}],[\"vue\",{\"0\":{\"997\":1},\"1\":{\"83\":1}}],[\"vue中参数解析问题\",{\"0\":{\"51\":1}}],[\"v和vm冲突问题\",{\"0\":{\"53\":1}}],[\"valid\",{\"1\":{\"1445\":1}}],[\"validity\",{\"1\":{\"623\":2}}],[\"validatecodegatewayfilter\",{\"1\":{\"1513\":1}}],[\"validateeventlistener\",{\"1\":{\"1372\":1}}],[\"validated\",{\"1\":{\"378\":1}}],[\"validated参数校验\",{\"1\":{\"378\":1}}],[\"validate\",{\"1\":{\"353\":2,\"556\":2}}],[\"validatorutils\",{\"1\":{\"872\":1}}],[\"validator\",{\"1\":{\"353\":1}}],[\"validation\",{\"0\":{\"352\":1},\"1\":{\"1515\":1}}],[\"valuetype\",{\"1\":{\"1484\":5}}],[\"value自定义\",{\"1\":{\"1079\":1}}],[\"value模式不变\",{\"1\":{\"909\":1}}],[\"value>菜鸟教程<\",{\"1\":{\"652\":1}}],[\"value>\",{\"1\":{\"479\":5,\"652\":1,\"1079\":1}}],[\"value=\",{\"1\":{\"479\":10,\"480\":1,\"596\":3,\"1407\":1,\"1526\":3}}],[\"value注解的startwith\",{\"1\":{\"471\":1}}],[\"value注解设置值问题\",{\"0\":{\"41\":1}}],[\"value2\",{\"1\":{\"377\":1}}],[\"value1\",{\"1\":{\"377\":1}}],[\"value是返回值\",{\"1\":{\"377\":2}}],[\"valuestr\",{\"1\":{\"1523\":2}}],[\"values\",{\"1\":{\"358\":2,\"399\":1,\"491\":1,\"1036\":1}}],[\"valueof\",{\"1\":{\"236\":3,\"911\":2,\"1345\":1}}],[\"value对\",{\"1\":{\"154\":1}}],[\"value\",{\"1\":{\"106\":1,\"128\":1,\"133\":4,\"148\":1,\"153\":3,\"154\":2,\"282\":2,\"287\":1,\"316\":1,\"377\":1,\"411\":2,\"471\":1,\"476\":1,\"556\":1,\"602\":17,\"649\":27,\"678\":1,\"719\":1,\"759\":1,\"760\":2,\"782\":1,\"783\":1,\"786\":4,\"792\":1,\"801\":4,\"802\":4,\"909\":2,\"910\":4,\"911\":7,\"1032\":1,\"1248\":2,\"1326\":1,\"1327\":1,\"1414\":1,\"1484\":1,\"1518\":1,\"1523\":3,\"1616\":7}}],[\"value同时使用问题\",{\"0\":{\"38\":1}}],[\"varchar\",{\"1\":{\"1042\":2,\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":4}}],[\"various\",{\"1\":{\"914\":1}}],[\"variables\",{\"1\":{\"206\":1,\"717\":1}}],[\"variable\",{\"1\":{\"140\":2,\"148\":1,\"154\":2}}],[\"vardivider\",{\"1\":{\"158\":4}}],[\"vardividee\",{\"1\":{\"158\":3}}],[\"var\",{\"0\":{\"21\":1},\"1\":{\"13\":1,\"21\":1,\"22\":1,\"106\":1,\"117\":4,\"122\":3,\"123\":8,\"124\":7,\"131\":1,\"135\":1,\"139\":2,\"140\":9,\"141\":1,\"142\":7,\"143\":2,\"145\":2,\"146\":4,\"151\":2,\"152\":4,\"154\":2,\"155\":1,\"156\":3,\"157\":1,\"164\":1,\"649\":34,\"932\":1,\"983\":2,\"989\":3,\"991\":4,\"1127\":4,\"1128\":2,\"1130\":29,\"1139\":1,\"1140\":5,\"1141\":4,\"1188\":2,\"1210\":1,\"1226\":1,\"1407\":2}}],[\"virtual\",{\"1\":{\"1210\":1}}],[\"vi会在屏幕的最下方等待我们输入命令\",{\"1\":{\"1187\":1}}],[\"vim\",{\"1\":{\"1141\":1,\"1185\":1,\"1187\":1}}],[\"viewport\",{\"1\":{\"1407\":1}}],[\"view\",{\"1\":{\"1049\":3,\"1455\":2,\"1515\":1}}],[\"vite\",{\"0\":{\"961\":1}}],[\"via\",{\"1\":{\"345\":1,\"399\":1}}],[\"vi\",{\"1\":{\"30\":1,\"32\":1,\"1025\":1,\"1093\":2,\"1096\":1,\"1118\":1,\"1182\":1,\"1187\":1,\"1198\":1,\"1206\":2,\"1458\":1}}],[\"v5\",{\"0\":{\"15\":1}}],[\"v\",{\"0\":{\"1098\":1},\"1\":{\"13\":1,\"124\":2,\"152\":2,\"190\":5,\"249\":4,\"279\":2,\"283\":1,\"302\":4,\"303\":1,\"304\":3,\"305\":6,\"306\":4,\"312\":5,\"623\":1,\"998\":1,\"1002\":1,\"1128\":2,\"1130\":23,\"1131\":1,\"1134\":1,\"1136\":1,\"1140\":8,\"1141\":6,\"1142\":1,\"1147\":1,\"1200\":1,\"1215\":1,\"1480\":1}}],[\"rdbtablemetadata\",{\"0\":{\"1300\":1}}],[\"rdbschemametadata\",{\"0\":{\"1299\":1}}],[\"rdbdatabasemetadata\",{\"0\":{\"1298\":1},\"1\":{\"1301\":1}}],[\"rdbdatabasemetadata包含执行器syncsqlexecutor\",{\"1\":{\"1293\":1}}],[\"rdf一般在主从复制的时候\",{\"1\":{\"911\":1}}],[\"rdf是默认的持久化方式\",{\"1\":{\"911\":1}}],[\"rdf和aof文件\",{\"1\":{\"911\":1}}],[\"rf\",{\"1\":{\"1215\":2}}],[\"rwx\",{\"1\":{\"1177\":1}}],[\"rw\",{\"1\":{\"1098\":1,\"1130\":6,\"1486\":1}}],[\"rmqbroker\",{\"1\":{\"1136\":1}}],[\"rmqsink\",{\"1\":{\"791\":1}}],[\"rm\",{\"1\":{\"1087\":1,\"1093\":1,\"1119\":1,\"1123\":4,\"1130\":4,\"1147\":1,\"1215\":2}}],[\"rmi\",{\"1\":{\"1087\":2}}],[\"rr只会生成一次readview\",{\"1\":{\"1049\":1}}],[\"rr级别下有\",{\"1\":{\"1048\":1}}],[\"rr\",{\"1\":{\"1044\":1}}],[\"rcng\",{\"1\":{\"1136\":1}}],[\"rc级别下只有record\",{\"1\":{\"1048\":1}}],[\"rc\",{\"1\":{\"1044\":1}}],[\"rs256\",{\"1\":{\"1570\":1}}],[\"rscheduledexecutorservice\",{\"1\":{\"1013\":1}}],[\"rsautil\",{\"1\":{\"1518\":1}}],[\"rsa加密\",{\"0\":{\"720\":1}}],[\"rsa\",{\"1\":{\"32\":1,\"623\":2,\"1130\":1,\"1145\":1,\"1514\":1,\"1515\":1}}],[\"rlock\",{\"1\":{\"1246\":1}}],[\"rlimit\",{\"1\":{\"1210\":1}}],[\"rlistmultimap<string\",{\"1\":{\"1013\":1}}],[\"rlist\",{\"1\":{\"256\":4}}],[\"rlease\",{\"1\":{\"851\":2}}],[\"right\",{\"1\":{\"992\":4}}],[\"richrmqsink\",{\"1\":{\"792\":2}}],[\"richsourcefunction\",{\"1\":{\"791\":1}}],[\"ribbon\",{\"1\":{\"213\":6}}],[\"rpcdeviceoperationbroker\",{\"1\":{\"1342\":1}}],[\"rpchook\",{\"1\":{\"914\":1}}],[\"rpc\",{\"0\":{\"637\":1},\"1\":{\"729\":2}}],[\"rpc服务调用\",{\"0\":{\"73\":1}}],[\"r2dbcreactivesqlexecutor\",{\"1\":{\"1295\":1}}],[\"r2dbctransactionmanager\",{\"1\":{\"559\":1}}],[\"r2dbctransactionmanagerautoconfiguration\",{\"1\":{\"559\":1}}],[\"r2dbc\",{\"0\":{\"559\":1,\"1291\":1,\"1302\":1},\"1\":{\"1291\":1,\"1302\":1}}],[\"r2dbc配置\",{\"1\":{\"558\":1}}],[\"r>>\",{\"1\":{\"537\":1}}],[\"r>\",{\"1\":{\"249\":2,\"252\":1,\"537\":1}}],[\"r\",{\"1\":{\"139\":3,\"179\":4,\"192\":2,\"249\":2,\"252\":1,\"282\":3,\"537\":1,\"647\":2,\"1144\":1,\"1177\":2,\"1200\":1,\"1210\":1,\"1227\":2,\"1486\":1}}],[\"rawpath\",{\"1\":{\"1522\":3}}],[\"raqw5z9icuwddzkq031vzyu87omvktoa1euv7fo93ilxm4wwgxl7\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"raised\",{\"1\":{\"1445\":1,\"1451\":1}}],[\"race\",{\"1\":{\"1445\":1}}],[\"rantasks\",{\"1\":{\"1445\":5}}],[\"random\",{\"1\":{\"730\":1}}],[\"range\",{\"1\":{\"133\":5,\"153\":2,\"154\":1,\"190\":5,\"1248\":1}}],[\"radius\",{\"1\":{\"139\":5}}],[\"raft\",{\"0\":{\"98\":1},\"1\":{\"97\":1}}],[\"rabbit\",{\"1\":{\"1024\":1,\"1125\":1}}],[\"rabbitmqctl\",{\"1\":{\"1025\":1}}],[\"rabbitmq配置步骤\",{\"0\":{\"1025\":1}}],[\"rabbitmq<\",{\"1\":{\"790\":1}}],[\"rabbitmq\",{\"0\":{\"91\":1,\"904\":1,\"1026\":1,\"1125\":1},\"1\":{\"1024\":1,\"1025\":8,\"1125\":3}}],[\"rabitmq\",{\"1\":{\"72\":1}}],[\"rulenodemodel\",{\"1\":{\"1335\":1}}],[\"rulemodel\",{\"1\":{\"1335\":1}}],[\"ruleengine规则引擎\",{\"0\":{\"1334\":1}}],[\"rulescene\",{\"1\":{\"792\":1}}],[\"rulescenesstream\",{\"1\":{\"792\":2}}],[\"rulesevaluator\",{\"1\":{\"792\":2}}],[\"rules>\",{\"1\":{\"49\":1}}],[\"rule\",{\"0\":{\"1310\":1,\"1311\":1},\"1\":{\"792\":11,\"1210\":1,\"1308\":3}}],[\"ru\",{\"1\":{\"580\":3,\"582\":2,\"583\":1,\"704\":3,\"1044\":1}}],[\"rust\",{\"0\":{\"260\":1,\"1660\":1},\"1\":{\"264\":3,\"277\":2,\"282\":2,\"286\":1,\"290\":3,\"291\":2,\"298\":1,\"308\":2,\"320\":1}}],[\"runs\",{\"1\":{\"1515\":1}}],[\"runalltasks\",{\"1\":{\"1445\":3}}],[\"runable接口\",{\"1\":{\"236\":1}}],[\"runner\",{\"0\":{\"1128\":1},\"1\":{\"1128\":7}}],[\"running\",{\"1\":{\"914\":4}}],[\"runnablereader\",{\"1\":{\"647\":3}}],[\"runnable\",{\"1\":{\"232\":1,\"236\":1,\"476\":1,\"573\":1,\"647\":9,\"1445\":6,\"1450\":1}}],[\"run方法\",{\"1\":{\"834\":1,\"835\":1,\"842\":1}}],[\"rune\",{\"1\":{\"164\":1}}],[\"runtimeonly\",{\"1\":{\"1074\":1}}],[\"runtime直接调用python命令执行脚本\",{\"1\":{\"646\":1}}],[\"runtimeservice创建流程实例\",{\"1\":{\"585\":1,\"707\":1}}],[\"runtimeexception\",{\"1\":{\"234\":3,\"345\":3,\"411\":1,\"1013\":1}}],[\"runtimeerror\",{\"1\":{\"159\":1}}],[\"runtime\",{\"0\":{\"174\":1},\"1\":{\"159\":1,\"174\":2}}],[\"runoob\",{\"1\":{\"122\":1,\"133\":1,\"139\":1,\"148\":3,\"151\":2,\"652\":3}}],[\"run\",{\"0\":{\"21\":1,\"394\":1,\"814\":1,\"833\":1,\"836\":1,\"838\":1,\"1108\":1},\"1\":{\"21\":1,\"164\":1,\"173\":1,\"179\":1,\"210\":1,\"218\":1,\"236\":1,\"647\":3,\"686\":1,\"792\":1,\"833\":2,\"837\":1,\"988\":5,\"1032\":1,\"1093\":1,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":2,\"1125\":1,\"1126\":3,\"1127\":2,\"1128\":3,\"1130\":31,\"1131\":1,\"1132\":2,\"1134\":1,\"1135\":1,\"1136\":3,\"1137\":3,\"1138\":1,\"1140\":3,\"1141\":2,\"1142\":1,\"1200\":1,\"1283\":1,\"1320\":1,\"1445\":11,\"1450\":1}}],[\"ro\",{\"1\":{\"1098\":1,\"1130\":2}}],[\"rocksdb<\",{\"1\":{\"790\":1}}],[\"rocketmqmessagelistener\",{\"1\":{\"1245\":1}}],[\"rocketmqtemplate\",{\"1\":{\"1245\":3}}],[\"rocketmq配置\",{\"0\":{\"1136\":1}}],[\"rocketmq新增了同步刷盘机制\",{\"1\":{\"223\":1}}],[\"rocketmq的替代方案\",{\"0\":{\"223\":1}}],[\"rocketmq\",{\"0\":{\"914\":1},\"1\":{\"72\":1,\"1136\":10}}],[\"rowbounds\",{\"1\":{\"853\":2}}],[\"row\",{\"1\":{\"748\":1,\"1445\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"rows\",{\"1\":{\"13\":1}}],[\"roundrobin\",{\"1\":{\"730\":1}}],[\"route>\",{\"1\":{\"974\":3}}],[\"routes\",{\"1\":{\"974\":1,\"1513\":1}}],[\"router>\",{\"1\":{\"974\":1,\"975\":1}}],[\"router\",{\"0\":{\"972\":1,\"973\":1},\"1\":{\"973\":2,\"1513\":1,\"1583\":1,\"1586\":1}}],[\"route\",{\"1\":{\"473\":4,\"973\":1,\"974\":1,\"1136\":1}}],[\"routedefinitions\",{\"1\":{\"468\":1}}],[\"rollout\",{\"1\":{\"1167\":1}}],[\"rollingpolicy>\",{\"1\":{\"596\":3}}],[\"rollingfileappender\",{\"1\":{\"596\":3}}],[\"rolling\",{\"1\":{\"596\":6}}],[\"rollback等事务操作\",{\"1\":{\"632\":1}}],[\"rollback\",{\"1\":{\"202\":1,\"212\":1,\"852\":1,\"1244\":1}}],[\"rolelist\",{\"1\":{\"1564\":1}}],[\"roleid\",{\"1\":{\"1560\":1,\"1561\":3,\"1566\":1,\"1586\":1,\"1606\":1}}],[\"roleidlist=\",{\"1\":{\"1635\":1}}],[\"roleidlist\",{\"1\":{\"1555\":1}}],[\"roledesc\",{\"1\":{\"1559\":1,\"1560\":1,\"1561\":3}}],[\"rolecode\",{\"1\":{\"1559\":1,\"1560\":1,\"1561\":3}}],[\"rolename\",{\"1\":{\"1559\":1,\"1560\":1,\"1561\":4}}],[\"rolebind\",{\"1\":{\"1555\":1,\"1584\":2,\"1586\":1}}],[\"roles\",{\"1\":{\"1513\":1,\"1534\":1}}],[\"role\",{\"1\":{\"430\":8,\"584\":1,\"706\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1584\":6,\"1586\":8,\"1592\":3,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":3}}],[\"root>\",{\"1\":{\"596\":1}}],[\"rootbeandefinition\",{\"1\":{\"438\":1,\"1297\":2}}],[\"rootcontext的servletcontext存放servletcontext接口的实例\",{\"1\":{\"601\":1}}],[\"rootcontext上下文\",{\"1\":{\"601\":1}}],[\"rootcontext\",{\"1\":{\"411\":3}}],[\"rootclass\",{\"1\":{\"386\":1}}],[\"root的有\",{\"1\":{\"243\":1}}],[\"root\",{\"1\":{\"36\":1,\"90\":1,\"411\":1,\"595\":1,\"600\":1,\"601\":1,\"850\":2,\"924\":1,\"970\":7,\"971\":3,\"1036\":3,\"1120\":2,\"1127\":1,\"1129\":1,\"1130\":5,\"1131\":2,\"1140\":3,\"1141\":5,\"1177\":2,\"1188\":1,\"1210\":4,\"1515\":1,\"1647\":1}}],[\"rebuildselector0\",{\"1\":{\"1445\":1}}],[\"rebuild\",{\"1\":{\"1445\":1}}],[\"rebalanceservice\",{\"1\":{\"914\":1,\"920\":1}}],[\"rebalance\",{\"1\":{\"914\":1}}],[\"rebalanceimmediately\",{\"1\":{\"914\":1}}],[\"rebalanceimpl\",{\"1\":{\"914\":4}}],[\"rejected\",{\"1\":{\"1445\":1}}],[\"rejectedexecutionhandler\",{\"1\":{\"1445\":1}}],[\"reject\",{\"1\":{\"1445\":4}}],[\"reject拒绝连接\",{\"1\":{\"1349\":1}}],[\"reject告诉promise\",{\"1\":{\"1000\":1}}],[\"rev\",{\"0\":{\"1149\":1},\"1\":{\"1149\":4}}],[\"review\",{\"1\":{\"399\":1}}],[\"render=\",{\"1\":{\"977\":1}}],[\"renders\",{\"1\":{\"974\":1}}],[\"render\",{\"1\":{\"970\":3,\"971\":2,\"974\":1}}],[\"req\",{\"1\":{\"692\":1,\"1422\":1}}],[\"requestip\",{\"1\":{\"1628\":2,\"1635\":1}}],[\"requestid\",{\"1\":{\"902\":1,\"1345\":2}}],[\"requestmethod\",{\"1\":{\"1586\":44,\"1590\":1,\"1591\":1,\"1592\":11,\"1597\":5}}],[\"requestmappinghandleradapter继承abstracthandlermethodadapter\",{\"0\":{\"403\":1}}],[\"requestmapping\",{\"1\":{\"354\":6,\"982\":2}}],[\"requestready\",{\"1\":{\"1383\":1}}],[\"requestresponsebodymethodprocessor\",{\"1\":{\"405\":1}}],[\"requested\",{\"1\":{\"1137\":1}}],[\"requestoptions\",{\"1\":{\"780\":8,\"786\":1}}],[\"requestobjectfactory\",{\"1\":{\"354\":1}}],[\"requesturi\",{\"1\":{\"471\":4}}],[\"requestparam\",{\"1\":{\"360\":2,\"377\":1,\"609\":1}}],[\"requestparams\",{\"1\":{\"236\":7}}],[\"requestcontextholder\",{\"1\":{\"354\":1}}],[\"requestcache\",{\"1\":{\"327\":1,\"330\":1,\"345\":1,\"348\":6,\"786\":1}}],[\"requestbody\",{\"1\":{\"353\":1}}],[\"request\",{\"0\":{\"180\":1},\"1\":{\"51\":1,\"139\":3,\"179\":2,\"345\":9,\"346\":9,\"348\":1,\"353\":4,\"354\":11,\"360\":1,\"399\":1,\"403\":1,\"406\":1,\"411\":1,\"421\":4,\"422\":5,\"471\":6,\"509\":1,\"529\":1,\"556\":1,\"652\":8,\"692\":1,\"780\":8,\"786\":6,\"801\":2,\"802\":1,\"914\":1,\"1026\":1,\"1259\":13,\"1425\":1,\"1522\":4,\"1523\":3,\"1525\":4,\"1526\":1,\"1635\":1}}],[\"requirepass\",{\"1\":{\"1135\":1}}],[\"requirenonnull\",{\"1\":{\"249\":2,\"250\":1}}],[\"requiredargsconstructor\",{\"1\":{\"1031\":1}}],[\"requiredargsconstructor解决\",{\"1\":{\"38\":1}}],[\"requiredattribute\",{\"1\":{\"471\":3}}],[\"requiredproperties\",{\"1\":{\"410\":1}}],[\"requiredtype\",{\"1\":{\"379\":2,\"413\":2}}],[\"required\",{\"1\":{\"181\":2,\"202\":2,\"329\":1,\"852\":2,\"1486\":3}}],[\"require\",{\"1\":{\"172\":1,\"852\":1,\"992\":5}}],[\"require下载按照module路径下载依赖\",{\"1\":{\"171\":1}}],[\"requiremavenversion>\",{\"1\":{\"49\":1}}],[\"redeploy\",{\"1\":{\"1201\":1}}],[\"redo\",{\"0\":{\"1052\":1}}],[\"red\",{\"1\":{\"596\":1,\"759\":1}}],[\"redirecturis\",{\"1\":{\"1570\":1,\"1571\":1,\"1572\":1,\"1574\":1}}],[\"redirect\",{\"1\":{\"1210\":5,\"1506\":1,\"1531\":1,\"1579\":1,\"1580\":1,\"1582\":4}}],[\"redirects\",{\"1\":{\"977\":1}}],[\"redirectloginauthenticationsuccesshandler\",{\"1\":{\"348\":1}}],[\"redis配置\",{\"1\":{\"1514\":1}}],[\"redission\",{\"1\":{\"1501\":1}}],[\"redisservice\",{\"1\":{\"1480\":1}}],[\"redissonmultilock\",{\"1\":{\"1246\":2}}],[\"redissonclient\",{\"1\":{\"1013\":7,\"1246\":1}}],[\"redisson\",{\"0\":{\"912\":1},\"1\":{\"912\":1}}],[\"redisclustercache实现clustercache\",{\"0\":{\"1370\":1}}],[\"redisclustermanager\",{\"0\":{\"1367\":1},\"1\":{\"1342\":1,\"1366\":1}}],[\"rediscallback\",{\"1\":{\"911\":1}}],[\"redis缓存\",{\"1\":{\"1317\":1}}],[\"redis中信息\",{\"1\":{\"1013\":1}}],[\"redistemplate\",{\"1\":{\"911\":4}}],[\"redisdistributedlock\",{\"1\":{\"911\":1,\"1252\":1}}],[\"redis分布式锁的使用\",{\"1\":{\"911\":1}}],[\"redis支持数据的持久化\",{\"1\":{\"911\":1}}],[\"redis对请求的处理使用了基于epoll的非阻塞io模型\",{\"1\":{\"911\":1}}],[\"redis有较丰富的数据结构\",{\"1\":{\"911\":1}}],[\"redis是一个单线程处理请求\",{\"1\":{\"911\":1}}],[\"redis的持久化方式\",{\"1\":{\"911\":1}}],[\"redis的使用\",{\"1\":{\"911\":1}}],[\"redis操作redis数据库\",{\"1\":{\"468\":1}}],[\"redisindexedsessionrepository\",{\"0\":{\"419\":1}}],[\"redishttpsessionconfiguration继承springhttpsessionconfiguration\",{\"0\":{\"417\":1}}],[\"redis构建redis环境\",{\"1\":{\"211\":1}}],[\"redis\",{\"0\":{\"414\":1,\"724\":1,\"907\":1,\"1135\":1,\"1246\":1,\"1648\":1},\"1\":{\"74\":1,\"218\":3,\"908\":1,\"911\":1,\"912\":2,\"1135\":2,\"1139\":6,\"1246\":7,\"1501\":1,\"1514\":3,\"1515\":2,\"1648\":1}}],[\"reiterate\",{\"1\":{\"399\":4}}],[\"regfuture\",{\"1\":{\"1450\":1}}],[\"region=dzl\",{\"1\":{\"1137\":1}}],[\"register和execute是两个核心方法\",{\"1\":{\"1445\":1}}],[\"register0\",{\"1\":{\"1444\":1}}],[\"registersession\",{\"1\":{\"1421\":1}}],[\"registersingleton\",{\"1\":{\"446\":2}}],[\"registerok\",{\"1\":{\"914\":2}}],[\"registerfiltermessagehook\",{\"1\":{\"914\":1}}],[\"registerconsumer\",{\"1\":{\"914\":1}}],[\"registercontainer\",{\"1\":{\"914\":1,\"918\":1}}],[\"registercustomeditor\",{\"1\":{\"379\":2,\"410\":1}}],[\"registernacoslistener\",{\"1\":{\"879\":1}}],[\"registernacoslistenersforapplications\",{\"1\":{\"879\":1}}],[\"registering\",{\"1\":{\"858\":1}}],[\"registeralias\",{\"1\":{\"852\":1}}],[\"registeraliases\",{\"1\":{\"852\":1}}],[\"registerapplicationscope\",{\"1\":{\"447\":1}}],[\"registerlistenercontainer\",{\"1\":{\"811\":1}}],[\"registerlisteners\",{\"1\":{\"397\":2}}],[\"registerbeandefinition\",{\"1\":{\"1297\":1}}],[\"registerbeandefinitions注册实体bean类型的repository工厂bean\",{\"1\":{\"1297\":1}}],[\"registerbeandefinitions方法处理mapper接口生成beandefinition注册到spring中\",{\"1\":{\"855\":1}}],[\"registerbeandefinitions\",{\"1\":{\"480\":2}}],[\"registerbeanpostprocessors\",{\"1\":{\"397\":2}}],[\"registerendpoint\",{\"1\":{\"1411\":1}}],[\"registerendpoint方法\",{\"0\":{\"1411\":1}}],[\"registerenvironmentbeans\",{\"1\":{\"447\":1}}],[\"registered\",{\"1\":{\"397\":2,\"399\":2,\"411\":1,\"852\":3,\"1445\":2}}],[\"registeredoauth2authorizedclient注解的请求参数解析\",{\"1\":{\"345\":1}}],[\"registeredoauth2authorizedclient\",{\"1\":{\"345\":3}}],[\"registeredclientid\",{\"1\":{\"1564\":3,\"1565\":1,\"1582\":4,\"1586\":44,\"1592\":10,\"1603\":3,\"1607\":2}}],[\"registeredclient\",{\"1\":{\"344\":1,\"1517\":1}}],[\"registerresolvabledependency\",{\"1\":{\"398\":3}}],[\"registerresolvabledependency指定要注入的依赖值\",{\"1\":{\"398\":1}}],[\"register\",{\"1\":{\"397\":2,\"438\":1,\"490\":1,\"852\":2,\"873\":1,\"900\":1,\"1128\":1,\"1348\":1,\"1445\":1,\"1446\":2,\"1450\":2}}],[\"registries\",{\"1\":{\"1096\":1,\"1129\":1}}],[\"registrationid\",{\"1\":{\"345\":1}}],[\"registration\",{\"1\":{\"345\":1}}],[\"registryconfig\",{\"1\":{\"744\":1}}],[\"registryprocessor\",{\"1\":{\"399\":3}}],[\"registryprocessors\",{\"1\":{\"399\":6}}],[\"registry\",{\"1\":{\"29\":3,\"399\":5,\"450\":1,\"480\":2,\"486\":1,\"594\":3,\"859\":1,\"1058\":4,\"1096\":2,\"1127\":1,\"1134\":1,\"1137\":1,\"1283\":1,\"1297\":1}}],[\"regex\",{\"0\":{\"634\":1}}],[\"regular\",{\"1\":{\"399\":2,\"438\":1}}],[\"regularpostprocessors\",{\"1\":{\"399\":3}}],[\"remark\",{\"1\":{\"1611\":1,\"1612\":1,\"1613\":2,\"1622\":1}}],[\"remarks\",{\"1\":{\"773\":2}}],[\"remaining\",{\"1\":{\"397\":1,\"1445\":2}}],[\"removal\",{\"1\":{\"346\":1,\"1445\":1}}],[\"removeall\",{\"1\":{\"1445\":1}}],[\"removeattribute\",{\"1\":{\"346\":1}}],[\"removetask\",{\"1\":{\"1445\":1}}],[\"removetimeoutfuture\",{\"1\":{\"192\":1}}],[\"removejob\",{\"1\":{\"1013\":1}}],[\"removekey\",{\"1\":{\"602\":1}}],[\"remove和poll区别\",{\"1\":{\"239\":1}}],[\"remove\",{\"1\":{\"96\":2,\"255\":2,\"433\":1,\"439\":2,\"602\":3,\"632\":1,\"759\":1,\"1013\":1,\"1147\":1,\"1445\":2,\"1523\":1}}],[\"remotebrokeroffsetstore\",{\"1\":{\"914\":1}}],[\"remote\",{\"1\":{\"36\":2,\"1144\":2,\"1147\":1,\"1421\":1}}],[\"realname\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1554\":1,\"1628\":2}}],[\"realtype\",{\"1\":{\"1297\":2}}],[\"real\",{\"1\":{\"1210\":5,\"1211\":1}}],[\"reactdom\",{\"1\":{\"970\":2,\"971\":1}}],[\"react根据react\",{\"1\":{\"970\":1}}],[\"react最终将这些元素转为dom\",{\"1\":{\"969\":1}}],[\"react\",{\"0\":{\"963\":1,\"973\":1},\"1\":{\"965\":9,\"969\":2,\"970\":5,\"971\":3,\"973\":3}}],[\"reactorql的替换\",{\"1\":{\"1478\":1}}],[\"reactor模型\",{\"0\":{\"1440\":1}}],[\"reactorhttphandleradapter\",{\"0\":{\"511\":1}}],[\"reactor框架\",{\"1\":{\"500\":1}}],[\"reactor\",{\"1\":{\"500\":1}}],[\"reactiveauthorizationmanager<authorizationcontext>\",{\"1\":{\"1522\":1}}],[\"reactiveauthenticationsupplier\",{\"1\":{\"1345\":1}}],[\"reactiveauthenticationholder\",{\"1\":{\"1345\":1}}],[\"reactiveauthenticationmanagerprovider\",{\"1\":{\"1345\":1}}],[\"reactiveauthenticationmanager\",{\"1\":{\"1345\":1}}],[\"reactiveopaquetokenintrospector\",{\"1\":{\"1521\":1}}],[\"reactivecachecontainer<string\",{\"1\":{\"1359\":1}}],[\"reactiveusertokenparser\",{\"1\":{\"1345\":2}}],[\"reactiveusertokengenerator\",{\"1\":{\"1345\":4}}],[\"reactiveusertokengenerator>\",{\"1\":{\"1345\":1}}],[\"reactivelogger\",{\"1\":{\"1345\":2}}],[\"reactiverepository\",{\"1\":{\"1297\":1}}],[\"reactiverepository<e\",{\"1\":{\"1296\":1}}],[\"reactiverepositoryfactorybean\",{\"0\":{\"1296\":1},\"1\":{\"1297\":1}}],[\"reactivesqlexecutor\",{\"0\":{\"1295\":1},\"1\":{\"1293\":1,\"1295\":1}}],[\"reactivewebserverapplicationcontext\",{\"0\":{\"506\":1}}],[\"reactive\",{\"0\":{\"422\":1},\"1\":{\"368\":1,\"1345\":1}}],[\"readbyte\",{\"1\":{\"1451\":1}}],[\"readpropertymessagesender通过send方法将消息交给devicemessagesender处理\",{\"1\":{\"1331\":1}}],[\"readops\",{\"1\":{\"1445\":1}}],[\"readobject\",{\"1\":{\"1257\":1}}],[\"readonly\",{\"1\":{\"991\":2,\"1219\":1}}],[\"readonlybroadcaststate\",{\"1\":{\"791\":1}}],[\"readme\",{\"1\":{\"1147\":1,\"1151\":1}}],[\"readmqttwiremessage\",{\"1\":{\"839\":1}}],[\"readyops\",{\"1\":{\"1445\":6}}],[\"ready\",{\"1\":{\"935\":2,\"991\":1}}],[\"reader\",{\"1\":{\"924\":1}}],[\"read事务隔离级别运行\",{\"1\":{\"219\":1}}],[\"readtimeout=15000\",{\"1\":{\"213\":1}}],[\"read\",{\"0\":{\"52\":1},\"1\":{\"291\":1,\"297\":1,\"717\":2,\"1049\":1,\"1210\":2,\"1211\":1,\"1219\":1,\"1397\":2,\"1445\":3,\"1484\":2,\"1531\":2,\"1532\":4,\"1570\":1}}],[\"re\",{\"0\":{\"578\":1,\"702\":1},\"1\":{\"345\":2,\"578\":2,\"582\":1,\"583\":1,\"702\":2,\"977\":1,\"1259\":1,\"1419\":1}}],[\"reflog\",{\"1\":{\"1147\":1}}],[\"reflection\",{\"1\":{\"174\":1}}],[\"referer\",{\"1\":{\"1210\":1}}],[\"referencecountutil\",{\"1\":{\"1451\":1}}],[\"referencebeanmanager\",{\"1\":{\"738\":1}}],[\"referenceannotationbeanpostprocessor\",{\"0\":{\"741\":1},\"1\":{\"738\":1}}],[\"reference只是一个引用\",{\"1\":{\"270\":1}}],[\"reference都存放的是指向堆上字符串数据的地址\",{\"1\":{\"270\":1}}],[\"reference存放的内容都是指向堆上字符串的地址吗\",{\"1\":{\"270\":1}}],[\"reference\",{\"1\":{\"270\":1,\"439\":2}}],[\"referservices\",{\"1\":{\"742\":1}}],[\"ref\",{\"1\":{\"596\":6,\"1521\":1}}],[\"ref=\",{\"1\":{\"479\":1,\"596\":6}}],[\"refactored\",{\"1\":{\"399\":1}}],[\"refreshtokentimetolive\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"refreshtoken\",{\"1\":{\"1532\":2}}],[\"refresh方法\",{\"1\":{\"482\":1}}],[\"refreshscope\",{\"1\":{\"476\":2}}],[\"refresheventlister\",{\"1\":{\"884\":1}}],[\"refreshevent\",{\"1\":{\"884\":1}}],[\"refresheventreceived\",{\"1\":{\"411\":1}}],[\"refreshed\",{\"1\":{\"411\":2}}],[\"refreshing\",{\"1\":{\"397\":1}}],[\"refresh\",{\"0\":{\"397\":1},\"1\":{\"397\":4,\"411\":1,\"1531\":5}}],[\"refreshcontext\",{\"1\":{\"394\":1}}],[\"recursive\",{\"1\":{\"1032\":4}}],[\"rec\",{\"1\":{\"833\":1}}],[\"recvbytebufallocator\",{\"1\":{\"1391\":2,\"1400\":1}}],[\"recv\",{\"1\":{\"804\":5}}],[\"rect1\",{\"1\":{\"274\":3,\"288\":2,\"290\":2}}],[\"rectangle\",{\"1\":{\"274\":2,\"288\":4,\"289\":2,\"290\":4,\"291\":4}}],[\"records\",{\"1\":{\"801\":1,\"802\":1,\"1613\":1,\"1622\":1}}],[\"record\",{\"0\":{\"1309\":1},\"1\":{\"236\":2,\"798\":1,\"1048\":2,\"1308\":1}}],[\"recovery=1\",{\"1\":{\"1231\":1}}],[\"recovery\",{\"1\":{\"176\":1}}],[\"recover\",{\"0\":{\"160\":1},\"1\":{\"160\":4}}],[\"receive\",{\"1\":{\"1445\":1}}],[\"receiverdetailaddress\",{\"1\":{\"1059\":1}}],[\"receiver\",{\"1\":{\"833\":2,\"1059\":1}}],[\"received\",{\"1\":{\"439\":1,\"509\":1}}],[\"receivedqty\",{\"1\":{\"236\":2}}],[\"receiving\",{\"1\":{\"236\":1}}],[\"receipts\",{\"1\":{\"236\":4}}],[\"receipts=receiptbiz\",{\"1\":{\"236\":1}}],[\"receiptstatus\",{\"1\":{\"236\":2}}],[\"receipt\",{\"1\":{\"236\":13}}],[\"receiptrecords\",{\"1\":{\"236\":3}}],[\"receiptrecord\",{\"1\":{\"236\":10}}],[\"receiptrecordbiz\",{\"1\":{\"236\":8}}],[\"receiptbiz\",{\"1\":{\"236\":8}}],[\"resp\",{\"1\":{\"1422\":1}}],[\"responsebodyresulthandler\",{\"0\":{\"423\":1}}],[\"responsebody\",{\"1\":{\"378\":2,\"1526\":3}}],[\"responseentity<ajaxresult>\",{\"1\":{\"360\":1}}],[\"responseentity\",{\"1\":{\"360\":6}}],[\"response\",{\"0\":{\"684\":1},\"1\":{\"345\":7,\"346\":3,\"403\":1,\"652\":8,\"692\":1,\"786\":2,\"914\":1,\"1259\":10,\"1506\":1,\"1525\":1}}],[\"responsewriter\",{\"1\":{\"139\":3}}],[\"resltsesthandler增强\",{\"1\":{\"853\":1}}],[\"res=manager\",{\"1\":{\"647\":1}}],[\"res\",{\"1\":{\"594\":1,\"647\":1,\"692\":1}}],[\"research\",{\"1\":{\"585\":1,\"707\":1,\"1066\":1,\"1256\":1}}],[\"resetoutput\",{\"1\":{\"1383\":2}}],[\"resetcommoncaches\",{\"1\":{\"397\":1}}],[\"reset\",{\"0\":{\"52\":1},\"1\":{\"397\":2,\"647\":1,\"649\":2,\"801\":1,\"802\":1,\"833\":1,\"852\":3,\"1147\":3,\"1151\":1,\"1515\":1}}],[\"restclient\",{\"1\":{\"1344\":1}}],[\"resthighlevelclient\",{\"1\":{\"780\":4,\"786\":1}}],[\"restprotocol\",{\"1\":{\"745\":1}}],[\"restful\",{\"1\":{\"616\":1}}],[\"resttemplate\",{\"0\":{\"614\":1},\"1\":{\"1501\":1}}],[\"rest\",{\"1\":{\"399\":2,\"977\":2,\"1248\":1}}],[\"restart=unless\",{\"1\":{\"1137\":1}}],[\"restart=on\",{\"1\":{\"1130\":2}}],[\"restart=always\",{\"1\":{\"1130\":1,\"1132\":2,\"1135\":1,\"1136\":3,\"1137\":2,\"1140\":1}}],[\"restartstrategies\",{\"1\":{\"792\":2}}],[\"restartstrategy\",{\"1\":{\"792\":1}}],[\"restart\",{\"1\":{\"3\":1,\"1025\":1,\"1093\":1,\"1096\":1,\"1120\":2,\"1122\":1,\"1126\":1,\"1127\":2,\"1128\":1,\"1138\":1,\"1193\":2,\"1194\":1,\"1198\":1,\"1475\":1}}],[\"resoures\",{\"1\":{\"1121\":1}}],[\"resourcer文件夹下\",{\"1\":{\"1065\":1}}],[\"resourcehandlerregistry\",{\"1\":{\"594\":1}}],[\"resource文件夹中创建processes文件夹存放bpmn流程xml\",{\"1\":{\"585\":1,\"707\":1}}],[\"resourceeditor\",{\"1\":{\"410\":1}}],[\"resourceloader\",{\"1\":{\"410\":3,\"852\":1}}],[\"resourceloaderaware等要忽略依赖注入的接口\",{\"1\":{\"398\":1}}],[\"resources\",{\"1\":{\"397\":1,\"594\":3,\"852\":1,\"1065\":2,\"1134\":3,\"1259\":1}}],[\"resourceserverconfigurer\",{\"0\":{\"339\":1}}],[\"resource\",{\"0\":{\"347\":1,\"359\":1},\"1\":{\"354\":1,\"359\":1,\"410\":1,\"647\":2,\"852\":3,\"1025\":2,\"1026\":2,\"1173\":1,\"1452\":2}}],[\"resolution\",{\"1\":{\"439\":1}}],[\"resolver\",{\"1\":{\"1296\":1}}],[\"resolvemapperlocations\",{\"1\":{\"852\":2}}],[\"resolvedependencies\",{\"0\":{\"1071\":1}}],[\"resolvedautowiremode\",{\"1\":{\"358\":5}}],[\"resolved\",{\"1\":{\"357\":1}}],[\"resolve\",{\"1\":{\"345\":3,\"1296\":1}}],[\"resolveclientregistrationid\",{\"1\":{\"345\":1}}],[\"resolveargument\",{\"1\":{\"345\":1}}],[\"result<boolean>\",{\"1\":{\"1522\":1}}],[\"result<t\",{\"1\":{\"294\":1}}],[\"resultfuture\",{\"1\":{\"1522\":2}}],[\"resultlist\",{\"1\":{\"1248\":2}}],[\"resulttype=\",{\"1\":{\"1059\":1}}],[\"resulthandler\",{\"1\":{\"853\":2}}],[\"resultmap>\",{\"1\":{\"1059\":1}}],[\"resultmap=\",{\"1\":{\"1059\":1}}],[\"resultmap\",{\"1\":{\"786\":4}}],[\"resultg\",{\"1\":{\"649\":5}}],[\"result\",{\"1\":{\"139\":4,\"158\":3,\"249\":3,\"251\":2,\"280\":3,\"334\":2,\"378\":2,\"399\":1,\"406\":2,\"513\":2,\"647\":3,\"648\":2,\"649\":41,\"672\":4,\"778\":1,\"779\":1,\"780\":3,\"786\":1,\"852\":2,\"911\":7,\"945\":1,\"1353\":3,\"1522\":4,\"1526\":6}}],[\"reputmessageservice\",{\"1\":{\"921\":1}}],[\"repo1\",{\"1\":{\"1201\":1}}],[\"report\",{\"0\":{\"1453\":1},\"1\":{\"1097\":2,\"1215\":12,\"1484\":2}}],[\"reportthrowinsubscribe\",{\"1\":{\"535\":1,\"556\":1}}],[\"repo\",{\"1\":{\"346\":2,\"642\":1,\"1097\":2}}],[\"repositories>\",{\"1\":{\"49\":1,\"621\":1,\"1202\":1}}],[\"repositorytype\",{\"1\":{\"1297\":1}}],[\"repositoryservice加载xml文件部署流程\",{\"1\":{\"585\":1,\"707\":1}}],[\"repository>\",{\"1\":{\"49\":1,\"621\":1,\"1202\":1,\"1203\":1}}],[\"repository\",{\"1\":{\"49\":2,\"236\":2,\"1202\":3,\"1203\":2}}],[\"replid\",{\"1\":{\"1251\":1}}],[\"replicas=<replica\",{\"1\":{\"1159\":1}}],[\"replicas\",{\"1\":{\"773\":1}}],[\"replication\",{\"1\":{\"98\":1}}],[\"replacing\",{\"1\":{\"399\":1}}],[\"replace\",{\"1\":{\"172\":3,\"649\":6,\"1032\":1,\"1058\":1}}],[\"replenishmenttask\",{\"1\":{\"1251\":2}}],[\"replenishment\",{\"1\":{\"236\":1}}],[\"repllockqty\",{\"1\":{\"236\":5}}],[\"repeatable\",{\"1\":{\"219\":1}}],[\"repeat\",{\"1\":{\"51\":1}}],[\"retry\",{\"1\":{\"1445\":1}}],[\"retries\",{\"1\":{\"730\":2,\"801\":1,\"802\":1}}],[\"retrieval\",{\"0\":{\"34\":1}}],[\"retrofit2\",{\"1\":{\"616\":1}}],[\"retrofit\",{\"0\":{\"616\":1}}],[\"returntype\",{\"1\":{\"911\":2}}],[\"returnobjectvalue\",{\"1\":{\"602\":5}}],[\"returning\",{\"1\":{\"535\":1,\"556\":1}}],[\"returnvaluehandlers\",{\"1\":{\"403\":2}}],[\"returned\",{\"1\":{\"345\":1,\"1445\":1}}],[\"returns\",{\"1\":{\"249\":5,\"250\":1,\"297\":1,\"1445\":1}}],[\"returnqty\",{\"1\":{\"236\":5}}],[\"return\",{\"1\":{\"51\":1,\"127\":1,\"138\":2,\"139\":5,\"140\":1,\"155\":2,\"158\":3,\"164\":1,\"192\":1,\"249\":7,\"250\":2,\"251\":1,\"255\":2,\"256\":1,\"280\":1,\"290\":1,\"298\":1,\"326\":2,\"329\":1,\"330\":1,\"331\":3,\"334\":1,\"345\":7,\"346\":1,\"348\":1,\"353\":2,\"354\":6,\"357\":3,\"359\":1,\"360\":5,\"377\":5,\"378\":2,\"383\":5,\"386\":1,\"411\":1,\"413\":3,\"421\":1,\"422\":2,\"430\":3,\"433\":2,\"434\":5,\"435\":1,\"438\":1,\"439\":1,\"450\":1,\"456\":1,\"467\":1,\"471\":1,\"473\":1,\"494\":1,\"505\":2,\"509\":1,\"513\":3,\"535\":2,\"537\":1,\"556\":2,\"557\":5,\"602\":12,\"632\":2,\"648\":1,\"649\":23,\"657\":1,\"658\":8,\"672\":4,\"719\":4,\"780\":4,\"786\":5,\"792\":2,\"801\":19,\"852\":6,\"853\":2,\"869\":1,\"871\":1,\"900\":6,\"911\":6,\"932\":1,\"971\":3,\"974\":1,\"975\":2,\"977\":1,\"982\":2,\"986\":2,\"988\":6,\"1013\":1,\"1031\":1,\"1032\":3,\"1036\":3,\"1246\":4,\"1247\":1,\"1256\":1,\"1259\":7,\"1296\":1,\"1345\":3,\"1352\":1,\"1353\":2,\"1397\":1,\"1412\":1,\"1445\":6,\"1446\":1,\"1452\":1,\"1480\":1,\"1515\":1,\"1517\":1,\"1521\":3,\"1522\":3,\"1523\":3,\"1525\":2,\"1526\":3}}],[\"relayed\",{\"1\":{\"249\":2,\"250\":1}}],[\"reloadprotocol\",{\"1\":{\"1358\":1}}],[\"reload\",{\"1\":{\"36\":1,\"1093\":1,\"1096\":1,\"1205\":1}}],[\"releaseimplementation\",{\"1\":{\"1074\":1}}],[\"releasecompile\",{\"1\":{\"1074\":1}}],[\"releases\",{\"1\":{\"642\":1,\"1092\":1,\"1118\":1,\"1201\":1,\"1203\":1}}],[\"releases>\",{\"1\":{\"49\":2,\"1202\":2}}],[\"release\",{\"1\":{\"31\":1,\"851\":4,\"852\":1,\"1066\":1,\"1074\":1,\"1130\":2,\"1302\":1,\"1419\":2,\"1451\":1}}],[\"release<\",{\"1\":{\"31\":1,\"799\":1}}],[\"要不然安装报错\",{\"1\":{\"1129\":1}}],[\"要定义\",{\"1\":{\"658\":1}}],[\"要做的事情\",{\"1\":{\"658\":1}}],[\"要有建造者模式的思想\",{\"1\":{\"471\":1}}],[\"要过滤的数据\",{\"1\":{\"471\":1}}],[\"要处理的事件\",{\"1\":{\"413\":1}}],[\"要修改为\",{\"1\":{\"318\":1}}],[\"要么为空\",{\"1\":{\"286\":1}}],[\"要么任意多个不可变引用\",{\"1\":{\"265\":1}}],[\"要查询的信息就是对应索引以及id\",{\"1\":{\"220\":1}}],[\"要保证多个服务本地事务操作前后数据一致\",{\"1\":{\"212\":1}}],[\"要替换的名字\",{\"1\":{\"103\":1}}],[\"要显示的附加行数\",{\"1\":{\"12\":1}}],[\"要在启动类排除默认数据源配置\",{\"1\":{\"632\":1}}],[\"要在\",{\"1\":{\"12\":1}}],[\"这意味着这些容器可以通过共享的网络命名空间和虚拟网络设备进行通信\",{\"1\":{\"1170\":1}}],[\"这意味着每个\",{\"1\":{\"1170\":1}}],[\"这意味着用户可以加载和注册\",{\"1\":{\"850\":1}}],[\"这使得容器可以通过pod的名称来解析和访问其他容器或服务\",{\"1\":{\"1168\":1}}],[\"这也是\",{\"1\":{\"992\":1}}],[\"这也就是我们所说的基于生命周期\",{\"1\":{\"680\":1}}],[\"这两个方法将会提交目前最大的offset\",{\"1\":{\"798\":1}}],[\"这两个都可以注入\",{\"1\":{\"658\":1}}],[\"这些配置文件可以通过kubernetes\",{\"1\":{\"1163\":1}}],[\"这些容器通常是相互关联\",{\"1\":{\"1161\":1}}],[\"这些容器在pod中运行在同一个节点上\",{\"1\":{\"1161\":1}}],[\"这些容器都会被加入app\",{\"1\":{\"1117\":1}}],[\"这些文件会按照字母的顺序执行\",{\"1\":{\"1115\":1}}],[\"这些场景听上去很拗口\",{\"1\":{\"995\":1}}],[\"这些定义反过来定义beanfactorypostprocessor实例\",{\"1\":{\"900\":1}}],[\"这些没有提交的数据不会重复消费\",{\"1\":{\"798\":1}}],[\"这些属性分别控制执行\",{\"1\":{\"589\":1,\"711\":1}}],[\"这些参数用于指定匹配行之前\",{\"1\":{\"12\":1}}],[\"这就需要一种服务发现机制\",{\"1\":{\"481\":1}}],[\"这就是准备好了\",{\"1\":{\"188\":1}}],[\"这三个注解都可以在普通的controller类上使用\",{\"1\":{\"375\":1}}],[\"这段代码意味着\",{\"1\":{\"295\":1}}],[\"这几个值\",{\"1\":{\"282\":1}}],[\"这将打印出\",{\"1\":{\"252\":1}}],[\"这容易导致线程的堆积\",{\"1\":{\"213\":1}}],[\"这时\",{\"1\":{\"989\":1}}],[\"这时就需要使用redis分布式锁进行处理\",{\"1\":{\"911\":1}}],[\"这时需要先解引用指针\",{\"1\":{\"290\":1}}],[\"这时通道就可以使用\",{\"1\":{\"190\":1}}],[\"这时候会产生编译错误\",{\"1\":{\"123\":1}}],[\"这一点很重要\",{\"1\":{\"179\":1}}],[\"这恰恰说明了\",{\"1\":{\"174\":1}}],[\"这跟\",{\"1\":{\"160\":1}}],[\"这样会占用大量带宽\",{\"1\":{\"1425\":1}}],[\"这样\",{\"1\":{\"1117\":1,\"1161\":1,\"1171\":1}}],[\"这样弊端也就比较明显了\",{\"1\":{\"902\":1}}],[\"这样做是全局配置\",{\"1\":{\"902\":1}}],[\"这样的格式\",{\"1\":{\"656\":1}}],[\"这样的语言中的\",{\"1\":{\"160\":1}}],[\"这样其它类型无需再实现该方法\",{\"1\":{\"297\":1}}],[\"这样向上冒泡直到最顶层\",{\"1\":{\"159\":1}}],[\"这样就避免了多次查询数据库的耗时操作\",{\"1\":{\"911\":1}}],[\"这样就可以在声明文件中使用\",{\"1\":{\"995\":1}}],[\"这样就可以设置拒绝策略\",{\"1\":{\"213\":1}}],[\"这样就可以扫描到了\",{\"1\":{\"20\":1}}],[\"这样就会跳过\",{\"1\":{\"31\":1}}],[\"这是对options解析的结果\",{\"1\":{\"1311\":1}}],[\"这是一个存储系统中所有组信息的文本文件\",{\"1\":{\"1177\":1}}],[\"这是一个有意而为之的选择\",{\"1\":{\"273\":1}}],[\"这是service将请求转发给后端pod的目标端口\",{\"1\":{\"1171\":1}}],[\"这是其他服务或客户端用于与service通信的端口\",{\"1\":{\"1171\":1}}],[\"这是为了防止文档在完全加载\",{\"1\":{\"935\":1}}],[\"这是根据节点的线程队列长度和线程等待时间等指标计算得出的\",{\"1\":{\"756\":1}}],[\"这是重点和核心\",{\"1\":{\"246\":1}}],[\"这是它的定义\",{\"1\":{\"158\":1}}],[\"这是由于\",{\"1\":{\"11\":1}}],[\"这里若channel没有注册到eventloop\",{\"1\":{\"1450\":1}}],[\"这里有两种情况\",{\"1\":{\"1151\":1}}],[\"这里有递归导入处理\",{\"1\":{\"491\":1}}],[\"这里不再赘述\",{\"1\":{\"1141\":1}}],[\"这里不要写一些专用词汇\",{\"1\":{\"103\":1}}],[\"这里配置容器系统变量\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"这里以\",{\"1\":{\"996\":1}}],[\"这里可以通过配置拦截器对执行器增强\",{\"1\":{\"852\":1}}],[\"这里是average\",{\"1\":{\"771\":1}}],[\"这里的上下文即standardcontext\",{\"1\":{\"678\":1}}],[\"这里使用下\",{\"1\":{\"658\":1}}],[\"这里使用了适配器模式adapter\",{\"1\":{\"343\":1}}],[\"这里注入方式是不行的\",{\"1\":{\"658\":1}}],[\"这里会自旋等待\",{\"1\":{\"834\":1}}],[\"这里会判断jsp也i按对应的servlet是否已经生成\",{\"1\":{\"651\":1}}],[\"这里会进入递归调用springapplication中的run方法产生父上下文初始化器\",{\"1\":{\"395\":1}}],[\"这里要想默认数据源生效\",{\"1\":{\"632\":1}}],[\"这里集成了security一些特性\",{\"1\":{\"419\":1}}],[\"这里就是通用的异常处理器了\",{\"1\":{\"378\":1}}],[\"这里都是一个新的代码块\",{\"1\":{\"285\":1}}],[\"这里我们定义了一个可以存储整数类型的带缓冲通道\",{\"1\":{\"190\":1}}],[\"这里\",{\"1\":{\"152\":1}}],[\"这种共享网络命名空间和虚拟网络设备的机制使得容器之间的网络通信更加高效和快速\",{\"1\":{\"1170\":1}}],[\"这种共享的方式是通过共享\",{\"1\":{\"1170\":1}}],[\"这种设计使得\",{\"1\":{\"1170\":1}}],[\"这种分工协作的方式确保了pod在集群中的正确创建和运行\",{\"1\":{\"1162\":1}}],[\"这种语法了21\",{\"1\":{\"992\":1}}],[\"这种方式支持传参\",{\"1\":{\"658\":1}}],[\"这种方式不支持传参\",{\"1\":{\"658\":1}}],[\"这种形式用的较少\",{\"1\":{\"289\":1}}],[\"这种形式去使用\",{\"1\":{\"286\":1}}],[\"这种不带声明格式的只能在函数体中出现\",{\"1\":{\"124\":1}}],[\"这种因式分解关键字的写法一般用于声明全局变量\",{\"1\":{\"124\":2}}],[\"这被称为导出\",{\"1\":{\"116\":1}}],[\"这个是透明的\",{\"1\":{\"1425\":1}}],[\"这个是模板名\",{\"1\":{\"103\":1}}],[\"这个id就是刚才setting\",{\"1\":{\"1203\":2}}],[\"这个ip地址与pod的生命周期绑定\",{\"1\":{\"1161\":1}}],[\"这个逻辑卷和物理分区一样\",{\"1\":{\"1197\":1}}],[\"这个字段是可选的\",{\"1\":{\"1171\":1}}],[\"这个不算工作区\",{\"1\":{\"1151\":1}}],[\"这个环境变量可以在后续的任何run指令中使用\",{\"1\":{\"1105\":1}}],[\"这个类型\",{\"1\":{\"995\":1}}],[\"这个对象被称之为\",{\"1\":{\"971\":1}}],[\"这个对应模板的短名称\",{\"1\":{\"103\":1}}],[\"这个对应模板的tags\",{\"1\":{\"103\":1}}],[\"这个时候\",{\"1\":{\"730\":1}}],[\"这个容器就是为了支持servlet的功能而存在\",{\"1\":{\"652\":1,\"681\":1}}],[\"这个机制称为spring\",{\"1\":{\"476\":2}}],[\"这个方法一个封装一个wrappedrequest\",{\"1\":{\"418\":1}}],[\"这个方法计算点实例与坐标\",{\"1\":{\"295\":1}}],[\"这个方法位于结构体的命名空间中\",{\"1\":{\"291\":1}}],[\"这个新概念\",{\"1\":{\"273\":1}}],[\"这个\",{\"1\":{\"160\":1,\"174\":1}}],[\"这个终止过程就是\",{\"1\":{\"159\":1}}],[\"这个错误值有个\",{\"1\":{\"159\":1}}],[\"这个就是模板的项目名\",{\"1\":{\"103\":1}}],[\"这个set方法一定不能是static的\",{\"1\":{\"25\":1}}],[\"参见\",{\"1\":{\"160\":1}}],[\"参数校验异常\",{\"1\":{\"1526\":1}}],[\"参数名称\",{\"1\":{\"1486\":1}}],[\"参数唯一标识符\",{\"1\":{\"1486\":1}}],[\"参数最大值\",{\"1\":{\"1486\":4}}],[\"参数最小值\",{\"1\":{\"1486\":4}}],[\"参数总数有\",{\"1\":{\"1221\":1}}],[\"参数个数\",{\"1\":{\"1220\":1}}],[\"参数传递\",{\"0\":{\"1220\":1}}],[\"参数调优\",{\"0\":{\"1206\":1}}],[\"参数默认值\",{\"1\":{\"986\":1}}],[\"参数详解\",{\"0\":{\"715\":1}}],[\"参数相关\",{\"1\":{\"451\":1}}],[\"参数\",{\"1\":{\"164\":1,\"246\":1,\"379\":1,\"1056\":1}}],[\"参数为\",{\"1\":{\"154\":1,\"382\":1}}],[\"参数设置为\",{\"1\":{\"31\":1}}],[\"参数来控制上下文行数\",{\"1\":{\"12\":1}}],[\"参考链接\",{\"1\":{\"980\":1,\"1271\":1}}],[\"参考依赖注入\",{\"1\":{\"859\":2}}],[\"参考5\",{\"1\":{\"625\":1}}],[\"参考4\",{\"1\":{\"625\":1}}],[\"参考3\",{\"1\":{\"625\":1}}],[\"参考2\",{\"1\":{\"257\":1,\"625\":1,\"1209\":1}}],[\"参考1\",{\"1\":{\"257\":1,\"625\":1,\"1209\":1}}],[\"参考\",{\"1\":{\"1\":1,\"2\":1,\"4\":1,\"7\":1,\"39\":1,\"86\":1,\"87\":1,\"98\":1,\"99\":1,\"114\":2,\"168\":1,\"235\":1,\"356\":3,\"360\":1,\"478\":1,\"608\":2,\"623\":1,\"624\":1,\"634\":1,\"641\":1,\"646\":1,\"647\":2,\"674\":2,\"715\":2,\"717\":1,\"750\":1,\"751\":1,\"759\":1,\"774\":1,\"780\":4,\"781\":2,\"794\":2,\"798\":1,\"803\":1,\"905\":1,\"913\":1,\"923\":1,\"925\":1,\"964\":1,\"973\":1,\"1049\":2,\"1078\":1,\"1081\":1,\"1101\":1,\"1109\":1,\"1115\":1,\"1119\":1,\"1126\":3,\"1128\":3,\"1133\":1,\"1150\":1,\"1156\":1,\"1178\":1,\"1189\":1,\"1195\":1,\"1197\":2,\"1199\":1,\"1213\":1,\"1230\":1,\"1231\":1,\"1376\":1,\"1388\":1,\"1407\":1,\"1408\":2,\"1426\":1}}],[\"和oauth2授权码认证类似\",{\"1\":{\"1426\":1}}],[\"和connection关联\",{\"1\":{\"1381\":1}}],[\"和redis缓存中\",{\"1\":{\"1345\":1}}],[\"和网络组件id创建网络\",{\"1\":{\"1319\":1}}],[\"和最大服务质量\",{\"1\":{\"1272\":1}}],[\"和负载\",{\"1\":{\"1271\":1}}],[\"和工作区\",{\"1\":{\"1214\":1}}],[\"和github账户邮箱并无关联\",{\"1\":{\"1146\":1}}],[\"和宿主公用一个docker的方式启动\",{\"1\":{\"1130\":2}}],[\"和宿主机共用docker\",{\"1\":{\"1130\":1}}],[\"和私钥\",{\"1\":{\"1130\":1}}],[\"和此网桥相连的所有容器构成局域网\",{\"1\":{\"1090\":1}}],[\"和本文maven的profile使用无关系\",{\"1\":{\"1078\":1}}],[\"和2\",{\"1\":{\"1074\":5}}],[\"和函数表达式\",{\"1\":{\"986\":1}}],[\"和内联等效\",{\"1\":{\"983\":1}}],[\"和must\",{\"1\":{\"761\":1}}],[\"和类加载有关\",{\"1\":{\"678\":1}}],[\"和类上\",{\"1\":{\"372\":1}}],[\"和wraper均继承自container接口\",{\"1\":{\"678\":1}}],[\"和bootstrap\",{\"1\":{\"593\":1}}],[\"和sessionid关联\",{\"1\":{\"346\":1}}],[\"和接口类似\",{\"1\":{\"297\":1}}],[\"和反射\",{\"1\":{\"174\":1}}],[\"和其对应的\",{\"1\":{\"154\":1}}],[\"和追踪\",{\"0\":{\"138\":1}}],[\"和\",{\"0\":{\"289\":1},\"1\":{\"12\":1,\"124\":1,\"138\":1,\"140\":2,\"148\":1,\"152\":2,\"160\":1,\"174\":1,\"176\":1,\"212\":1,\"266\":1,\"282\":1,\"286\":1,\"290\":1,\"296\":1,\"298\":1,\"398\":1,\"616\":1,\"656\":1,\"658\":1,\"668\":1,\"674\":1,\"767\":1,\"801\":1,\"802\":1,\"982\":2,\"991\":2,\"992\":2,\"1109\":1,\"1222\":1,\"1425\":1}}],[\"bqmbrtk\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"b7ca\",{\"1\":{\"1198\":1}}],[\"btree\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":2}}],[\"bt\",{\"1\":{\"1194\":3}}],[\"btn\",{\"1\":{\"947\":2}}],[\"bms\",{\"1\":{\"850\":1,\"1123\":1}}],[\"bjpowernode\",{\"1\":{\"479\":3}}],[\"bdimg\",{\"1\":{\"934\":2}}],[\"bd2\",{\"1\":{\"479\":1}}],[\"bd1\",{\"1\":{\"479\":1}}],[\"bd\",{\"1\":{\"438\":4}}],[\"b相互依赖\",{\"1\":{\"383\":1}}],[\"bpm\",{\"1\":{\"585\":2,\"589\":3,\"707\":2,\"711\":3}}],[\"bp\",{\"1\":{\"359\":3}}],[\"bw\",{\"1\":{\"358\":2,\"359\":3,\"410\":4}}],[\"b>\",{\"1\":{\"334\":3}}],[\"b>>\",{\"1\":{\"334\":2}}],[\"bug\",{\"1\":{\"1445\":2}}],[\"buggy\",{\"1\":{\"1445\":1}}],[\"busy\",{\"1\":{\"1445\":2}}],[\"business\",{\"0\":{\"1674\":1}}],[\"businessexception\",{\"1\":{\"1251\":1}}],[\"businesstype\",{\"1\":{\"360\":2}}],[\"buff\",{\"1\":{\"1179\":2}}],[\"buffers\",{\"1\":{\"1445\":1}}],[\"buffer缓存区\",{\"0\":{\"1438\":1}}],[\"buffered\",{\"1\":{\"1383\":1}}],[\"buffer\",{\"1\":{\"556\":1,\"717\":6,\"780\":1,\"801\":1,\"802\":1}}],[\"buffer方法\",{\"0\":{\"553\":1}}],[\"bureaucode=p\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"but\",{\"1\":{\"974\":1,\"1445\":1}}],[\"button\",{\"1\":{\"298\":8,\"1407\":1}}],[\"bucket\",{\"1\":{\"786\":1}}],[\"buckets\",{\"1\":{\"786\":4}}],[\"bucket>\",{\"1\":{\"786\":1}}],[\"built\",{\"1\":{\"334\":1}}],[\"buildresult\",{\"1\":{\"1526\":1}}],[\"buildcodeandmsg\",{\"1\":{\"1526\":2}}],[\"buildcommandoptions\",{\"1\":{\"985\":2}}],[\"buildcommand\",{\"1\":{\"985\":2}}],[\"build多平台image\",{\"1\":{\"1093\":1}}],[\"buildkit的所有特性\",{\"1\":{\"1093\":1}}],[\"buildx\",{\"0\":{\"1093\":1},\"1\":{\"1093\":5}}],[\"build目录\",{\"1\":{\"1065\":1}}],[\"buildfrommap\",{\"1\":{\"1036\":1}}],[\"buildtree构造菜单树\",{\"0\":{\"1036\":1}}],[\"buildname\",{\"1\":{\"986\":3}}],[\"buildnamingservice\",{\"1\":{\"869\":1}}],[\"buildsqlsessionfactory方法\",{\"1\":{\"858\":1}}],[\"buildsqlsessionfactory\",{\"1\":{\"852\":3}}],[\"buildstate\",{\"1\":{\"334\":8}}],[\"buildadvisors\",{\"1\":{\"435\":1}}],[\"building\",{\"1\":{\"334\":1}}],[\"buildingauthenticationmanager\",{\"1\":{\"331\":1,\"341\":1}}],[\"build方法的dobuild方法\",{\"1\":{\"334\":1}}],[\"build\",{\"0\":{\"1064\":1},\"1\":{\"115\":2,\"173\":8,\"218\":2,\"271\":1,\"326\":1,\"329\":1,\"331\":1,\"345\":2,\"348\":1,\"360\":1,\"422\":2,\"467\":1,\"471\":4,\"505\":1,\"852\":1,\"1031\":1,\"1072\":1,\"1093\":1,\"1097\":1,\"1120\":2,\"1123\":1,\"1130\":1,\"1215\":5,\"1216\":1,\"1474\":1,\"1475\":1,\"1519\":1,\"1523\":2}}],[\"builder构建端点配置\",{\"1\":{\"1417\":1}}],[\"builder\",{\"1\":{\"106\":2,\"345\":1,\"422\":1,\"471\":1,\"780\":1,\"786\":3,\"1417\":1,\"1523\":2}}],[\"blur\",{\"1\":{\"991\":2}}],[\"blueocean\",{\"1\":{\"1130\":3}}],[\"blue\",{\"1\":{\"311\":2,\"312\":3,\"759\":1}}],[\"blocking\",{\"1\":{\"1445\":1}}],[\"block\",{\"1\":{\"801\":1,\"802\":1,\"1445\":2}}],[\"blocked\",{\"1\":{\"232\":1}}],[\"blog\",{\"1\":{\"762\":1,\"1374\":2}}],[\"blankdisc\",{\"1\":{\"479\":1}}],[\"blank2\",{\"1\":{\"277\":2}}],[\"blank1\",{\"1\":{\"277\":2}}],[\"bigint\",{\"1\":{\"1464\":1,\"1465\":2,\"1466\":2,\"1467\":4,\"1468\":1}}],[\"bigdecimal\",{\"1\":{\"236\":29}}],[\"bit\",{\"1\":{\"1227\":1}}],[\"bitnami\",{\"1\":{\"1126\":2}}],[\"bi\",{\"1\":{\"1123\":1}}],[\"bizexceptionhandle\",{\"1\":{\"1526\":1}}],[\"bizexception\",{\"1\":{\"1526\":2}}],[\"bizcodeenum\",{\"1\":{\"1522\":1,\"1526\":2}}],[\"biz2consumer\",{\"1\":{\"804\":3}}],[\"biz2\",{\"1\":{\"804\":5}}],[\"biz1consumer\",{\"1\":{\"804\":5}}],[\"biz1\",{\"1\":{\"804\":9}}],[\"biz\",{\"1\":{\"623\":1}}],[\"binfmt\",{\"1\":{\"1093\":1}}],[\"bindmenu\",{\"1\":{\"1584\":1}}],[\"bindmapperfornamespace\",{\"1\":{\"860\":1}}],[\"bindexceptionhandler\",{\"1\":{\"1526\":1}}],[\"bindexception\",{\"1\":{\"378\":2,\"1526\":3}}],[\"binderfactory\",{\"1\":{\"345\":1}}],[\"bindinguser\",{\"1\":{\"1586\":1}}],[\"bindingmenu\",{\"1\":{\"1586\":1,\"1592\":1,\"1606\":1}}],[\"bindings\",{\"1\":{\"648\":4}}],[\"bindingresult\",{\"1\":{\"353\":5,\"378\":1}}],[\"binding\",{\"1\":{\"181\":2,\"1243\":2,\"1566\":1}}],[\"bind\",{\"1\":{\"106\":1,\"1308\":1,\"1419\":1,\"1584\":1,\"1607\":2}}],[\"bin\",{\"0\":{\"1054\":1},\"1\":{\"50\":2,\"65\":1,\"173\":1,\"1087\":1,\"1092\":2,\"1118\":4,\"1130\":18,\"1177\":2,\"1182\":1,\"1188\":5,\"1192\":1,\"1217\":1,\"1230\":1,\"1458\":2}}],[\"binlog\",{\"1\":{\"13\":1}}],[\"branch查看当前分支\",{\"1\":{\"1148\":1}}],[\"branch\",{\"1\":{\"1144\":3,\"1148\":2,\"1311\":1}}],[\"browser\",{\"1\":{\"1198\":1,\"1628\":2,\"1635\":1}}],[\"browserrouter\",{\"1\":{\"973\":1}}],[\"broadcasting\",{\"1\":{\"914\":1}}],[\"broadcaststream<list<triggerconfig>>\",{\"1\":{\"792\":2}}],[\"broadcaststream\",{\"1\":{\"791\":1,\"792\":1}}],[\"broadcast\",{\"1\":{\"730\":1,\"792\":2}}],[\"broker进行消息订阅\",{\"1\":{\"1328\":1}}],[\"brokereventbus\",{\"0\":{\"1286\":1}}],[\"broker等身份\",{\"1\":{\"1271\":1}}],[\"brokerip1\",{\"1\":{\"1136\":1}}],[\"brokerid\",{\"1\":{\"1136\":1}}],[\"brokerrole\",{\"1\":{\"1136\":1}}],[\"brokername\",{\"1\":{\"1136\":1}}],[\"brokerclustername\",{\"1\":{\"1136\":1}}],[\"broker改造\",{\"0\":{\"1023\":1}}],[\"broker侧\",{\"0\":{\"921\":1}}],[\"broker中的commit文件\",{\"1\":{\"920\":1}}],[\"broker断开连接\",{\"1\":{\"846\":1}}],[\"broker\",{\"1\":{\"15\":1,\"1136\":7}}],[\"bridge\",{\"1\":{\"647\":2,\"1122\":1}}],[\"breaking\",{\"1\":{\"297\":2,\"399\":1}}],[\"break\",{\"1\":{\"132\":1,\"188\":1,\"280\":2,\"329\":1,\"535\":1,\"556\":1,\"780\":1,\"914\":9,\"1445\":3,\"1521\":3}}],[\"b=1\",{\"1\":{\"129\":1}}],[\"bcdedit\",{\"1\":{\"53\":2}}],[\"byclientid\",{\"1\":{\"1586\":1}}],[\"by=\",{\"1\":{\"1130\":1}}],[\"bytebuf\",{\"1\":{\"1451\":2}}],[\"bytebufallocator\",{\"1\":{\"1391\":1}}],[\"byteswritten\",{\"1\":{\"1383\":3}}],[\"bytes\",{\"1\":{\"1210\":1}}],[\"byte\",{\"1\":{\"719\":1,\"801\":2,\"802\":1,\"911\":2}}],[\"bytearrayinputstream\",{\"1\":{\"1257\":4}}],[\"bytearrayoutputstream\",{\"1\":{\"647\":3,\"839\":1,\"1257\":5}}],[\"bytearray\",{\"1\":{\"578\":1,\"702\":1}}],[\"bytecode\",{\"1\":{\"241\":2}}],[\"bytype\",{\"0\":{\"358\":1,\"497\":1},\"1\":{\"479\":1}}],[\"byname\",{\"0\":{\"358\":1,\"498\":1},\"1\":{\"479\":1}}],[\"by\",{\"0\":{\"43\":1,\"760\":1},\"1\":{\"250\":2,\"358\":6,\"397\":1,\"439\":1,\"647\":1,\"716\":1,\"758\":1,\"760\":2,\"768\":1,\"769\":1,\"770\":1,\"1042\":2,\"1141\":3,\"1248\":1,\"1259\":2,\"1297\":1,\"1445\":3}}],[\"beyond\",{\"1\":{\"1445\":1}}],[\"best\",{\"1\":{\"1445\":1}}],[\"because\",{\"1\":{\"852\":1,\"1445\":3}}],[\"being\",{\"1\":{\"509\":1}}],[\"bearer\",{\"1\":{\"1531\":2,\"1532\":2,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"bearertokenconverter\",{\"1\":{\"467\":1,\"1031\":1}}],[\"beatreactor\",{\"1\":{\"872\":4}}],[\"bean注解\",{\"1\":{\"488\":1}}],[\"bean注解使用\",{\"1\":{\"372\":1}}],[\"beandeinition注册的后置处理器接口\",{\"1\":{\"485\":1}}],[\"beandefinitionholder\",{\"1\":{\"900\":1}}],[\"beandefinitions\",{\"1\":{\"859\":1,\"900\":4}}],[\"beandefinitionstoreexception\",{\"1\":{\"491\":2}}],[\"beandefinitionnames\",{\"1\":{\"438\":1}}],[\"beandefinition\",{\"1\":{\"430\":4}}],[\"beandefinitionregistrypostprocessor可以注册进一步的bean定义\",{\"1\":{\"900\":1}}],[\"beandefinitionregistrypostprocessor\",{\"0\":{\"485\":1},\"1\":{\"399\":9,\"900\":1}}],[\"beandefinitionregistrypostprocessors\",{\"1\":{\"399\":5}}],[\"beandefinitionregistry\",{\"1\":{\"399\":3,\"480\":1}}],[\"bean工厂后置处理器顶层接口\",{\"1\":{\"484\":1}}],[\"bean工厂后置处理器委托器\",{\"1\":{\"483\":1}}],[\"bean=\",{\"1\":{\"479\":3}}],[\"bean>\",{\"1\":{\"479\":6,\"480\":1}}],[\"bean的注入\",{\"0\":{\"478\":1}}],[\"beaninstance\",{\"1\":{\"439\":1}}],[\"beanclass\",{\"1\":{\"435\":8}}],[\"beanclassloaderaware\",{\"1\":{\"329\":1,\"440\":1}}],[\"bean后置处理器\",{\"0\":{\"432\":1}}],[\"beanwrapper\",{\"1\":{\"410\":1}}],[\"beans>\",{\"1\":{\"479\":2}}],[\"beans\",{\"1\":{\"397\":5,\"399\":2,\"438\":3,\"439\":1,\"447\":2,\"479\":4}}],[\"beansexception\",{\"1\":{\"397\":2,\"410\":1,\"413\":1,\"438\":1,\"439\":1,\"1345\":1}}],[\"beanpostprocessor\",{\"1\":{\"1345\":2}}],[\"beanpostprocess\",{\"1\":{\"397\":2}}],[\"beanpropertybindingresult\",{\"1\":{\"353\":1}}],[\"bean加载顺序问题\",{\"1\":{\"367\":1}}],[\"beannamegenerator\",{\"1\":{\"480\":1}}],[\"beannameaware\",{\"1\":{\"440\":1}}],[\"beannames\",{\"1\":{\"438\":3}}],[\"beanname\",{\"1\":{\"357\":3,\"358\":2,\"359\":2,\"383\":6,\"433\":3,\"434\":6,\"435\":4,\"438\":10,\"439\":4,\"1345\":1}}],[\"beanfactoryaware\",{\"1\":{\"440\":1}}],[\"beanfactorytransactionattributesourceadvisor\",{\"1\":{\"430\":4}}],[\"beanfactorypostprocessor\",{\"0\":{\"484\":1},\"1\":{\"399\":5}}],[\"beanfactorypostprocessors\",{\"1\":{\"399\":7}}],[\"beanfactory\",{\"1\":{\"329\":2,\"397\":14,\"398\":5,\"399\":33,\"435\":2}}],[\"beanutils\",{\"0\":{\"1247\":1}}],[\"beanutil\",{\"1\":{\"210\":1,\"236\":2}}],[\"bean\",{\"0\":{\"354\":1,\"358\":1},\"1\":{\"31\":3,\"326\":4,\"329\":1,\"330\":2,\"354\":1,\"383\":10,\"397\":7,\"399\":3,\"410\":2,\"421\":1,\"430\":4,\"433\":6,\"434\":10,\"435\":1,\"438\":5,\"439\":1,\"467\":1,\"479\":1,\"480\":1,\"486\":1,\"488\":1,\"505\":1,\"658\":28,\"801\":7,\"852\":1,\"858\":1,\"1031\":1,\"1345\":6,\"1513\":1}}],[\"between\",{\"1\":{\"399\":2,\"1515\":2}}],[\"beforeconfigure\",{\"1\":{\"334\":1}}],[\"beforeinit\",{\"1\":{\"334\":1}}],[\"before\",{\"1\":{\"249\":9,\"346\":1,\"382\":1,\"399\":1,\"833\":3,\"852\":2,\"914\":2,\"1445\":3}}],[\"beginning\",{\"1\":{\"914\":1}}],[\"begin\",{\"1\":{\"241\":1}}],[\"been\",{\"1\":{\"282\":1,\"411\":4,\"439\":1,\"833\":1,\"914\":2}}],[\"bee\",{\"1\":{\"165\":1}}],[\"beego\",{\"0\":{\"183\":1},\"1\":{\"67\":1,\"165\":1,\"173\":1}}],[\"be\",{\"0\":{\"43\":1},\"1\":{\"250\":1,\"329\":2,\"345\":5,\"399\":2,\"411\":2,\"438\":1,\"1215\":1,\"1419\":1,\"1445\":8}}],[\"borrow\",{\"1\":{\"1515\":1}}],[\"bossgroup\",{\"1\":{\"1450\":1}}],[\"bound\",{\"1\":{\"1565\":1,\"1592\":1}}],[\"boundsql\",{\"1\":{\"853\":1}}],[\"boundconstructor\",{\"1\":{\"108\":1}}],[\"boldmagenta\",{\"1\":{\"596\":1}}],[\"box<u8>\",{\"1\":{\"298\":1}}],[\"box<f64>\",{\"1\":{\"298\":1}}],[\"box<t>\",{\"1\":{\"298\":2}}],[\"box<dyn\",{\"1\":{\"298\":4}}],[\"box\",{\"1\":{\"298\":4}}],[\"boost\",{\"1\":{\"1248\":5}}],[\"bootapi\",{\"1\":{\"1455\":1}}],[\"bootproto=static\",{\"1\":{\"1198\":1}}],[\"bootjar\",{\"1\":{\"1073\":2,\"1130\":1}}],[\"boot<\",{\"1\":{\"658\":1,\"981\":1}}],[\"bootstrap<\",{\"1\":{\"862\":1}}],[\"bootstrap\",{\"1\":{\"438\":1,\"593\":2,\"801\":3,\"802\":1,\"1139\":1}}],[\"boot提供的filterregistrationbean注册filter\",{\"1\":{\"421\":1}}],[\"boot\",{\"0\":{\"585\":1,\"707\":1,\"1077\":1},\"1\":{\"211\":2,\"446\":1,\"468\":1,\"481\":1,\"494\":1,\"585\":6,\"639\":1,\"658\":1,\"707\":6,\"851\":6,\"981\":1,\"1026\":1,\"1066\":9,\"1479\":1,\"1501\":1}}],[\"boot项目单元测试使用junit\",{\"0\":{\"40\":1}}],[\"book2\",{\"1\":{\"151\":8}}],[\"book1\",{\"1\":{\"151\":8}}],[\"book\",{\"1\":{\"148\":2,\"151\":16}}],[\"books\",{\"1\":{\"148\":4,\"151\":6}}],[\"bool类型特有\",{\"1\":{\"1486\":8}}],[\"boolquery\",{\"1\":{\"1248\":1}}],[\"boolquerybuilder\",{\"1\":{\"1248\":6}}],[\"bool查询\",{\"0\":{\"783\":1}}],[\"bool使用terms\",{\"1\":{\"762\":1}}],[\"boolean\",{\"0\":{\"1415\":1},\"1\":{\"329\":2,\"346\":1,\"359\":2,\"379\":1,\"383\":4,\"399\":1,\"434\":4,\"438\":1,\"480\":1,\"648\":4,\"649\":2,\"672\":1,\"780\":1,\"786\":3,\"852\":1,\"900\":1,\"911\":3,\"914\":1,\"985\":3,\"986\":1,\"991\":1,\"1032\":2,\"1259\":2,\"1445\":5,\"1522\":1,\"1525\":1,\"1532\":4,\"1533\":1}}],[\"bool\",{\"0\":{\"767\":1},\"1\":{\"124\":1,\"164\":1,\"266\":1,\"271\":1,\"318\":2,\"762\":3,\"767\":1,\"782\":1,\"783\":1,\"1248\":1,\"1486\":4}}],[\"body>\",{\"1\":{\"1407\":1}}],[\"body数据绑定\",{\"0\":{\"180\":1}}],[\"body\",{\"1\":{\"36\":2,\"360\":4,\"399\":1,\"1531\":1}}],[\"banner\",{\"1\":{\"1515\":1}}],[\"bank\",{\"1\":{\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"769\":1,\"770\":1}}],[\"baidu\",{\"1\":{\"1541\":1}}],[\"bai\",{\"1\":{\"1116\":2}}],[\"baiyin\",{\"0\":{\"1116\":1},\"1\":{\"34\":1,\"595\":1,\"1115\":1,\"1120\":6}}],[\"backmanager\",{\"1\":{\"1582\":3,\"1583\":2,\"1584\":1}}],[\"backends\",{\"1\":{\"1025\":3,\"1026\":3}}],[\"backend\",{\"1\":{\"1024\":1,\"1025\":3,\"1026\":1,\"1122\":2}}],[\"background\",{\"1\":{\"833\":1}}],[\"backgroundservice\",{\"0\":{\"105\":1}}],[\"baz\",{\"1\":{\"992\":2}}],[\"babel\",{\"0\":{\"969\":1},\"1\":{\"969\":1}}],[\"baomidou\",{\"1\":{\"585\":1,\"707\":1}}],[\"baobaotao\",{\"1\":{\"480\":1}}],[\"ba04\",{\"1\":{\"479\":3}}],[\"batch\",{\"1\":{\"467\":1,\"798\":1,\"801\":1,\"802\":2,\"1513\":1}}],[\"badcredentials\",{\"1\":{\"1518\":3}}],[\"badcredentialsexception\",{\"1\":{\"1518\":3}}],[\"bad\",{\"1\":{\"360\":1,\"924\":1,\"1518\":3}}],[\"badrequest\",{\"1\":{\"360\":1}}],[\"bar\",{\"1\":{\"284\":2,\"992\":10,\"993\":3,\"994\":7}}],[\"balance3\",{\"1\":{\"140\":3}}],[\"balance2\",{\"1\":{\"140\":3}}],[\"balance\",{\"1\":{\"140\":10,\"770\":3,\"771\":2}}],[\"basic认证\",{\"1\":{\"1616\":2}}],[\"basicexample\",{\"1\":{\"974\":1}}],[\"basictypeinfo\",{\"1\":{\"792\":3}}],[\"basic\",{\"0\":{\"974\":1},\"1\":{\"422\":1,\"1531\":1,\"1570\":2,\"1571\":2,\"1616\":2}}],[\"basicauth中间件\",{\"0\":{\"177\":1}}],[\"baseioreactor\",{\"1\":{\"1382\":1}}],[\"baseurl=http\",{\"1\":{\"1120\":1,\"1121\":2,\"1475\":3}}],[\"basepackages\",{\"1\":{\"900\":3}}],[\"basepackages=\",{\"1\":{\"376\":2}}],[\"base<\",{\"1\":{\"790\":2}}],[\"basemapper\",{\"1\":{\"672\":1}}],[\"basecontexthandler\",{\"1\":{\"602\":1,\"1248\":3}}],[\"basedirectory\",{\"1\":{\"450\":2}}],[\"basedir\",{\"1\":{\"450\":2}}],[\"based\",{\"1\":{\"358\":2,\"1210\":1}}],[\"base64\",{\"1\":{\"13\":1,\"625\":1,\"1531\":1}}],[\"base\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"86\":2,\"453\":2,\"694\":1,\"1283\":1,\"1452\":2}}],[\"bashrc在每次打开新的终端时都会被读取\",{\"1\":{\"1118\":1}}],[\"bashrc的区别\",{\"1\":{\"1118\":1}}],[\"bashrc文件中的内容\",{\"1\":{\"1118\":1}}],[\"bashrc是home目录下的一个shell文件\",{\"1\":{\"1118\":1}}],[\"bashrc\",{\"1\":{\"1118\":3,\"1186\":1}}],[\"bash\",{\"0\":{\"5\":1,\"17\":1},\"1\":{\"50\":2,\"218\":1,\"1087\":1,\"1118\":2,\"1130\":1,\"1136\":1,\"1177\":2,\"1192\":1,\"1217\":1,\"1230\":1}}],[\"b\",{\"1\":{\"12\":2,\"121\":1,\"122\":2,\"124\":2,\"127\":2,\"128\":2,\"129\":4,\"139\":2,\"140\":6,\"243\":4,\"282\":2,\"297\":4,\"334\":3,\"723\":1,\"1059\":1,\"1148\":1,\"1150\":2,\"1227\":2,\"1243\":10,\"1292\":2,\"1450\":2}}],[\"995ac19a1d234748bda597f99117794e\",{\"1\":{\"1622\":1}}],[\"998e\",{\"1\":{\"1514\":1,\"1564\":1,\"1565\":2,\"1572\":1,\"1574\":1}}],[\"9100\",{\"1\":{\"1513\":2,\"1514\":2}}],[\"9120\",{\"1\":{\"1475\":3}}],[\"91\",{\"1\":{\"1198\":1}}],[\"93b9\",{\"1\":{\"1198\":1}}],[\"9300\",{\"1\":{\"1139\":3}}],[\"98\",{\"1\":{\"1136\":1}}],[\"9876\",{\"1\":{\"1136\":4}}],[\"9851\",{\"1\":{\"1133\":1}}],[\"9850\",{\"1\":{\"1133\":1}}],[\"9849\",{\"1\":{\"1133\":1}}],[\"9848\",{\"1\":{\"1132\":4,\"1133\":3,\"1649\":1}}],[\"9555\",{\"1\":{\"1133\":2,\"1649\":1}}],[\"9yz6636093\",{\"1\":{\"758\":2}}],[\"9+\",{\"1\":{\"441\":1}}],[\"9702\",{\"1\":{\"341\":2}}],[\"9736\",{\"1\":{\"341\":1}}],[\"9000\",{\"1\":{\"1131\":2,\"1137\":2,\"1138\":1,\"1210\":1,\"1283\":1,\"1515\":1,\"1532\":2,\"1550\":1,\"1572\":1,\"1574\":1,\"1641\":1,\"1650\":1}}],[\"9001\",{\"1\":{\"1126\":1,\"1131\":3,\"1138\":1}}],[\"9094\",{\"1\":{\"801\":3,\"802\":1}}],[\"9093\",{\"1\":{\"801\":3,\"802\":1}}],[\"9092\",{\"1\":{\"92\":1,\"801\":3,\"802\":1,\"1126\":3}}],[\"90\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"1132\":1}}],[\"924\",{\"1\":{\"1445\":1}}],[\"9293\",{\"1\":{\"1180\":1}}],[\"9209\",{\"1\":{\"1513\":1}}],[\"9200\",{\"1\":{\"1137\":2,\"1139\":4,\"1248\":1,\"1506\":1,\"1514\":1,\"1574\":1}}],[\"9201\",{\"1\":{\"1122\":1}}],[\"92\",{\"1\":{\"48\":1,\"1187\":1}}],[\"9\",{\"1\":{\"11\":1,\"282\":1,\"635\":2,\"851\":2,\"1138\":1,\"1191\":1,\"1221\":1,\"1613\":1}}],[\"8198c1fd3f6e4a4e9683d6aa24e1496e\",{\"1\":{\"1572\":1,\"1574\":1}}],[\"8566\",{\"1\":{\"1445\":1}}],[\"8511\",{\"1\":{\"1137\":1}}],[\"8以后使用外部挂载必须配置mysql\",{\"1\":{\"1140\":1}}],[\"8以上或centos8系统的需要\",{\"1\":{\"1093\":1}}],[\"8004\",{\"1\":{\"1475\":3}}],[\"8007\",{\"1\":{\"1210\":1}}],[\"8001\",{\"1\":{\"1210\":1}}],[\"8002\",{\"1\":{\"1210\":1}}],[\"8000\",{\"1\":{\"1210\":1}}],[\"8099\",{\"1\":{\"1136\":1}}],[\"8091\",{\"1\":{\"1134\":2}}],[\"80\",{\"1\":{\"1127\":3,\"1171\":1,\"1283\":1,\"1592\":1}}],[\"8085\",{\"1\":{\"1455\":2,\"1458\":1}}],[\"8083\",{\"1\":{\"1210\":1}}],[\"8081表示宿主机端口和容器端口映射\",{\"1\":{\"1200\":1}}],[\"8081\",{\"1\":{\"1142\":2,\"1200\":4,\"1202\":3,\"1203\":2,\"1248\":1}}],[\"8087\",{\"1\":{\"1127\":1}}],[\"8089\",{\"1\":{\"1096\":1,\"1116\":1,\"1120\":2,\"1129\":1,\"1215\":1,\"1475\":2}}],[\"8080\",{\"1\":{\"36\":3,\"179\":2,\"679\":2,\"1122\":1,\"1126\":1,\"1130\":14,\"1136\":1,\"1171\":1,\"1210\":1,\"1407\":1}}],[\"88888888<\",{\"1\":{\"1202\":2}}],[\"8851\",{\"1\":{\"1133\":1}}],[\"8850\",{\"1\":{\"1133\":1}}],[\"8849\",{\"1\":{\"1133\":1}}],[\"8848\",{\"1\":{\"94\":1,\"1132\":4,\"1133\":3,\"1283\":1,\"1649\":1}}],[\"88\",{\"1\":{\"1096\":1,\"1129\":1,\"1215\":1}}],[\"8fe6e9b2a9330862\",{\"1\":{\"760\":2}}],[\"8类型的字符\",{\"1\":{\"749\":1}}],[\"8<\",{\"1\":{\"596\":2,\"1202\":6}}],[\"8u8\",{\"1\":{\"298\":1}}],[\"8g\",{\"1\":{\"186\":1}}],[\"8后\",{\"1\":{\"47\":1}}],[\"8\",{\"0\":{\"1555\":1,\"1566\":1,\"1586\":1,\"1597\":1},\"1\":{\"11\":1,\"34\":1,\"55\":1,\"56\":1,\"103\":1,\"129\":2,\"174\":1,\"277\":1,\"282\":1,\"479\":1,\"595\":1,\"596\":1,\"652\":2,\"719\":1,\"924\":1,\"1032\":1,\"1115\":1,\"1116\":2,\"1133\":1,\"1139\":1,\"1140\":3,\"1141\":4,\"1183\":1,\"1215\":1,\"1221\":1,\"1302\":1,\"1407\":1,\"1458\":1,\"1515\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":1}}],[\"需注意设置参数必传\",{\"1\":{\"1456\":1}}],[\"需使用api解析获取字段明细\",{\"1\":{\"1456\":1}}],[\"需判断连接状态\",{\"1\":{\"1383\":1}}],[\"需先加载到本地\",{\"1\":{\"1093\":1}}],[\"需先移除topic\",{\"1\":{\"8\":1}}],[\"需求分析\",{\"0\":{\"1492\":1}}],[\"需求\",{\"0\":{\"1015\":1},\"1\":{\"1470\":1,\"1498\":1}}],[\"需手动ack\",{\"1\":{\"804\":2}}],[\"需保证存储也是完整\",{\"1\":{\"762\":1}}],[\"需提供双方约定的唯一密钥\",{\"1\":{\"719\":1}}],[\"需提前生成a代理对象\",{\"1\":{\"383\":1}}],[\"需进行补全\",{\"1\":{\"672\":1}}],[\"需显式处理\",{\"1\":{\"230\":1}}],[\"需带有模块文件夹名\",{\"1\":{\"170\":1}}],[\"需在结构体中字段加标签\",{\"1\":{\"181\":1}}],[\"需在mod文件中\",{\"1\":{\"169\":1}}],[\"需在模块go\",{\"1\":{\"169\":1}}],[\"需要独立的认证授权系统\",{\"1\":{\"1500\":1}}],[\"需要主动判断连接结果\",{\"1\":{\"1398\":1}}],[\"需要带上nexus进行访问\",{\"1\":{\"1200\":1}}],[\"需要注册自己本地使用的网络ip\",{\"1\":{\"1137\":1}}],[\"需要注意的是\",{\"1\":{\"271\":1,\"656\":1,\"1171\":1}}],[\"需要加window\",{\"1\":{\"935\":1}}],[\"需要对监听消息的方法中引入\",{\"1\":{\"798\":2}}],[\"需要使用\",{\"1\":{\"749\":1,\"992\":1}}],[\"需要使用点号\",{\"1\":{\"149\":1}}],[\"需要\",{\"1\":{\"658\":1}}],[\"需要先格式化成合适的文件系统\",{\"1\":{\"1197\":1}}],[\"需要先自定义job\",{\"1\":{\"658\":1}}],[\"需要先进行解引用\",{\"1\":{\"312\":1}}],[\"需要生成代码的proto协议文件\",{\"1\":{\"643\":1}}],[\"需要构建订阅的上下文context的内容\",{\"1\":{\"557\":1}}],[\"需要参数的话使用constructor\",{\"1\":{\"479\":1}}],[\"需要把该闭包声明为可变类型\",{\"1\":{\"318\":1}}],[\"需要保证主键id全局唯一\",{\"1\":{\"221\":1}}],[\"需要执行\",{\"1\":{\"173\":1}}],[\"需要在类型声明文件中先引用原有模块\",{\"1\":{\"994\":1}}],[\"需要在类路径下\",{\"1\":{\"31\":1}}],[\"需要在\",{\"1\":{\"983\":1}}],[\"需要在支持jsp\",{\"1\":{\"651\":1}}],[\"需要在数据库连接的时候设置时区\",{\"1\":{\"23\":1}}],[\"需要在运行项目时添加\",{\"1\":{\"11\":1}}],[\"需降低版本\",{\"1\":{\"47\":1}}],[\"需等到mqtt\",{\"1\":{\"15\":1}}],[\"需将没开放的module强制对外开放\",{\"1\":{\"11\":1}}],[\"1fbba06130d44dc98584f83bd224aced\",{\"1\":{\"1564\":3,\"1565\":1,\"1572\":1,\"1574\":1,\"1582\":4,\"1592\":10,\"1603\":3,\"1607\":2}}],[\"1f64\",{\"1\":{\"298\":1}}],[\"1j9grunrxj\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"1的值\",{\"1\":{\"1486\":4}}],[\"1协议\",{\"1\":{\"1289\":1}}],[\"1m\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"1并不能直接使用\",{\"1\":{\"1122\":1}}],[\"1表示永不过期\",{\"1\":{\"908\":1}}],[\"1对多\",{\"1\":{\"893\":2}}],[\"1也仅有唯一消费线程生效\",{\"1\":{\"804\":1}}],[\"1w\",{\"1\":{\"656\":1}}],[\"1天\",{\"1\":{\"596\":1}}],[\"1时认证管理器使用委托器authenticationmanagerdelegator防止无限递归\",{\"1\":{\"333\":1}}],[\"1l\",{\"1\":{\"255\":1,\"780\":1,\"1445\":1,\"1522\":1}}],[\"197\",{\"1\":{\"1475\":3}}],[\"19段\",{\"1\":{\"1099\":1}}],[\"19\",{\"1\":{\"135\":1,\"657\":1,\"982\":1,\"1115\":1,\"1183\":1,\"1215\":1,\"1592\":1}}],[\"19264ac3de444b30bab436397daf900a\",{\"1\":{\"1525\":1,\"1541\":1,\"1550\":1,\"1561\":3,\"1572\":1,\"1574\":1,\"1628\":2,\"1635\":1}}],[\"192\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"1096\":1,\"1129\":1,\"1215\":1,\"1248\":2,\"1515\":2}}],[\"184\",{\"1\":{\"1635\":1}}],[\"18002\",{\"1\":{\"1210\":1}}],[\"180000\",{\"1\":{\"780\":1}}],[\"18808\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"1883\",{\"1\":{\"1026\":1}}],[\"18\",{\"1\":{\"135\":1,\"656\":1,\"851\":6,\"982\":2,\"1256\":1,\"1532\":2}}],[\"17356475181\",{\"1\":{\"1550\":1}}],[\"172\",{\"1\":{\"1134\":2,\"1136\":4,\"1137\":6}}],[\"17\",{\"1\":{\"135\":1,\"156\":1,\"1136\":1,\"1139\":2,\"1187\":4,\"1622\":2}}],[\"13294\",{\"1\":{\"1635\":1}}],[\"13286\",{\"1\":{\"341\":1}}],[\"1331429368098066432\",{\"1\":{\"1455\":1}}],[\"1358\",{\"1\":{\"1137\":5}}],[\"13500\",{\"1\":{\"341\":1}}],[\"138\",{\"1\":{\"1126\":1,\"1283\":1,\"1647\":1,\"1648\":1,\"1649\":3,\"1650\":1,\"1651\":1}}],[\"13\",{\"1\":{\"135\":1,\"585\":1,\"707\":1,\"762\":1,\"1475\":3,\"1583\":1,\"1592\":11,\"1628\":1}}],[\"115\",{\"1\":{\"1475\":3}}],[\"11110111\",{\"1\":{\"1399\":1}}],[\"11111111\",{\"1\":{\"1399\":3}}],[\"11803\",{\"1\":{\"341\":1}}],[\"11786\",{\"1\":{\"341\":1}}],[\"1170\",{\"1\":{\"34\":1,\"595\":1,\"1515\":1,\"1647\":1}}],[\"112p\",{\"1\":{\"1187\":1}}],[\"11285\",{\"1\":{\"341\":1}}],[\"11271\",{\"1\":{\"341\":1}}],[\"11262\",{\"1\":{\"341\":2}}],[\"11\",{\"1\":{\"135\":1,\"174\":1,\"190\":1,\"234\":1,\"241\":1,\"479\":1,\"656\":1,\"1221\":1,\"1564\":3,\"1565\":1,\"1582\":1,\"1583\":1,\"1592\":2,\"1613\":1,\"1628\":4,\"1635\":4,\"1641\":1}}],[\"1264\",{\"1\":{\"1628\":1,\"1635\":1}}],[\"121\",{\"1\":{\"1475\":3}}],[\"1216\",{\"1\":{\"1256\":1}}],[\"124193794\",{\"1\":{\"1374\":1}}],[\"124966221\",{\"1\":{\"1374\":1}}],[\"12秒都会触发\",{\"1\":{\"656\":1}}],[\"127\",{\"1\":{\"282\":1,\"801\":9,\"802\":3,\"924\":3,\"1126\":1,\"1137\":1,\"1210\":1,\"1515\":1,\"1532\":2}}],[\"1200\",{\"1\":{\"1651\":1}}],[\"120000\",{\"1\":{\"801\":2,\"802\":2}}],[\"120\",{\"1\":{\"236\":1,\"1249\":1}}],[\"1234\",{\"1\":{\"623\":1}}],[\"123456\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"924\":1,\"1026\":2,\"1135\":1,\"1141\":3,\"1514\":2,\"1515\":1,\"1651\":1}}],[\"123\",{\"1\":{\"124\":3,\"594\":1,\"623\":1,\"1407\":1}}],[\"128\",{\"1\":{\"123\":1}}],[\"12\",{\"1\":{\"117\":1,\"135\":1,\"625\":1,\"635\":1,\"648\":1,\"656\":1,\"657\":1,\"716\":1,\"801\":3,\"1026\":4,\"1092\":1,\"1187\":2,\"1373\":1,\"1541\":1,\"1583\":1,\"1592\":1}}],[\"1562612461360189442\",{\"1\":{\"1613\":1}}],[\"15672\",{\"1\":{\"91\":1,\"1026\":1,\"1125\":1}}],[\"1583352964332478468\",{\"1\":{\"1586\":1}}],[\"1585534221669720065\",{\"1\":{\"1564\":1,\"1603\":1}}],[\"1585533634798510081\",{\"1\":{\"1561\":1}}],[\"1587041627729911810\",{\"1\":{\"1541\":1}}],[\"1574296975522275330\",{\"1\":{\"1607\":1}}],[\"1574584764235517955\",{\"1\":{\"1597\":1}}],[\"1574584764235517954\",{\"1\":{\"1597\":1}}],[\"1574584764235517953\",{\"1\":{\"1597\":1}}],[\"1574584764235517956\",{\"1\":{\"1597\":1}}],[\"1574584764189380609\",{\"1\":{\"1597\":1}}],[\"1578667242197569556\",{\"1\":{\"1586\":1}}],[\"1578949678068305921\",{\"1\":{\"1607\":1}}],[\"1578938556401487877\",{\"1\":{\"1586\":1}}],[\"1578938556401487888\",{\"1\":{\"1586\":1}}],[\"1578938556464402456\",{\"1\":{\"1586\":1}}],[\"1578983949508558855\",{\"1\":{\"1586\":1}}],[\"1575672738339278852\",{\"1\":{\"1586\":1}}],[\"1575729752687902727\",{\"1\":{\"1586\":1}}],[\"1572827147167023107\",{\"1\":{\"1586\":1}}],[\"1572827147167023112\",{\"1\":{\"1586\":1}}],[\"1572827147167023114\",{\"1\":{\"1586\":1}}],[\"1572827147167023115\",{\"1\":{\"1586\":1}}],[\"1572827147167023111\",{\"1\":{\"1586\":1}}],[\"1572827147167023118\",{\"1\":{\"1586\":1}}],[\"1572827147167023119\",{\"1\":{\"1586\":1}}],[\"1572827147167023120\",{\"1\":{\"1586\":1}}],[\"1572827147167023121\",{\"1\":{\"1586\":1}}],[\"1572827147167023123\",{\"1\":{\"1586\":1}}],[\"1572827147167023122\",{\"1\":{\"1586\":1}}],[\"1572827147099914281\",{\"1\":{\"1586\":1}}],[\"1572827147099914283\",{\"1\":{\"1586\":1}}],[\"1572827147099914279\",{\"1\":{\"1586\":1}}],[\"1572827147099914274\",{\"1\":{\"1586\":1}}],[\"1572827147099914271\",{\"1\":{\"1586\":1}}],[\"1572827147099914242\",{\"1\":{\"1592\":1}}],[\"1572827147099914244\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147099914245\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147099914241\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147099914266\",{\"1\":{\"1586\":1}}],[\"1572827147099914260\",{\"1\":{\"1586\":1}}],[\"1572827147099914267\",{\"1\":{\"1586\":1}}],[\"1572827147099914268\",{\"1\":{\"1586\":1}}],[\"1572827147099914261\",{\"1\":{\"1586\":1}}],[\"1572827147099914259\",{\"1\":{\"1586\":1}}],[\"1572827147099914253\",{\"1\":{\"1586\":1}}],[\"1572827147099914257\",{\"1\":{\"1586\":1}}],[\"1572827147099914252\",{\"1\":{\"1586\":1}}],[\"1572827147099914251\",{\"1\":{\"1586\":1}}],[\"1572827147099914254\",{\"1\":{\"1586\":1}}],[\"1572827147099914256\",{\"1\":{\"1586\":1}}],[\"1572827147099914250\",{\"1\":{\"1586\":1}}],[\"1572827147032805393\",{\"1\":{\"1592\":1}}],[\"1572827147032805390\",{\"1\":{\"1592\":1}}],[\"1572827147032805391\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147032805389\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147032805388\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572827147032805387\",{\"1\":{\"1586\":1,\"1592\":1}}],[\"1572045774676103169\",{\"1\":{\"1564\":1,\"1603\":1}}],[\"1572039569111060481\",{\"1\":{\"1564\":1,\"1565\":1,\"1603\":1}}],[\"1572030862742589442\",{\"1\":{\"1561\":1}}],[\"15762\",{\"1\":{\"1125\":1}}],[\"1554767453009256449\",{\"1\":{\"1561\":1,\"1635\":1}}],[\"15触发\",{\"1\":{\"656\":10}}],[\"15w\",{\"1\":{\"656\":1}}],[\"15\",{\"1\":{\"135\":1,\"236\":1,\"585\":1,\"656\":12,\"707\":1,\"801\":3,\"1120\":1,\"1121\":2,\"1191\":1,\"1278\":1,\"1550\":1,\"1564\":3,\"1565\":1,\"1583\":1}}],[\"150\",{\"1\":{\"34\":1,\"595\":1}}],[\"1<\",{\"1\":{\"49\":1}}],[\"141\",{\"1\":{\"1210\":1,\"1248\":1}}],[\"14号\",{\"1\":{\"656\":1}}],[\"14\",{\"0\":{\"758\":1},\"1\":{\"135\":1,\"139\":1,\"172\":1,\"656\":5,\"1532\":4,\"1582\":1,\"1583\":1,\"1592\":10,\"1628\":4}}],[\"146\",{\"1\":{\"48\":1}}],[\"142\",{\"1\":{\"34\":1,\"595\":1,\"1026\":4,\"1120\":1,\"1121\":2,\"1139\":1,\"1210\":4,\"1248\":1,\"1506\":1,\"1513\":3,\"1514\":5,\"1515\":3,\"1550\":1,\"1572\":1,\"1574\":2,\"1628\":2,\"1641\":1}}],[\"1601196762389\",{\"1\":{\"1373\":1}}],[\"1627005926735495168\",{\"1\":{\"1373\":1}}],[\"1627005615119679488\",{\"1\":{\"1373\":1}}],[\"16t00\",{\"1\":{\"1248\":1}}],[\"16号\",{\"1\":{\"656\":1}}],[\"16\",{\"1\":{\"135\":1,\"648\":1,\"1187\":2,\"1278\":1,\"1541\":1,\"1564\":2,\"1565\":1,\"1582\":4,\"1613\":1}}],[\"168\",{\"1\":{\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"94\":1,\"1096\":1,\"1129\":1,\"1132\":1,\"1198\":3,\"1215\":1,\"1248\":2,\"1515\":2}}],[\"167\",{\"1\":{\"39\":3}}],[\"163\",{\"1\":{\"32\":1,\"623\":1,\"1096\":1,\"1115\":1,\"1116\":1,\"1515\":1}}],[\"10m\",{\"1\":{\"1211\":1}}],[\"107\",{\"1\":{\"1210\":1}}],[\"1090\",{\"1\":{\"1514\":1,\"1515\":1,\"1648\":1}}],[\"10909\",{\"1\":{\"1136\":2}}],[\"10911发送消息失败\",{\"1\":{\"1136\":1}}],[\"10911\",{\"1\":{\"1136\":2}}],[\"108\",{\"1\":{\"1126\":1,\"1139\":1,\"1283\":1}}],[\"10重量级锁\",{\"1\":{\"911\":1}}],[\"1048576\",{\"1\":{\"801\":1}}],[\"101\",{\"1\":{\"658\":1,\"1210\":1}}],[\"10和2\",{\"1\":{\"656\":1}}],[\"100f\",{\"1\":{\"1187\":1}}],[\"1007\",{\"1\":{\"762\":2}}],[\"1004\",{\"1\":{\"762\":2}}],[\"1002\",{\"1\":{\"762\":2}}],[\"1001\",{\"1\":{\"762\":2,\"1177\":2}}],[\"10011002100310041005\",{\"1\":{\"647\":1}}],[\"1000+s\",{\"1\":{\"1058\":1}}],[\"10000\",{\"1\":{\"786\":1,\"1206\":1}}],[\"1000000\",{\"1\":{\"5\":2,\"17\":2}}],[\"1000\",{\"1\":{\"140\":6,\"649\":1,\"780\":2,\"783\":1,\"801\":2,\"802\":2,\"970\":1,\"1026\":1,\"1058\":1,\"1177\":1,\"1210\":2,\"1243\":1,\"1607\":2}}],[\"100\",{\"1\":{\"129\":4,\"145\":1,\"158\":5,\"189\":1,\"190\":1,\"297\":1,\"305\":3,\"309\":1,\"647\":2,\"801\":1,\"802\":1,\"1087\":1,\"1187\":2,\"1223\":2,\"1445\":2,\"1506\":1,\"1513\":3,\"1514\":4,\"1515\":3,\"1550\":1,\"1572\":1,\"1574\":2,\"1641\":1}}],[\"10054\",{\"0\":{\"52\":1}}],[\"100m\",{\"1\":{\"36\":2}}],[\"10\",{\"1\":{\"34\":1,\"131\":1,\"135\":2,\"139\":1,\"140\":3,\"141\":1,\"145\":1,\"155\":1,\"158\":4,\"190\":3,\"236\":1,\"255\":1,\"277\":1,\"280\":1,\"295\":1,\"297\":1,\"306\":1,\"309\":1,\"311\":1,\"312\":2,\"595\":1,\"649\":1,\"656\":14,\"765\":2,\"786\":1,\"934\":1,\"1026\":4,\"1120\":1,\"1121\":2,\"1126\":1,\"1139\":1,\"1187\":1,\"1210\":4,\"1221\":1,\"1249\":10,\"1283\":1,\"1320\":1,\"1455\":2,\"1506\":1,\"1513\":3,\"1514\":5,\"1515\":4,\"1541\":2,\"1550\":1,\"1564\":7,\"1565\":1,\"1572\":1,\"1574\":2,\"1597\":5,\"1613\":1,\"1622\":1,\"1628\":2,\"1635\":2,\"1641\":1,\"1647\":1,\"1648\":1,\"1649\":3,\"1650\":1,\"1651\":1}}],[\"1\",{\"0\":{\"355\":1,\"1531\":1,\"1539\":1,\"1548\":1,\"1559\":1,\"1570\":1,\"1579\":1,\"1590\":1,\"1601\":1,\"1611\":1,\"1621\":1,\"1628\":1,\"1635\":1,\"1641\":1},\"1\":{\"26\":1,\"51\":1,\"102\":1,\"103\":1,\"122\":1,\"123\":1,\"124\":1,\"127\":1,\"128\":1,\"129\":5,\"133\":1,\"135\":1,\"138\":1,\"139\":1,\"140\":4,\"151\":1,\"152\":5,\"155\":1,\"162\":1,\"172\":1,\"173\":1,\"186\":5,\"190\":2,\"200\":1,\"201\":1,\"202\":1,\"212\":1,\"234\":1,\"243\":5,\"255\":1,\"271\":2,\"275\":2,\"277\":8,\"279\":2,\"280\":1,\"282\":5,\"287\":1,\"296\":4,\"298\":1,\"302\":2,\"303\":1,\"304\":1,\"305\":1,\"306\":2,\"312\":1,\"315\":1,\"318\":2,\"377\":2,\"421\":1,\"468\":1,\"471\":2,\"479\":3,\"592\":1,\"596\":1,\"643\":1,\"647\":2,\"648\":2,\"649\":3,\"652\":1,\"657\":1,\"679\":2,\"756\":1,\"758\":3,\"759\":6,\"760\":3,\"773\":2,\"782\":1,\"792\":1,\"801\":10,\"802\":3,\"804\":2,\"850\":2,\"851\":1,\"902\":2,\"911\":2,\"924\":4,\"925\":1,\"934\":3,\"948\":1,\"983\":2,\"986\":1,\"1002\":2,\"1025\":2,\"1026\":2,\"1036\":1,\"1049\":1,\"1066\":1,\"1079\":3,\"1093\":2,\"1097\":2,\"1109\":1,\"1113\":1,\"1114\":1,\"1116\":2,\"1118\":1,\"1122\":2,\"1129\":1,\"1130\":2,\"1132\":1,\"1133\":3,\"1134\":1,\"1137\":3,\"1153\":1,\"1187\":1,\"1191\":1,\"1198\":2,\"1202\":3,\"1210\":7,\"1211\":2,\"1215\":1,\"1220\":3,\"1221\":1,\"1222\":3,\"1230\":1,\"1246\":12,\"1248\":7,\"1269\":1,\"1271\":1,\"1273\":1,\"1278\":1,\"1292\":1,\"1311\":1,\"1317\":1,\"1319\":2,\"1320\":1,\"1321\":1,\"1328\":1,\"1330\":2,\"1331\":1,\"1407\":1,\"1408\":1,\"1433\":1,\"1445\":1,\"1451\":1,\"1452\":1,\"1455\":2,\"1467\":2,\"1486\":5,\"1491\":1,\"1506\":1,\"1515\":6,\"1522\":1,\"1532\":2,\"1541\":2,\"1550\":2,\"1561\":2,\"1564\":2,\"1565\":1,\"1572\":1,\"1582\":10,\"1603\":2,\"1607\":2,\"1613\":7,\"1622\":4,\"1628\":2}}],[\"1ba9117e\",{\"0\":{\"11\":1}}],[\"uuid\",{\"1\":{\"1407\":1}}],[\"uuid=cd004d8e\",{\"1\":{\"1198\":1}}],[\"ua\",{\"1\":{\"1407\":1}}],[\"udp连接\",{\"1\":{\"1288\":1}}],[\"udp等网络端口号\",{\"1\":{\"1190\":1}}],[\"ulimit\",{\"1\":{\"1206\":1}}],[\"ul>\",{\"1\":{\"974\":1,\"975\":1}}],[\"u参数\",{\"1\":{\"1151\":1}}],[\"u推送并关联仓库\",{\"1\":{\"1144\":1}}],[\"u+x\",{\"1\":{\"1092\":1}}],[\"umd\",{\"1\":{\"993\":4,\"995\":1}}],[\"umd库\",{\"0\":{\"993\":1}}],[\"ui\",{\"1\":{\"970\":3,\"1123\":4,\"1283\":2}}],[\"uid\",{\"1\":{\"792\":2}}],[\"uploadfile\",{\"1\":{\"1586\":1,\"1641\":1}}],[\"uploadcontroller\",{\"1\":{\"1586\":2}}],[\"upper\",{\"1\":{\"1248\":1}}],[\"upstream\",{\"1\":{\"1210\":2}}],[\"upsertoperator\",{\"1\":{\"1301\":1}}],[\"upsert是否使用脚本更新\",{\"1\":{\"758\":1}}],[\"upsert\",{\"1\":{\"758\":4}}],[\"upgradeutil\",{\"1\":{\"1422\":1}}],[\"upgradeinfo\",{\"1\":{\"1421\":2}}],[\"upgradetoken\",{\"1\":{\"1419\":5}}],[\"upgrade\",{\"1\":{\"1210\":12,\"1211\":3,\"1419\":1}}],[\"updator\",{\"1\":{\"1058\":3}}],[\"updatelist\",{\"1\":{\"1621\":1}}],[\"updatelastexecutiontime\",{\"1\":{\"1445\":1}}],[\"updatetime\",{\"1\":{\"1564\":3,\"1565\":1,\"1582\":4,\"1586\":44,\"1592\":10,\"1607\":2,\"1613\":2,\"1622\":1,\"1628\":2,\"1635\":1}}],[\"updatetopicsubscribeinfowhensubscriptionchanged\",{\"1\":{\"914\":1}}],[\"updateby\",{\"1\":{\"1564\":3,\"1565\":1,\"1582\":4,\"1586\":44,\"1592\":10,\"1607\":2,\"1613\":2,\"1622\":1,\"1628\":2,\"1635\":1}}],[\"updatebyid\",{\"1\":{\"902\":1}}],[\"updatedefaultpwd\",{\"1\":{\"1544\":1,\"1575\":1,\"1586\":1}}],[\"updatephone\",{\"1\":{\"1513\":1}}],[\"updatepolicy>\",{\"1\":{\"49\":2}}],[\"updatemail\",{\"1\":{\"1513\":1}}],[\"updater\",{\"1\":{\"1445\":3}}],[\"updateoperator\",{\"1\":{\"1301\":1}}],[\"updatequantity\",{\"1\":{\"1251\":1}}],[\"updatewrapper<dbpatchschedulerequestentity>\",{\"1\":{\"902\":1}}],[\"updatewrapper方式更新\",{\"1\":{\"902\":1}}],[\"updatestrategy\",{\"1\":{\"902\":1}}],[\"updatealarmconfig\",{\"1\":{\"353\":1}}],[\"updateendpoints\",{\"1\":{\"108\":1}}],[\"update\",{\"0\":{\"7\":1,\"758\":1,\"759\":1,\"760\":1},\"1\":{\"96\":1,\"318\":6,\"319\":4,\"353\":1,\"748\":1,\"758\":5,\"759\":4,\"760\":2,\"902\":1,\"1042\":2,\"1048\":2,\"1050\":1,\"1058\":3,\"1130\":2,\"1243\":1,\"1445\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1584\":9}}],[\"up\",{\"1\":{\"992\":4,\"1119\":1,\"1123\":8,\"1259\":1,\"1445\":2,\"1458\":1,\"1474\":1}}],[\"u\",{\"1\":{\"297\":3,\"1056\":3,\"1129\":1,\"1130\":4,\"1144\":1,\"1177\":2,\"1215\":2,\"1227\":2}}],[\"u>\",{\"1\":{\"297\":1}}],[\"u16\",{\"1\":{\"282\":3,\"297\":1}}],[\"u8\",{\"1\":{\"275\":2,\"277\":4,\"282\":3,\"298\":2}}],[\"u32\",{\"1\":{\"274\":2,\"288\":3,\"290\":5,\"291\":2,\"316\":2}}],[\"u64\",{\"1\":{\"266\":1,\"271\":1}}],[\"uri=重定向地址\",{\"1\":{\"1506\":1}}],[\"uri中\",{\"1\":{\"1506\":1}}],[\"uritemplate\",{\"1\":{\"1415\":5}}],[\"uri\",{\"1\":{\"467\":2,\"471\":1,\"1513\":14,\"1531\":1,\"1535\":2,\"1586\":44,\"1590\":1,\"1591\":1,\"1592\":10,\"1597\":5}}],[\"urandom\",{\"1\":{\"218\":1,\"1116\":1,\"1137\":1}}],[\"urlencoded\",{\"1\":{\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"urlencoded`\",{\"1\":{\"1531\":1}}],[\"urlencoder\",{\"1\":{\"652\":1}}],[\"urlproperties\",{\"1\":{\"1522\":1}}],[\"urlpatterns\",{\"1\":{\"421\":1}}],[\"urlarray\",{\"1\":{\"1522\":2}}],[\"urldecoder\",{\"1\":{\"1032\":1}}],[\"urls\",{\"1\":{\"422\":2}}],[\"url=$\",{\"1\":{\"850\":1}}],[\"url=fmt\",{\"1\":{\"117\":1}}],[\"url=\",{\"1\":{\"117\":1}}],[\"url>\",{\"1\":{\"49\":2,\"621\":1,\"1202\":3,\"1203\":2}}],[\"url信息\",{\"1\":{\"39\":1}}],[\"url\",{\"1\":{\"34\":1,\"117\":2,\"179\":2,\"422\":2,\"471\":2,\"595\":1,\"652\":7,\"716\":1,\"748\":2,\"749\":1,\"792\":1,\"850\":1,\"914\":1,\"945\":1,\"974\":1,\"975\":1,\"976\":1,\"991\":2,\"1032\":4,\"1058\":4,\"1139\":1,\"1144\":2,\"1215\":2,\"1425\":1,\"1515\":2,\"1641\":1}}],[\"utext\",{\"1\":{\"982\":1,\"983\":1}}],[\"utc\",{\"1\":{\"649\":1}}],[\"utcoffset\",{\"1\":{\"649\":2}}],[\"utils\",{\"1\":{\"792\":1}}],[\"util\",{\"1\":{\"210\":1,\"646\":1,\"648\":1,\"780\":4,\"792\":4}}],[\"util=\",{\"1\":{\"210\":1}}],[\"utf8\",{\"1\":{\"1464\":8,\"1465\":6,\"1466\":6,\"1467\":6}}],[\"utf8mb4\",{\"0\":{\"56\":1}}],[\"utf\",{\"1\":{\"55\":1,\"103\":1,\"479\":1,\"596\":1,\"652\":2,\"719\":1,\"924\":1,\"1032\":1,\"1407\":1}}],[\"unusual\",{\"1\":{\"1445\":1}}],[\"unused\",{\"1\":{\"292\":1}}],[\"unnecessary\",{\"1\":{\"1445\":1}}],[\"unnamed\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"86\":2}}],[\"unloading\",{\"1\":{\"1445\":1}}],[\"unlimited\",{\"1\":{\"1116\":1}}],[\"unless\",{\"1\":{\"982\":2}}],[\"uname\",{\"1\":{\"1092\":2,\"1118\":2}}],[\"unable\",{\"1\":{\"345\":1,\"445\":1,\"456\":1}}],[\"undo\",{\"0\":{\"1053\":1},\"1\":{\"1049\":1}}],[\"underlying\",{\"1\":{\"1397\":2}}],[\"under\",{\"1\":{\"1215\":1}}],[\"underscores\",{\"1\":{\"1210\":1}}],[\"underscore\",{\"1\":{\"852\":1,\"1515\":1}}],[\"undertow\",{\"0\":{\"698\":1},\"1\":{\"601\":1}}],[\"undefined和null和0等同于false\",{\"1\":{\"929\":1}}],[\"undefined\",{\"1\":{\"649\":7,\"929\":1}}],[\"unexpectedselectorwakeup\",{\"1\":{\"1445\":1}}],[\"unexpected\",{\"1\":{\"833\":2,\"1445\":2}}],[\"unblocks\",{\"1\":{\"1445\":1}}],[\"unbind\",{\"1\":{\"1419\":1}}],[\"unbindclassloader\",{\"1\":{\"456\":1}}],[\"unboundedorprefetch\",{\"1\":{\"556\":1}}],[\"until\",{\"1\":{\"399\":1}}],[\"unsigned\",{\"1\":{\"1467\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"1445\":1}}],[\"unsuccessfulredirectforauthorization\",{\"1\":{\"345\":2}}],[\"unset\",{\"1\":{\"1219\":1}}],[\"unstage\",{\"1\":{\"1151\":1}}],[\"unscheduled\",{\"1\":{\"902\":2}}],[\"unsafe\",{\"0\":{\"257\":1,\"1397\":1},\"1\":{\"128\":3,\"411\":2,\"1395\":1,\"1397\":1,\"1445\":9}}],[\"unchecked\",{\"1\":{\"334\":1,\"900\":1}}],[\"uni\",{\"1\":{\"1467\":1}}],[\"unitname\",{\"1\":{\"1486\":4}}],[\"unit\",{\"1\":{\"1095\":1,\"1479\":1,\"1484\":4,\"1486\":4}}],[\"units\",{\"1\":{\"1095\":1}}],[\"unix\",{\"1\":{\"1058\":2}}],[\"union\",{\"1\":{\"716\":1}}],[\"uninitialized\",{\"1\":{\"399\":2}}],[\"uninstall\",{\"1\":{\"102\":1}}],[\"unique\",{\"1\":{\"329\":1,\"1467\":1}}],[\"unwrapthrowable\",{\"1\":{\"852\":1}}],[\"unwrapped\",{\"1\":{\"852\":5}}],[\"unwrap\",{\"1\":{\"297\":1}}],[\"unknown\",{\"1\":{\"128\":1}}],[\"unknown问题\",{\"0\":{\"57\":1}}],[\"ustc\",{\"1\":{\"1096\":1}}],[\"usd\",{\"1\":{\"760\":1}}],[\"using\",{\"1\":{\"494\":1,\"647\":1,\"852\":1,\"858\":1,\"1210\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":2}}],[\"usize\",{\"1\":{\"318\":2}}],[\"usize>\",{\"1\":{\"296\":1}}],[\"usableqty\",{\"1\":{\"236\":5}}],[\"usr\",{\"1\":{\"36\":1,\"1092\":2,\"1105\":1,\"1115\":1,\"1116\":1,\"1118\":4,\"1130\":17,\"1182\":1,\"1188\":4,\"1210\":1,\"1215\":2,\"1458\":2}}],[\"useauth\",{\"1\":{\"977\":1}}],[\"useparam\",{\"1\":{\"973\":1}}],[\"useparams\",{\"1\":{\"973\":1,\"975\":1}}],[\"uselocation\",{\"1\":{\"973\":1}}],[\"uselocale\",{\"1\":{\"557\":1}}],[\"usehistory\",{\"1\":{\"973\":1}}],[\"used\",{\"1\":{\"329\":2,\"1259\":1,\"1419\":1,\"1445\":1}}],[\"use\",{\"1\":{\"51\":1,\"164\":1,\"297\":1,\"309\":1,\"311\":1,\"312\":2,\"326\":1,\"397\":1,\"399\":2,\"411\":1,\"435\":1,\"974\":1,\"975\":1,\"1122\":1,\"1141\":1,\"1210\":1,\"1445\":1}}],[\"usejunitplatform\",{\"1\":{\"40\":1}}],[\"usessl=false\",{\"1\":{\"34\":1,\"595\":1,\"1515\":1}}],[\"userrolebind\",{\"1\":{\"1635\":1}}],[\"userbindingrolerequest\",{\"1\":{\"1635\":1}}],[\"usermanager\",{\"1\":{\"1582\":4,\"1583\":2,\"1584\":1}}],[\"usercore\",{\"1\":{\"1534\":1,\"1564\":1,\"1565\":1,\"1603\":1}}],[\"usercenter\",{\"1\":{\"36\":3,\"1122\":3,\"1515\":2,\"1550\":1,\"1572\":1,\"1574\":1,\"1641\":1,\"1650\":1}}],[\"userdetails\",{\"1\":{\"1518\":5}}],[\"userdetailsservice\",{\"1\":{\"348\":2,\"1518\":1}}],[\"userapis\",{\"1\":{\"1513\":1,\"1535\":1}}],[\"useradd\",{\"1\":{\"1177\":1}}],[\"usertokenwebfilter\",{\"1\":{\"1345\":3}}],[\"usertokenholder\",{\"1\":{\"1345\":1}}],[\"usertokenmanager\",{\"1\":{\"1345\":4}}],[\"usereentrantlockwhenputmessage=true\",{\"1\":{\"1136\":1}}],[\"user=root\",{\"1\":{\"1132\":1}}],[\"user=minio\",{\"1\":{\"1131\":1}}],[\"user=admin\",{\"1\":{\"1125\":1}}],[\"user4\",{\"1\":{\"982\":2}}],[\"user3\",{\"1\":{\"982\":2}}],[\"userlist\",{\"1\":{\"982\":8}}],[\"useroutematch\",{\"1\":{\"973\":1,\"976\":1}}],[\"userutils\",{\"1\":{\"786\":1}}],[\"userstat\",{\"1\":{\"982\":1}}],[\"users\",{\"1\":{\"773\":2,\"1026\":1,\"1130\":5,\"1134\":1,\"1136\":1}}],[\"userservice\",{\"1\":{\"584\":1,\"658\":17,\"706\":1}}],[\"userid=43b59399d55346dca94a80e9e77838f6\",{\"1\":{\"1635\":1}}],[\"userid\",{\"1\":{\"602\":2,\"1522\":1,\"1523\":2,\"1532\":2,\"1549\":1,\"1550\":1,\"1552\":1,\"1555\":1,\"1586\":1,\"1628\":2,\"1635\":1}}],[\"userinfoservice\",{\"1\":{\"348\":4}}],[\"user2\",{\"1\":{\"271\":2,\"982\":2}}],[\"user1\",{\"1\":{\"271\":7,\"982\":2}}],[\"usernamepasswordauthenticationtoken\",{\"1\":{\"1518\":1}}],[\"usernamepasswordauthenticationfilter\",{\"1\":{\"346\":1}}],[\"username>\",{\"1\":{\"1202\":2}}],[\"username=admin\",{\"1\":{\"1126\":1}}],[\"username=test\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"username=$\",{\"1\":{\"850\":1}}],[\"username=\",{\"1\":{\"241\":1}}],[\"username\",{\"1\":{\"241\":3,\"271\":6,\"297\":2,\"360\":2,\"595\":1,\"602\":4,\"924\":1,\"983\":2,\"1056\":3,\"1515\":2,\"1523\":3,\"1525\":1,\"1532\":2,\"1539\":1,\"1540\":1,\"1541\":2,\"1548\":1,\"1549\":1,\"1550\":2,\"1628\":3,\"1635\":2}}],[\"user\",{\"1\":{\"32\":1,\"181\":4,\"271\":7,\"273\":2,\"344\":1,\"411\":1,\"421\":1,\"471\":1,\"592\":1,\"602\":6,\"716\":3,\"792\":1,\"850\":1,\"977\":1,\"982\":22,\"983\":3,\"1025\":2,\"1026\":4,\"1058\":7,\"1130\":2,\"1140\":2,\"1141\":3,\"1146\":4,\"1210\":3,\"1249\":1,\"1345\":1,\"1445\":1,\"1513\":5,\"1521\":5,\"1523\":1,\"1525\":1,\"1532\":2,\"1541\":1,\"1548\":1,\"1549\":1,\"1550\":2,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1579\":2,\"1580\":2,\"1584\":5,\"1586\":10}}],[\"useunicode=true\",{\"1\":{\"23\":1,\"34\":1,\"595\":1,\"850\":1,\"1515\":1}}],[\"jpg\",{\"1\":{\"1550\":1}}],[\"jpaentitytablemetadataparser实现entitytablemetadataparser\",{\"1\":{\"1294\":1}}],[\"jps\",{\"1\":{\"1153\":1,\"1230\":1}}],[\"jhat\",{\"1\":{\"1153\":1}}],[\"jh\",{\"1\":{\"1127\":1}}],[\"jre\",{\"1\":{\"1116\":1}}],[\"jre8\",{\"1\":{\"218\":1}}],[\"jxc\",{\"1\":{\"1057\":1}}],[\"jquerystatic\",{\"1\":{\"993\":1}}],[\"jquery的入口函数可以执行多次\",{\"1\":{\"935\":1}}],[\"jquery入口函数\",{\"1\":{\"935\":1}}],[\"jquery是一个javascript库\",{\"1\":{\"933\":1}}],[\"jquery\",{\"0\":{\"933\":1,\"942\":1},\"1\":{\"934\":5,\"935\":5,\"943\":1,\"989\":11,\"991\":16,\"993\":4,\"995\":5,\"1407\":1}}],[\"jobbeanexecutewrapper\",{\"1\":{\"1013\":1}}],[\"jobrepository\",{\"1\":{\"1013\":1}}],[\"jobexecuteparam\",{\"1\":{\"1013\":1}}],[\"jobexecutionexception\",{\"1\":{\"658\":1}}],[\"jobexecutioncontext\",{\"1\":{\"658\":2}}],[\"jobid\",{\"1\":{\"1013\":7}}],[\"jobinfo\",{\"1\":{\"1013\":4}}],[\"job注册\",{\"1\":{\"1012\":1}}],[\"job执行器\",{\"1\":{\"1012\":1}}],[\"job仓库\",{\"1\":{\"1012\":1}}],[\"jobdispatchwrapper\",{\"1\":{\"1013\":2}}],[\"jobdatamap\",{\"1\":{\"658\":3}}],[\"jobdetailfactorybean\",{\"1\":{\"658\":6}}],[\"jobdetail\",{\"1\":{\"658\":4}}],[\"job\",{\"0\":{\"1651\":1},\"1\":{\"655\":1,\"658\":1,\"924\":1,\"1013\":1,\"1651\":1}}],[\"joingroupifneeded\",{\"1\":{\"816\":1}}],[\"join等联表查询优先\",{\"1\":{\"716\":1}}],[\"joining\",{\"1\":{\"378\":1,\"1522\":1}}],[\"join\",{\"1\":{\"238\":1,\"647\":1,\"716\":3,\"717\":1,\"1058\":3,\"1059\":1,\"1243\":2}}],[\"jython\",{\"1\":{\"646\":1}}],[\"jython2\",{\"1\":{\"646\":1}}],[\"jython参考\",{\"1\":{\"646\":1}}],[\"jksstorepassword\",{\"1\":{\"1514\":1}}],[\"jkskeyalias\",{\"1\":{\"1514\":1}}],[\"jkskeypassword\",{\"1\":{\"1514\":1}}],[\"jkskeystore\",{\"1\":{\"1514\":1}}],[\"jks\",{\"0\":{\"624\":1},\"1\":{\"623\":6,\"627\":1}}],[\"jmap\",{\"1\":{\"1153\":5}}],[\"jms\",{\"1\":{\"1022\":1}}],[\"jmreporttokenservicei\",{\"1\":{\"1455\":1}}],[\"jmreportuploadconfig\",{\"1\":{\"594\":1}}],[\"jmreport\",{\"1\":{\"594\":3,\"1455\":4,\"1458\":1}}],[\"jmeter压测\",{\"0\":{\"569\":1}}],[\"judgetokentype\",{\"1\":{\"1521\":1}}],[\"junit\",{\"1\":{\"585\":2,\"707\":2}}],[\"just\",{\"1\":{\"329\":1,\"435\":1,\"556\":1,\"914\":3,\"1445\":2,\"1521\":1}}],[\"jndifactory\",{\"1\":{\"441\":1}}],[\"jndipresent\",{\"1\":{\"441\":1}}],[\"jwk\",{\"1\":{\"1514\":1}}],[\"jwk配置\",{\"1\":{\"1514\":1}}],[\"jwkseturl\",{\"1\":{\"1570\":2}}],[\"jwkseturi\",{\"1\":{\"1513\":1}}],[\"jwks\",{\"1\":{\"1031\":1,\"1513\":1}}],[\"jwks请求\",{\"1\":{\"346\":1}}],[\"jwt\",{\"0\":{\"726\":1},\"1\":{\"726\":1,\"1519\":1,\"1616\":2}}],[\"jwt配置\",{\"1\":{\"348\":1}}],[\"jwtclientassertionauthenticationprovider\",{\"1\":{\"346\":1}}],[\"jwtauthenticationprovider对以bear开头的token解析\",{\"1\":{\"339\":1}}],[\"jimureporttokenservice\",{\"1\":{\"1455\":1}}],[\"jimureport\",{\"1\":{\"1215\":8,\"1458\":3}}],[\"jion方法将子线程加入当前主线程\",{\"1\":{\"236\":1}}],[\"jiweichengzhu\",{\"1\":{\"86\":1}}],[\"j++\",{\"1\":{\"140\":1}}],[\"j\",{\"1\":{\"140\":5}}],[\"je7xmpkza2wjazchr57ufj8juv\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"jelly\",{\"1\":{\"1130\":1}}],[\"jest\",{\"1\":{\"965\":2}}],[\"jeecg\",{\"1\":{\"632\":1,\"1455\":1,\"1458\":1}}],[\"jetty\",{\"0\":{\"697\":1}}],[\"jetbrains\",{\"0\":{\"86\":1}}],[\"jetlinksprotocolsupportprovider\",{\"1\":{\"1357\":1}}],[\"jetlinks官方协议\",{\"1\":{\"1289\":1}}],[\"jetlinks前端\",{\"1\":{\"1283\":1}}],[\"jetlinks\",{\"0\":{\"1281\":1,\"1484\":1},\"1\":{\"84\":1,\"1139\":6,\"1283\":2}}],[\"jenkinsci\",{\"1\":{\"1130\":1}}],[\"jenkins中有权限问题\",{\"1\":{\"1130\":1}}],[\"jenkins集群搭建\",{\"0\":{\"1081\":1}}],[\"jenkins自动构建\",{\"0\":{\"1080\":1}}],[\"jenkinsfile实现持续集成\",{\"1\":{\"564\":1}}],[\"jenkins\",{\"0\":{\"21\":1,\"26\":1,\"564\":1,\"1130\":1,\"1214\":1},\"1\":{\"26\":1,\"1099\":2,\"1130\":54,\"1188\":2,\"1214\":2,\"1215\":2}}],[\"js部分\",{\"1\":{\"1407\":1}}],[\"jstat\",{\"1\":{\"1153\":2}}],[\"jstack\",{\"1\":{\"1153\":4,\"1230\":1}}],[\"jsx\",{\"0\":{\"968\":1},\"1\":{\"968\":1,\"969\":1,\"971\":1}}],[\"jsencrypt\",{\"1\":{\"720\":2}}],[\"jsp等\",{\"1\":{\"980\":1}}],[\"jsp的servlet\",{\"1\":{\"679\":1}}],[\"jsp引擎\",{\"0\":{\"682\":1},\"1\":{\"651\":1}}],[\"jsp\",{\"0\":{\"651\":1},\"1\":{\"651\":2,\"674\":1,\"679\":4}}],[\"jsqlparser<\",{\"1\":{\"621\":1}}],[\"jsqlparser\",{\"0\":{\"620\":1}}],[\"jsonstring\",{\"1\":{\"1480\":2}}],[\"jsonslurper\",{\"1\":{\"648\":1}}],[\"jsonutils\",{\"1\":{\"1248\":2}}],[\"jsonobject\",{\"1\":{\"1245\":2,\"1480\":1}}],[\"json的类型\",{\"0\":{\"928\":1}}],[\"jsonresult\",{\"1\":{\"378\":6}}],[\"json\",{\"1\":{\"103\":1,\"181\":2,\"648\":1,\"649\":7,\"716\":1,\"786\":2,\"792\":1,\"930\":2,\"945\":1,\"996\":2,\"1093\":2,\"1096\":1,\"1248\":2,\"1455\":1,\"1480\":1,\"1501\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":1}}],[\"json配置文件\",{\"1\":{\"103\":1}}],[\"js\",{\"0\":{\"927\":1},\"1\":{\"65\":2,\"720\":1,\"934\":3,\"943\":4,\"964\":1,\"996\":1,\"1407\":1}}],[\"jdbcurl\",{\"1\":{\"924\":1}}],[\"jdbctemplate\",{\"0\":{\"898\":1}}],[\"jdbc驱动加载案例\",{\"1\":{\"481\":1}}],[\"jdbc模块的方案等\",{\"1\":{\"481\":1}}],[\"jdbc\",{\"1\":{\"23\":1,\"34\":1,\"585\":1,\"595\":2,\"707\":1,\"792\":1,\"850\":3,\"851\":2,\"924\":3,\"1243\":1,\"1515\":3}}],[\"jdk1\",{\"1\":{\"1458\":1}}],[\"jdk11\",{\"1\":{\"1130\":6}}],[\"jdk8\",{\"1\":{\"1130\":1,\"1188\":1}}],[\"jdk>\",{\"1\":{\"1079\":2,\"1202\":1}}],[\"jdk动态代理\",{\"0\":{\"385\":1},\"1\":{\"732\":1}}],[\"jdkdynamicaopproxy实现aopproxy\",{\"1\":{\"383\":1}}],[\"jdkdynamicaopproxy\",{\"1\":{\"383\":1}}],[\"jdk\",{\"1\":{\"11\":2,\"86\":2,\"435\":1,\"441\":1,\"1130\":1,\"1188\":1,\"1445\":3,\"1458\":1}}],[\"jdk运行项目异常\",{\"0\":{\"11\":1}}],[\"jvm中维护的唯一对象\",{\"1\":{\"1445\":1}}],[\"jvm参数\",{\"1\":{\"1136\":1}}],[\"jvm参数设置\",{\"0\":{\"214\":1}}],[\"jvm监控\",{\"0\":{\"194\":1}}],[\"jvm\",{\"0\":{\"242\":1,\"1152\":1},\"1\":{\"22\":1,\"652\":1,\"1120\":1,\"1121\":2,\"1445\":1}}],[\"jackson\",{\"1\":{\"1501\":1,\"1513\":1,\"1514\":1}}],[\"jatestclazz\",{\"1\":{\"241\":13}}],[\"jatestclazz=classpool\",{\"1\":{\"241\":1}}],[\"jatest类中添加private\",{\"1\":{\"241\":2}}],[\"jatest\",{\"1\":{\"241\":2}}],[\"japan\",{\"1\":{\"154\":1}}],[\"ja\",{\"1\":{\"86\":2}}],[\"jarprotocolsupportloader\",{\"1\":{\"1357\":1}}],[\"jarlauncher\",{\"1\":{\"1066\":1}}],[\"jar包\",{\"0\":{\"1066\":1}}],[\"jar包引用方式\",{\"0\":{\"851\":1}}],[\"jar包的读取\",{\"0\":{\"611\":1}}],[\"jar\",{\"1\":{\"10\":2,\"31\":1,\"86\":1,\"218\":5,\"1072\":1,\"1116\":3,\"1201\":3,\"1248\":1}}],[\"jar启动\",{\"0\":{\"10\":1}}],[\"java作为实现方式\",{\"1\":{\"1472\":1}}],[\"java启动参数分析\",{\"0\":{\"1156\":1}}],[\"java类配置\",{\"0\":{\"801\":1}}],[\"java<\",{\"1\":{\"790\":2}}],[\"java环境下脚本的执行\",{\"0\":{\"645\":1}}],[\"java环境专用的jks\",{\"1\":{\"625\":1}}],[\"java=d\",{\"1\":{\"643\":1}}],[\"java自带工具用于生成密钥库keystore文件\",{\"1\":{\"623\":1}}],[\"java标准版本\",{\"1\":{\"617\":1}}],[\"javascript内联\",{\"1\":{\"983\":1}}],[\"javascript的入口函数只能执行一次\",{\"1\":{\"935\":1}}],[\"javascript\",{\"1\":{\"935\":2,\"943\":2,\"983\":3,\"1407\":1,\"1425\":1}}],[\"javaserver\",{\"1\":{\"674\":1}}],[\"javase\",{\"0\":{\"617\":1}}],[\"javassist\",{\"1\":{\"241\":1,\"1290\":1}}],[\"javax\",{\"1\":{\"441\":1,\"647\":3,\"648\":1,\"1412\":1}}],[\"javaassisttest\",{\"1\":{\"241\":1}}],[\"javaassist\",{\"0\":{\"240\":1},\"1\":{\"241\":2,\"732\":1}}],[\"javaagent\",{\"1\":{\"86\":1}}],[\"java9中引入了模块化功能\",{\"1\":{\"11\":1}}],[\"java\",{\"0\":{\"11\":2,\"69\":1,\"225\":1,\"786\":1,\"1659\":1},\"1\":{\"10\":1,\"11\":2,\"138\":1,\"160\":1,\"174\":1,\"218\":1,\"241\":3,\"441\":1,\"481\":3,\"585\":1,\"616\":3,\"642\":1,\"643\":4,\"646\":1,\"647\":11,\"648\":1,\"651\":1,\"652\":1,\"674\":1,\"707\":1,\"729\":1,\"780\":3,\"792\":5,\"850\":1,\"912\":1,\"1065\":2,\"1074\":1,\"1116\":2,\"1120\":1,\"1121\":2,\"1130\":3,\"1136\":3,\"1139\":1,\"1243\":1,\"1256\":1,\"1458\":1,\"1475\":2}}],[\"0bb8b9a955324dcca1dcba7d1d5238d0\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"03\",{\"1\":{\"1582\":5,\"1613\":2,\"1622\":3}}],[\"0或1\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"0或1的int类型\",{\"1\":{\"1486\":4}}],[\"07\",{\"1\":{\"1541\":2,\"1550\":1,\"1582\":1,\"1613\":2}}],[\"0iujp7c\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"0的值\",{\"1\":{\"1486\":4}}],[\"02\",{\"1\":{\"1248\":1,\"1582\":4,\"1613\":1,\"1628\":4,\"1641\":1}}],[\"0表示没有错误\",{\"1\":{\"1220\":1}}],[\"0以上版本使用另一种加密方式caching\",{\"1\":{\"1140\":1}}],[\"0插件\",{\"1\":{\"1024\":1}}],[\"09\",{\"1\":{\"801\":2,\"1550\":1,\"1564\":3,\"1565\":2,\"1572\":1,\"1574\":1,\"1582\":3,\"1592\":20,\"1597\":5,\"1613\":2}}],[\"0900\",{\"0\":{\"56\":1},\"1\":{\"56\":1,\"1120\":1}}],[\"05期间的每1分钟触发\",{\"1\":{\"656\":1}}],[\"08\",{\"1\":{\"656\":1,\"1532\":14,\"1582\":7,\"1613\":4,\"1622\":2}}],[\"08cd43c7e50d构建\",{\"1\":{\"218\":1}}],[\"08cd43c7e50d暂停08cd43c7e50d容器的运行\",{\"1\":{\"218\":1}}],[\"08cd43c7e50d\",{\"1\":{\"218\":2}}],[\"01\",{\"1\":{\"648\":1,\"911\":1,\"1541\":1,\"1582\":9,\"1613\":1,\"1628\":2,\"1635\":2}}],[\"04\",{\"1\":{\"648\":1,\"783\":1,\"1136\":1,\"1564\":1,\"1565\":1}}],[\"0u8\",{\"1\":{\"282\":1}}],[\"00010000\",{\"1\":{\"1399\":1}}],[\"00000001\",{\"1\":{\"1399\":1}}],[\"00000000\",{\"1\":{\"1399\":15}}],[\"00000100\",{\"1\":{\"1399\":1}}],[\"00001000\",{\"1\":{\"1399\":2}}],[\"000026\",{\"1\":{\"13\":1}}],[\"000z\",{\"1\":{\"1248\":1}}],[\"001\",{\"1\":{\"1059\":1}}],[\"00乐观锁\",{\"1\":{\"911\":1}}],[\"00\",{\"1\":{\"139\":1,\"1248\":2,\"1532\":2,\"1541\":3,\"1564\":1,\"1592\":3}}],[\"0~9\",{\"1\":{\"117\":1}}],[\"0<\",{\"1\":{\"103\":1}}],[\"060z\",{\"1\":{\"1532\":6}}],[\"06tbdbuwknicafo1uvmdvs3uvuwtrr3h6mrvqmxy21omigdluef81qwcka0jqkat5ilje\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"06\",{\"1\":{\"103\":1}}],[\"0版本默认开启security\",{\"1\":{\"1139\":1}}],[\"0版本\",{\"1\":{\"56\":1}}],[\"0级别\",{\"1\":{\"15\":1}}],[\"0\",{\"0\":{\"695\":1},\"1\":{\"10\":2,\"63\":1,\"65\":1,\"102\":2,\"103\":2,\"123\":1,\"128\":1,\"129\":4,\"138\":2,\"139\":1,\"140\":32,\"145\":2,\"148\":1,\"152\":2,\"155\":1,\"158\":4,\"179\":4,\"189\":1,\"190\":2,\"236\":1,\"252\":1,\"256\":1,\"275\":1,\"277\":5,\"280\":1,\"282\":8,\"295\":4,\"312\":1,\"386\":1,\"479\":1,\"585\":1,\"596\":1,\"635\":1,\"648\":2,\"649\":8,\"652\":1,\"656\":23,\"657\":2,\"658\":1,\"707\":1,\"716\":1,\"720\":2,\"760\":1,\"769\":1,\"770\":1,\"780\":3,\"782\":1,\"799\":1,\"801\":18,\"802\":6,\"804\":5,\"902\":3,\"908\":1,\"911\":1,\"924\":6,\"1032\":1,\"1066\":1,\"1097\":2,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":2,\"1134\":1,\"1136\":2,\"1137\":6,\"1138\":1,\"1139\":8,\"1140\":2,\"1141\":4,\"1183\":1,\"1198\":2,\"1210\":3,\"1215\":10,\"1246\":1,\"1251\":1,\"1273\":1,\"1283\":2,\"1289\":1,\"1302\":1,\"1311\":2,\"1383\":1,\"1445\":16,\"1458\":1,\"1484\":4,\"1486\":5,\"1515\":2,\"1523\":1,\"1526\":1,\"1531\":2,\"1532\":6,\"1533\":2,\"1534\":2,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":2,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":2,\"1562\":2,\"1563\":2,\"1564\":5,\"1565\":2,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":9,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":11,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":2,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":3,\"1611\":1,\"1612\":1,\"1613\":4,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":2,\"1623\":2,\"1624\":2,\"1628\":7,\"1629\":2,\"1630\":3,\"1631\":2,\"1635\":4,\"1636\":2,\"1637\":3,\"1641\":1}}],[\"o+bzscpmvfeues\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"oidc\",{\"1\":{\"1491\":1}}],[\"octet\",{\"1\":{\"1210\":1}}],[\"occur\",{\"1\":{\"833\":1}}],[\"occurred\",{\"1\":{\"833\":1}}],[\"omnibus\",{\"1\":{\"1127\":1}}],[\"oms\",{\"1\":{\"1123\":1}}],[\"oas\",{\"1\":{\"1032\":3}}],[\"oauth\",{\"1\":{\"346\":1}}],[\"oauth2registeredclientcontroller\",{\"1\":{\"1592\":1}}],[\"oauth2resourceserver\",{\"1\":{\"467\":1,\"1031\":1}}],[\"oauth2tokengenerator<jwt>\",{\"1\":{\"1519\":1}}],[\"oauth2token\",{\"1\":{\"1519\":1}}],[\"oauth2tokentype\",{\"1\":{\"1519\":1}}],[\"oauth2tokencontext\",{\"1\":{\"1519\":2}}],[\"oauth2tokenendpointfilter\",{\"1\":{\"346\":1}}],[\"oauth2tokenendpointconfigurer\",{\"1\":{\"338\":1}}],[\"oauth2方式\",{\"1\":{\"1007\":1}}],[\"oauth2clientauthenticationtoken\",{\"1\":{\"1517\":3}}],[\"oauth2clientauthenticationfilter\",{\"1\":{\"346\":1}}],[\"oauth2clientauthenticationconfigurer\",{\"1\":{\"338\":1}}],[\"oauth2authorizationcodeauthenticationprovider\",{\"1\":{\"1519\":1}}],[\"oauth2authorizationcodeauthenticationprovider对授权码认证\",{\"1\":{\"346\":1}}],[\"oauth2authorizationcoderequestauthenticationprovider查询请求客户端是否存在\",{\"1\":{\"346\":1}}],[\"oauth2authorizationcodegrantfilter\",{\"1\":{\"345\":1}}],[\"oauth2authorizationcontext\",{\"1\":{\"345\":5}}],[\"oauth2authorizationrequest\",{\"1\":{\"345\":2}}],[\"oauth2authorizationendpointfilter\",{\"1\":{\"346\":2}}],[\"oauth2authorizationendpointconfigurer\",{\"1\":{\"338\":1}}],[\"oauth2authorizationexception\",{\"1\":{\"345\":1}}],[\"oauth2authorizedclient\",{\"1\":{\"345\":2}}],[\"oauth2authorizedclientargumentresolver对\",{\"1\":{\"345\":1}}],[\"oauth2authorizerequest\",{\"1\":{\"345\":3}}],[\"oauth2\",{\"0\":{\"343\":1,\"345\":1},\"1\":{\"344\":1,\"346\":1,\"467\":2,\"1031\":3,\"1503\":1,\"1506\":1,\"1513\":1,\"1514\":1,\"1531\":1}}],[\"odd\",{\"1\":{\"982\":4}}],[\"oddquantity\",{\"1\":{\"236\":4}}],[\"o=op\",{\"1\":{\"623\":1}}],[\"ou=sd\",{\"1\":{\"623\":1}}],[\"our\",{\"1\":{\"435\":1}}],[\"outline\",{\"1\":{\"1583\":4}}],[\"outtransportmetrics\",{\"1\":{\"1383\":1}}],[\"outbuf\",{\"1\":{\"1383\":5}}],[\"outdir\",{\"1\":{\"996\":2}}],[\"out=\",{\"1\":{\"643\":1}}],[\"out=e\",{\"1\":{\"643\":1}}],[\"outgoing\",{\"1\":{\"236\":1}}],[\"outgoingcache\",{\"1\":{\"236\":5}}],[\"outputdata\",{\"1\":{\"1486\":2}}],[\"outputready\",{\"1\":{\"1383\":1}}],[\"outputstream\",{\"1\":{\"1257\":2}}],[\"output\",{\"1\":{\"173\":1,\"249\":2,\"647\":1,\"1383\":1,\"1484\":1}}],[\"output=decode\",{\"1\":{\"13\":1}}],[\"out\",{\"0\":{\"32\":1},\"1\":{\"9\":1,\"234\":6,\"236\":1,\"241\":4,\"252\":1,\"353\":1,\"354\":6,\"377\":1,\"421\":6,\"643\":1,\"647\":1,\"648\":4,\"652\":4,\"657\":1,\"658\":3,\"719\":3,\"1137\":1,\"1256\":2,\"1257\":2,\"1451\":2}}],[\"obj\",{\"1\":{\"602\":3,\"649\":8}}],[\"objenesiscglibaopproxy继承cglibaopproxy\",{\"1\":{\"383\":1}}],[\"objenesiscglibaopproxy\",{\"1\":{\"383\":1}}],[\"objecterror\",{\"1\":{\"1526\":1}}],[\"objectinputstream\",{\"1\":{\"1257\":2}}],[\"objectoutputstream\",{\"1\":{\"1257\":2}}],[\"objectobjectpostprocessor\",{\"1\":{\"329\":1}}],[\"objectutil\",{\"1\":{\"1036\":1,\"1445\":4}}],[\"objectutils\",{\"1\":{\"852\":2}}],[\"object=\",{\"1\":{\"982\":1}}],[\"object=clazz\",{\"1\":{\"241\":1}}],[\"objectwrapperfactory\",{\"1\":{\"852\":2}}],[\"objectweb\",{\"1\":{\"86\":2}}],[\"objectprovider<webfluxproperties>\",{\"1\":{\"505\":1}}],[\"objectpostprocessor\",{\"1\":{\"329\":4,\"330\":2}}],[\"objectpostprocessor<object>\",{\"1\":{\"329\":1}}],[\"objectfactory\",{\"1\":{\"354\":2,\"852\":2}}],[\"objects\",{\"1\":{\"249\":3,\"250\":1,\"869\":1,\"911\":1}}],[\"objectb\",{\"1\":{\"243\":2}}],[\"objecta\",{\"1\":{\"243\":2}}],[\"object\",{\"1\":{\"241\":3,\"252\":1,\"290\":5,\"329\":1,\"345\":1,\"383\":6,\"406\":1,\"413\":7,\"433\":3,\"434\":5,\"435\":2,\"438\":2,\"602\":10,\"632\":2,\"647\":1,\"649\":2,\"801\":1,\"852\":6,\"853\":4,\"911\":3,\"914\":1,\"930\":1,\"982\":1,\"1259\":1,\"1345\":2,\"1450\":1,\"1451\":1,\"1484\":1,\"1523\":1,\"1525\":1,\"1532\":8,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"object>>\",{\"1\":{\"602\":2}}],[\"object>\",{\"1\":{\"236\":1,\"255\":2,\"345\":1,\"377\":1,\"602\":7,\"632\":1,\"801\":4,\"1450\":2}}],[\"obtainfreshbeanfactory\",{\"1\":{\"397\":2}}],[\"otherwise\",{\"1\":{\"438\":1,\"1445\":3}}],[\"other\",{\"1\":{\"360\":1,\"376\":1,\"397\":1,\"399\":2,\"1259\":1}}],[\"ota\",{\"1\":{\"129\":1}}],[\"oldpwd\",{\"1\":{\"1553\":1}}],[\"oldstate\",{\"1\":{\"1445\":6}}],[\"oldcl\",{\"1\":{\"1419\":2}}],[\"oldmatch\",{\"1\":{\"1415\":1}}],[\"oldmap\",{\"1\":{\"133\":2,\"153\":1}}],[\"oldversion\",{\"1\":{\"1251\":1}}],[\"oldvalue\",{\"1\":{\"911\":2}}],[\"old\",{\"1\":{\"243\":2,\"312\":2,\"910\":1}}],[\"ospagecachebusytimeoutmills=5000\",{\"1\":{\"1136\":1}}],[\"os>\",{\"1\":{\"1079\":1}}],[\"oss管理\",{\"0\":{\"1638\":1}}],[\"oss\",{\"1\":{\"621\":1,\"1210\":1,\"1515\":1,\"1586\":1,\"1641\":1}}],[\"os\",{\"1\":{\"162\":1,\"756\":1}}],[\"os包\",{\"0\":{\"162\":1}}],[\"oktoretryonalloperations=false\",{\"1\":{\"213\":1}}],[\"okhttp\",{\"0\":{\"613\":1},\"1\":{\"213\":1}}],[\"okhttp获取相应体内容报错\",{\"0\":{\"54\":1}}],[\"ok\",{\"1\":{\"154\":3,\"190\":2,\"294\":1,\"360\":1,\"914\":4,\"1445\":1}}],[\"o\",{\"1\":{\"103\":1,\"173\":4,\"334\":2,\"1092\":1,\"1118\":1,\"1177\":1,\"1189\":1,\"1223\":2}}],[\"orelse\",{\"1\":{\"1345\":1}}],[\"orelseget\",{\"1\":{\"1345\":1}}],[\"orm\",{\"0\":{\"746\":1,\"895\":1,\"1292\":1}}],[\"orm框架\",{\"0\":{\"68\":1}}],[\"ordinary\",{\"1\":{\"1484\":1}}],[\"ord\",{\"1\":{\"647\":1}}],[\"orders\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"orderno\",{\"1\":{\"1583\":5}}],[\"orderid\",{\"1\":{\"1252\":1}}],[\"orderitemhistory\",{\"1\":{\"1059\":1}}],[\"orderitemmap\",{\"1\":{\"1059\":1}}],[\"orderitem\",{\"1\":{\"1059\":1}}],[\"orderly\",{\"1\":{\"1245\":1}}],[\"orderdetailhistorydto\",{\"1\":{\"1059\":1}}],[\"orderbydesc\",{\"1\":{\"786\":1}}],[\"orderbyasc\",{\"1\":{\"672\":1}}],[\"orderfield\",{\"1\":{\"780\":5}}],[\"orderedpostprocessors\",{\"1\":{\"399\":4}}],[\"orderedpostprocessornames\",{\"1\":{\"399\":4}}],[\"ordered\",{\"1\":{\"399\":7,\"441\":1,\"1523\":1}}],[\"order\",{\"1\":{\"329\":6,\"399\":1,\"430\":1,\"716\":1,\"780\":4,\"783\":1,\"1059\":2,\"1245\":2,\"1248\":1,\"1249\":2}}],[\"orderqty\",{\"1\":{\"236\":1}}],[\"or\",{\"1\":{\"206\":1,\"282\":2,\"312\":4,\"326\":1,\"345\":1,\"399\":1,\"411\":1,\"473\":1,\"716\":3,\"852\":2,\"989\":1,\"1445\":1}}],[\"oracle\",{\"1\":{\"75\":1}}],[\"origin=http\",{\"1\":{\"1137\":1}}],[\"original\",{\"1\":{\"270\":4,\"399\":1,\"435\":1,\"471\":1}}],[\"origin\",{\"1\":{\"43\":1,\"295\":2,\"725\":1,\"1144\":4}}],[\"org\",{\"0\":{\"684\":1},\"1\":{\"31\":2,\"33\":1,\"48\":1,\"86\":2,\"103\":2,\"326\":1,\"376\":3,\"479\":4,\"481\":1,\"494\":1,\"585\":3,\"596\":2,\"601\":2,\"621\":1,\"642\":1,\"646\":1,\"648\":1,\"692\":2,\"707\":3,\"780\":17,\"792\":13,\"802\":4,\"851\":9,\"981\":1,\"1066\":2,\"1130\":1,\"1201\":1,\"1304\":1,\"1407\":1,\"1515\":1}}],[\"overriding\",{\"1\":{\"435\":1,\"1513\":1}}],[\"override\",{\"1\":{\"210\":1,\"236\":1,\"397\":1,\"413\":2,\"421\":6,\"422\":1,\"473\":1,\"513\":1,\"556\":1,\"557\":1,\"632\":4,\"657\":1,\"658\":1,\"672\":1,\"801\":1,\"852\":4,\"853\":1,\"858\":1,\"900\":4,\"914\":1,\"1032\":1,\"1345\":2,\"1445\":4,\"1450\":4,\"1451\":2,\"1523\":2,\"1525\":1}}],[\"over\",{\"1\":{\"399\":1,\"438\":1}}],[\"overwritten\",{\"0\":{\"43\":1}}],[\"overlay2\",{\"1\":{\"1130\":2}}],[\"overlay等选项中的一种\",{\"1\":{\"1122\":1}}],[\"overlay\",{\"1\":{\"22\":1}}],[\"op\",{\"1\":{\"1445\":8}}],[\"opacity\",{\"1\":{\"948\":1}}],[\"opaquetoken\",{\"1\":{\"467\":1,\"1031\":2}}],[\"ops\",{\"1\":{\"509\":7,\"1445\":3}}],[\"operating\",{\"1\":{\"1137\":1}}],[\"operationlog\",{\"1\":{\"1584\":1,\"1586\":3,\"1592\":1,\"1635\":1,\"1636\":1,\"1637\":1}}],[\"operationcomplete\",{\"1\":{\"1450\":1}}],[\"operation\",{\"1\":{\"250\":11,\"561\":1,\"1584\":1}}],[\"operatorcache\",{\"1\":{\"1342\":1}}],[\"operatorcontroller\",{\"0\":{\"890\":1}}],[\"operator\",{\"0\":{\"1173\":1},\"1\":{\"535\":5,\"556\":5,\"1296\":1}}],[\"operators\",{\"1\":{\"535\":3,\"537\":1,\"556\":7}}],[\"opentype\",{\"1\":{\"1579\":1,\"1580\":1,\"1582\":4}}],[\"openwebsocket\",{\"1\":{\"1407\":2}}],[\"openapi\",{\"1\":{\"1032\":1,\"1210\":1}}],[\"opening\",{\"1\":{\"852\":1}}],[\"open\",{\"1\":{\"103\":1,\"749\":1,\"1206\":1,\"1515\":1,\"1613\":1}}],[\"openfeign\",{\"1\":{\"73\":1,\"1501\":1}}],[\"opensessionfromdatasource\",{\"1\":{\"852\":1}}],[\"opens=java\",{\"1\":{\"86\":2}}],[\"openssl\",{\"0\":{\"52\":1}}],[\"opens\",{\"0\":{\"11\":1},\"1\":{\"11\":1}}],[\"opt\",{\"1\":{\"925\":1,\"1127\":2,\"1134\":1,\"1136\":3}}],[\"optimizecountsql\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"optimizableoperator\",{\"0\":{\"533\":1},\"1\":{\"535\":4,\"556\":4}}],[\"option<u32>\",{\"1\":{\"316\":1}}],[\"option<\",{\"1\":{\"311\":2}}],[\"option<t>\",{\"1\":{\"286\":1,\"294\":1}}],[\"option结构匹配\",{\"0\":{\"286\":1}}],[\"option\",{\"0\":{\"276\":1},\"1\":{\"286\":4,\"1084\":1}}],[\"optional>\",{\"1\":{\"31\":1}}],[\"options\",{\"1\":{\"22\":1,\"985\":1,\"992\":6,\"993\":1,\"995\":1,\"1215\":1,\"1311\":6,\"1353\":3}}],[\"opts=\",{\"1\":{\"1121\":2,\"1130\":2,\"1136\":2}}],[\"opts\",{\"1\":{\"218\":2,\"1116\":2,\"1120\":2,\"1121\":2,\"1139\":1,\"1475\":2}}],[\"opms\",{\"1\":{\"218\":1,\"1123\":8}}],[\"oos2会等到服务端收到消息\",{\"1\":{\"15\":1}}],[\"ofseconds\",{\"1\":{\"1320\":1}}],[\"offline\",{\"1\":{\"1129\":1}}],[\"offsetstore\",{\"1\":{\"914\":5}}],[\"offset均已被消费完成\",{\"1\":{\"804\":3}}],[\"offset\",{\"1\":{\"649\":6,\"801\":2,\"802\":2}}],[\"offer方法若队列已满\",{\"1\":{\"239\":1}}],[\"offer和add区别\",{\"1\":{\"239\":1}}],[\"off\",{\"1\":{\"53\":1,\"330\":1,\"345\":2,\"1210\":5}}],[\"of\",{\"1\":{\"11\":1,\"249\":9,\"250\":1,\"288\":1,\"329\":1,\"345\":1,\"346\":1,\"397\":1,\"399\":6,\"411\":2,\"435\":1,\"438\":2,\"509\":1,\"759\":1,\"773\":2,\"792\":2,\"974\":1,\"975\":1,\"985\":2,\"1013\":1,\"1177\":1,\"1210\":1,\"1259\":2,\"1345\":1,\"1445\":7}}],[\"onopen\",{\"1\":{\"1407\":1,\"1421\":1}}],[\"onboot=yes\",{\"1\":{\"1198\":1}}],[\"onjoincomplete\",{\"1\":{\"816\":1}}],[\"onmessage\",{\"1\":{\"1407\":1}}],[\"onmismatch>\",{\"1\":{\"596\":2}}],[\"onmatch>\",{\"1\":{\"596\":2}}],[\"ontaskevent\",{\"1\":{\"589\":1,\"711\":1}}],[\"onload\",{\"1\":{\"935\":4}}],[\"onlastassembly\",{\"1\":{\"535\":1,\"556\":1}}],[\"only=no\",{\"1\":{\"1198\":1}}],[\"only\",{\"1\":{\"346\":1,\"386\":1,\"435\":1,\"974\":1,\"1219\":1,\"1445\":2}}],[\"onclose\",{\"1\":{\"1407\":1}}],[\"onclick=\",{\"1\":{\"1407\":1}}],[\"oncomplete\",{\"0\":{\"522\":1},\"1\":{\"530\":1}}],[\"once\",{\"1\":{\"318\":2,\"346\":1,\"914\":1,\"1311\":2,\"1445\":2}}],[\"once<f>\",{\"1\":{\"318\":2}}],[\"onnextdropped\",{\"1\":{\"537\":1}}],[\"onnext\",{\"0\":{\"519\":1},\"1\":{\"530\":1,\"537\":1}}],[\"onsubscribe\",{\"0\":{\"516\":1},\"1\":{\"527\":1,\"530\":1,\"556\":5}}],[\"onstatechange\",{\"1\":{\"509\":1}}],[\"onstatechange方法\",{\"1\":{\"509\":1}}],[\"onstartup\",{\"1\":{\"446\":1,\"447\":1}}],[\"onrefreshmonitor\",{\"1\":{\"411\":1}}],[\"onrefresh\",{\"0\":{\"445\":1},\"1\":{\"397\":2,\"411\":2,\"445\":2}}],[\"onauthorizationsuccess\",{\"1\":{\"345\":1}}],[\"onauthorizationfailure\",{\"1\":{\"345\":1}}],[\"onapplicationevent\",{\"1\":{\"210\":1}}],[\"onerror\",{\"1\":{\"530\":1}}],[\"ones\",{\"1\":{\"399\":1}}],[\"one\",{\"1\":{\"277\":2,\"282\":1,\"297\":1,\"329\":1,\"411\":3,\"760\":4,\"974\":2}}],[\"on\",{\"0\":{\"3\":1},\"1\":{\"250\":1,\"329\":3,\"330\":1,\"345\":2,\"358\":2,\"410\":1,\"441\":1,\"456\":1,\"716\":3,\"833\":1,\"852\":1,\"1058\":3,\"1139\":1,\"1210\":5,\"1211\":1,\"1243\":2,\"1445\":4,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1515\":2}}],[\"nbf\",{\"1\":{\"1532\":2}}],[\"nvkkxp4qmszcfqedxqupbsrnrhyys\",{\"1\":{\"1531\":1}}],[\"nvohadkb4w+kokwbxtlbcx5\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"nq4bgwhwziovttutb0wwn6u9gwdzaka5ebbuvlr6vr5e39j\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"nzcx7r4odi3mawkfkv56qhagmbaaecgybzrxau4evtkzlcalavm5vjoqa9\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"nhttpclienteventhandler\",{\"1\":{\"1383\":1}}],[\"n100\",{\"1\":{\"1187\":1}}],[\"ng\",{\"1\":{\"1136\":1}}],[\"nginx避免跨域\",{\"1\":{\"724\":1}}],[\"nginx\",{\"0\":{\"724\":1,\"1204\":1,\"1210\":1},\"1\":{\"36\":2,\"1205\":6,\"1207\":3,\"1210\":4,\"1211\":2}}],[\"nginx下配置文件修改\",{\"1\":{\"36\":1}}],[\"nginx请求体大小受限制\",{\"0\":{\"36\":1}}],[\"nr\",{\"1\":{\"647\":2,\"1206\":1}}],[\"nickname\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1554\":1,\"1628\":2}}],[\"niomessageunsafe\",{\"1\":{\"1445\":1}}],[\"nio\",{\"1\":{\"1445\":2}}],[\"nio中的provider\",{\"1\":{\"1445\":1}}],[\"nioserversocketchannel\",{\"1\":{\"1444\":1,\"1450\":1}}],[\"niosocketchannel\",{\"1\":{\"1391\":1,\"1444\":1}}],[\"niosocketchannelconfig\",{\"1\":{\"1391\":1}}],[\"nioeventloopgroup本身是executor\",{\"1\":{\"1446\":1}}],[\"nioeventloopgroup\",{\"0\":{\"1446\":1},\"1\":{\"1446\":1}}],[\"nioeventloop本身是executor\",{\"1\":{\"1445\":1}}],[\"nioeventloop\",{\"0\":{\"1445\":1},\"1\":{\"1445\":2}}],[\"nioeventloop的processselectedkey方法\",{\"1\":{\"1400\":1}}],[\"nioendpoint下的socketprocessor\",{\"0\":{\"1418\":1}}],[\"nioendpoint下的内部类\",{\"0\":{\"687\":1}}],[\"nioendpoint下的accept任务\",{\"0\":{\"686\":1}}],[\"nioendpoint\",{\"0\":{\"685\":1}}],[\"niounsafe的read方法\",{\"1\":{\"1400\":1}}],[\"niounsafe\",{\"0\":{\"1397\":1},\"1\":{\"1397\":1,\"1445\":1}}],[\"niobyteunsafe\",{\"1\":{\"1391\":2}}],[\"nioacceptor\",{\"0\":{\"686\":1}}],[\"nio2endpoint\",{\"0\":{\"685\":1}}],[\"nimbusjwksetendpointfilter\",{\"1\":{\"346\":1}}],[\"nil在概念上和其它语言的null\",{\"1\":{\"144\":1}}],[\"nil\",{\"1\":{\"123\":1,\"144\":3,\"152\":3,\"154\":3,\"160\":1,\"1246\":2}}],[\"n+10\",{\"1\":{\"277\":1}}],[\"nsystem\",{\"1\":{\"241\":1}}],[\"null为值初始化值\",{\"1\":{\"915\":1}}],[\"nullable\",{\"1\":{\"345\":2,\"383\":1,\"433\":1,\"435\":2,\"1412\":1}}],[\"nullpointerexception\",{\"1\":{\"249\":2,\"250\":1,\"647\":1}}],[\"null\",{\"1\":{\"243\":2,\"249\":2,\"250\":1,\"329\":5,\"331\":1,\"345\":12,\"346\":2,\"357\":3,\"359\":5,\"379\":1,\"383\":1,\"386\":1,\"397\":1,\"403\":2,\"411\":6,\"413\":3,\"430\":2,\"433\":1,\"434\":1,\"438\":3,\"446\":3,\"450\":1,\"456\":1,\"471\":1,\"490\":2,\"505\":1,\"509\":1,\"513\":1,\"535\":3,\"556\":3,\"557\":1,\"602\":5,\"647\":1,\"649\":8,\"652\":2,\"672\":5,\"716\":2,\"780\":5,\"786\":2,\"801\":1,\"833\":6,\"852\":29,\"902\":7,\"911\":2,\"914\":6,\"915\":1,\"928\":1,\"929\":1,\"1013\":1,\"1032\":3,\"1036\":4,\"1042\":2,\"1248\":2,\"1256\":4,\"1259\":9,\"1345\":1,\"1383\":2,\"1407\":2,\"1412\":1,\"1414\":1,\"1419\":2,\"1445\":3,\"1450\":2,\"1464\":7,\"1465\":7,\"1466\":7,\"1467\":12,\"1468\":2,\"1515\":2,\"1518\":1,\"1521\":2,\"1522\":1,\"1523\":1,\"1532\":4,\"1539\":1,\"1540\":1,\"1541\":2,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1562\":1,\"1563\":1,\"1564\":6,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":11,\"1586\":264,\"1590\":1,\"1591\":1,\"1593\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":14,\"1611\":1,\"1612\":1,\"1613\":2,\"1614\":1,\"1615\":1,\"1617\":1,\"1621\":1,\"1622\":2,\"1623\":1,\"1624\":1,\"1628\":6,\"1629\":1,\"1630\":2,\"1631\":1,\"1635\":3,\"1636\":1,\"1637\":2}}],[\"null一样\",{\"1\":{\"144\":1}}],[\"num`\",{\"1\":{\"1467\":1}}],[\"numusertasks\",{\"1\":{\"1445\":3}}],[\"num2\",{\"1\":{\"139\":3}}],[\"num1\",{\"1\":{\"139\":3}}],[\"number`\",{\"1\":{\"1465\":1}}],[\"number\",{\"1\":{\"647\":1,\"649\":2,\"764\":1,\"765\":1,\"773\":2,\"988\":3,\"991\":4,\"992\":1,\"1445\":1,\"1532\":1,\"1533\":1,\"1535\":1,\"1541\":2,\"1542\":2,\"1543\":2,\"1550\":2,\"1551\":2,\"1552\":2,\"1561\":2,\"1562\":2,\"1563\":2,\"1570\":2,\"1571\":2,\"1572\":2,\"1573\":2,\"1574\":2,\"1581\":2,\"1592\":2,\"1593\":2,\"1594\":2,\"1603\":2,\"1604\":2,\"1605\":2,\"1613\":2,\"1614\":2,\"1615\":2,\"1622\":2,\"1623\":1,\"1624\":1,\"1628\":2,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":2,\"1636\":1,\"1637\":1}}],[\"numbers1\",{\"1\":{\"152\":5}}],[\"numbers\",{\"1\":{\"127\":2,\"133\":2,\"152\":18}}],[\"numb\",{\"1\":{\"127\":2}}],[\"nuget\",{\"1\":{\"103\":2}}],[\"nuget包标识\",{\"1\":{\"103\":1}}],[\"nuspec\",{\"1\":{\"103\":2}}],[\"nupkg\",{\"1\":{\"102\":1,\"103\":1}}],[\"n\",{\"1\":{\"102\":2,\"131\":2,\"133\":1,\"135\":1,\"140\":7,\"141\":1,\"143\":3,\"145\":1,\"146\":3,\"151\":4,\"152\":2,\"155\":5,\"156\":1,\"190\":2,\"241\":7,\"277\":3,\"296\":2,\"596\":3,\"647\":15,\"1187\":8,\"1197\":2,\"1206\":3,\"1222\":2}}],[\"npx是\",{\"1\":{\"965\":1}}],[\"npx\",{\"1\":{\"59\":1,\"965\":2}}],[\"npm包\",{\"0\":{\"992\":1}}],[\"npm版本太高\",{\"1\":{\"59\":1}}],[\"npm\",{\"0\":{\"59\":1,\"952\":1,\"1212\":1},\"1\":{\"51\":1,\"59\":2,\"720\":1,\"965\":2,\"992\":3,\"993\":4,\"995\":1}}],[\"npmmirror\",{\"1\":{\"29\":1}}],[\"npm设置源\",{\"0\":{\"29\":1}}],[\"ntpdate\",{\"1\":{\"33\":2}}],[\"ntp\",{\"1\":{\"33\":2}}],[\"necessary\",{\"1\":{\"1421\":1}}],[\"negotiatedextensions\",{\"1\":{\"1421\":1}}],[\"negative\",{\"1\":{\"1248\":1}}],[\"ne\",{\"1\":{\"1222\":4}}],[\"nexus3镜像\",{\"1\":{\"1200\":1}}],[\"nexus3\",{\"1\":{\"1142\":1,\"1200\":1}}],[\"nexus\",{\"0\":{\"1142\":1},\"1\":{\"1142\":4,\"1200\":8,\"1202\":3,\"1203\":2}}],[\"next方法选取eventloop\",{\"1\":{\"1446\":1}}],[\"nextwakeupnanos\",{\"1\":{\"1445\":2}}],[\"nextscheduledtaskdeadlinenanos\",{\"1\":{\"1445\":1}}],[\"nextelement\",{\"1\":{\"1032\":1}}],[\"nextexecutiontime\",{\"1\":{\"657\":1}}],[\"nextoptimizablesource\",{\"1\":{\"535\":1,\"556\":1}}],[\"next\",{\"0\":{\"556\":1},\"1\":{\"219\":1,\"399\":2,\"471\":4,\"513\":1,\"602\":1,\"964\":1,\"1013\":1,\"1032\":1,\"1048\":3,\"1051\":1,\"1345\":1,\"1446\":1}}],[\"nextnumber1\",{\"1\":{\"139\":4}}],[\"nextnumber\",{\"1\":{\"139\":6}}],[\"never\",{\"1\":{\"1141\":2}}],[\"needstoselectagain\",{\"1\":{\"1445\":1}}],[\"needs\",{\"1\":{\"1259\":1}}],[\"needsdepcheck\",{\"1\":{\"359\":1}}],[\"needcategories\",{\"1\":{\"672\":3}}],[\"needed\",{\"1\":{\"473\":1,\"1445\":1}}],[\"need\",{\"1\":{\"345\":1,\"397\":1,\"399\":2,\"1445\":2}}],[\"netmask=255\",{\"1\":{\"1198\":1}}],[\"netflix\",{\"1\":{\"975\":1}}],[\"netfilter\",{\"1\":{\"86\":2}}],[\"network接口\",{\"1\":{\"1353\":1}}],[\"networkprovider\",{\"1\":{\"1347\":1,\"1348\":1}}],[\"networkconfigmanager\",{\"1\":{\"1347\":1,\"1348\":1}}],[\"networkmanager\",{\"1\":{\"1342\":1,\"1347\":1}}],[\"networkmanager根据网络类型\",{\"1\":{\"1319\":1}}],[\"networkmoduleindex\",{\"1\":{\"833\":1}}],[\"networkmodules\",{\"1\":{\"833\":1}}],[\"networkmodule\",{\"1\":{\"833\":5}}],[\"networks\",{\"1\":{\"1120\":3,\"1122\":6,\"1475\":2}}],[\"network\",{\"0\":{\"1099\":1,\"1122\":1,\"1346\":1,\"1347\":1,\"1427\":1},\"1\":{\"833\":1,\"1089\":1,\"1099\":3,\"1122\":2,\"1126\":3,\"1130\":6,\"1139\":2,\"1198\":3,\"1304\":1,\"1305\":1,\"1347\":1}}],[\"netty网络框架\",{\"1\":{\"1479\":1}}],[\"netty中eventloop即处理任务队列中的任务\",{\"1\":{\"1449\":1}}],[\"nettywebserver\",{\"0\":{\"508\":1}}],[\"netty\",{\"0\":{\"1386\":1,\"1442\":1},\"1\":{\"503\":1,\"1338\":1,\"1445\":9}}],[\"net项目启动\",{\"0\":{\"104\":1}}],[\"net呀\",{\"1\":{\"103\":1}}],[\"net\",{\"1\":{\"103\":1,\"160\":1,\"174\":1,\"1120\":4,\"1121\":2,\"1122\":4,\"1139\":1,\"1374\":2,\"1475\":2}}],[\"netstat\",{\"1\":{\"19\":1,\"1180\":2,\"1190\":1}}],[\"nestedservletexception\",{\"1\":{\"1259\":2}}],[\"nestedioexception\",{\"1\":{\"852\":3}}],[\"nested\",{\"1\":{\"604\":1}}],[\"nest\",{\"1\":{\"65\":1}}],[\"newattributesarray\",{\"1\":{\"1450\":2}}],[\"newoptionsarray\",{\"1\":{\"1450\":2}}],[\"newchannel\",{\"1\":{\"1450\":1}}],[\"newcondition\",{\"1\":{\"1246\":1}}],[\"newmatch\",{\"1\":{\"1415\":2}}],[\"newmap\",{\"1\":{\"133\":1,\"153\":1}}],[\"newexecutor\",{\"1\":{\"852\":1}}],[\"newtimedcache\",{\"1\":{\"1249\":1}}],[\"newtransaction\",{\"1\":{\"852\":1}}],[\"newtopic\",{\"1\":{\"801\":3}}],[\"newpwd\",{\"1\":{\"1553\":1}}],[\"newpath\",{\"1\":{\"1522\":5}}],[\"newproxyinstance\",{\"1\":{\"385\":1,\"900\":1}}],[\"newpvs\",{\"1\":{\"358\":4}}],[\"newb\",{\"1\":{\"298\":1}}],[\"newsource\",{\"1\":{\"535\":3,\"556\":3}}],[\"newstate\",{\"1\":{\"509\":2}}],[\"news\",{\"1\":{\"297\":2}}],[\"newsinglethreadexecutor\",{\"1\":{\"234\":2}}],[\"newsinglethreadscheduledexecutor\",{\"1\":{\"192\":1}}],[\"newsinglethreadscheduledexecutor方法\",{\"0\":{\"192\":1}}],[\"newinstance\",{\"1\":{\"241\":1,\"871\":1,\"900\":2,\"1257\":1}}],[\"new\",{\"1\":{\"9\":1,\"102\":4,\"103\":1,\"106\":1,\"157\":2,\"176\":1,\"192\":1,\"202\":1,\"232\":1,\"234\":4,\"236\":11,\"241\":8,\"243\":2,\"252\":1,\"287\":1,\"290\":2,\"291\":4,\"298\":3,\"302\":2,\"308\":1,\"311\":1,\"312\":4,\"318\":2,\"319\":1,\"329\":4,\"330\":5,\"331\":1,\"345\":2,\"346\":1,\"348\":5,\"353\":1,\"358\":1,\"377\":2,\"378\":2,\"379\":3,\"383\":1,\"386\":3,\"397\":2,\"399\":9,\"403\":1,\"410\":3,\"421\":1,\"422\":1,\"430\":3,\"434\":1,\"435\":1,\"438\":2,\"441\":1,\"445\":1,\"446\":3,\"450\":2,\"456\":1,\"473\":2,\"476\":3,\"490\":2,\"491\":1,\"494\":1,\"505\":1,\"537\":1,\"594\":4,\"602\":3,\"632\":1,\"646\":1,\"647\":9,\"648\":5,\"649\":1,\"652\":2,\"657\":2,\"658\":8,\"672\":3,\"719\":1,\"759\":3,\"780\":14,\"786\":8,\"792\":7,\"801\":12,\"833\":2,\"852\":10,\"859\":1,\"860\":1,\"871\":1,\"872\":3,\"900\":1,\"902\":2,\"911\":2,\"914\":8,\"932\":2,\"970\":1,\"982\":7,\"991\":4,\"992\":1,\"1013\":4,\"1032\":3,\"1097\":2,\"1219\":1,\"1244\":3,\"1246\":2,\"1248\":4,\"1251\":1,\"1256\":3,\"1257\":4,\"1259\":4,\"1296\":1,\"1297\":1,\"1345\":2,\"1352\":1,\"1407\":1,\"1414\":1,\"1415\":3,\"1421\":3,\"1445\":4,\"1450\":8,\"1480\":1,\"1517\":1,\"1518\":3,\"1521\":3,\"1522\":1}}],[\"nanotime\",{\"1\":{\"1445\":2}}],[\"nat地址转换\",{\"1\":{\"1174\":1}}],[\"native\",{\"1\":{\"1140\":1,\"1141\":7}}],[\"nativedetector\",{\"1\":{\"397\":1}}],[\"nativewebrequest\",{\"1\":{\"345\":1}}],[\"nack\",{\"1\":{\"804\":2}}],[\"nacos3\",{\"1\":{\"1133\":4}}],[\"nacos2\",{\"1\":{\"1133\":4}}],[\"nacos1\",{\"1\":{\"1133\":4}}],[\"nacos用户界面使用的接口\",{\"1\":{\"891\":1}}],[\"nacos集群及配置\",{\"0\":{\"1133\":1}}],[\"nacos集群\",{\"0\":{\"885\":1}}],[\"nacos配置自动刷新流程\",{\"0\":{\"884\":1}}],[\"nacoscontextrefresher\",{\"0\":{\"879\":1}}],[\"nacosconfigservice\",{\"0\":{\"882\":1}}],[\"nacosconfigmanager\",{\"0\":{\"878\":1}}],[\"nacosconfigautoconfiguration\",{\"0\":{\"877\":1}}],[\"nacospropertysourcebuilder的loadnacosdata\",{\"1\":{\"876\":1}}],[\"nacosnamingservice\",{\"0\":{\"872\":1},\"1\":{\"871\":1}}],[\"nacosexception\",{\"1\":{\"871\":3,\"872\":1}}],[\"nacosfactory\",{\"0\":{\"870\":1}}],[\"nacosautoserviceregistration\",{\"0\":{\"883\":1},\"1\":{\"867\":1}}],[\"nacosregistration\",{\"1\":{\"867\":1}}],[\"nacoswatch\",{\"1\":{\"866\":1}}],[\"nacosdiscoveryclient\",{\"0\":{\"875\":1}}],[\"nacosdiscoveryclientconfiguration\",{\"0\":{\"866\":1}}],[\"nacosdiscoveryproperties属性\",{\"1\":{\"865\":1}}],[\"nacosdiscoveryautoconfiguration\",{\"0\":{\"865\":1}}],[\"nacosserviceregistry\",{\"0\":{\"873\":1},\"1\":{\"867\":1}}],[\"nacosserviceregistryautoconfiguration\",{\"0\":{\"867\":1}}],[\"nacosservicediscovery\",{\"0\":{\"874\":1},\"1\":{\"865\":1}}],[\"nacosservicemanager\",{\"0\":{\"868\":1},\"1\":{\"864\":1,\"865\":1}}],[\"nacosserviceautoconfiguration\",{\"0\":{\"864\":1}}],[\"nacos\",{\"0\":{\"94\":1,\"861\":1,\"886\":1,\"887\":1,\"888\":1,\"1132\":1,\"1649\":1},\"1\":{\"71\":1,\"94\":2,\"596\":1,\"862\":2,\"871\":1,\"886\":9,\"1093\":1,\"1132\":5,\"1133\":9,\"1137\":1,\"1501\":1,\"1649\":3}}],[\"namingmetadatamanager\",{\"1\":{\"893\":1}}],[\"namingmaintainfactory\",{\"1\":{\"870\":1}}],[\"namingsubscriberservicev2impl\",{\"1\":{\"893\":1}}],[\"namingsubscriberservice\",{\"1\":{\"893\":1}}],[\"namingservice\",{\"0\":{\"869\":1},\"1\":{\"869\":3,\"871\":3,\"873\":1,\"874\":1}}],[\"namingproxy\",{\"1\":{\"872\":1}}],[\"namingfactory的createconfigservice\",{\"0\":{\"871\":1}}],[\"namingfactory\",{\"1\":{\"870\":1}}],[\"naming\",{\"0\":{\"888\":1},\"1\":{\"441\":1,\"871\":1,\"886\":1}}],[\"name`\",{\"1\":{\"1464\":1,\"1466\":2}}],[\"name当前主机ip或地址\",{\"1\":{\"1126\":1}}],[\"namedparameterjdbctemplate\",{\"0\":{\"899\":1}}],[\"name>displayheader<\",{\"1\":{\"652\":2}}],[\"name>site<\",{\"1\":{\"652\":1}}],[\"name>\",{\"1\":{\"652\":5,\"1079\":2,\"1159\":9,\"1202\":3}}],[\"name>logfilter<\",{\"1\":{\"652\":2}}],[\"name目录下\",{\"1\":{\"623\":1}}],[\"name配置扫描的文件名\",{\"1\":{\"593\":1}}],[\"namesrv\",{\"1\":{\"1136\":4}}],[\"names=1\",{\"1\":{\"1120\":1}}],[\"namespaceutil\",{\"1\":{\"914\":1}}],[\"namespace\",{\"1\":{\"872\":2,\"991\":4,\"992\":7,\"993\":3,\"1160\":1}}],[\"names\",{\"1\":{\"399\":1}}],[\"name=zhansan\",{\"1\":{\"1455\":1}}],[\"name=jetlinks\",{\"1\":{\"1283\":1}}],[\"name=ens160\",{\"1\":{\"1198\":1}}],[\"name=file\",{\"1\":{\"1134\":1}}],[\"name=nacos\",{\"1\":{\"1132\":1}}],[\"name=datebookhikaricp\",{\"1\":{\"850\":1}}],[\"name=com\",{\"1\":{\"850\":2}}],[\"name=test\",{\"1\":{\"850\":1}}],[\"name=\",{\"1\":{\"103\":1,\"479\":7,\"480\":1,\"596\":9,\"971\":2,\"1219\":4,\"1407\":1}}],[\"name\",{\"1\":{\"9\":6,\"22\":2,\"103\":1,\"140\":1,\"142\":2,\"311\":2,\"329\":2,\"330\":1,\"358\":3,\"373\":1,\"377\":6,\"397\":1,\"430\":2,\"439\":1,\"479\":3,\"595\":1,\"602\":4,\"649\":2,\"652\":5,\"716\":2,\"749\":1,\"760\":1,\"773\":2,\"792\":5,\"802\":1,\"833\":3,\"899\":2,\"900\":1,\"914\":3,\"924\":3,\"932\":9,\"971\":3,\"982\":5,\"983\":3,\"988\":4,\"989\":1,\"991\":3,\"992\":10,\"1032\":2,\"1034\":1,\"1058\":3,\"1079\":1,\"1120\":2,\"1122\":5,\"1125\":1,\"1126\":3,\"1127\":2,\"1128\":1,\"1130\":9,\"1131\":1,\"1132\":2,\"1133\":3,\"1134\":1,\"1135\":1,\"1136\":3,\"1137\":2,\"1138\":1,\"1139\":4,\"1140\":3,\"1141\":2,\"1142\":1,\"1146\":3,\"1171\":2,\"1176\":1,\"1200\":1,\"1210\":4,\"1211\":1,\"1215\":1,\"1219\":3,\"1248\":1,\"1272\":1,\"1304\":1,\"1455\":2,\"1460\":1,\"1465\":1,\"1475\":1,\"1482\":1,\"1484\":7,\"1486\":6,\"1514\":1,\"1515\":1,\"1523\":2,\"1532\":2,\"1539\":1,\"1540\":1,\"1541\":3,\"1564\":3,\"1565\":1,\"1579\":1,\"1580\":1,\"1582\":4,\"1583\":9,\"1586\":44,\"1590\":1,\"1591\":1,\"1592\":11,\"1597\":6,\"1601\":1,\"1602\":1,\"1603\":4,\"1607\":2,\"1611\":1,\"1612\":1,\"1613\":3,\"1622\":2}}],[\"nashorn无法直接执行invocable\",{\"0\":{\"16\":1}}],[\"nohandlerfound\",{\"1\":{\"1259\":1}}],[\"nopush\",{\"1\":{\"1210\":1}}],[\"nofile\",{\"1\":{\"1210\":1}}],[\"nodejs\",{\"0\":{\"950\":1},\"1\":{\"995\":1}}],[\"node\",{\"0\":{\"954\":1},\"1\":{\"762\":2,\"965\":2,\"995\":3,\"1036\":5,\"1137\":1,\"1139\":1,\"1182\":1,\"1214\":1,\"1216\":1}}],[\"nodes\",{\"1\":{\"756\":1,\"1157\":1,\"1159\":1}}],[\"nosuchmethodexception\",{\"1\":{\"648\":1}}],[\"nowatermarks\",{\"1\":{\"792\":1}}],[\"now\",{\"1\":{\"399\":1,\"648\":1,\"649\":1,\"658\":2,\"1058\":1,\"1445\":2}}],[\"nonnull\",{\"1\":{\"557\":2,\"911\":1,\"1345\":2,\"1352\":1}}],[\"nonorderedpostprocessors\",{\"1\":{\"399\":3}}],[\"nonorderedpostprocessornames\",{\"1\":{\"399\":4}}],[\"non\",{\"1\":{\"397\":1,\"438\":1,\"852\":1,\"1445\":1}}],[\"nonethingsdatarepositorystrategy\",{\"1\":{\"1344\":1}}],[\"none\",{\"1\":{\"144\":1,\"286\":4,\"294\":1,\"304\":1,\"305\":1,\"311\":1,\"359\":1,\"406\":1,\"801\":3,\"802\":3,\"983\":2,\"1084\":1,\"1087\":1,\"1445\":1,\"1616\":1}}],[\"nor\",{\"1\":{\"494\":1}}],[\"north\",{\"1\":{\"282\":6}}],[\"normalflag\",{\"1\":{\"236\":1}}],[\"nokia\",{\"1\":{\"157\":2}}],[\"nokiaphone\",{\"1\":{\"157\":4}}],[\"notyetconnectedexception\",{\"1\":{\"1445\":1}}],[\"nothing\",{\"1\":{\"1445\":2}}],[\"notification\",{\"1\":{\"1312\":1}}],[\"notifycontroller\",{\"1\":{\"1597\":2}}],[\"notifymessagearriving方法\",{\"1\":{\"921\":1}}],[\"notifyreceivedmsg方法\",{\"1\":{\"824\":1}}],[\"notifysent方法\",{\"1\":{\"824\":1}}],[\"notifytime\",{\"1\":{\"783\":1}}],[\"notifytype\",{\"1\":{\"783\":1}}],[\"notify<t\",{\"1\":{\"297\":2}}],[\"notifyall\",{\"1\":{\"237\":1}}],[\"notify\",{\"1\":{\"237\":1,\"297\":2,\"783\":1,\"1312\":5,\"1445\":1,\"1513\":1,\"1597\":1}}],[\"notice\",{\"1\":{\"1210\":1}}],[\"not不打分\",{\"1\":{\"761\":1}}],[\"notes\",{\"1\":{\"1187\":1}}],[\"note\",{\"0\":{\"1654\":1},\"1\":{\"647\":1}}],[\"notempty\",{\"1\":{\"494\":1}}],[\"notfound\",{\"1\":{\"360\":1}}],[\"notnull\",{\"1\":{\"345\":4,\"852\":2}}],[\"not\",{\"0\":{\"11\":1,\"34\":1},\"1\":{\"250\":1,\"305\":2,\"345\":2,\"383\":1,\"397\":1,\"399\":4,\"411\":2,\"434\":1,\"435\":1,\"438\":1,\"647\":1,\"767\":2,\"782\":1,\"852\":4,\"858\":1,\"902\":2,\"910\":1,\"914\":3,\"977\":1,\"1042\":2,\"1445\":4,\"1464\":3,\"1465\":4,\"1466\":3,\"1467\":7,\"1468\":1,\"1518\":1,\"1653\":1}}],[\"no\",{\"0\":{\"4\":1,\"26\":1,\"40\":1,\"358\":1},\"1\":{\"13\":1,\"399\":1,\"411\":2,\"435\":1,\"479\":1,\"494\":1,\"758\":4,\"852\":2,\"900\":1,\"1136\":1,\"1259\":1,\"1445\":5,\"1518\":1}}],[\"aqklvmkjxnmwwy69o\",{\"1\":{\"1531\":1}}],[\"axg5akaxhklbhj5xbybh7knzksystiea6h4mfgb33xg1sw50osqz4kimthqkrkcr\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"axistools\",{\"1\":{\"1079\":1}}],[\"axios\",{\"1\":{\"999\":1}}],[\"a54efaae\",{\"1\":{\"1514\":1,\"1564\":1,\"1565\":2,\"1572\":1,\"1574\":1}}],[\"a4rkme1v5tmswq7zheppvgsrnvqkczxw\",{\"1\":{\"1491\":1}}],[\"ajreport\",{\"0\":{\"1459\":1}}],[\"ajaxsettings\",{\"1\":{\"991\":3,\"995\":2}}],[\"ajaxresult\",{\"1\":{\"360\":4}}],[\"ajax\",{\"0\":{\"46\":1,\"941\":1,\"945\":1},\"1\":{\"945\":1,\"991\":4}}],[\"aud\",{\"1\":{\"1532\":2}}],[\"aux\",{\"1\":{\"1190\":1}}],[\"authrolecontroller\",{\"1\":{\"1592\":1}}],[\"authusercontroller\",{\"1\":{\"1586\":11,\"1635\":1}}],[\"auth管理\",{\"0\":{\"1528\":1}}],[\"authglobalfilter\",{\"1\":{\"1523\":1}}],[\"authserverrunner\",{\"1\":{\"1252\":1}}],[\"authclientapicontroller\",{\"1\":{\"1592\":1}}],[\"authclientrolecontroller\",{\"1\":{\"1586\":9,\"1592\":2}}],[\"authclientrunner\",{\"1\":{\"1252\":1}}],[\"authclientmenucontroller\",{\"1\":{\"1586\":10,\"1592\":2}}],[\"authcenter\",{\"1\":{\"1032\":1,\"1515\":2,\"1635\":1}}],[\"auth权限控制若放在元素首部\",{\"1\":{\"998\":1}}],[\"auth服务\",{\"1\":{\"723\":1}}],[\"auth\",{\"0\":{\"977\":1},\"1\":{\"360\":1,\"886\":1,\"945\":1,\"977\":2,\"1024\":1,\"1025\":16,\"1026\":16,\"1123\":1,\"1137\":1,\"1506\":2,\"1513\":6,\"1514\":1,\"1522\":2,\"1531\":1,\"1532\":3,\"1533\":1,\"1584\":1,\"1595\":1,\"1597\":5}}],[\"authzex\",{\"1\":{\"345\":4}}],[\"authenticate\",{\"1\":{\"1517\":1,\"1518\":2,\"1519\":1}}],[\"authenticateauthorizationrequest处理授权请求\",{\"1\":{\"346\":1}}],[\"authenticateauthorizationconsent处理同意授权的请求\",{\"1\":{\"346\":1}}],[\"authenticated\",{\"1\":{\"336\":1,\"348\":1,\"977\":1}}],[\"authenticationexception\",{\"1\":{\"1517\":1,\"1518\":1,\"1519\":1}}],[\"authenticationentrypointfailurehandler\",{\"1\":{\"348\":2}}],[\"authenticationentrypoint\",{\"1\":{\"348\":4,\"467\":5,\"1031\":5}}],[\"authenticationprovider\",{\"1\":{\"1517\":1,\"1519\":1}}],[\"authenticationfailurehandler\",{\"1\":{\"348\":2}}],[\"authentication\",{\"1\":{\"345\":3,\"467\":1,\"1141\":3,\"1517\":4,\"1518\":3,\"1519\":3,\"1522\":1,\"1616\":1}}],[\"authenticationconfiguration\",{\"0\":{\"331\":1},\"1\":{\"331\":1,\"341\":1}}],[\"authenticationmanagerdelegator\",{\"1\":{\"331\":1}}],[\"authenticationmanagerinitialized\",{\"1\":{\"331\":2,\"341\":1}}],[\"authenticationmanager\",{\"0\":{\"340\":1},\"1\":{\"330\":2,\"331\":6,\"341\":1}}],[\"authenticationmanagerbuilder实现上述构造器类\",{\"1\":{\"333\":1}}],[\"authenticationmanagerbuilder\",{\"0\":{\"341\":1},\"1\":{\"330\":1,\"331\":2,\"333\":1,\"341\":1}}],[\"authenticationbuilder\",{\"1\":{\"330\":3}}],[\"authenticationwebfilter\",{\"1\":{\"322\":1}}],[\"authbuilder\",{\"1\":{\"331\":4}}],[\"auth再进行处理\",{\"1\":{\"325\":1}}],[\"authority获取权限\",{\"1\":{\"1452\":1}}],[\"authority存放用户或租户权限\",{\"1\":{\"1452\":1}}],[\"authority存放应用下发权限\",{\"1\":{\"1452\":1}}],[\"authority\",{\"1\":{\"716\":1,\"1058\":3,\"1445\":1}}],[\"authorizeexchange对角色校验\",{\"1\":{\"1029\":1}}],[\"authorizeexchange\",{\"1\":{\"467\":1,\"1031\":1}}],[\"authorizedclient`\",{\"1\":{\"345\":1}}],[\"authorizedclientprovider\",{\"1\":{\"345\":1}}],[\"authorizedclientrepository\",{\"1\":{\"345\":1}}],[\"authorizedclient\",{\"1\":{\"345\":10}}],[\"authorizedclientmanager\",{\"1\":{\"345\":1}}],[\"authorize\",{\"1\":{\"345\":3,\"1506\":1}}],[\"authorizerequests\",{\"1\":{\"348\":1}}],[\"authorizerequest\",{\"1\":{\"345\":11}}],[\"authorizationgranttypes\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"authorizationcontroller\",{\"1\":{\"1345\":1}}],[\"authorizationcontext\",{\"1\":{\"345\":4}}],[\"authorizationmanager\",{\"1\":{\"467\":3,\"1031\":3,\"1522\":1}}],[\"authorization+\",{\"1\":{\"422\":1}}],[\"authorizationrequestresolver\",{\"1\":{\"345\":2}}],[\"authorizationrequest\",{\"1\":{\"345\":6}}],[\"authorizationsuccessevent\",{\"1\":{\"1345\":1}}],[\"authorizationsuccesshandler\",{\"1\":{\"345\":1}}],[\"authorizationserversecurityconfiguration配置客户端或授权安全\",{\"1\":{\"343\":1}}],[\"authorizationserversecurityconfigurer\",{\"1\":{\"343\":1}}],[\"authorizationserverendpointsconfiguration内部配置类\",{\"1\":{\"343\":1}}],[\"authorizationserverendpointsconfigurer\",{\"1\":{\"343\":1}}],[\"authorizationserverconfigureradapter实现了authorizationserverconfigurer接口\",{\"1\":{\"343\":1}}],[\"authorizationserverconfigurer\",{\"0\":{\"338\":1},\"1\":{\"343\":1}}],[\"authorizationfailurehandler\",{\"1\":{\"345\":1}}],[\"authorization\",{\"0\":{\"346\":1,\"1345\":1},\"1\":{\"344\":2,\"345\":2,\"422\":2,\"723\":1,\"1137\":1,\"1516\":1,\"1531\":3,\"1533\":1,\"1534\":1,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":2,\"1571\":2,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"authorizationwebfilter\",{\"1\":{\"322\":1}}],[\"authors>\",{\"1\":{\"103\":1}}],[\"author\",{\"1\":{\"103\":1,\"148\":3,\"151\":5,\"241\":1,\"648\":1,\"657\":1,\"801\":3,\"1256\":1}}],[\"autodownloadjarprotocolsupportloader\",{\"1\":{\"1357\":1}}],[\"autoregisterthingsregistry\",{\"1\":{\"1344\":1}}],[\"autocreatetopicenable=true\",{\"1\":{\"1136\":1}}],[\"autoconf=yes\",{\"1\":{\"1198\":1}}],[\"autoconfigurantionimportselector\",{\"0\":{\"494\":1},\"1\":{\"493\":1}}],[\"autoconfiguration\",{\"1\":{\"481\":1,\"494\":2}}],[\"autoconfiguredmapperscannerregistrar\",{\"1\":{\"858\":2}}],[\"autoconfigure\",{\"0\":{\"425\":1},\"1\":{\"481\":1,\"494\":1,\"851\":1}}],[\"autocommit\",{\"1\":{\"852\":3}}],[\"autostart\",{\"1\":{\"456\":1}}],[\"autoproxyutils\",{\"1\":{\"435\":1}}],[\"autowire=\",{\"1\":{\"479\":1}}],[\"autowireannotationbeanpostprocessor\",{\"1\":{\"359\":1}}],[\"autowirebytype\",{\"1\":{\"358\":1}}],[\"autowirebyname\",{\"1\":{\"358\":1}}],[\"autowire\",{\"0\":{\"496\":1},\"1\":{\"358\":6,\"1297\":1}}],[\"autowire属性byname\",{\"1\":{\"479\":1}}],[\"autowire属性\",{\"0\":{\"358\":1}}],[\"autowireconstructor\",{\"1\":{\"357\":1}}],[\"autowirenecessary\",{\"1\":{\"357\":1}}],[\"autowiredannotationbeanpostprocessor处理\",{\"1\":{\"359\":1}}],[\"autowiredwebsecurityconfigurersignoreparents\",{\"1\":{\"329\":1}}],[\"autowired\",{\"0\":{\"359\":1},\"1\":{\"329\":1,\"359\":1,\"658\":2,\"911\":1,\"1345\":1}}],[\"autowired无法解决循环依赖\",{\"0\":{\"58\":1}}],[\"auto\",{\"1\":{\"53\":1,\"494\":1,\"798\":4,\"801\":3,\"802\":3,\"850\":1,\"1210\":1,\"1464\":2,\"1465\":2,\"1466\":2,\"1467\":2}}],[\"awake\",{\"1\":{\"1445\":1}}],[\"await只能在async函数中使用\",{\"1\":{\"1000\":1}}],[\"await\",{\"1\":{\"236\":1,\"237\":1,\"1000\":1,\"1246\":1}}],[\"awk\",{\"1\":{\"1087\":2}}],[\"a>\",{\"1\":{\"982\":2}}],[\"aof是需要配置文件开启\",{\"1\":{\"911\":1}}],[\"aop\",{\"1\":{\"851\":2}}],[\"aop配置\",{\"1\":{\"558\":1}}],[\"aopautoconfiguration\",{\"0\":{\"427\":1}}],[\"aopproxyutils\",{\"1\":{\"386\":1}}],[\"aopproxy接口\",{\"1\":{\"383\":1}}],[\"aop中使用的代理样例\",{\"1\":{\"386\":1}}],[\"aop生成代理对象的时机\",{\"1\":{\"383\":1}}],[\"aop代理对象的生成\",{\"1\":{\"383\":1}}],[\"aop代理对象\",{\"1\":{\"383\":1}}],[\"aop面向切面\",{\"0\":{\"381\":1}}],[\"aggs\",{\"1\":{\"769\":1,\"770\":2,\"782\":2}}],[\"aggregation>\",{\"1\":{\"786\":1}}],[\"aggregationbuilder\",{\"1\":{\"780\":4}}],[\"aggregationservice\",{\"1\":{\"1344\":1}}],[\"aggregations\",{\"1\":{\"780\":6}}],[\"aggregation\",{\"0\":{\"768\":1},\"1\":{\"780\":3,\"786\":1}}],[\"agent\",{\"0\":{\"1084\":1},\"1\":{\"1210\":1,\"1214\":2,\"1215\":5}}],[\"age是\",{\"1\":{\"285\":2}}],[\"age\",{\"1\":{\"285\":4,\"479\":2,\"725\":1,\"767\":1,\"773\":2,\"982\":4}}],[\"avatarurl\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1,\"1554\":1}}],[\"available粗略为free\",{\"1\":{\"1179\":1}}],[\"available\",{\"1\":{\"1179\":1,\"1259\":1}}],[\"avg\",{\"1\":{\"770\":1}}],[\"average\",{\"1\":{\"756\":1,\"770\":1}}],[\"avoid\",{\"1\":{\"397\":1,\"399\":1,\"852\":1}}],[\"aes\",{\"1\":{\"719\":7,\"1515\":1}}],[\"aesutil\",{\"1\":{\"719\":2}}],[\"aes加密\",{\"0\":{\"719\":1}}],[\"a和b\",{\"1\":{\"383\":1}}],[\"aftercompletion\",{\"1\":{\"1259\":1}}],[\"afterproperties\",{\"1\":{\"919\":1}}],[\"afterproperties调用buildsqlsessionfactory方法构建sqlsessionfactory\",{\"1\":{\"852\":1}}],[\"afterproperties之前执行\",{\"1\":{\"442\":1}}],[\"afterpropertiesset\",{\"1\":{\"440\":1,\"852\":2,\"858\":1,\"914\":1}}],[\"afterproperties方法\",{\"1\":{\"333\":1}}],[\"aftersingletonsinstantiated注册监听器容器\",{\"1\":{\"811\":1}}],[\"aftersingletonsinstantiated\",{\"1\":{\"438\":2,\"914\":1}}],[\"afterrefresh\",{\"1\":{\"394\":1}}],[\"afterreturning\",{\"1\":{\"382\":1}}],[\"afterthrowing\",{\"1\":{\"382\":1}}],[\"after\",{\"1\":{\"249\":9,\"250\":9,\"382\":1,\"386\":1}}],[\"abac的权限管理\",{\"1\":{\"1503\":1}}],[\"able\",{\"1\":{\"1445\":2}}],[\"about\",{\"1\":{\"974\":2,\"1445\":1}}],[\"above\",{\"1\":{\"386\":1,\"399\":1,\"749\":1,\"773\":1}}],[\"abstractuserdetailsauthenticationprovider\",{\"1\":{\"1518\":4}}],[\"abstractunsafe\",{\"1\":{\"1445\":1}}],[\"abstractbootstrap\",{\"1\":{\"1450\":1}}],[\"abstractbeanfactory的getbean\",{\"0\":{\"439\":1}}],[\"abstractbeandefinition\",{\"1\":{\"359\":1,\"1297\":1}}],[\"abstracteventexecutor\",{\"1\":{\"1445\":2}}],[\"abstractendpoint\",{\"0\":{\"685\":1}}],[\"abstractscheduledeventexecutor\",{\"1\":{\"1445\":2}}],[\"abstractsecuritybuilder\",{\"1\":{\"333\":1}}],[\"abstractsecuritywebapplicationinitializer\",{\"1\":{\"329\":1}}],[\"abstractchannel的内部抽象abstractunsafe的register\",{\"1\":{\"1444\":1}}],[\"abstractchannel\",{\"1\":{\"1391\":1,\"1444\":1,\"1445\":1}}],[\"abstractconfiguredsecuritybuilder\",{\"1\":{\"333\":1,\"334\":1}}],[\"abstractniomessagechannel\",{\"1\":{\"1444\":1}}],[\"abstractniochannel的doregister方法\",{\"1\":{\"1444\":1}}],[\"abstractniochannel\",{\"1\":{\"1391\":1,\"1400\":1,\"1444\":1,\"1445\":2}}],[\"abstractniobytechannel\",{\"1\":{\"1391\":1,\"1444\":1}}],[\"abstracttaskexecutor\",{\"1\":{\"1335\":1}}],[\"abstracttransactionmanagementconfiguration\",{\"1\":{\"430\":1}}],[\"abstractdevicesessionmanager\",{\"0\":{\"1321\":1}}],[\"abstracthandlermethodadapter\",{\"1\":{\"1259\":1}}],[\"abstracthttp11protocol\",{\"0\":{\"689\":1}}],[\"abstracthttp11jsseprotocol\",{\"0\":{\"689\":1}}],[\"abstractmessagelistenercontainer\",{\"0\":{\"812\":1}}],[\"abstractprocessorlight\",{\"0\":{\"691\":1}}],[\"abstractprotocol下的connecthandler的process方法\",{\"0\":{\"1419\":1}}],[\"abstractprotocol下的内部类\",{\"0\":{\"690\":1}}],[\"abstractprotocol\",{\"0\":{\"689\":1}}],[\"abstractroutingdatasource\",{\"1\":{\"632\":3}}],[\"abstractautowirecapablebeanfactory的docreatebean\",{\"0\":{\"440\":1}}],[\"abstractautoproxycreator的createproxy\",{\"0\":{\"435\":1}}],[\"abstractautoproxycreator的wrapifnecessary\",{\"0\":{\"434\":1}}],[\"abstractautoproxycreator的postprocessafterinitialization\",{\"0\":{\"433\":1}}],[\"abstractapplicationcontext\",{\"0\":{\"396\":1},\"1\":{\"397\":1,\"482\":1}}],[\"abstract\",{\"1\":{\"334\":1,\"397\":1,\"411\":1}}],[\"abnormal\",{\"1\":{\"236\":2}}],[\"abc\",{\"1\":{\"128\":1}}],[\"atmtbbvonrhl5efpjyzo8lh\",{\"1\":{\"1531\":1,\"1532\":1}}],[\"attr\",{\"1\":{\"471\":1,\"473\":1}}],[\"attrname\",{\"1\":{\"411\":2}}],[\"attributes\",{\"1\":{\"345\":3,\"494\":1,\"971\":1,\"1532\":2}}],[\"attribute\",{\"1\":{\"345\":2,\"411\":1}}],[\"attempt\",{\"1\":{\"397\":1}}],[\"atomicinteger\",{\"1\":{\"234\":2}}],[\"at模式是阿里首推的模式\",{\"1\":{\"212\":1}}],[\"at\",{\"1\":{\"212\":1,\"386\":1,\"411\":3,\"833\":1,\"974\":1,\"1445\":2}}],[\"a文件\",{\"1\":{\"173\":1}}],[\"amd64\",{\"1\":{\"1093\":1}}],[\"amqp1\",{\"1\":{\"1024\":1}}],[\"amqp协议\",{\"1\":{\"1022\":1}}],[\"amqp或mqtt\",{\"1\":{\"1015\":1}}],[\"am\",{\"1\":{\"157\":4}}],[\"american\",{\"1\":{\"154\":3}}],[\"a++\",{\"1\":{\"135\":1}}],[\"a的值为\",{\"1\":{\"135\":10}}],[\"a=0\",{\"1\":{\"129\":1}}],[\"a~z和a~z\",{\"1\":{\"117\":1}}],[\"asc\",{\"1\":{\"764\":1,\"765\":1,\"1130\":2}}],[\"as方法\",{\"0\":{\"551\":1}}],[\"assurance\",{\"1\":{\"561\":1}}],[\"assumed\",{\"1\":{\"411\":1}}],[\"assourceclass\",{\"1\":{\"491\":2}}],[\"assets\",{\"1\":{\"943\":2}}],[\"assert\",{\"1\":{\"277\":1,\"284\":2,\"312\":4,\"315\":1,\"317\":1,\"329\":1,\"345\":4,\"494\":1,\"1032\":1,\"1445\":1}}],[\"assembledate1\",{\"1\":{\"236\":1}}],[\"as\",{\"1\":{\"268\":1,\"269\":1,\"270\":1,\"329\":2,\"397\":1,\"411\":4,\"557\":1,\"716\":1,\"758\":1,\"833\":1,\"973\":1,\"988\":6,\"992\":2,\"993\":1,\"994\":3,\"995\":1,\"1058\":29,\"1259\":2,\"1445\":5}}],[\"asia\",{\"1\":{\"218\":1,\"1116\":1,\"1130\":1,\"1137\":1,\"1139\":1}}],[\"asynchandlerinterceptor\",{\"1\":{\"1525\":1}}],[\"asynchandleservice\",{\"1\":{\"476\":2}}],[\"asyncclient\",{\"0\":{\"1380\":1}}],[\"asynccontext\",{\"1\":{\"695\":1}}],[\"asynccontextimpl\",{\"1\":{\"695\":1}}],[\"asyncmanager\",{\"1\":{\"1259\":3}}],[\"asyncsend\",{\"1\":{\"1245\":1}}],[\"asyncstatemachine\",{\"0\":{\"696\":1}}],[\"asyncrunnable\",{\"1\":{\"695\":1}}],[\"asyncappender\",{\"1\":{\"596\":2}}],[\"asyncwebrequest\",{\"1\":{\"406\":1}}],[\"async\",{\"0\":{\"572\":1,\"955\":1},\"1\":{\"179\":1,\"406\":1,\"596\":4,\"998\":1,\"1000\":1,\"1136\":2,\"1345\":1,\"1484\":1,\"1486\":1}}],[\"astaxie\",{\"1\":{\"173\":1}}],[\"aspectjproxyfactory实现proxycreatorsupport实现advisedsupport\",{\"1\":{\"383\":1}}],[\"aspectjproxyfactory\",{\"1\":{\"383\":1}}],[\"aspect\",{\"1\":{\"382\":1,\"911\":3}}],[\"aspect用于类上\",{\"1\":{\"382\":1}}],[\"asp\",{\"0\":{\"104\":1}}],[\"asmap\",{\"1\":{\"377\":1,\"786\":1}}],[\"asm\",{\"1\":{\"86\":1}}],[\"asm=all\",{\"1\":{\"86\":1}}],[\"adaptiverecvbytebufallocator\",{\"0\":{\"1394\":1}}],[\"adapter\",{\"1\":{\"329\":2,\"1259\":6}}],[\"adjust\",{\"1\":{\"1248\":1}}],[\"advertised\",{\"1\":{\"1126\":2}}],[\"advisorsprefiltered\",{\"1\":{\"435\":1}}],[\"advisors\",{\"1\":{\"435\":2}}],[\"advisor\",{\"1\":{\"430\":6,\"435\":1}}],[\"advised\",{\"1\":{\"386\":2}}],[\"advisedbeans\",{\"1\":{\"383\":4,\"434\":4}}],[\"advisedsupport\",{\"1\":{\"383\":1}}],[\"advice\",{\"1\":{\"383\":1,\"434\":1,\"435\":1}}],[\"admin最大的租户\",{\"1\":{\"1643\":1}}],[\"admin用户管理员\",{\"1\":{\"1561\":1}}],[\"adminclientconfig\",{\"1\":{\"801\":1}}],[\"adminaccessfilter全局过滤器\",{\"1\":{\"471\":1}}],[\"admin\",{\"1\":{\"83\":1,\"91\":1,\"102\":1,\"103\":1,\"164\":2,\"467\":1,\"1026\":1,\"1123\":1,\"1131\":2,\"1501\":1,\"1513\":1,\"1515\":1,\"1532\":6,\"1534\":2,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":2,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":2,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":3,\"1562\":1,\"1563\":1,\"1564\":3,\"1565\":2,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":3,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":7,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":2,\"1636\":1,\"1637\":1,\"1641\":1,\"1651\":2}}],[\"addheader\",{\"1\":{\"1523\":4}}],[\"addoriginalrequesturl\",{\"1\":{\"1522\":1}}],[\"addlistener\",{\"1\":{\"1450\":1}}],[\"addlifecyclelistener\",{\"1\":{\"450\":1}}],[\"addlast\",{\"1\":{\"1450\":5}}],[\"added\",{\"1\":{\"1445\":2}}],[\"addendpoint\",{\"0\":{\"1414\":1,\"1415\":1},\"1\":{\"1413\":1}}],[\"add时的状态\",{\"1\":{\"1151\":1}}],[\"add到暂存区\",{\"1\":{\"1151\":1}}],[\"add命令会自动处理url和解压tar文件\",{\"1\":{\"1112\":1}}],[\"addtask\",{\"1\":{\"1445\":1}}],[\"addtaskwakesup\",{\"1\":{\"1445\":2}}],[\"addtenantlisteners\",{\"1\":{\"880\":1}}],[\"addtriggertask\",{\"1\":{\"657\":1}}],[\"addmapper\",{\"1\":{\"860\":1}}],[\"addmethod\",{\"1\":{\"241\":5}}],[\"addchildren\",{\"1\":{\"1036\":2}}],[\"addcronjob\",{\"1\":{\"1013\":2}}],[\"addcachedataifabsent\",{\"1\":{\"880\":1}}],[\"addcache\",{\"1\":{\"852\":1}}],[\"addcookie\",{\"1\":{\"652\":2}}],[\"addconnector\",{\"1\":{\"450\":2}}],[\"addconstructor\",{\"1\":{\"241\":1}}],[\"adduseridterm\",{\"1\":{\"786\":1}}],[\"addurlpatterns\",{\"1\":{\"421\":2}}],[\"adds\",{\"1\":{\"1421\":1}}],[\"addsource\",{\"1\":{\"792\":1}}],[\"addsink\",{\"1\":{\"792\":1}}],[\"addscrollid\",{\"1\":{\"780\":1}}],[\"addservletcontainerinitializer添加servlet容器初始化器\",{\"1\":{\"451\":1}}],[\"addsecurityfilterchainbuilder\",{\"1\":{\"329\":1}}],[\"addpreviouslyremovedconnectors\",{\"1\":{\"456\":1}}],[\"addinterceptor\",{\"1\":{\"852\":1}}],[\"addinterface\",{\"1\":{\"435\":1}}],[\"additionalauthenticationchecks\",{\"1\":{\"1518\":1}}],[\"additionalauthenticationchecks方法\",{\"1\":{\"1518\":1}}],[\"additionaltomcatconnectors\",{\"1\":{\"450\":1}}],[\"additionalconnector\",{\"1\":{\"450\":2}}],[\"addbeanpostprocessor\",{\"1\":{\"397\":1}}],[\"addvalidators\",{\"1\":{\"379\":1}}],[\"addadvisors\",{\"1\":{\"435\":1}}],[\"addattribute\",{\"1\":{\"377\":2,\"982\":3}}],[\"addall\",{\"1\":{\"236\":1,\"256\":1,\"399\":3,\"473\":1}}],[\"addfilterbefore\",{\"1\":{\"467\":1}}],[\"addfilter\",{\"1\":{\"330\":1}}],[\"addfield\",{\"1\":{\"241\":2}}],[\"addr=namesrv\",{\"1\":{\"1136\":2}}],[\"addresourcelocations\",{\"1\":{\"594\":2}}],[\"addresourcehandler\",{\"1\":{\"594\":2}}],[\"addresourcehandlers\",{\"1\":{\"594\":1}}],[\"address字段中包含\",{\"1\":{\"766\":1}}],[\"address\",{\"1\":{\"479\":1,\"763\":1,\"766\":1,\"914\":1,\"1059\":1,\"1131\":1}}],[\"addr\",{\"1\":{\"36\":4,\"1210\":6,\"1211\":1}}],[\"add\",{\"0\":{\"1112\":1},\"1\":{\"11\":1,\"48\":1,\"86\":2,\"218\":1,\"236\":18,\"358\":2,\"399\":13,\"494\":1,\"672\":5,\"720\":1,\"759\":1,\"780\":3,\"786\":1,\"900\":2,\"965\":1,\"982\":8,\"1032\":1,\"1042\":1,\"1116\":1,\"1144\":2,\"1147\":1,\"1210\":5,\"1211\":1,\"1248\":2,\"1297\":1,\"1345\":1,\"1584\":8,\"1607\":2}}],[\"ai引擎\",{\"1\":{\"1038\":1}}],[\"ai\",{\"0\":{\"56\":1,\"1655\":1},\"1\":{\"56\":1,\"1120\":1}}],[\"algorithm\",{\"0\":{\"1656\":1}}],[\"al\",{\"1\":{\"1113\":1}}],[\"alpine\",{\"0\":{\"1094\":1},\"1\":{\"1116\":1,\"1139\":2}}],[\"alter\",{\"1\":{\"1042\":2,\"1141\":3}}],[\"although\",{\"1\":{\"399\":1}}],[\"alert\",{\"1\":{\"948\":2,\"991\":1,\"1486\":1}}],[\"alarmtaskexecutorprovider\",{\"1\":{\"1335\":1}}],[\"alarmfirst\",{\"1\":{\"1311\":1}}],[\"alarm\",{\"0\":{\"1309\":1},\"1\":{\"1308\":5,\"1311\":2}}],[\"alarmlog\",{\"1\":{\"786\":2}}],[\"alarmlogmapper\",{\"1\":{\"786\":2}}],[\"alarmconfigservice\",{\"1\":{\"353\":1}}],[\"alarmconfigupdatedto\",{\"1\":{\"353\":2}}],[\"also\",{\"1\":{\"439\":1,\"647\":1,\"1445\":2}}],[\"all和子查询\",{\"1\":{\"716\":1}}],[\"allocateitemstock\",{\"1\":{\"1251\":1}}],[\"allocated\",{\"1\":{\"647\":1}}],[\"allows\",{\"1\":{\"397\":1}}],[\"allowcaching\",{\"1\":{\"359\":1}}],[\"allow\",{\"1\":{\"292\":1,\"435\":1,\"438\":1,\"439\":1,\"725\":4,\"1026\":1,\"1126\":2,\"1130\":2,\"1137\":3,\"1201\":1,\"1513\":1,\"1515\":1}}],[\"allowpublickeyretrieval=true\",{\"1\":{\"34\":2,\"595\":1}}],[\"allowed\",{\"0\":{\"34\":1},\"1\":{\"1120\":1}}],[\"all\",{\"0\":{\"764\":1},\"1\":{\"397\":1,\"399\":6,\"438\":2,\"648\":1,\"764\":1,\"765\":1,\"778\":2,\"780\":1,\"801\":1,\"802\":1,\"974\":1,\"1093\":1,\"1445\":3}}],[\"already\",{\"1\":{\"329\":1,\"397\":1,\"399\":1,\"411\":2,\"914\":2}}],[\"alwaysequal\",{\"1\":{\"272\":4}}],[\"always\",{\"1\":{\"249\":2,\"1120\":2,\"1122\":1,\"1126\":1,\"1127\":2,\"1128\":1,\"1138\":1,\"1445\":4,\"1475\":1}}],[\"alinks\",{\"0\":{\"1485\":1}}],[\"alink\",{\"1\":{\"1479\":1}}],[\"alise\",{\"1\":{\"1122\":1}}],[\"alive\",{\"1\":{\"1058\":5}}],[\"aliases\",{\"1\":{\"852\":2,\"1515\":1}}],[\"alias\",{\"1\":{\"623\":2,\"786\":1,\"852\":1,\"1099\":1,\"1118\":1,\"1130\":2,\"1210\":2}}],[\"alibaba\",{\"1\":{\"596\":2,\"850\":1,\"862\":4,\"871\":1,\"1243\":1,\"1501\":2}}],[\"aliyuncs\",{\"1\":{\"1096\":1,\"1137\":1,\"1283\":1}}],[\"aliyun\",{\"1\":{\"49\":2}}],[\"ali<\",{\"1\":{\"49\":2}}],[\"acjsv5pg9htmdoz9pqu5iqmnzi0xj80\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"achieved\",{\"1\":{\"1445\":1}}],[\"acquire\",{\"1\":{\"911\":2}}],[\"acknowledge\",{\"1\":{\"804\":3}}],[\"acknowledgment\",{\"1\":{\"804\":3}}],[\"acknowledgment参数\",{\"1\":{\"798\":2}}],[\"ack\",{\"1\":{\"804\":10}}],[\"acks\",{\"1\":{\"801\":1,\"802\":1}}],[\"acks=all\",{\"1\":{\"801\":1,\"802\":1}}],[\"acks=1\",{\"1\":{\"801\":1,\"802\":1}}],[\"acks=0\",{\"1\":{\"801\":1,\"802\":1}}],[\"accountnonlocked\",{\"1\":{\"1532\":2}}],[\"accountnonexpired\",{\"1\":{\"1532\":2}}],[\"account\",{\"1\":{\"764\":1,\"765\":1,\"948\":1}}],[\"accesstokentimetolive\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"accesstoken\",{\"1\":{\"1532\":2}}],[\"accessmode\",{\"1\":{\"1486\":1}}],[\"accesses\",{\"1\":{\"647\":1}}],[\"accessing\",{\"1\":{\"647\":1}}],[\"accessdeniedhandler\",{\"1\":{\"467\":2,\"1031\":2}}],[\"access\",{\"0\":{\"1141\":1},\"1\":{\"467\":1,\"725\":5,\"975\":1,\"1031\":1,\"1210\":4,\"1519\":1,\"1531\":2,\"1534\":1,\"1535\":1}}],[\"accesscontroller\",{\"1\":{\"438\":2}}],[\"accesslog\",{\"0\":{\"205\":1}}],[\"accepting\",{\"1\":{\"1445\":1}}],[\"acceptcontext\",{\"1\":{\"1345\":1}}],[\"acceptcount\",{\"1\":{\"215\":2}}],[\"acceptor\",{\"1\":{\"683\":1}}],[\"acceptor线程\",{\"1\":{\"215\":1}}],[\"accept\",{\"1\":{\"250\":3,\"1032\":1,\"1445\":1}}],[\"acceptable\",{\"0\":{\"4\":1}}],[\"act\",{\"1\":{\"578\":3,\"579\":3,\"580\":3,\"582\":6,\"583\":4,\"702\":3,\"703\":3,\"704\":3}}],[\"actually\",{\"1\":{\"1259\":1}}],[\"actualinflight\",{\"1\":{\"824\":1}}],[\"actual\",{\"1\":{\"535\":2,\"556\":7}}],[\"actinst\",{\"1\":{\"579\":1,\"582\":1,\"583\":1,\"703\":1}}],[\"actions与mutations类似\",{\"1\":{\"998\":1}}],[\"actions\",{\"1\":{\"282\":2,\"1311\":3}}],[\"action\",{\"1\":{\"282\":9,\"691\":1,\"780\":5,\"1628\":2,\"1635\":1}}],[\"actionendpointdatasourcebase基类\",{\"1\":{\"108\":1}}],[\"activation用来指定激活方式\",{\"1\":{\"1079\":1}}],[\"activation>\",{\"1\":{\"1078\":1,\"1079\":1,\"1202\":1}}],[\"activate\",{\"1\":{\"96\":1}}],[\"activeprofiles>\",{\"1\":{\"1202\":1}}],[\"activeprofile>\",{\"1\":{\"1202\":2}}],[\"activebydefault>\",{\"1\":{\"1078\":1,\"1079\":1,\"1202\":1}}],[\"active>test<\",{\"1\":{\"1078\":1}}],[\"active>prod<\",{\"1\":{\"1078\":1,\"1079\":1}}],[\"active>\",{\"1\":{\"1078\":3,\"1079\":1}}],[\"active>dev<\",{\"1\":{\"1078\":1}}],[\"active是自定义的字段\",{\"1\":{\"1078\":1}}],[\"active=\",{\"1\":{\"1078\":1}}],[\"active\",{\"1\":{\"271\":5,\"397\":1,\"1078\":1,\"1383\":1,\"1515\":1}}],[\"activity\",{\"1\":{\"39\":3,\"78\":1}}],[\"apt\",{\"1\":{\"1130\":5,\"1185\":1}}],[\"apk打包\",{\"1\":{\"1074\":1}}],[\"apk打包时有效\",{\"1\":{\"1074\":1}}],[\"appbaseio\",{\"1\":{\"1137\":1}}],[\"appid\",{\"1\":{\"1006\":1}}],[\"appsecret\",{\"1\":{\"1006\":1}}],[\"apps\",{\"1\":{\"934\":2}}],[\"app>\",{\"1\":{\"652\":2}}],[\"appear\",{\"1\":{\"399\":2}}],[\"appendonly\",{\"1\":{\"1139\":1}}],[\"appender>\",{\"1\":{\"596\":6}}],[\"append\",{\"1\":{\"152\":5,\"241\":8,\"910\":1}}],[\"applyafterconcurrenthandlingstarted\",{\"1\":{\"1259\":1}}],[\"applyposthandle\",{\"1\":{\"1259\":1}}],[\"applyprehandle\",{\"1\":{\"1259\":1}}],[\"applydefaultviewname\",{\"1\":{\"1259\":1}}],[\"applydefaultconfigurers\",{\"1\":{\"330\":1}}],[\"applyconfiguration\",{\"1\":{\"852\":1}}],[\"applybeanpostprocessorsafterinitialization\",{\"1\":{\"440\":1}}],[\"applybeanpostprocessorsbeforeinitialization\",{\"1\":{\"440\":1}}],[\"apply\",{\"1\":{\"249\":7,\"329\":2,\"330\":1,\"331\":1,\"345\":1,\"399\":2,\"435\":1,\"509\":2,\"780\":1,\"1074\":1,\"1159\":1,\"1445\":4}}],[\"applicable\",{\"1\":{\"358\":2,\"438\":1}}],[\"applicationclassloader\",{\"1\":{\"1421\":1}}],[\"applicationcontext是servlet运行环境的上下文信息\",{\"1\":{\"675\":1}}],[\"applicationcontext与standardcontext\",{\"0\":{\"675\":1}}],[\"applicationcontextexception\",{\"1\":{\"445\":1,\"446\":1}}],[\"applicationcontext到bean\",{\"1\":{\"442\":1}}],[\"applicationcontextawareprocessor\",{\"0\":{\"442\":1}}],[\"applicationcontextaware\",{\"1\":{\"413\":1,\"513\":1}}],[\"applicationcontextware接口\",{\"1\":{\"392\":1}}],[\"applicationcontext\",{\"0\":{\"462\":1,\"601\":1,\"677\":1},\"1\":{\"210\":4,\"331\":1,\"398\":1,\"399\":1,\"413\":13,\"505\":8,\"600\":2}}],[\"applicationdeployer的初始化\",{\"1\":{\"744\":1}}],[\"applicationdeployer进行部署\",{\"1\":{\"744\":1}}],[\"applicationdispatcher\",{\"1\":{\"694\":1}}],[\"applicationmodel\",{\"0\":{\"735\":1}}],[\"applicationeventpublisher\",{\"1\":{\"398\":1,\"1285\":1}}],[\"applicationevent\",{\"1\":{\"210\":1,\"413\":2}}],[\"applicationeventlistener\",{\"1\":{\"210\":1}}],[\"applicationlistener<applicationevent>\",{\"1\":{\"210\":1}}],[\"applicationlistener监听器\",{\"1\":{\"210\":1}}],[\"application运行\",{\"1\":{\"104\":1}}],[\"application应用初始化\",{\"1\":{\"104\":1}}],[\"applicationstartup\",{\"1\":{\"397\":2}}],[\"applications\",{\"1\":{\"86\":1}}],[\"application\",{\"1\":{\"10\":1,\"411\":2,\"593\":1,\"802\":1,\"1032\":1,\"1121\":2,\"1210\":1,\"1248\":2,\"1455\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":1}}],[\"applied\",{\"1\":{\"249\":2,\"346\":4,\"509\":1}}],[\"applies\",{\"1\":{\"249\":9}}],[\"app\",{\"1\":{\"86\":1,\"103\":1,\"218\":3,\"965\":9,\"1116\":2,\"1120\":3,\"1121\":8,\"1122\":2,\"1126\":3,\"1452\":1,\"1475\":3,\"1503\":1,\"1574\":1,\"1583\":3,\"1584\":1}}],[\"apm监控\",{\"0\":{\"80\":1}}],[\"apache\",{\"0\":{\"615\":1,\"684\":1,\"1379\":1},\"1\":{\"48\":1,\"49\":1,\"642\":1,\"692\":2,\"780\":1,\"790\":7,\"792\":13,\"802\":4,\"1130\":1,\"1215\":1,\"1458\":1,\"1501\":1,\"1515\":1,\"1524\":1}}],[\"apilist\",{\"1\":{\"1579\":1,\"1580\":1,\"1582\":4}}],[\"api管理\",{\"1\":{\"1241\":1,\"1502\":1,\"1503\":1,\"1524\":1}}],[\"api服务器进行创建\",{\"1\":{\"1163\":1}}],[\"api或命令行工具向master节点提交pod的描述文件\",{\"1\":{\"1162\":1}}],[\"apierror\",{\"1\":{\"988\":2}}],[\"apifox\",{\"0\":{\"570\":1}}],[\"apicheck\",{\"1\":{\"164\":1}}],[\"api\",{\"0\":{\"755\":1,\"786\":1},\"1\":{\"36\":3,\"102\":2,\"103\":4,\"164\":1,\"467\":5,\"500\":1,\"792\":11,\"798\":1,\"886\":1,\"991\":2,\"1028\":1,\"1059\":1,\"1074\":1,\"1122\":3,\"1162\":1,\"1210\":1,\"1234\":1,\"1283\":1,\"1501\":1,\"1584\":4,\"1586\":2,\"1590\":1,\"1591\":1,\"1592\":2,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1}}],[\"anull\",{\"1\":{\"1210\":1}}],[\"anp|grep\",{\"1\":{\"1180\":1}}],[\"anp\",{\"1\":{\"1180\":1}}],[\"anpeiyong\",{\"1\":{\"241\":1}}],[\"anapsix\",{\"1\":{\"1116\":1}}],[\"analyze\",{\"1\":{\"774\":1}}],[\"analyzer分词器分词\",{\"1\":{\"774\":1}}],[\"analyzer\",{\"1\":{\"749\":1}}],[\"analyse分析sql执行计划\",{\"1\":{\"206\":1}}],[\"animal\",{\"1\":{\"932\":9,\"988\":2,\"991\":3,\"992\":5}}],[\"anno\",{\"1\":{\"382\":1,\"911\":6}}],[\"annotationgrpcservicediscoverer\",{\"1\":{\"640\":1}}],[\"annotationattributes\",{\"1\":{\"494\":1}}],[\"annotationawareaspectjautoproxycreator\",{\"0\":{\"432\":1}}],[\"annotationawareordercomparator\",{\"1\":{\"329\":2,\"473\":1}}],[\"annotationmetadata\",{\"1\":{\"480\":1,\"494\":1}}],[\"annotationtransactionattributesource\",{\"1\":{\"430\":1}}],[\"annotationconfig\",{\"1\":{\"505\":2}}],[\"annotationconfigservletwebserverapplicationcontext\",{\"0\":{\"389\":1}}],[\"annotationconfigapplicationcontext\",{\"0\":{\"388\":1}}],[\"annotation\",{\"1\":{\"382\":2,\"911\":4,\"1414\":3}}],[\"annotations=\",{\"1\":{\"376\":1}}],[\"annotationprocessor\",{\"1\":{\"31\":2}}],[\"anyoneapi\",{\"1\":{\"1522\":1}}],[\"anyone\",{\"1\":{\"1513\":2,\"1534\":1,\"1535\":1}}],[\"anyway\",{\"1\":{\"1445\":1}}],[\"anyexchange\",{\"1\":{\"467\":1,\"1031\":1}}],[\"any\",{\"1\":{\"399\":1,\"411\":3,\"439\":1,\"974\":1,\"988\":3,\"989\":1,\"991\":5,\"992\":2,\"1084\":1,\"1215\":4,\"1259\":1,\"1445\":1}}],[\"anymore\",{\"1\":{\"397\":1,\"1445\":1}}],[\"anyrequest\",{\"1\":{\"348\":1}}],[\"anything\",{\"1\":{\"346\":1}}],[\"antpathmatcher\",{\"1\":{\"422\":1}}],[\"ant\",{\"1\":{\"348\":1}}],[\"antmatcher\",{\"1\":{\"348\":1}}],[\"antmatchers\",{\"1\":{\"326\":1}}],[\"android\",{\"1\":{\"616\":1}}],[\"andthen\",{\"1\":{\"249\":2,\"250\":1}}],[\"and\",{\"1\":{\"249\":7,\"348\":5,\"386\":1,\"397\":2,\"399\":5,\"411\":2,\"435\":1,\"467\":2,\"471\":1,\"647\":2,\"716\":5,\"833\":1,\"852\":1,\"858\":1,\"914\":1,\"974\":1,\"1031\":2,\"1210\":1,\"1243\":2,\"1259\":2,\"1311\":3,\"1445\":10}}],[\"an\",{\"1\":{\"241\":2,\"249\":2,\"250\":2,\"397\":1,\"411\":1,\"833\":1,\"1445\":5,\"1451\":1}}],[\"anonymousauthenticationfilter\",{\"1\":{\"346\":1}}],[\"anonymous\",{\"1\":{\"330\":1,\"345\":1,\"1026\":1,\"1126\":1}}],[\"another\",{\"1\":{\"271\":2,\"914\":1,\"1210\":2}}],[\"ano\",{\"1\":{\"19\":1}}],[\"architecture\",{\"1\":{\"1130\":1}}],[\"archive\",{\"1\":{\"1130\":2}}],[\"arch=$\",{\"1\":{\"1130\":1}}],[\"arch>\",{\"1\":{\"1079\":1}}],[\"arm64v8\",{\"1\":{\"1125\":1}}],[\"arm64\",{\"1\":{\"1093\":1}}],[\"are\",{\"1\":{\"494\":1,\"1445\":2}}],[\"area\",{\"1\":{\"288\":3}}],[\"around\",{\"1\":{\"382\":3,\"911\":2}}],[\"argv\",{\"1\":{\"1246\":5}}],[\"arg>\",{\"1\":{\"479\":4}}],[\"arg\",{\"1\":{\"479\":4,\"648\":4}}],[\"arg元素来指定它的参数\",{\"1\":{\"479\":1}}],[\"arguments\",{\"1\":{\"911\":2}}],[\"argumentresolvers\",{\"1\":{\"403\":2}}],[\"argument\",{\"1\":{\"249\":4,\"250\":2}}],[\"args\",{\"1\":{\"9\":1,\"162\":2,\"164\":2,\"173\":1,\"210\":2,\"234\":1,\"241\":1,\"252\":1,\"357\":1,\"439\":1,\"646\":1,\"647\":1,\"648\":1,\"852\":2,\"853\":3,\"1032\":1,\"1256\":1,\"1257\":2,\"1320\":1}}],[\"article\",{\"1\":{\"1374\":2}}],[\"artifactid>\",{\"1\":{\"31\":1,\"49\":1,\"476\":2,\"621\":1,\"639\":1,\"646\":1,\"658\":1,\"790\":8,\"799\":1,\"862\":5,\"981\":1,\"1249\":1}}],[\"arthas\",{\"1\":{\"65\":1}}],[\"array类型特有\",{\"1\":{\"1486\":8}}],[\"arrayblockingqueue<>\",{\"1\":{\"476\":1}}],[\"arrayutils\",{\"1\":{\"780\":2}}],[\"arrayutil\",{\"1\":{\"467\":1,\"1031\":1}}],[\"array<t\",{\"1\":{\"296\":1}}],[\"arrays\",{\"1\":{\"277\":2,\"900\":1,\"1522\":1}}],[\"arrays是一个二维数组\",{\"1\":{\"277\":1}}],[\"arraylist<class<\",{\"1\":{\"1032\":1}}],[\"arraylist<string>\",{\"1\":{\"982\":1}}],[\"arraylist<user>\",{\"1\":{\"982\":1}}],[\"arraylist<>\",{\"1\":{\"399\":8,\"438\":1,\"473\":1,\"490\":1,\"494\":1,\"672\":3,\"780\":2,\"786\":1,\"1244\":2,\"1345\":1}}],[\"arraylist\",{\"1\":{\"780\":1}}],[\"arraylist底层实现是object\",{\"1\":{\"228\":1}}],[\"arraylist和linkedlist是其实现类\",{\"1\":{\"228\":1}}],[\"array\",{\"1\":{\"153\":1,\"277\":4,\"296\":5,\"649\":1,\"983\":2,\"1486\":4,\"1532\":3,\"1535\":1,\"1596\":1,\"1605\":1,\"1615\":1,\"1621\":2,\"1624\":1,\"1630\":1,\"1631\":1,\"1637\":1}}],[\"arrayformat\",{\"1\":{\"51\":1}}],[\"arr\",{\"1\":{\"152\":7,\"296\":12}}],[\"arr=2\",{\"1\":{\"51\":1}}],[\"a\",{\"1\":{\"9\":8,\"12\":2,\"103\":2,\"121\":1,\"122\":2,\"123\":6,\"124\":2,\"127\":2,\"128\":4,\"129\":4,\"130\":2,\"131\":5,\"135\":6,\"139\":2,\"140\":9,\"141\":2,\"143\":4,\"145\":3,\"146\":5,\"173\":1,\"243\":4,\"249\":6,\"250\":2,\"251\":2,\"275\":1,\"277\":12,\"279\":2,\"284\":2,\"297\":2,\"326\":2,\"383\":1,\"386\":1,\"397\":1,\"399\":2,\"411\":4,\"438\":1,\"439\":1,\"494\":1,\"635\":2,\"647\":2,\"852\":4,\"974\":3,\"977\":1,\"1059\":1,\"1087\":2,\"1113\":1,\"1114\":1,\"1122\":1,\"1136\":1,\"1144\":1,\"1185\":1,\"1215\":1,\"1222\":1,\"1223\":2,\"1243\":6,\"1259\":2,\"1292\":2,\"1445\":5}}],[\"类或接口\",{\"0\":{\"1391\":1}}],[\"类库\",{\"0\":{\"1290\":1}}],[\"类文件\",{\"1\":{\"1066\":1}}],[\"类路径是module定义的目录或项目输出目录\",{\"1\":{\"1065\":1}}],[\"类路径下和类路径config下同名配置文件\",{\"1\":{\"593\":1}}],[\"类选择器\",{\"1\":{\"946\":1}}],[\"类\",{\"0\":{\"932\":1}}],[\"类名\",{\"1\":{\"652\":1}}],[\"类的源码分析\",{\"0\":{\"537\":1}}],[\"类加载完成已经创建好对象\",{\"1\":{\"1256\":1}}],[\"类加载器\",{\"1\":{\"385\":1}}],[\"类加载过程\",{\"1\":{\"244\":1}}],[\"类加载\",{\"0\":{\"244\":1}}],[\"类似快捷方式\",{\"1\":{\"1184\":1}}],[\"类似freemarker\",{\"1\":{\"980\":1}}],[\"类似逻辑运算符\",{\"1\":{\"282\":1}}],[\"类似\",{\"1\":{\"174\":1,\"992\":1}}],[\"类似于jdbc\",{\"1\":{\"1291\":1}}],[\"类似于vue的计算属性\",{\"1\":{\"998\":1}}],[\"类似于声明文件中的\",{\"1\":{\"995\":1}}],[\"类似于中介者\",{\"1\":{\"818\":1}}],[\"类似于servlet的dispatcherservlet\",{\"1\":{\"513\":1}}],[\"类似于与数组或切片\",{\"1\":{\"190\":1}}],[\"类似于一个工作目录\",{\"1\":{\"168\":1}}],[\"类似于变量和常量\",{\"1\":{\"142\":1}}],[\"类似于注解方式\",{\"1\":{\"111\":1}}],[\"类似栈\",{\"1\":{\"138\":1}}],[\"类型了\",{\"1\":{\"995\":1}}],[\"类型23\",{\"1\":{\"993\":1}}],[\"类型断言\",{\"1\":{\"988\":1}}],[\"类型推导\",{\"1\":{\"315\":1}}],[\"类型在超出作用域范围后\",{\"1\":{\"303\":1}}],[\"类型的依赖\",{\"1\":{\"995\":1}}],[\"类型的最大支持的字符长度无限制\",{\"1\":{\"749\":1}}],[\"类型的最大支持的长度为\",{\"1\":{\"749\":1}}],[\"类型的智能指针\",{\"1\":{\"298\":2}}],[\"类型的\",{\"1\":{\"295\":1}}],[\"类型会有一个方法\",{\"1\":{\"295\":1}}],[\"类型而不是基于引用的\",{\"1\":{\"273\":1}}],[\"类型就实现了\",{\"1\":{\"266\":1}}],[\"类型字段使用整型数据值来标识不同类型\",{\"1\":{\"207\":1}}],[\"类型除法运算的函数\",{\"1\":{\"158\":1}}],[\"类型转换等异常\",{\"1\":{\"230\":1}}],[\"类型转换\",{\"0\":{\"156\":1},\"1\":{\"649\":1}}],[\"类型为\",{\"1\":{\"140\":1}}],[\"类型对象中的属性\",{\"1\":{\"139\":1}}],[\"类型对象中的方法\",{\"1\":{\"139\":1}}],[\"类型相同多个变量\",{\"1\":{\"124\":1}}],[\"类型等程序实体\",{\"1\":{\"117\":1}}],[\"类型\",{\"0\":{\"262\":1},\"1\":{\"116\":1,\"121\":2,\"140\":1,\"151\":2,\"298\":1,\"311\":1,\"749\":5,\"985\":2,\"988\":1,\"1531\":2,\"1532\":2,\"1533\":1,\"1534\":2,\"1535\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":1,\"1583\":2,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":2,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":2,\"1641\":1}}],[\"类型过滤器\",{\"1\":{\"111\":1}}],[\"类内部可以访问私有变量\",{\"1\":{\"9\":1}}],[\"类私有变量问题\",{\"0\":{\"9\":1}}],[\"若在最新中\",{\"1\":{\"1644\":1}}],[\"若支持\",{\"1\":{\"1531\":1}}],[\"若是jwt在这做解析\",{\"1\":{\"1521\":1}}],[\"若是qos\",{\"1\":{\"15\":1}}],[\"若直接登录应用则弹出登录\",{\"1\":{\"1496\":1}}],[\"若未传参数\",{\"1\":{\"1456\":1}}],[\"若请求不到数据\",{\"1\":{\"1434\":1}}],[\"若请求得到数据\",{\"1\":{\"1434\":1}}],[\"若对象存在\",{\"1\":{\"1433\":1}}],[\"若失败\",{\"1\":{\"1398\":1}}],[\"若token带认证信息\",{\"1\":{\"1345\":1}}],[\"若token不带认证信息\",{\"1\":{\"1345\":1}}],[\"若网络状态不活跃\",{\"1\":{\"1320\":1}}],[\"若网络波动导致客户端侧已订阅\",{\"1\":{\"8\":1}}],[\"若启用\",{\"1\":{\"1319\":1}}],[\"若修改\",{\"1\":{\"1246\":1}}],[\"若开发环境允许\",{\"1\":{\"1229\":1}}],[\"若线上日志无法分析\",{\"1\":{\"1229\":1}}],[\"若线程池在执行任务过程中\",{\"1\":{\"233\":1}}],[\"若出现connect\",{\"1\":{\"1137\":1}}],[\"若隔离级别为rc\",{\"1\":{\"1049\":1}}],[\"若当前列是没有索引\",{\"1\":{\"1048\":1}}],[\"若当前列是普通索引\",{\"1\":{\"1048\":1}}],[\"若当前列是唯一索引或主键\",{\"1\":{\"1048\":1}}],[\"若为与与运算如下分别为\",{\"1\":{\"929\":1}}],[\"若有上级网关设备则通过父级设备发送消息到网关子设备\",{\"1\":{\"1342\":1}}],[\"若有消息\",{\"1\":{\"1338\":1}}],[\"若有一个不是则返回具体值\",{\"1\":{\"929\":1}}],[\"若有必要执行则会加入到f\",{\"1\":{\"243\":1}}],[\"若两者都是布尔值\",{\"1\":{\"929\":1}}],[\"若没有则删除\",{\"1\":{\"1644\":1}}],[\"若没有网络则创建网络\",{\"1\":{\"1319\":1}}],[\"若没有配置中心配置\",{\"1\":{\"744\":1}}],[\"若没实现\",{\"1\":{\"310\":1}}],[\"若使用英文字母是不区分大小写的\",{\"1\":{\"656\":1}}],[\"若flux为空或单个元素\",{\"1\":{\"552\":1}}],[\"若存在父节点资源\",{\"1\":{\"527\":1}}],[\"若存在跳转到授权页面或登录授权页面\",{\"1\":{\"346\":1}}],[\"若节点有上级节点\",{\"1\":{\"527\":1}}],[\"若实现了ordered接口使用orderedgatewayfilter包装\",{\"1\":{\"473\":1}}],[\"若不主动断开\",{\"1\":{\"1353\":1}}],[\"若不是自旋获取新值变更数据\",{\"1\":{\"911\":1}}],[\"若不存在返回nil\",{\"1\":{\"911\":1}}],[\"若不存在\",{\"1\":{\"723\":1,\"1317\":1}}],[\"若不存在则插入新值\",{\"1\":{\"312\":2}}],[\"若不需要则转到下一个过滤器gatewayfilterchain\",{\"1\":{\"471\":1}}],[\"若带有拦截器\",{\"1\":{\"436\":1}}],[\"若类中方法上使用了\",{\"1\":{\"434\":1}}],[\"若类型实现\",{\"1\":{\"310\":1}}],[\"若授权权限为空\",{\"1\":{\"346\":1}}],[\"若\",{\"1\":{\"298\":1}}],[\"若变量同名可以省略\",{\"1\":{\"271\":1}}],[\"若发现垃圾回收标志为真\",{\"1\":{\"243\":1}}],[\"若已执行或未覆盖上述方法\",{\"1\":{\"243\":1}}],[\"若内存还是不足\",{\"1\":{\"243\":1}}],[\"若某个对象不可达\",{\"1\":{\"243\":1}}],[\"若超出时间\",{\"1\":{\"236\":1}}],[\"若包含引用对象需调用引用对象的clone方法\",{\"1\":{\"200\":1}}],[\"若包名和文件夹名不同\",{\"1\":{\"170\":1}}],[\"若本地包没有上传至公共仓库\",{\"1\":{\"169\":1}}],[\"若main包\",{\"1\":{\"137\":1}}],[\"若max\",{\"1\":{\"6\":1}}],[\"若依框架\",{\"1\":{\"65\":1}}],[\"tyt5ed77ad8dlh4oqd27bxtg1kj\",{\"1\":{\"1531\":1}}],[\"type为refresh\",{\"1\":{\"1531\":1}}],[\"type改为client\",{\"1\":{\"1531\":1}}],[\"type改为refresh\",{\"1\":{\"1531\":1}}],[\"typehandler\",{\"1\":{\"852\":3}}],[\"typehandler<\",{\"1\":{\"852\":1}}],[\"typehandlers\",{\"1\":{\"852\":2}}],[\"typehandlerspackagearray\",{\"1\":{\"852\":2}}],[\"typehandlerspackage\",{\"1\":{\"852\":2}}],[\"typealias\",{\"1\":{\"852\":3}}],[\"typealiases\",{\"1\":{\"852\":2}}],[\"typealiasessupertype\",{\"1\":{\"852\":2}}],[\"typealiasespackage\",{\"1\":{\"852\":2}}],[\"typealiaspackagearray\",{\"1\":{\"852\":2}}],[\"type=code\",{\"1\":{\"1506\":1}}],[\"type=com\",{\"1\":{\"850\":1}}],[\"type=ethernet\",{\"1\":{\"1198\":1}}],[\"type=service\",{\"1\":{\"1095\":1}}],[\"type=single\",{\"1\":{\"804\":1,\"1137\":1}}],[\"type=\",{\"1\":{\"943\":1,\"1059\":1,\"1407\":2}}],[\"type=batch\",{\"1\":{\"804\":3}}],[\"typeutils\",{\"1\":{\"792\":1}}],[\"typeinformation\",{\"1\":{\"792\":3}}],[\"typeinfo\",{\"1\":{\"792\":2}}],[\"typeof\",{\"1\":{\"649\":9,\"988\":2}}],[\"types=\",{\"1\":{\"995\":2}}],[\"typescript\",{\"1\":{\"965\":4}}],[\"types\",{\"1\":{\"386\":4,\"965\":8,\"992\":6,\"993\":2,\"994\":2,\"995\":3,\"1210\":1}}],[\"type获取授权对象\",{\"1\":{\"348\":1}}],[\"type2\",{\"1\":{\"124\":1}}],[\"type1\",{\"1\":{\"124\":1,\"759\":5}}],[\"type\",{\"1\":{\"103\":1,\"111\":1,\"124\":1,\"128\":1,\"139\":3,\"140\":1,\"142\":2,\"148\":5,\"151\":1,\"152\":4,\"154\":4,\"157\":3,\"158\":2,\"181\":1,\"249\":3,\"358\":3,\"368\":2,\"373\":1,\"647\":1,\"649\":2,\"716\":1,\"748\":1,\"758\":4,\"773\":4,\"782\":1,\"792\":2,\"801\":1,\"802\":2,\"852\":4,\"853\":3,\"860\":3,\"908\":1,\"911\":1,\"945\":1,\"985\":3,\"991\":3,\"1034\":1,\"1058\":4,\"1137\":1,\"1139\":1,\"1210\":1,\"1248\":2,\"1297\":1,\"1309\":1,\"1311\":4,\"1312\":2,\"1455\":1,\"1466\":1,\"1479\":1,\"1484\":8,\"1486\":9,\"1514\":1,\"1515\":3,\"1521\":2,\"1531\":3,\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":45,\"1590\":1,\"1591\":1,\"1592\":11,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":2,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":2}}],[\"tdenginecolumnmodestrategy\",{\"1\":{\"1344\":1}}],[\"td>\",{\"1\":{\"982\":3}}],[\"tunlp\",{\"1\":{\"1190\":1}}],[\"turn\",{\"1\":{\"438\":1}}],[\"tls\",{\"1\":{\"1130\":4}}],[\"tgz\",{\"1\":{\"1129\":1}}],[\"tbody>\",{\"1\":{\"982\":2}}],[\"ttl\",{\"1\":{\"908\":1,\"1025\":1,\"1026\":1}}],[\"tcpserverdevicegateway\",{\"1\":{\"1359\":1}}],[\"tcp协议和串口协议类似\",{\"1\":{\"1280\":1}}],[\"tcp报文\",{\"1\":{\"1280\":1}}],[\"tcpnetworkmodule实现networkmodule\",{\"0\":{\"840\":1}}],[\"tcp\",{\"1\":{\"833\":1,\"1026\":2,\"1171\":1,\"1210\":1,\"1276\":1,\"1425\":2}}],[\"tcc\",{\"0\":{\"664\":1},\"1\":{\"212\":1,\"668\":1}}],[\"tfdb驱动集成http\",{\"1\":{\"1479\":1}}],[\"tfdb\",{\"1\":{\"649\":1}}],[\"tsconfig\",{\"1\":{\"996\":2}}],[\"tsc\",{\"1\":{\"996\":1}}],[\"ts文件是ts的结构\",{\"1\":{\"984\":1}}],[\"ts和js是核心\",{\"1\":{\"984\":1}}],[\"ts支持\",{\"1\":{\"965\":1}}],[\"ts\",{\"0\":{\"984\":1},\"1\":{\"649\":3,\"989\":3,\"991\":7,\"992\":12,\"993\":6,\"994\":5,\"995\":5,\"996\":6,\"1058\":5}}],[\"tsl\",{\"0\":{\"625\":1}}],[\"txt已经添加到暂存区后\",{\"1\":{\"1151\":1}}],[\"txt自修改后还没有被放到暂存区\",{\"1\":{\"1151\":1}}],[\"txt文件在工作区的修改全部撤销\",{\"1\":{\"1151\":1}}],[\"txt意思就是\",{\"1\":{\"1151\":1}}],[\"txt\",{\"1\":{\"1147\":2}}],[\"tx\",{\"0\":{\"428\":1},\"1\":{\"801\":1,\"852\":4}}],[\"txmanager\",{\"1\":{\"202\":4,\"430\":2,\"1244\":1}}],[\"two\",{\"1\":{\"277\":2}}],[\"t>\",{\"1\":{\"249\":2,\"250\":1,\"531\":1,\"535\":1,\"556\":2,\"780\":2}}],[\"tz=\",{\"1\":{\"1137\":1}}],[\"tz=asia\",{\"1\":{\"1115\":1,\"1122\":1,\"1139\":1}}],[\"tz\",{\"1\":{\"218\":1,\"1139\":1}}],[\"tmpl\",{\"1\":{\"1129\":1}}],[\"tmp\",{\"1\":{\"218\":1,\"717\":1}}],[\"tier\",{\"1\":{\"1126\":3}}],[\"ticket\",{\"1\":{\"1514\":1}}],[\"tick\",{\"1\":{\"970\":2}}],[\"tidy\",{\"1\":{\"173\":1}}],[\"title>\",{\"1\":{\"1407\":1}}],[\"title\",{\"1\":{\"148\":3,\"151\":5,\"360\":1,\"749\":1,\"762\":1,\"780\":1,\"1407\":2,\"1579\":1,\"1580\":1,\"1582\":4,\"1583\":5,\"1607\":2,\"1635\":1}}],[\"time`\",{\"1\":{\"1464\":2,\"1465\":2,\"1466\":2,\"1467\":3,\"1468\":1}}],[\"timestring\",{\"1\":{\"1479\":2}}],[\"timestamp=true\",{\"1\":{\"1120\":1}}],[\"timestamp\",{\"1\":{\"649\":3,\"1058\":3,\"1373\":1,\"1464\":3,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"times\",{\"1\":{\"1445\":1}}],[\"timeseriesmessagewriterconnector\",{\"0\":{\"1363\":1}}],[\"timeseriesmessagewriterconnector订阅消息总线中所有设备消息存储到es中\",{\"1\":{\"1332\":1}}],[\"time和count有一个条件满足时提交\",{\"1\":{\"798\":1}}],[\"timevaluemillis\",{\"1\":{\"780\":1}}],[\"timevalueminutes\",{\"1\":{\"780\":1}}],[\"timevalue\",{\"1\":{\"780\":3}}],[\"timezoneoffset\",{\"1\":{\"649\":4}}],[\"timezone\",{\"1\":{\"649\":8,\"786\":1,\"1115\":1,\"1130\":1}}],[\"timebasedrollingpolicy\",{\"1\":{\"596\":3}}],[\"timeunit\",{\"1\":{\"192\":1,\"236\":2,\"476\":1}}],[\"time\",{\"1\":{\"179\":6,\"189\":3,\"397\":1,\"411\":3,\"648\":1,\"716\":2,\"792\":3,\"798\":2,\"974\":2,\"1042\":4,\"1058\":10,\"1137\":1,\"1311\":3,\"1513\":1,\"1514\":1,\"1515\":3,\"1635\":1}}],[\"timertaskexecutor等执行器\",{\"1\":{\"1325\":1}}],[\"timerthread\",{\"0\":{\"842\":1}}],[\"timerpingsender\",{\"0\":{\"843\":1}}],[\"timer\",{\"0\":{\"841\":1,\"842\":1},\"1\":{\"192\":1,\"1311\":2}}],[\"timer类\",{\"1\":{\"112\":1}}],[\"timers\",{\"1\":{\"112\":1}}],[\"timedcache<string\",{\"1\":{\"1249\":1}}],[\"timed\",{\"0\":{\"32\":1},\"1\":{\"232\":1}}],[\"timeout=30000\",{\"1\":{\"850\":2}}],[\"timeoutsec\",{\"1\":{\"192\":2}}],[\"timeout后\",{\"1\":{\"6\":1}}],[\"timeout\",{\"0\":{\"6\":1},\"1\":{\"6\":2,\"780\":2,\"801\":2,\"802\":2,\"1026\":2,\"1210\":9,\"1211\":4,\"1514\":1}}],[\"terminate\",{\"1\":{\"1445\":2}}],[\"terminates\",{\"1\":{\"1445\":1}}],[\"terminated\",{\"1\":{\"232\":1,\"1445\":3}}],[\"terminationfuture\",{\"1\":{\"1445\":1}}],[\"termination\",{\"1\":{\"1445\":1}}],[\"termtype\",{\"1\":{\"1311\":3}}],[\"termvectors\",{\"1\":{\"776\":1}}],[\"term条件的区分大小写\",{\"1\":{\"774\":1}}],[\"term精确匹配不分词查询\",{\"1\":{\"762\":1}}],[\"terms传递多个字段\",{\"1\":{\"762\":1}}],[\"terms\",{\"0\":{\"762\":1},\"1\":{\"762\":2,\"769\":1,\"770\":1,\"782\":1,\"1248\":1,\"1311\":7}}],[\"term\",{\"0\":{\"762\":1},\"1\":{\"749\":1,\"762\":2,\"782\":1,\"783\":1,\"1248\":2}}],[\"techlinks\",{\"0\":{\"1486\":1}}],[\"techease\",{\"1\":{\"623\":2,\"1032\":1,\"1122\":1,\"1513\":2,\"1514\":3,\"1515\":2,\"1541\":1,\"1635\":1}}],[\"techsel123$\",{\"1\":{\"1515\":1}}],[\"techsel123\",{\"1\":{\"1121\":1}}],[\"techsel\",{\"0\":{\"1675\":1},\"1\":{\"596\":1,\"1120\":4,\"1121\":3,\"1475\":2,\"1646\":1}}],[\"techsel2o19\",{\"1\":{\"595\":1,\"1514\":1,\"1515\":2,\"1647\":1,\"1648\":1}}],[\"temp\",{\"1\":{\"716\":2,\"985\":1,\"1484\":1}}],[\"temperature\",{\"1\":{\"649\":1}}],[\"temporary\",{\"1\":{\"439\":1}}],[\"templates\",{\"1\":{\"1514\":1}}],[\"templatepathmatch\",{\"1\":{\"1415\":3}}],[\"templatematches\",{\"1\":{\"1415\":2}}],[\"template<\",{\"1\":{\"103\":1}}],[\"template\",{\"1\":{\"102\":2,\"103\":6,\"965\":2,\"1167\":1,\"1312\":1}}],[\"tell\",{\"1\":{\"397\":1}}],[\"text类型特有\",{\"1\":{\"1486\":4}}],[\"text=\",{\"1\":{\"982\":9,\"983\":1}}],[\"text数据经过默认的standard\",{\"1\":{\"774\":1}}],[\"text\",{\"1\":{\"312\":2,\"592\":1,\"652\":1,\"716\":1,\"749\":3,\"773\":2,\"774\":1,\"943\":1,\"982\":1,\"983\":3,\"1407\":1,\"1486\":12,\"1616\":7}}],[\"team\",{\"1\":{\"311\":2}}],[\"teams\",{\"1\":{\"309\":4}}],[\"tenantdomain\",{\"1\":{\"1539\":1,\"1540\":1,\"1541\":2}}],[\"tenant拼接为键key\",{\"1\":{\"880\":1}}],[\"tenant\",{\"1\":{\"602\":2,\"1243\":2,\"1523\":1,\"1525\":1,\"1539\":1,\"1540\":1,\"1541\":2,\"1542\":1,\"1543\":1,\"1544\":1,\"1559\":1,\"1560\":1,\"1561\":2,\"1562\":1,\"1563\":1,\"1564\":2,\"1565\":1,\"1566\":1,\"1572\":1,\"1573\":1,\"1575\":1,\"1584\":5,\"1586\":6,\"1592\":2,\"1603\":1}}],[\"tenantid\",{\"1\":{\"236\":1,\"602\":2,\"1248\":1,\"1523\":2,\"1532\":2,\"1550\":1,\"1561\":3,\"1572\":1,\"1574\":1,\"1628\":2,\"1635\":1}}],[\"ten\",{\"1\":{\"297\":1}}],[\"testimplementation\",{\"1\":{\"1074\":1}}],[\"test5\",{\"1\":{\"929\":1}}],[\"test4\",{\"1\":{\"929\":1}}],[\"testgroup\",{\"1\":{\"801\":1,\"802\":1}}],[\"testgroovy\",{\"1\":{\"648\":5}}],[\"test的context\",{\"1\":{\"679\":1}}],[\"testbymethod\",{\"1\":{\"648\":1}}],[\"testbyfunction\",{\"1\":{\"648\":2}}],[\"test3\",{\"1\":{\"354\":4,\"929\":1}}],[\"test2\",{\"1\":{\"354\":4,\"782\":1,\"929\":1}}],[\"test1\",{\"1\":{\"354\":4}}],[\"test1包引入test2包\",{\"1\":{\"137\":1}}],[\"testutils\",{\"1\":{\"210\":3}}],[\"test\",{\"1\":{\"40\":1,\"173\":1,\"218\":3,\"353\":1,\"360\":1,\"623\":4,\"646\":1,\"648\":1,\"652\":2,\"679\":4,\"759\":5,\"773\":1,\"774\":2,\"782\":1,\"801\":1,\"850\":1,\"929\":1,\"931\":1,\"985\":1,\"991\":2,\"1026\":1,\"1048\":2,\"1113\":1,\"1114\":1,\"1147\":1,\"1177\":2,\"1187\":2,\"1215\":1,\"1216\":1,\"1219\":3,\"1256\":3,\"1292\":2,\"1515\":3,\"1613\":1}}],[\"testsingleton2\",{\"1\":{\"1257\":2}}],[\"testsingleton1\",{\"1\":{\"1257\":4}}],[\"testsingleton\",{\"1\":{\"1256\":14,\"1257\":8}}],[\"testscriptengine\",{\"1\":{\"648\":3}}],[\"testservice\",{\"1\":{\"234\":1}}],[\"tests\",{\"0\":{\"40\":1}}],[\"tew\",{\"1\":{\"9\":1}}],[\"tr>\",{\"1\":{\"982\":4}}],[\"trim\",{\"1\":{\"780\":1}}],[\"trimmereditor\",{\"1\":{\"379\":2}}],[\"triggeraftercompletion\",{\"1\":{\"1259\":2}}],[\"triggerjob\",{\"1\":{\"1013\":2}}],[\"triggers\",{\"1\":{\"792\":1,\"1215\":1}}],[\"triggersjson\",{\"1\":{\"792\":3}}],[\"triggersinkstreamtojson\",{\"1\":{\"792\":1}}],[\"triggersinkstream\",{\"1\":{\"792\":2}}],[\"triggersink\",{\"1\":{\"792\":1}}],[\"triggerconfig>\",{\"1\":{\"792\":1}}],[\"triggerconfig\",{\"1\":{\"792\":3}}],[\"triggercontext\",{\"1\":{\"657\":2}}],[\"trigger触发器\",{\"1\":{\"658\":2}}],[\"trigger\",{\"1\":{\"411\":1,\"438\":2,\"658\":1,\"792\":2,\"1311\":4,\"1445\":1}}],[\"trasactional实现事务\",{\"1\":{\"1295\":1}}],[\"track\",{\"1\":{\"778\":1}}],[\"tracktotalhits\",{\"1\":{\"778\":1,\"786\":1}}],[\"tracedispatcher\",{\"1\":{\"914\":2}}],[\"trace\",{\"1\":{\"438\":1,\"833\":3,\"914\":1}}],[\"trait\",{\"1\":{\"297\":2,\"298\":2}}],[\"transport\",{\"1\":{\"1139\":2}}],[\"transitions\",{\"0\":{\"979\":1}}],[\"translateexceptionifpossible\",{\"1\":{\"852\":1}}],[\"translated\",{\"1\":{\"852\":3}}],[\"translator\",{\"1\":{\"852\":1}}],[\"transformations\",{\"1\":{\"1421\":1}}],[\"transformation\",{\"1\":{\"1421\":2}}],[\"transform\",{\"1\":{\"557\":1,\"649\":1}}],[\"transactionisolationlevel\",{\"1\":{\"852\":1}}],[\"transactioninterceptor的invoke\",{\"1\":{\"429\":1}}],[\"transactioninterceptor\",{\"0\":{\"429\":1},\"1\":{\"429\":1,\"430\":7}}],[\"transactionfactory\",{\"1\":{\"852\":6}}],[\"transactionparallelism\",{\"1\":{\"792\":3}}],[\"transactionstringsstream\",{\"1\":{\"792\":2}}],[\"transactionstatus\",{\"1\":{\"202\":1}}],[\"transactionsource\",{\"1\":{\"792\":2}}],[\"transactions\",{\"1\":{\"792\":3}}],[\"transactionmanagementconfigutils\",{\"1\":{\"430\":1}}],[\"transactionattributesource\",{\"1\":{\"430\":8}}],[\"transactionadvisor\",{\"1\":{\"430\":1}}],[\"transactionaspectsupport的invokewithintransaction\",{\"1\":{\"429\":1}}],[\"transactionautoconfiguration\",{\"0\":{\"426\":1}}],[\"transactional注解\",{\"1\":{\"434\":1}}],[\"transactional\",{\"1\":{\"202\":3,\"801\":1}}],[\"transaction如何生效\",{\"0\":{\"424\":1}}],[\"transaction\",{\"0\":{\"660\":1},\"1\":{\"212\":1,\"430\":1,\"852\":1}}],[\"tranctional注解\",{\"1\":{\"212\":1}}],[\"tree<e>\",{\"1\":{\"1036\":4}}],[\"tree<e>>\",{\"1\":{\"1036\":1}}],[\"tree>\",{\"1\":{\"1036\":1}}],[\"treebuilder\",{\"1\":{\"1036\":1}}],[\"treenodeconfig\",{\"1\":{\"1036\":1}}],[\"treenode\",{\"1\":{\"1036\":1}}],[\"tree工具数据结构\",{\"1\":{\"1036\":1}}],[\"tree\",{\"0\":{\"671\":1},\"1\":{\"1036\":7,\"1582\":1,\"1586\":1}}],[\"treemap\",{\"1\":{\"228\":1}}],[\"treeset是其实现类\",{\"1\":{\"228\":1}}],[\"tree=all\",{\"1\":{\"86\":1}}],[\"trying\",{\"1\":{\"1445\":1}}],[\"tryinto\",{\"1\":{\"297\":1}}],[\"trylock尝试竞争锁的方式获取锁\",{\"1\":{\"911\":1}}],[\"trylock\",{\"1\":{\"212\":2,\"1246\":1}}],[\"try\",{\"0\":{\"1252\":1},\"1\":{\"36\":1,\"212\":2,\"234\":2,\"236\":2,\"297\":1,\"345\":4,\"346\":1,\"397\":1,\"410\":1,\"411\":1,\"439\":1,\"445\":1,\"446\":1,\"456\":1,\"490\":1,\"491\":1,\"509\":1,\"535\":1,\"556\":1,\"648\":2,\"649\":2,\"664\":1,\"780\":1,\"786\":2,\"833\":1,\"852\":5,\"871\":1,\"911\":1,\"914\":1,\"1032\":2,\"1252\":1,\"1257\":2,\"1259\":2,\"1383\":1,\"1419\":1,\"1445\":14,\"1450\":2,\"1451\":1,\"1518\":1,\"1522\":1}}],[\"true或false\",{\"1\":{\"928\":1}}],[\"true\",{\"1\":{\"31\":1,\"103\":1,\"131\":1,\"164\":1,\"252\":1,\"271\":2,\"331\":2,\"341\":2,\"346\":1,\"373\":1,\"379\":1,\"383\":1,\"399\":6,\"410\":1,\"434\":1,\"435\":2,\"450\":1,\"456\":2,\"535\":1,\"537\":1,\"556\":1,\"596\":1,\"652\":1,\"672\":2,\"758\":2,\"778\":2,\"786\":8,\"801\":1,\"802\":1,\"852\":1,\"900\":1,\"911\":1,\"914\":1,\"924\":1,\"929\":2,\"988\":2,\"996\":2,\"1026\":1,\"1072\":1,\"1093\":1,\"1120\":1,\"1122\":3,\"1139\":1,\"1222\":17,\"1223\":8,\"1227\":19,\"1248\":3,\"1257\":1,\"1353\":1,\"1445\":2,\"1475\":1,\"1484\":1,\"1486\":3,\"1513\":2,\"1514\":1,\"1515\":3,\"1522\":1,\"1525\":2,\"1532\":6,\"1533\":2,\"1583\":1,\"1613\":2,\"1622\":2}}],[\"thus\",{\"1\":{\"1445\":2}}],[\"th>\",{\"1\":{\"982\":3}}],[\"th=\",{\"1\":{\"981\":1,\"1407\":1}}],[\"thymeleaf<\",{\"1\":{\"981\":1}}],[\"thymeleaf模板依赖\",{\"1\":{\"981\":1}}],[\"thymeleaf\",{\"0\":{\"980\":1},\"1\":{\"981\":1,\"1407\":1,\"1514\":1}}],[\"th\",{\"1\":{\"943\":3,\"982\":34,\"983\":7,\"1407\":1}}],[\"thingmetadata\",{\"1\":{\"1483\":1}}],[\"thing\",{\"1\":{\"1445\":1}}],[\"thingtype\",{\"1\":{\"1344\":1}}],[\"thingsbridgingdevicedataservice\",{\"1\":{\"1344\":1}}],[\"thingsregistrysupport\",{\"1\":{\"1344\":1}}],[\"thingsregistry\",{\"1\":{\"1344\":3}}],[\"thingsdatacustomizer\",{\"1\":{\"1344\":1}}],[\"thingsdatacustomizer集\",{\"1\":{\"1344\":1}}],[\"thingsdatacontext\",{\"1\":{\"1344\":1}}],[\"thingsdatarepositorystrategy\",{\"1\":{\"1344\":1}}],[\"thingsdatarepositorystrategy集合\",{\"1\":{\"1344\":1}}],[\"thingsdatarepository\",{\"1\":{\"1344\":2}}],[\"thingsconfiguration\",{\"1\":{\"1344\":1}}],[\"thingscomponent\",{\"0\":{\"1344\":1}}],[\"things\",{\"1\":{\"649\":2}}],[\"third\",{\"1\":{\"304\":4}}],[\"this\",{\"1\":{\"9\":1,\"192\":1,\"236\":6,\"241\":2,\"249\":7,\"250\":5,\"255\":7,\"329\":17,\"330\":3,\"331\":10,\"334\":9,\"345\":17,\"346\":8,\"383\":6,\"386\":5,\"397\":7,\"398\":2,\"399\":2,\"403\":4,\"406\":5,\"410\":2,\"411\":9,\"430\":4,\"433\":1,\"434\":6,\"435\":4,\"438\":4,\"441\":1,\"446\":6,\"450\":6,\"455\":1,\"456\":6,\"473\":1,\"476\":1,\"490\":3,\"491\":2,\"505\":2,\"509\":1,\"513\":2,\"535\":1,\"537\":4,\"556\":7,\"594\":1,\"658\":2,\"672\":2,\"792\":1,\"833\":1,\"852\":71,\"853\":1,\"869\":1,\"872\":10,\"900\":2,\"914\":77,\"932\":3,\"971\":1,\"983\":2,\"1002\":1,\"1013\":1,\"1036\":4,\"1259\":5,\"1320\":1,\"1383\":19,\"1412\":3,\"1445\":17,\"1518\":6,\"1519\":1,\"1521\":3}}],[\"than\",{\"1\":{\"297\":1}}],[\"that\",{\"1\":{\"249\":6,\"250\":2,\"346\":1,\"397\":1,\"399\":9,\"411\":2,\"439\":1,\"494\":1,\"977\":1,\"1259\":1,\"1445\":1}}],[\"through\",{\"1\":{\"397\":1,\"974\":1,\"1445\":2}}],[\"thrown\",{\"1\":{\"1259\":1}}],[\"throwifportbindingexception\",{\"1\":{\"456\":1}}],[\"throws\",{\"1\":{\"241\":1,\"249\":4,\"250\":3,\"252\":2,\"326\":1,\"329\":2,\"330\":1,\"331\":1,\"334\":3,\"343\":3,\"345\":1,\"346\":1,\"348\":1,\"397\":1,\"410\":1,\"411\":1,\"413\":2,\"421\":4,\"438\":1,\"447\":1,\"456\":1,\"467\":1,\"480\":1,\"647\":1,\"652\":5,\"658\":1,\"780\":4,\"792\":1,\"852\":5,\"871\":1,\"872\":1,\"900\":1,\"911\":1,\"914\":3,\"1031\":1,\"1259\":3,\"1345\":1,\"1445\":1,\"1450\":1,\"1517\":1,\"1518\":1,\"1519\":1,\"1525\":1}}],[\"throw\",{\"1\":{\"234\":3,\"329\":1,\"345\":7,\"397\":1,\"410\":1,\"411\":1,\"439\":1,\"445\":1,\"446\":1,\"456\":2,\"491\":2,\"647\":1,\"852\":5,\"871\":1,\"914\":3,\"1013\":1,\"1251\":1,\"1259\":1,\"1414\":1,\"1445\":3,\"1518\":3,\"1521\":1,\"1522\":1}}],[\"throwableanalyzer\",{\"1\":{\"345\":2}}],[\"throwable\",{\"1\":{\"230\":1,\"345\":1,\"445\":1,\"491\":1,\"509\":1,\"530\":1,\"535\":1,\"556\":1,\"852\":4,\"871\":1,\"911\":1,\"1259\":2,\"1445\":4,\"1450\":2,\"1451\":1}}],[\"threw\",{\"1\":{\"1445\":1}}],[\"threshold\",{\"1\":{\"1311\":1}}],[\"thresholdfilter\",{\"1\":{\"596\":1}}],[\"three\",{\"1\":{\"282\":1,\"283\":1}}],[\"threadlock\",{\"1\":{\"1445\":1}}],[\"threadlocals\",{\"1\":{\"915\":1}}],[\"threadlocal<datasourcetype>\",{\"1\":{\"632\":2}}],[\"threadlocal<map<string\",{\"1\":{\"602\":2}}],[\"threadlocalmap\",{\"1\":{\"602\":2,\"915\":1}}],[\"threadlocal\",{\"1\":{\"354\":1,\"602\":9,\"1250\":1}}],[\"threadexecutormap\",{\"1\":{\"1445\":1}}],[\"threadid\",{\"1\":{\"1246\":1}}],[\"threadname\",{\"1\":{\"833\":1}}],[\"threads\",{\"1\":{\"647\":9,\"833\":1}}],[\"threadtask\",{\"1\":{\"236\":3}}],[\"threadpoolexecutor\",{\"1\":{\"236\":3,\"476\":2}}],[\"thread\",{\"0\":{\"231\":1},\"1\":{\"192\":2,\"234\":3,\"236\":1,\"596\":2,\"647\":14,\"658\":2,\"833\":1,\"1032\":1,\"1415\":1,\"1445\":7}}],[\"thead>\",{\"1\":{\"982\":2}}],[\"theach\",{\"1\":{\"982\":3}}],[\"there\",{\"1\":{\"439\":1,\"1445\":2}}],[\"they\",{\"1\":{\"410\":1}}],[\"them\",{\"1\":{\"397\":1,\"399\":2,\"974\":1,\"1259\":1}}],[\"these\",{\"1\":{\"345\":1}}],[\"then方法\",{\"0\":{\"549\":1}}],[\"thenmany方法\",{\"0\":{\"538\":1}}],[\"then\",{\"0\":{\"523\":1},\"1\":{\"249\":4,\"754\":1,\"833\":1,\"1000\":1,\"1226\":2,\"1246\":2,\"1311\":2,\"1345\":1}}],[\"the\",{\"0\":{\"43\":1},\"1\":{\"11\":2,\"158\":2,\"243\":1,\"249\":24,\"250\":8,\"280\":1,\"288\":2,\"345\":4,\"386\":1,\"397\":6,\"399\":20,\"411\":13,\"435\":1,\"438\":1,\"439\":2,\"486\":2,\"647\":6,\"786\":3,\"833\":5,\"852\":2,\"914\":6,\"974\":2,\"975\":3,\"977\":1,\"1215\":1,\"1259\":5,\"1383\":1,\"1419\":2,\"1421\":3,\"1445\":32,\"1451\":1}}],[\"togaf架构设计工具\",{\"0\":{\"1237\":1}}],[\"together\",{\"1\":{\"852\":1}}],[\"tonistiigi\",{\"1\":{\"1093\":1}}],[\"tonumber\",{\"1\":{\"649\":1}}],[\"to=\",{\"1\":{\"974\":3,\"975\":4,\"977\":1}}],[\"tok\",{\"1\":{\"833\":2}}],[\"toks\",{\"1\":{\"833\":2}}],[\"tokencontroller\",{\"1\":{\"1597\":5}}],[\"tokencontextbuilder\",{\"1\":{\"1519\":1}}],[\"tokencontext\",{\"1\":{\"1519\":2}}],[\"token值\",{\"1\":{\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"token令牌\",{\"1\":{\"1533\":1}}],[\"tokenvalue\",{\"1\":{\"1532\":4}}],[\"token时效\",{\"1\":{\"1531\":1}}],[\"token时必须\",{\"1\":{\"1531\":1}}],[\"token获取\",{\"0\":{\"1531\":1},\"1\":{\"1529\":1}}],[\"token格式有误\",{\"1\":{\"1521\":1}}],[\"token为空\",{\"1\":{\"1521\":1}}],[\"token校验\",{\"0\":{\"1521\":1,\"1532\":1},\"1\":{\"1529\":1,\"1597\":1}}],[\"tokengenerator\",{\"1\":{\"1519\":1}}],[\"tokengeneratormap\",{\"1\":{\"1345\":4}}],[\"token签发\",{\"0\":{\"1519\":1}}],[\"tokenintrospectionendpoint\",{\"1\":{\"1514\":1}}],[\"tokenizetostringarray\",{\"1\":{\"852\":2,\"1522\":1}}],[\"token表示用户的唯一签名\",{\"1\":{\"1491\":1}}],[\"token=\",{\"1\":{\"1455\":1}}],[\"token=$\",{\"1\":{\"1455\":1}}],[\"tokentype\",{\"1\":{\"1345\":1,\"1519\":1,\"1521\":3,\"1532\":2}}],[\"token解析处理\",{\"1\":{\"1345\":1}}],[\"token解析失败到认证入口点处理\",{\"1\":{\"339\":1}}],[\"token提取\",{\"1\":{\"1031\":1}}],[\"tokens\",{\"1\":{\"833\":1}}],[\"tokenstore\",{\"0\":{\"822\":1},\"1\":{\"833\":5}}],[\"token作为值\",{\"1\":{\"833\":1}}],[\"token的模糊匹配数控制\",{\"1\":{\"751\":1}}],[\"token由三部分组成\",{\"1\":{\"726\":1}}],[\"token放在cookie中\",{\"1\":{\"722\":1}}],[\"tokenendpointauthenticationsigningalgorithm\",{\"1\":{\"1570\":1}}],[\"tokenendpoint\",{\"1\":{\"343\":1}}],[\"token\",{\"1\":{\"36\":1,\"346\":1,\"348\":1,\"422\":4,\"467\":1,\"471\":1,\"602\":4,\"833\":1,\"1031\":1,\"1137\":1,\"1345\":12,\"1455\":2,\"1491\":1,\"1503\":1,\"1514\":1,\"1519\":1,\"1521\":8,\"1531\":12,\"1532\":2,\"1533\":1,\"1534\":1,\"1535\":1,\"1597\":5}}],[\"tojsonstring\",{\"1\":{\"786\":1}}],[\"totalsize\",{\"1\":{\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1628\":1,\"1635\":1}}],[\"total属性\",{\"1\":{\"1244\":1}}],[\"total\",{\"1\":{\"778\":1,\"1613\":1,\"1622\":1}}],[\"tom\",{\"1\":{\"986\":3,\"988\":6,\"991\":1,\"992\":1}}],[\"tomap\",{\"1\":{\"672\":1}}],[\"tomcattest\",{\"1\":{\"652\":1}}],[\"tomcat其实就是一个servlet容器的实现\",{\"1\":{\"652\":1}}],[\"tomcat处理请求过程\",{\"0\":{\"461\":1}}],[\"tomcatwebserver\",{\"0\":{\"454\":1}}],[\"tomcatstarter\",{\"1\":{\"451\":1}}],[\"tomcatservletwebserverfactory\",{\"0\":{\"449\":1}}],[\"tomcatembeddedwebappclassloader\",{\"1\":{\"451\":1}}],[\"tomcat\",{\"0\":{\"452\":1,\"674\":1},\"1\":{\"450\":13,\"455\":1,\"456\":4,\"601\":1,\"986\":1}}],[\"tomcat如何接受请求\",{\"1\":{\"215\":1}}],[\"tomcat容器\",{\"0\":{\"215\":1}}],[\"tolocaletimestring\",{\"1\":{\"970\":1}}],[\"tolocaltime\",{\"1\":{\"658\":2}}],[\"tolist\",{\"1\":{\"672\":1,\"786\":2}}],[\"tobytearray\",{\"1\":{\"1257\":1}}],[\"tobytecode\",{\"1\":{\"241\":1}}],[\"toboolean\",{\"1\":{\"649\":1}}],[\"tocoresubscriber\",{\"1\":{\"535\":1,\"556\":1}}],[\"toclass\",{\"1\":{\"241\":1}}],[\"todo\",{\"1\":{\"473\":1,\"1521\":1}}],[\"toarray\",{\"1\":{\"467\":1,\"1031\":1,\"1246\":1}}],[\"tool\",{\"1\":{\"1215\":2}}],[\"tools\",{\"1\":{\"1130\":2,\"1188\":2,\"1215\":4}}],[\"too\",{\"1\":{\"329\":1}}],[\"toplevel\",{\"1\":{\"1149\":1}}],[\"top\",{\"1\":{\"287\":2,\"782\":1,\"802\":2,\"1153\":1,\"1190\":1,\"1230\":2}}],[\"topicpartition\",{\"1\":{\"804\":1}}],[\"topicpartitions\",{\"1\":{\"804\":1}}],[\"topic2\",{\"1\":{\"804\":1}}],[\"topics\",{\"1\":{\"804\":2}}],[\"topic1\",{\"1\":{\"804\":2}}],[\"topicg\",{\"1\":{\"649\":4}}],[\"topic\",{\"1\":{\"10\":1,\"649\":5,\"801\":2,\"804\":7,\"1025\":2,\"1026\":2,\"1245\":1,\"1271\":2,\"1272\":3,\"1312\":1}}],[\"topic=new\",{\"1\":{\"10\":1}}],[\"tostring\",{\"1\":{\"241\":2,\"255\":2,\"377\":4,\"421\":1,\"446\":1,\"602\":2,\"647\":1,\"649\":1,\"852\":1,\"900\":1,\"1245\":1,\"1518\":1,\"1523\":1}}],[\"touch\",{\"1\":{\"218\":1}}],[\"to\",{\"0\":{\"11\":1,\"32\":1,\"43\":1},\"1\":{\"249\":12,\"250\":2,\"269\":1,\"282\":2,\"309\":3,\"317\":2,\"326\":2,\"345\":3,\"346\":3,\"397\":3,\"399\":11,\"410\":1,\"411\":2,\"435\":1,\"438\":1,\"439\":2,\"445\":1,\"456\":1,\"491\":1,\"647\":4,\"786\":3,\"833\":1,\"852\":4,\"974\":1,\"975\":1,\"977\":1,\"1248\":1,\"1259\":1,\"1419\":1,\"1421\":1,\"1445\":17,\"1515\":1,\"1518\":2}}],[\"ta1\",{\"1\":{\"1484\":1}}],[\"take\",{\"1\":{\"1445\":1}}],[\"take方法\",{\"0\":{\"547\":1}}],[\"tar\",{\"1\":{\"1129\":1,\"1181\":1}}],[\"targettype拼接后\",{\"1\":{\"1309\":1}}],[\"targetid\",{\"1\":{\"1309\":1}}],[\"targetkey\",{\"1\":{\"1309\":1}}],[\"targetxxx\",{\"1\":{\"1309\":1}}],[\"target>\",{\"1\":{\"1202\":1}}],[\"target>1\",{\"1\":{\"1202\":1}}],[\"targetport\",{\"1\":{\"1171\":2}}],[\"targetdatasources\",{\"1\":{\"632\":2}}],[\"targetdatasources和defaulttargetdatasource中\",{\"1\":{\"632\":1}}],[\"targets\",{\"1\":{\"435\":1}}],[\"targetsource\",{\"1\":{\"435\":3}}],[\"targetsourcedbeans\",{\"1\":{\"383\":1,\"434\":1}}],[\"target\",{\"0\":{\"7\":1},\"1\":{\"117\":2,\"853\":4,\"1065\":1,\"1116\":1}}],[\"tailtasks\",{\"1\":{\"1445\":1}}],[\"tail\",{\"1\":{\"1087\":1,\"1187\":7}}],[\"tagname\",{\"1\":{\"1097\":3}}],[\"tag\",{\"1\":{\"438\":1,\"446\":1,\"759\":2,\"1097\":1}}],[\"tags\",{\"1\":{\"103\":1,\"759\":2,\"1130\":1,\"1304\":1,\"1484\":1}}],[\"taskqueue\",{\"1\":{\"1445\":1}}],[\"taskqueue任务队列\",{\"1\":{\"842\":1}}],[\"taskexecutor\",{\"1\":{\"1335\":1}}],[\"taskexecutorprovider\",{\"1\":{\"1335\":2}}],[\"taskid\",{\"1\":{\"1013\":4}}],[\"taskinst创建节点实例\",{\"1\":{\"583\":1}}],[\"taskinst\",{\"1\":{\"579\":1,\"582\":1,\"703\":1}}],[\"tasks\",{\"1\":{\"914\":1,\"1130\":1,\"1188\":1,\"1335\":1,\"1445\":9}}],[\"taskregistrar\",{\"1\":{\"657\":2}}],[\"task=true\",{\"1\":{\"589\":1,\"711\":1}}],[\"taskdefinitionkey==\",{\"1\":{\"589\":1,\"711\":1}}],[\"taskdelegate\",{\"1\":{\"589\":3,\"711\":3}}],[\"tasklistener\",{\"1\":{\"588\":1,\"710\":1}}],[\"task\",{\"0\":{\"573\":1,\"654\":1,\"1071\":1},\"1\":{\"236\":1,\"580\":1,\"582\":1,\"583\":1,\"589\":1,\"704\":1,\"711\":1,\"1013\":2,\"1249\":1,\"1335\":2,\"1445\":6}}],[\"taskkill\",{\"1\":{\"19\":1}}],[\"tangsongapi\",{\"1\":{\"103\":1}}],[\"tangsong\",{\"1\":{\"103\":4}}],[\"tables\",{\"1\":{\"1141\":1}}],[\"tablename\",{\"1\":{\"1056\":2}}],[\"table>\",{\"1\":{\"982\":2}}],[\"tablefield\",{\"1\":{\"902\":1}}],[\"table中寻找对应的servlet\",{\"1\":{\"679\":1}}],[\"table\",{\"0\":{\"7\":1},\"1\":{\"717\":1,\"748\":1,\"1042\":2,\"1120\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"t\",{\"0\":{\"7\":1},\"1\":{\"19\":1,\"32\":1,\"152\":1,\"155\":1,\"192\":4,\"218\":1,\"249\":8,\"250\":7,\"251\":1,\"252\":3,\"277\":2,\"286\":2,\"294\":2,\"295\":4,\"296\":1,\"297\":5,\"298\":2,\"305\":1,\"316\":2,\"413\":1,\"435\":1,\"480\":1,\"509\":2,\"530\":3,\"537\":4,\"852\":2,\"900\":3,\"988\":1,\"1087\":1,\"1093\":1,\"1097\":1,\"1130\":3,\"1136\":1,\"1145\":2,\"1197\":1,\"1215\":4,\"1247\":1,\"1320\":1,\"1345\":2,\"1445\":6,\"1450\":3}}],[\"mbap报文头包括有事务处理标识符\",{\"1\":{\"1280\":1}}],[\"mbd\",{\"1\":{\"357\":4,\"358\":3,\"359\":3,\"439\":3}}],[\"mdc\",{\"1\":{\"1250\":1}}],[\"md5加密\",{\"1\":{\"1309\":1}}],[\"md5\",{\"1\":{\"1210\":1}}],[\"md文件中添加引入的模块路径\",{\"1\":{\"169\":1}}],[\"mkfs\",{\"1\":{\"1197\":1}}],[\"mkdir\",{\"1\":{\"1116\":1,\"1144\":1,\"1200\":1}}],[\"mv\",{\"1\":{\"1259\":5}}],[\"mvn\",{\"1\":{\"1079\":1,\"1215\":4,\"1458\":1}}],[\"mvcc和快照读\",{\"1\":{\"1051\":1}}],[\"mvcc多版本并发控制\",{\"0\":{\"1049\":1}}],[\"mvc\",{\"0\":{\"421\":1},\"1\":{\"594\":1,\"1345\":1,\"1652\":1}}],[\"mvcvalidator\",{\"1\":{\"353\":3}}],[\"mvc核心类\",{\"0\":{\"108\":1}}],[\"mf文件\",{\"1\":{\"1066\":1}}],[\"mget\",{\"1\":{\"910\":1}}],[\"mqcontent\",{\"1\":{\"1245\":4}}],[\"mqclientservice\",{\"1\":{\"920\":1}}],[\"mqclientapiimpl\",{\"1\":{\"914\":2}}],[\"mqclientmanager\",{\"1\":{\"914\":1}}],[\"mqclientfactory\",{\"1\":{\"914\":11}}],[\"mqclientexception\",{\"1\":{\"914\":7}}],[\"mq消息事务\",{\"0\":{\"666\":1}}],[\"mqttserverdevicegateway\",{\"0\":{\"1360\":1},\"1\":{\"1359\":1}}],[\"mqtt创建客户端\",{\"1\":{\"1353\":1}}],[\"mqtt是基于tcp协议的\",{\"1\":{\"1353\":1}}],[\"mqttendpoint\",{\"1\":{\"1349\":1}}],[\"mqttex\",{\"1\":{\"833\":5}}],[\"mqttexception\",{\"1\":{\"833\":2}}],[\"mqttclientdevicegateway\",{\"1\":{\"1359\":2}}],[\"mqttclient\",{\"1\":{\"1352\":2,\"1353\":9}}],[\"mqttclientproperties\",{\"1\":{\"1352\":1,\"1353\":1}}],[\"mqttclientprovider\",{\"0\":{\"1351\":1},\"1\":{\"1347\":1}}],[\"mqttconnect\",{\"1\":{\"825\":1}}],[\"mqtt客户端池\",{\"1\":{\"1488\":1}}],[\"mqtt客户端\",{\"1\":{\"1330\":1}}],[\"mqtt的broker直连\",{\"1\":{\"1288\":1}}],[\"mqtt服务直连\",{\"1\":{\"1288\":1}}],[\"mqtt传输的消息分为\",{\"1\":{\"1271\":1}}],[\"mqttws\",{\"1\":{\"1210\":1}}],[\"mqtt插件\",{\"1\":{\"1024\":1}}],[\"mqttinputstream\",{\"0\":{\"839\":1}}],[\"mqttpingreq\",{\"0\":{\"823\":1}}],[\"mqtttoken\",{\"0\":{\"821\":1},\"1\":{\"833\":2}}],[\"mqttasyncclient下的mqttreconnectcallback\",{\"0\":{\"820\":1}}],[\"mqttasyncclient\",{\"0\":{\"819\":1}}],[\"mqtt5\",{\"0\":{\"818\":1}}],[\"mqtt\",{\"0\":{\"15\":1,\"817\":1,\"1023\":1,\"1271\":1,\"1350\":1,\"1376\":1,\"1377\":1,\"1378\":1},\"1\":{\"833\":3,\"1026\":4,\"1289\":1,\"1338\":1,\"1350\":1,\"1353\":2}}],[\"mqttv5pahomessagedrivenchanneladapter内部维护了已订阅topic\",{\"1\":{\"8\":1}}],[\"mqtt已连接无法订阅问题\",{\"0\":{\"8\":1}}],[\"msedge103\",{\"1\":{\"1628\":1,\"1635\":1}}],[\"msetnx\",{\"1\":{\"910\":2}}],[\"mset\",{\"1\":{\"910\":1}}],[\"mssql\",{\"1\":{\"1302\":1}}],[\"ms后\",{\"1\":{\"801\":1,\"802\":2}}],[\"ms自动提交间隔的时间\",{\"1\":{\"798\":2}}],[\"msg\",{\"1\":{\"596\":2,\"804\":5,\"1450\":2,\"1451\":5,\"1526\":2,\"1531\":2,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":3,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":3,\"1641\":1}}],[\"ms\",{\"1\":{\"411\":1,\"421\":1,\"801\":7,\"802\":6}}],[\"mm\",{\"1\":{\"379\":2,\"596\":7,\"649\":2,\"1513\":2,\"1514\":2,\"1539\":4,\"1540\":4,\"1570\":2,\"1571\":2}}],[\"multithreadeventexecutorgroup\",{\"1\":{\"1446\":1}}],[\"multithreadeventloopgroup\",{\"1\":{\"1446\":2}}],[\"multipart\",{\"1\":{\"1259\":1}}],[\"multipartrequestparsed\",{\"1\":{\"1259\":3}}],[\"multipletosinglestringstream\",{\"1\":{\"792\":1}}],[\"multipledatasource\",{\"0\":{\"631\":1}}],[\"multiple\",{\"1\":{\"399\":4,\"974\":1}}],[\"multi\",{\"1\":{\"1128\":1}}],[\"multibucketsaggregation\",{\"1\":{\"786\":1}}],[\"multicaster\",{\"1\":{\"397\":1}}],[\"must\",{\"1\":{\"329\":1,\"345\":1,\"399\":2,\"435\":1,\"762\":1,\"767\":4,\"782\":1,\"783\":1,\"1215\":1,\"1248\":1,\"1445\":1}}],[\"mutex\",{\"0\":{\"955\":1}}],[\"mutations属性类型于有名称的事件\",{\"1\":{\"998\":1}}],[\"mutate\",{\"1\":{\"422\":6,\"471\":4,\"1523\":9}}],[\"mutablepropertyvalues\",{\"1\":{\"358\":2}}],[\"mut\",{\"0\":{\"289\":1},\"1\":{\"277\":1,\"279\":2,\"280\":1,\"287\":1,\"289\":1,\"290\":1,\"302\":1,\"306\":2,\"311\":1,\"312\":3,\"318\":4,\"319\":1}}],[\"mut符号的使用\",{\"1\":{\"265\":1}}],[\"mut关键字\",{\"1\":{\"265\":1}}],[\"m\",{\"1\":{\"292\":2,\"1092\":1,\"1118\":1,\"1144\":3,\"1147\":1,\"1153\":1,\"1179\":1}}],[\"m3\",{\"1\":{\"275\":1}}],[\"m2\",{\"1\":{\"275\":1}}],[\"my7v+pk0\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"mylv\",{\"1\":{\"1197\":7}}],[\"myvg\",{\"1\":{\"1197\":9}}],[\"mydata\",{\"1\":{\"1130\":1,\"1140\":6,\"1141\":6}}],[\"myjenkins\",{\"1\":{\"1130\":1}}],[\"myjob2任务配置\",{\"1\":{\"658\":1}}],[\"myjob2\",{\"1\":{\"658\":4}}],[\"myjob1和myjob2的触发器\",{\"1\":{\"658\":1}}],[\"myjob1任务配置\",{\"1\":{\"658\":1}}],[\"myjob1\",{\"1\":{\"658\":3}}],[\"mytest\",{\"1\":{\"1105\":1}}],[\"mytask1任务开始\",{\"1\":{\"658\":1}}],[\"mytask1\",{\"1\":{\"658\":2}}],[\"mytasklistener\",{\"1\":{\"589\":1,\"711\":1}}],[\"myname\",{\"1\":{\"992\":1}}],[\"myhash\",{\"1\":{\"909\":1}}],[\"myconsumerinterceptor\",{\"1\":{\"801\":1,\"802\":1}}],[\"myclass\",{\"1\":{\"252\":5}}],[\"mypartitioner\",{\"1\":{\"801\":1,\"802\":1}}],[\"myazure\",{\"1\":{\"623\":1}}],[\"mybatismapperregistry\",{\"1\":{\"860\":1}}],[\"mybatismapperregistry继承mapperregistry\",{\"1\":{\"858\":1}}],[\"mybatismapperannotationbuilder下的parse方法\",{\"1\":{\"860\":1}}],[\"mybatismapperannotationbuilder\",{\"1\":{\"858\":1}}],[\"mybatismapperproxyfactory<>\",{\"1\":{\"860\":1}}],[\"mybatismapperproxyfactory\",{\"1\":{\"858\":1}}],[\"mybatisconfiguration的addmapper\",{\"1\":{\"860\":1}}],[\"mybatisconfiguration\",{\"1\":{\"858\":1}}],[\"mybatissqlsessionfactorybean下的buildsqlsessionfactory方法\",{\"1\":{\"860\":1}}],[\"mybatissqlsessionfactorybean\",{\"1\":{\"858\":1}}],[\"mybatisplusautoconfiguration下的sqlsessionfactory方法\",{\"1\":{\"860\":1}}],[\"mybatisplusautoconfiguration\",{\"1\":{\"858\":1}}],[\"mybatisplusautoconfiguration和mybatisautoconfiguration优先级问题\",{\"0\":{\"857\":1}}],[\"mybatis的拦截器可以对executor\",{\"1\":{\"853\":1}}],[\"mybatis的mapper父类\",{\"1\":{\"852\":1}}],[\"mybatis是否不能为空\",{\"1\":{\"852\":1}}],[\"mybatis数据库自增主键类型\",{\"1\":{\"852\":1}}],[\"mybatis实体类扫描路径\",{\"1\":{\"852\":1}}],[\"mybatis配置\",{\"1\":{\"852\":1}}],[\"mybatis\",{\"0\":{\"849\":1,\"856\":1,\"901\":1},\"1\":{\"585\":1,\"707\":1,\"852\":6,\"902\":2,\"1501\":2,\"1515\":1,\"1524\":2}}],[\"mysearch\",{\"1\":{\"986\":2}}],[\"myself\",{\"1\":{\"535\":1,\"556\":1}}],[\"myschool\",{\"1\":{\"479\":1}}],[\"mystudent\",{\"1\":{\"479\":2}}],[\"mysql等技术\",{\"1\":{\"1524\":1}}],[\"mysqlschemametadata包含rdbdatabasemetadata\",{\"1\":{\"1299\":1}}],[\"mysqlsourcefunction\",{\"1\":{\"792\":2}}],[\"mysqld字段下\",{\"1\":{\"1231\":1}}],[\"mysqld\",{\"1\":{\"1141\":3,\"1193\":2}}],[\"mysqldump\",{\"1\":{\"1056\":3}}],[\"mysql8的话是\",{\"1\":{\"1141\":1}}],[\"mysql8之前的是在my\",{\"1\":{\"1141\":1}}],[\"mysql8连接失败public\",{\"0\":{\"34\":1}}],[\"mysql容器初始化数据\",{\"0\":{\"1115\":1}}],[\"mysql2mysql\",{\"1\":{\"925\":1}}],[\"mysqlreader\",{\"1\":{\"924\":1}}],[\"mysql存时间会损失精度\",{\"1\":{\"256\":1}}],[\"mysql出现unknown\",{\"0\":{\"56\":1}}],[\"mysql出现you\",{\"0\":{\"7\":1}}],[\"mysql\",{\"0\":{\"14\":1,\"23\":1,\"90\":1,\"1040\":1,\"1140\":1,\"1231\":1,\"1243\":1,\"1647\":1},\"1\":{\"13\":1,\"23\":1,\"34\":4,\"75\":1,\"585\":2,\"595\":7,\"707\":2,\"748\":2,\"792\":5,\"850\":8,\"924\":3,\"1115\":1,\"1120\":5,\"1121\":2,\"1132\":4,\"1140\":27,\"1141\":25,\"1193\":1,\"1215\":4,\"1243\":1,\"1302\":2,\"1501\":1,\"1515\":3,\"1647\":1}}],[\"mysqlbinlog\",{\"1\":{\"13\":1}}],[\"mysql在超过wait\",{\"1\":{\"6\":1}}],[\"myfilterregistrationbean\",{\"1\":{\"421\":1}}],[\"myfilter\",{\"1\":{\"421\":4}}],[\"myfunctioninterface<student\",{\"1\":{\"252\":1}}],[\"myfunctioninterface<t\",{\"1\":{\"252\":1}}],[\"my\",{\"1\":{\"376\":4,\"965\":4,\"1105\":1,\"1122\":1,\"1141\":2,\"1176\":1}}],[\"myisam引擎是对表加锁\",{\"1\":{\"219\":1}}],[\"mymath\",{\"1\":{\"173\":1}}],[\"miicdgibadanbgkqhkig9w0baqefaascamawggjcageaaogbamb7bawjfllzuvnc\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"miku\",{\"1\":{\"1302\":1}}],[\"mix\",{\"1\":{\"1210\":1}}],[\"mime\",{\"1\":{\"1210\":1}}],[\"michaelliao\",{\"1\":{\"1144\":2}}],[\"micro\",{\"1\":{\"165\":1}}],[\"microsoft\",{\"1\":{\"103\":1}}],[\"mid\",{\"1\":{\"1123\":1}}],[\"mirror>\",{\"1\":{\"1202\":1}}],[\"mirrorof>\",{\"1\":{\"1202\":1}}],[\"mirror\",{\"1\":{\"1096\":2}}],[\"mirrors>\",{\"1\":{\"1202\":1}}],[\"mirrors\",{\"1\":{\"1096\":2}}],[\"missingannotation\",{\"1\":{\"1414\":1}}],[\"missing>\",{\"1\":{\"1079\":1}}],[\"miscrosoft\",{\"1\":{\"103\":1}}],[\"millis\",{\"1\":{\"1515\":3}}],[\"milliseconds\",{\"1\":{\"192\":1,\"476\":1}}],[\"millisecond\",{\"1\":{\"189\":1}}],[\"mill\",{\"1\":{\"763\":2,\"766\":2}}],[\"minor\",{\"1\":{\"1155\":2}}],[\"minorgc\",{\"1\":{\"243\":1}}],[\"miniobucketname\",{\"1\":{\"1515\":1}}],[\"miniosecretkey\",{\"1\":{\"1515\":1}}],[\"minioaccesskey\",{\"1\":{\"1515\":1}}],[\"minioendpoint\",{\"1\":{\"1515\":1}}],[\"minio123456\",{\"1\":{\"1515\":1,\"1650\":1}}],[\"minio1\",{\"1\":{\"1131\":1}}],[\"minio\",{\"0\":{\"1131\":1,\"1650\":1},\"1\":{\"1131\":5,\"1501\":1,\"1515\":1,\"1650\":1}}],[\"minidao\",{\"1\":{\"900\":1}}],[\"minidaoclasspathmapperscanner\",{\"1\":{\"900\":2}}],[\"minidaobeanscannerconfigurer\",{\"1\":{\"900\":2}}],[\"minidaobeanfactory<t>\",{\"1\":{\"900\":1}}],[\"minidaobeanfactory\",{\"1\":{\"900\":2}}],[\"minidaohandler\",{\"1\":{\"900\":4}}],[\"minimum\",{\"1\":{\"850\":1,\"1445\":1}}],[\"minute\",{\"1\":{\"756\":1}}],[\"minutes\",{\"1\":{\"649\":3}}],[\"min\",{\"1\":{\"720\":1,\"782\":1,\"934\":3,\"943\":1,\"1407\":1,\"1445\":1,\"1486\":4,\"1515\":2}}],[\"might\",{\"1\":{\"397\":1,\"399\":1,\"439\":1}}],[\"m1\",{\"0\":{\"87\":1},\"1\":{\"275\":1,\"297\":1}}],[\"mount\",{\"0\":{\"1098\":1},\"1\":{\"1197\":1}}],[\"moment\",{\"1\":{\"994\":9,\"995\":7}}],[\"mobilelogin\",{\"1\":{\"946\":2,\"947\":1}}],[\"mock语法\",{\"0\":{\"629\":1}}],[\"more\",{\"1\":{\"297\":1,\"1187\":1,\"1445\":2}}],[\"moveto\",{\"1\":{\"282\":3}}],[\"move\",{\"1\":{\"275\":2,\"282\":1,\"292\":1,\"908\":1,\"1445\":1}}],[\"modbus可以在基于串行链路和以太\",{\"1\":{\"1276\":1}}],[\"modbus\",{\"0\":{\"1276\":1,\"1374\":1},\"1\":{\"1276\":1}}],[\"modifysecret\",{\"1\":{\"1584\":1}}],[\"modify\",{\"1\":{\"1042\":1}}],[\"modified\",{\"1\":{\"399\":1,\"1259\":1}}],[\"modifier\",{\"1\":{\"241\":3,\"1042\":1}}],[\"modus\",{\"1\":{\"975\":1}}],[\"modulemodel\",{\"0\":{\"735\":1},\"1\":{\"738\":1}}],[\"module模块可以解决state对象非常臃肿的问题\",{\"1\":{\"998\":1}}],[\"module模块\",{\"0\":{\"169\":1}}],[\"module\",{\"0\":{\"11\":2},\"1\":{\"11\":1,\"172\":1,\"441\":1,\"737\":1,\"992\":1,\"994\":7,\"995\":2,\"996\":1}}],[\"mode`\",{\"1\":{\"1467\":1}}],[\"mode=standalone\",{\"1\":{\"1132\":2}}],[\"mode=manual\",{\"1\":{\"804\":2}}],[\"mode\",{\"1\":{\"1048\":1,\"1050\":1,\"1098\":1,\"1311\":1,\"1514\":1}}],[\"model模型\",{\"0\":{\"734\":1}}],[\"model创建审批流程图\",{\"1\":{\"584\":1,\"706\":1}}],[\"modeler\",{\"0\":{\"584\":1,\"706\":1}}],[\"modelmap\",{\"1\":{\"377\":7}}],[\"model\",{\"1\":{\"377\":10,\"733\":1,\"737\":1,\"982\":7,\"1058\":4,\"1130\":1,\"1188\":1,\"1515\":1}}],[\"modelandview\",{\"1\":{\"1259\":1}}],[\"modelandviewcontainer\",{\"1\":{\"345\":1}}],[\"modelattribute\",{\"0\":{\"377\":1},\"1\":{\"377\":7}}],[\"modelattribute注解标注的方法\",{\"1\":{\"375\":1}}],[\"mod\",{\"0\":{\"172\":1},\"1\":{\"173\":1,\"1311\":1}}],[\"mod中定义的module路径存在远程仓库\",{\"1\":{\"171\":1}}],[\"mod文件来定义\",{\"1\":{\"169\":1}}],[\"mon\",{\"1\":{\"656\":3}}],[\"month\",{\"1\":{\"649\":2,\"786\":2,\"1248\":1}}],[\"mono<oauth2authenticatedprincipal>\",{\"1\":{\"1521\":1}}],[\"mono<network>\",{\"1\":{\"1352\":1,\"1353\":1}}],[\"mono<locale>\",{\"1\":{\"557\":1}}],[\"mono<\",{\"1\":{\"537\":1}}],[\"mono<void>\",{\"1\":{\"422\":1,\"473\":1,\"509\":1,\"513\":1,\"557\":1,\"1345\":1,\"1523\":1}}],[\"monoflatmap\",{\"1\":{\"537\":2}}],[\"mono\",{\"0\":{\"534\":1},\"1\":{\"509\":6,\"556\":1,\"557\":1,\"1521\":3}}],[\"monitor\",{\"1\":{\"456\":1}}],[\"monitor类\",{\"1\":{\"113\":1}}],[\"mongodb\",{\"1\":{\"74\":1}}],[\"menuidlist\",{\"1\":{\"1606\":1}}],[\"menuapi\",{\"1\":{\"1586\":1}}],[\"menutype\",{\"1\":{\"1579\":1,\"1580\":1,\"1582\":4,\"1607\":2}}],[\"menu\",{\"1\":{\"1513\":3,\"1535\":4,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":5,\"1584\":5,\"1585\":1,\"1586\":11,\"1592\":3}}],[\"measurement\",{\"1\":{\"1482\":1}}],[\"means\",{\"1\":{\"535\":1,\"556\":1}}],[\"meantime\",{\"1\":{\"397\":1}}],[\"mean\",{\"1\":{\"156\":4}}],[\"messed\",{\"1\":{\"1445\":1}}],[\"messageid\",{\"1\":{\"1373\":1}}],[\"messagelistenerconcurrently\",{\"1\":{\"914\":2}}],[\"messagelistenerorderly\",{\"1\":{\"914\":2}}],[\"messagemodel\",{\"1\":{\"914\":1,\"920\":1}}],[\"messagemodel=\",{\"1\":{\"914\":1}}],[\"messagearrived方法\",{\"1\":{\"834\":1}}],[\"messagesenderinterceptor\",{\"1\":{\"1331\":1}}],[\"messages\",{\"1\":{\"804\":8,\"1518\":3}}],[\"message<\",{\"1\":{\"801\":1}}],[\"message\",{\"0\":{\"1245\":1},\"1\":{\"275\":4,\"292\":3,\"397\":1,\"652\":3,\"801\":3,\"804\":3,\"1245\":1}}],[\"mesh\",{\"0\":{\"1235\":1}}],[\"memory\",{\"1\":{\"801\":1,\"802\":1,\"912\":1,\"1139\":1,\"1141\":1,\"1445\":1}}],[\"memoryanalyser\",{\"1\":{\"65\":1}}],[\"members\",{\"1\":{\"1177\":1}}],[\"member\",{\"1\":{\"148\":3}}],[\"memcached\",{\"1\":{\"74\":1}}],[\"metrics\",{\"1\":{\"1484\":2}}],[\"meter\",{\"1\":{\"1484\":3}}],[\"methodmapping\",{\"1\":{\"1415\":1}}],[\"methodname\",{\"1\":{\"833\":4}}],[\"methodinvokingjobdetailfactorybean\",{\"1\":{\"658\":6}}],[\"method=none\",{\"1\":{\"1198\":1}}],[\"method=\",{\"1\":{\"479\":2,\"1522\":1}}],[\"method形式\",{\"1\":{\"479\":1}}],[\"methodsignature\",{\"1\":{\"911\":2}}],[\"methods\",{\"1\":{\"438\":1,\"725\":1,\"1259\":2}}],[\"methodtwo\",{\"1\":{\"377\":1}}],[\"methodthree\",{\"1\":{\"377\":1}}],[\"methodone\",{\"1\":{\"377\":1}}],[\"methodparameter\",{\"1\":{\"345\":1}}],[\"method时会对参数进行解析\",{\"1\":{\"345\":1}}],[\"methodb发现当前上下文有事务\",{\"1\":{\"202\":1}}],[\"methodb\",{\"1\":{\"202\":2}}],[\"methoda\",{\"1\":{\"202\":1}}],[\"method\",{\"0\":{\"357\":1},\"1\":{\"51\":1,\"139\":1,\"241\":4,\"252\":4,\"397\":1,\"399\":2,\"575\":1,\"604\":1,\"852\":3,\"853\":3,\"911\":4,\"991\":2,\"1025\":1,\"1026\":1,\"1259\":3,\"1513\":12,\"1522\":6,\"1535\":2,\"1616\":1,\"1635\":1}}],[\"meta信息\",{\"1\":{\"1570\":1,\"1571\":1,\"1579\":1,\"1580\":1}}],[\"metajson\",{\"1\":{\"1570\":1,\"1571\":1,\"1579\":1,\"1580\":1,\"1582\":4}}],[\"metarepository存放rdbtablemetadata\",{\"1\":{\"1299\":1}}],[\"metadata物模型\",{\"1\":{\"1317\":1}}],[\"metadata\",{\"0\":{\"1483\":1},\"1\":{\"397\":1,\"399\":1,\"494\":1,\"1058\":4,\"1137\":1,\"1248\":4,\"1304\":1,\"1480\":1,\"1483\":1}}],[\"metadata>\",{\"1\":{\"103\":1}}],[\"meta\",{\"1\":{\"31\":1,\"481\":2,\"494\":2,\"495\":1,\"594\":1,\"1066\":2,\"1583\":9}}],[\"mergeinitializers合并上下文初始化器\",{\"1\":{\"451\":1}}],[\"merged\",{\"1\":{\"399\":1}}],[\"merge\",{\"0\":{\"43\":1},\"1\":{\"1148\":1}}],[\"making\",{\"1\":{\"1259\":1}}],[\"makeclass\",{\"1\":{\"241\":1}}],[\"make\",{\"1\":{\"152\":6,\"154\":4,\"190\":5,\"494\":1,\"1178\":2,\"1445\":1}}],[\"mail<\",{\"1\":{\"1249\":2}}],[\"maintainer\",{\"0\":{\"1104\":1},\"1\":{\"1115\":1,\"1116\":1}}],[\"mainloop方法\",{\"1\":{\"842\":1}}],[\"main协程结束\",{\"1\":{\"185\":1}}],[\"main\",{\"1\":{\"9\":1,\"116\":2,\"117\":2,\"122\":2,\"124\":2,\"127\":2,\"128\":2,\"129\":2,\"131\":2,\"133\":2,\"135\":2,\"139\":6,\"140\":7,\"141\":2,\"143\":2,\"145\":2,\"146\":2,\"148\":2,\"151\":2,\"152\":4,\"154\":2,\"155\":2,\"156\":2,\"157\":2,\"158\":2,\"173\":2,\"179\":1,\"189\":2,\"190\":4,\"210\":1,\"234\":1,\"241\":1,\"252\":1,\"269\":1,\"274\":1,\"275\":3,\"277\":2,\"279\":1,\"280\":1,\"282\":4,\"285\":1,\"288\":1,\"290\":1,\"292\":1,\"295\":1,\"296\":2,\"297\":1,\"298\":2,\"309\":1,\"312\":1,\"315\":1,\"317\":1,\"318\":4,\"319\":1,\"592\":3,\"646\":1,\"647\":1,\"648\":1,\"1065\":2,\"1066\":1,\"1144\":2,\"1210\":3,\"1256\":1,\"1257\":2,\"1513\":1}}],[\"mac\",{\"1\":{\"1127\":1,\"1130\":2,\"1215\":1}}],[\"manifest\",{\"1\":{\"1066\":2}}],[\"manual是处理完一批消息\",{\"1\":{\"798\":1}}],[\"manual和manual\",{\"1\":{\"798\":1}}],[\"manual\",{\"1\":{\"798\":3}}],[\"manually\",{\"1\":{\"411\":1}}],[\"manufacturer\",{\"1\":{\"758\":7}}],[\"managent\",{\"1\":{\"1137\":1}}],[\"management\",{\"1\":{\"1026\":2,\"1125\":1,\"1514\":1,\"1515\":1}}],[\"manager\",{\"1\":{\"647\":2,\"678\":1}}],[\"manage\",{\"1\":{\"26\":1,\"1215\":1}}],[\"masked\",{\"1\":{\"411\":1}}],[\"master节点通过scheduler将pod调度到适合的nodes节点\",{\"1\":{\"1162\":1}}],[\"master节点会更新集群状态和监控信息\",{\"1\":{\"1162\":1}}],[\"master节点的api\",{\"1\":{\"1162\":1}}],[\"master节点负责整体的集群管理和控制\",{\"1\":{\"1162\":1}}],[\"master节点并不直接发送命令给nodes节点来创建pod中的容器\",{\"1\":{\"1162\":1}}],[\"master\",{\"1\":{\"13\":1,\"43\":1,\"1136\":1,\"1144\":1,\"1157\":1}}],[\"maybe\",{\"1\":{\"914\":1}}],[\"may\",{\"1\":{\"345\":1,\"399\":1,\"411\":2,\"438\":1,\"852\":1,\"1445\":5}}],[\"mavcontainer\",{\"1\":{\"345\":1,\"406\":1}}],[\"maven库搭建\",{\"0\":{\"1199\":1}}],[\"maveninstallation\",{\"1\":{\"1130\":1,\"1188\":1}}],[\"maven2\",{\"1\":{\"642\":1,\"1201\":1}}],[\"maven<\",{\"1\":{\"49\":1}}],[\"maven配置\",{\"0\":{\"49\":1}}],[\"maven3\",{\"1\":{\"47\":1,\"1215\":1}}],[\"maven打包报错问题\",{\"0\":{\"47\":1}}],[\"maven\",{\"0\":{\"57\":1,\"1075\":1,\"1077\":1},\"1\":{\"31\":1,\"48\":1,\"49\":3,\"642\":1,\"1065\":3,\"1130\":4,\"1188\":2,\"1201\":7,\"1202\":6,\"1203\":2,\"1215\":5,\"1458\":3}}],[\"matching\",{\"1\":{\"852\":1}}],[\"matchifmissing\",{\"1\":{\"373\":1}}],[\"matchquery\",{\"1\":{\"780\":1}}],[\"match本质是对term的结果组合\",{\"1\":{\"763\":1}}],[\"matches\",{\"0\":{\"284\":1},\"1\":{\"284\":2,\"974\":1,\"1518\":1}}],[\"match\",{\"0\":{\"282\":1,\"751\":3,\"763\":1,\"766\":1},\"1\":{\"282\":8,\"283\":1,\"285\":2,\"304\":1,\"422\":1,\"751\":4,\"760\":2,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":2,\"774\":2,\"778\":1,\"780\":1,\"1248\":2,\"1518\":1}}],[\"majorgc\",{\"1\":{\"243\":1}}],[\"male\",{\"1\":{\"128\":1}}],[\"map结构=实例id\",{\"1\":{\"1335\":1}}],[\"map=key\",{\"1\":{\"1327\":1}}],[\"map格式\",{\"1\":{\"1121\":1}}],[\"maputil\",{\"1\":{\"1036\":2}}],[\"mapdocumentation\",{\"1\":{\"1032\":1}}],[\"mapdatasource\",{\"1\":{\"632\":1}}],[\"mapstatedescriptor<>\",{\"1\":{\"792\":2}}],[\"mapstatedescriptor<string\",{\"1\":{\"792\":2}}],[\"mapstatedescriptor\",{\"1\":{\"792\":1}}],[\"map<e\",{\"1\":{\"1036\":1}}],[\"map<id\",{\"1\":{\"1036\":1}}],[\"map<object\",{\"1\":{\"632\":1}}],[\"map<string\",{\"1\":{\"236\":1,\"255\":1,\"345\":1,\"377\":5,\"505\":1,\"602\":5,\"672\":1,\"786\":1,\"792\":1,\"801\":3,\"1345\":1,\"1359\":1}}],[\"map形式\",{\"1\":{\"609\":1}}],[\"maphandle\",{\"1\":{\"509\":2}}],[\"mappedhandler\",{\"1\":{\"1259\":13}}],[\"mappedstatement\",{\"1\":{\"853\":2}}],[\"mapper接口\",{\"1\":{\"1244\":1}}],[\"mapper>\",{\"1\":{\"1059\":1}}],[\"mapper注解的类的方法的mappedstatement\",{\"1\":{\"860\":1}}],[\"mapperscan\",{\"1\":{\"858\":1}}],[\"mapperscannerregistrarnotfoundconfiguration\",{\"1\":{\"858\":1}}],[\"mapperscannerconfigurer实现beandefinitionregistrypostprocessor\",{\"0\":{\"859\":1}}],[\"mapperscannerconfigurer\",{\"1\":{\"858\":2}}],[\"mappers=com\",{\"1\":{\"852\":1}}],[\"mapperfactorybean\",{\"1\":{\"858\":2}}],[\"mapperfactorybean的getobject\",{\"1\":{\"852\":1}}],[\"mapperautoconfiguration\",{\"0\":{\"855\":1}}],[\"mapperinterface代理对象的生成\",{\"0\":{\"854\":1}}],[\"mapperregistry的getmapper\",{\"1\":{\"852\":1}}],[\"mapperproxyfactory的newinstance生产mapper接口的代理对象\",{\"1\":{\"852\":1}}],[\"mapperproxy的invoke方法\",{\"1\":{\"852\":1}}],[\"mappermethod的excute方法\",{\"1\":{\"852\":1}}],[\"mapperlocation\",{\"1\":{\"852\":6}}],[\"mapperlocations\",{\"1\":{\"852\":3}}],[\"mapper扫描路径\",{\"1\":{\"852\":1}}],[\"mapper\",{\"1\":{\"256\":1,\"537\":3,\"852\":9,\"858\":1,\"911\":2,\"1032\":2,\"1197\":2,\"1515\":2}}],[\"mappingresult\",{\"1\":{\"1422\":2}}],[\"mappings是线程局部变量\",{\"1\":{\"1445\":1}}],[\"mappings\",{\"1\":{\"773\":1,\"775\":1,\"1445\":1}}],[\"mapping>\",{\"1\":{\"652\":4}}],[\"mapping\",{\"1\":{\"513\":2,\"748\":2,\"852\":1,\"1259\":2,\"1304\":1}}],[\"mappingdata包含该请求匹配的host\",{\"1\":{\"460\":1}}],[\"map2\",{\"1\":{\"377\":4}}],[\"map1\",{\"1\":{\"377\":3}}],[\"maptolong\",{\"1\":{\"786\":1}}],[\"maptoint\",{\"1\":{\"236\":1}}],[\"maptodouble\",{\"1\":{\"236\":2}}],[\"map插入key\",{\"1\":{\"154\":1}}],[\"map集合\",{\"0\":{\"154\":1}}],[\"map\",{\"0\":{\"308\":1},\"1\":{\"121\":1,\"123\":1,\"133\":1,\"153\":1,\"154\":13,\"174\":1,\"228\":1,\"309\":2,\"312\":4,\"377\":5,\"378\":1,\"557\":1,\"602\":10,\"658\":4,\"672\":1,\"786\":3,\"792\":9,\"852\":1,\"1032\":1,\"1126\":2,\"1210\":1,\"1345\":4,\"1353\":1,\"1515\":1}}],[\"maxlimit\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"maxlength\",{\"1\":{\"1484\":1}}],[\"maxpendingtasks\",{\"1\":{\"1445\":1}}],[\"maxdeep\",{\"1\":{\"1036\":4}}],[\"maximum\",{\"1\":{\"850\":1,\"1407\":1}}],[\"maxhistory>\",{\"1\":{\"596\":3}}],[\"maxconcurrency\",{\"1\":{\"556\":1}}],[\"maxconnection\",{\"1\":{\"215\":2}}],[\"max太厉害了\",{\"1\":{\"297\":1}}],[\"maxtenuringthreshold=15\",{\"1\":{\"214\":1}}],[\"maxautoretriesnextserver=1\",{\"1\":{\"213\":1}}],[\"maxautoretries=0\",{\"1\":{\"213\":1}}],[\"max\",{\"1\":{\"5\":4,\"17\":4,\"36\":2,\"139\":1,\"145\":4,\"725\":1,\"751\":1,\"778\":1,\"779\":1,\"780\":1,\"792\":1,\"801\":3,\"802\":2,\"850\":1,\"1120\":1,\"1206\":1,\"1243\":1,\"1445\":1,\"1486\":4,\"1515\":4}}],[\"=两边不可有空格\",{\"1\":{\"1219\":1}}],[\"=docket\",{\"1\":{\"1032\":1}}],[\"=dd\",{\"1\":{\"716\":1}}],[\"=pattern\",{\"1\":{\"635\":1}}],[\"=null\",{\"1\":{\"255\":2}}],[\"=new\",{\"1\":{\"236\":1}}],[\"=make\",{\"1\":{\"152\":1}}],[\"=0\",{\"1\":{\"139\":1,\"716\":1}}],[\"==\",{\"1\":{\"135\":1,\"152\":1,\"158\":2,\"234\":2,\"280\":1,\"317\":1,\"318\":2,\"331\":1,\"345\":2,\"346\":1,\"358\":4,\"359\":4,\"397\":1,\"411\":3,\"413\":1,\"446\":2,\"509\":1,\"513\":1,\"535\":2,\"556\":2,\"557\":1,\"602\":4,\"647\":1,\"649\":4,\"672\":2,\"786\":2,\"852\":7,\"911\":1,\"914\":2,\"986\":1,\"1013\":1,\"1032\":1,\"1036\":3,\"1246\":2,\"1251\":1,\"1256\":3,\"1257\":2,\"1259\":1,\"1383\":3,\"1412\":1,\"1414\":1,\"1419\":1,\"1445\":6,\"1518\":1,\"1521\":1,\"1523\":1}}],[\"================================\",{\"1\":{\"648\":2}}],[\"===\",{\"1\":{\"51\":1,\"649\":17,\"988\":2}}],[\"=1\",{\"1\":{\"123\":1,\"716\":2}}],[\"=>\",{\"1\":{\"51\":1,\"148\":1,\"172\":2,\"282\":15,\"285\":2,\"304\":2,\"977\":1,\"985\":3,\"989\":1,\"991\":1}}],[\"=\",{\"0\":{\"126\":1},\"1\":{\"5\":1,\"9\":3,\"17\":1,\"51\":1,\"106\":4,\"122\":2,\"123\":3,\"124\":8,\"126\":1,\"127\":2,\"128\":7,\"129\":8,\"131\":1,\"133\":8,\"135\":2,\"138\":1,\"139\":8,\"140\":23,\"141\":1,\"143\":1,\"145\":6,\"146\":6,\"151\":8,\"152\":12,\"153\":2,\"154\":8,\"155\":1,\"156\":3,\"157\":2,\"158\":8,\"162\":1,\"164\":1,\"179\":2,\"189\":1,\"190\":10,\"192\":2,\"202\":3,\"210\":1,\"234\":4,\"236\":42,\"241\":4,\"243\":6,\"252\":6,\"255\":7,\"256\":1,\"264\":1,\"267\":2,\"269\":1,\"270\":2,\"271\":3,\"272\":1,\"274\":1,\"275\":7,\"277\":13,\"279\":1,\"280\":2,\"282\":6,\"283\":1,\"284\":4,\"285\":1,\"287\":2,\"288\":1,\"290\":1,\"291\":1,\"292\":1,\"295\":2,\"296\":4,\"297\":3,\"298\":4,\"302\":3,\"303\":1,\"304\":2,\"305\":3,\"306\":2,\"309\":2,\"311\":3,\"312\":8,\"315\":2,\"317\":3,\"318\":6,\"319\":2,\"329\":17,\"330\":4,\"331\":4,\"334\":7,\"345\":30,\"346\":5,\"348\":4,\"353\":2,\"357\":1,\"358\":3,\"359\":9,\"360\":2,\"368\":1,\"373\":3,\"377\":4,\"378\":2,\"379\":1,\"383\":3,\"386\":6,\"397\":3,\"399\":18,\"403\":4,\"406\":3,\"410\":3,\"411\":11,\"413\":4,\"421\":3,\"422\":6,\"430\":6,\"433\":3,\"434\":3,\"435\":5,\"438\":11,\"439\":2,\"441\":1,\"446\":6,\"450\":4,\"456\":4,\"467\":2,\"471\":9,\"473\":3,\"476\":1,\"490\":5,\"491\":2,\"494\":1,\"505\":6,\"509\":6,\"535\":7,\"537\":3,\"556\":9,\"557\":2,\"592\":2,\"593\":1,\"602\":14,\"632\":3,\"646\":1,\"647\":14,\"648\":13,\"649\":63,\"652\":8,\"658\":9,\"672\":17,\"716\":5,\"717\":1,\"719\":3,\"759\":1,\"760\":2,\"780\":36,\"786\":22,\"792\":20,\"801\":5,\"804\":12,\"833\":9,\"852\":40,\"853\":9,\"859\":1,\"871\":3,\"872\":4,\"899\":1,\"900\":4,\"902\":3,\"911\":20,\"914\":17,\"915\":1,\"929\":5,\"932\":8,\"935\":1,\"943\":1,\"969\":2,\"970\":4,\"971\":3,\"975\":1,\"976\":1,\"977\":1,\"982\":7,\"983\":2,\"985\":3,\"986\":4,\"988\":2,\"991\":4,\"992\":14,\"1013\":6,\"1025\":10,\"1026\":22,\"1032\":18,\"1036\":5,\"1043\":1,\"1058\":3,\"1072\":1,\"1136\":8,\"1210\":1,\"1211\":2,\"1222\":8,\"1243\":8,\"1244\":1,\"1245\":5,\"1246\":1,\"1248\":17,\"1249\":1,\"1251\":1,\"1256\":4,\"1257\":8,\"1259\":22,\"1292\":1,\"1297\":1,\"1345\":7,\"1352\":1,\"1353\":1,\"1383\":4,\"1407\":7,\"1411\":1,\"1412\":1,\"1414\":2,\"1415\":5,\"1419\":3,\"1421\":4,\"1445\":33,\"1450\":14,\"1451\":1,\"1480\":2,\"1517\":1,\"1518\":4,\"1519\":2,\"1521\":4,\"1522\":11,\"1523\":6,\"1526\":3}}],[\">=\",{\"1\":{\"1043\":1,\"1445\":2}}],[\">2\",{\"1\":{\"982\":1}}],[\">onions<\",{\"1\":{\"982\":2}}],[\">user\",{\"1\":{\"982\":2}}],[\">if判断<\",{\"1\":{\"982\":1}}],[\">item\",{\"1\":{\"786\":1}}],[\">查看<\",{\"1\":{\"982\":2}}],[\">modus\",{\"1\":{\"975\":1}}],[\">yahoo<\",{\"1\":{\"975\":1}}],[\">zillow\",{\"1\":{\"975\":1}}],[\">netflix<\",{\"1\":{\"975\":1}}],[\">dashboard<\",{\"1\":{\"974\":1}}],[\">dodispatch\",{\"1\":{\"401\":1}}],[\">a\",{\"1\":{\"983\":1}}],[\">about<\",{\"1\":{\"974\":1}}],[\">application\",{\"1\":{\"593\":1}}],[\">home<\",{\"1\":{\"974\":1}}],[\"><\",{\"1\":{\"934\":1,\"943\":2,\"982\":6,\"983\":1,\"1407\":1}}],[\">sleep\",{\"1\":{\"647\":1}}],[\">something\",{\"1\":{\"290\":1}}],[\">write\",{\"1\":{\"647\":1}}],[\">getattribute\",{\"1\":{\"647\":2}}],[\">lookuproute\",{\"1\":{\"473\":1}}],[\">token\",{\"1\":{\"467\":1,\"1031\":1}}],[\">0\",{\"1\":{\"236\":1,\"786\":1}}],[\">10\",{\"1\":{\"205\":1}}],[\">>\",{\"1\":{\"5\":1,\"17\":1,\"1032\":5,\"1130\":1,\"1136\":2}}],[\">\",{\"1\":{\"5\":1,\"17\":1,\"26\":1,\"103\":3,\"139\":1,\"192\":1,\"234\":3,\"236\":5,\"241\":1,\"246\":1,\"249\":3,\"250\":1,\"252\":1,\"256\":1,\"269\":1,\"271\":1,\"284\":1,\"288\":1,\"290\":4,\"291\":1,\"295\":2,\"297\":4,\"298\":5,\"309\":1,\"316\":1,\"318\":2,\"319\":3,\"326\":1,\"329\":1,\"345\":1,\"378\":1,\"379\":1,\"386\":2,\"401\":1,\"411\":6,\"435\":2,\"438\":5,\"439\":1,\"456\":1,\"467\":1,\"479\":29,\"480\":2,\"491\":1,\"509\":1,\"513\":3,\"557\":1,\"593\":2,\"596\":53,\"647\":2,\"648\":1,\"652\":4,\"657\":2,\"672\":3,\"780\":2,\"786\":1,\"792\":1,\"801\":2,\"804\":1,\"852\":2,\"871\":1,\"900\":1,\"902\":1,\"911\":3,\"934\":2,\"943\":1,\"969\":1,\"971\":2,\"974\":7,\"975\":2,\"977\":2,\"981\":2,\"982\":6,\"983\":3,\"995\":2,\"1031\":1,\"1043\":1,\"1056\":3,\"1059\":4,\"1078\":2,\"1079\":9,\"1115\":1,\"1121\":2,\"1130\":1,\"1153\":1,\"1202\":12,\"1203\":4,\"1219\":1,\"1230\":1,\"1251\":1,\"1320\":1,\"1345\":7,\"1353\":2,\"1383\":1,\"1407\":7,\"1411\":1,\"1445\":5,\"1450\":2,\"1480\":1}}],[\"lyws+abc+akcqqdpenk+zyguv4uefuzw\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"lb\",{\"1\":{\"1513\":2}}],[\"ldap\",{\"1\":{\"1491\":1}}],[\"l4\",{\"1\":{\"1239\":1,\"1240\":1}}],[\"l4流程\",{\"1\":{\"1238\":1}}],[\"l3\",{\"1\":{\"1239\":1,\"1240\":1}}],[\"l3能力\",{\"1\":{\"1238\":1}}],[\"l2\",{\"1\":{\"1239\":1,\"1240\":1}}],[\"l2能力组\",{\"1\":{\"1238\":1}}],[\"l1\",{\"1\":{\"1240\":1}}],[\"l1主题域分组\",{\"1\":{\"1239\":1}}],[\"l1能力域\",{\"1\":{\"1238\":1}}],[\"l5\",{\"1\":{\"1238\":1,\"1239\":1,\"1240\":1}}],[\"lzyue\",{\"1\":{\"1211\":3}}],[\"lz4\",{\"1\":{\"801\":1,\"802\":1}}],[\"lvremove\",{\"1\":{\"1197\":2}}],[\"lvs\",{\"1\":{\"1197\":1}}],[\"lvdisplay\",{\"1\":{\"1197\":2}}],[\"lvcreate\",{\"1\":{\"1197\":2}}],[\"lvm\",{\"1\":{\"1197\":1}}],[\"lvm逻辑卷\",{\"1\":{\"1197\":1}}],[\"lv\",{\"1\":{\"1197\":2}}],[\"lmenezes\",{\"1\":{\"1137\":1,\"1138\":1}}],[\"ln\",{\"0\":{\"1184\":1},\"1\":{\"1115\":1,\"1116\":1,\"1118\":1,\"1184\":1}}],[\"lsb\",{\"1\":{\"1130\":2}}],[\"ls\",{\"1\":{\"1093\":1,\"1113\":1,\"1114\":1,\"1176\":2,\"1179\":2,\"1180\":1,\"1192\":1,\"1215\":1}}],[\"lts\",{\"1\":{\"1130\":6}}],[\"lt\",{\"1\":{\"1043\":1,\"1222\":2,\"1223\":2}}],[\"lj4\",{\"1\":{\"982\":2}}],[\"ljk3\",{\"1\":{\"982\":2}}],[\"ljk2\",{\"1\":{\"982\":2}}],[\"ljk1<\",{\"1\":{\"982\":1}}],[\"ljk1\",{\"1\":{\"982\":1}}],[\"ljk<\",{\"1\":{\"982\":1}}],[\"ljk\",{\"1\":{\"982\":4}}],[\"lw\",{\"1\":{\"656\":1}}],[\"l=lo\",{\"1\":{\"623\":1}}],[\"layers\",{\"1\":{\"1583\":1}}],[\"layout>\",{\"1\":{\"1202\":2}}],[\"label\",{\"1\":{\"1084\":1,\"1616\":8}}],[\"latitude\",{\"1\":{\"1058\":4}}],[\"latest\",{\"1\":{\"801\":2,\"802\":2,\"1126\":3,\"1127\":2,\"1128\":1,\"1132\":1,\"1140\":1,\"1142\":1,\"1183\":1,\"1215\":1}}],[\"lane\",{\"1\":{\"763\":1,\"766\":2}}],[\"lane的数据\",{\"1\":{\"763\":1}}],[\"lang=\",{\"1\":{\"1407\":1}}],[\"lang=all\",{\"1\":{\"11\":1}}],[\"lang3\",{\"1\":{\"780\":1}}],[\"lang包下的class对象\",{\"1\":{\"244\":1}}],[\"language\",{\"1\":{\"103\":1,\"604\":1}}],[\"lang\",{\"0\":{\"11\":1},\"1\":{\"241\":1,\"557\":4,\"647\":1,\"758\":2,\"759\":2}}],[\"lastmodified\",{\"1\":{\"1259\":2}}],[\"lastname\",{\"1\":{\"986\":2}}],[\"lastoutboundactivity\",{\"1\":{\"824\":1}}],[\"lastinboundactivity\",{\"1\":{\"824\":1}}],[\"lastaccesstime=new\",{\"1\":{\"652\":1}}],[\"last\",{\"1\":{\"397\":1,\"1259\":1}}],[\"lazyset\",{\"1\":{\"1445\":2}}],[\"lazyprotocolsupports\",{\"1\":{\"1342\":1}}],[\"lazypasswordencoder\",{\"1\":{\"330\":2}}],[\"lazyinitmanagementprotocolsupports\",{\"0\":{\"1324\":1}}],[\"lazyinitializer\",{\"1\":{\"108\":1}}],[\"lazy\",{\"1\":{\"397\":1,\"438\":1}}],[\"lambdaesquerywrapper<>\",{\"1\":{\"786\":1}}],[\"lambdaesquerywrapper<devicepoint>\",{\"1\":{\"786\":1}}],[\"lambdaquerywrapper\",{\"1\":{\"786\":10}}],[\"lambdaquerywrapper<>\",{\"1\":{\"786\":1}}],[\"lambdaquerywrapper<deviceproduct>\",{\"1\":{\"786\":1}}],[\"lambdaquerywrapper<deviceproductcategory>\",{\"1\":{\"672\":1}}],[\"lambdas\",{\"1\":{\"435\":1}}],[\"lambda对象的类对象\",{\"0\":{\"252\":1}}],[\"lambda表达式是函数式接口的实例\",{\"1\":{\"248\":1}}],[\"lambda表达式\",{\"0\":{\"246\":1},\"1\":{\"604\":1}}],[\"lambda\",{\"0\":{\"245\":1},\"1\":{\"252\":2,\"604\":1,\"902\":2}}],[\"leo\",{\"1\":{\"801\":3}}],[\"le\",{\"1\":{\"786\":1,\"1222\":2}}],[\"left\",{\"1\":{\"716\":2,\"992\":4,\"1058\":3,\"1059\":1,\"1445\":1}}],[\"level=\",{\"1\":{\"596\":1}}],[\"levelfilter\",{\"1\":{\"596\":2}}],[\"level>\",{\"1\":{\"596\":3}}],[\"level\",{\"1\":{\"596\":1,\"833\":1,\"852\":2,\"1248\":1,\"1308\":1,\"1484\":1}}],[\"learngit\",{\"1\":{\"1144\":1}}],[\"learningresearchapplication\",{\"1\":{\"1066\":1}}],[\"learning\",{\"1\":{\"585\":1,\"707\":1,\"1066\":1,\"1256\":1}}],[\"leastactive\",{\"1\":{\"730\":1}}],[\"lead\",{\"1\":{\"411\":1,\"1445\":1}}],[\"leader分区\",{\"1\":{\"801\":2,\"802\":2}}],[\"leader\",{\"1\":{\"98\":1}}],[\"leave\",{\"1\":{\"399\":2}}],[\"less\",{\"0\":{\"949\":1},\"1\":{\"297\":1}}],[\"lets\",{\"1\":{\"852\":1,\"1445\":1}}],[\"let\",{\"0\":{\"283\":1},\"1\":{\"264\":1,\"265\":1,\"267\":2,\"269\":1,\"270\":2,\"271\":3,\"272\":1,\"274\":1,\"275\":7,\"277\":11,\"279\":1,\"280\":2,\"282\":6,\"283\":2,\"284\":2,\"285\":2,\"287\":3,\"288\":1,\"290\":1,\"291\":1,\"292\":1,\"295\":1,\"296\":4,\"297\":3,\"298\":4,\"302\":3,\"303\":1,\"304\":2,\"305\":3,\"306\":2,\"309\":2,\"311\":3,\"312\":8,\"315\":2,\"317\":3,\"318\":6,\"319\":2,\"399\":2,\"410\":1,\"435\":1,\"929\":5,\"943\":1,\"975\":1,\"976\":1,\"977\":1,\"986\":3,\"991\":2,\"992\":4,\"994\":1,\"1445\":1}}],[\"lenientexpandopen\",{\"1\":{\"780\":1}}],[\"len=0\",{\"1\":{\"152\":1}}],[\"len=\",{\"1\":{\"152\":2}}],[\"length\",{\"1\":{\"152\":1,\"386\":2,\"471\":1,\"649\":1,\"719\":1,\"780\":3,\"911\":1,\"991\":1,\"1032\":1,\"1137\":1,\"1486\":4}}],[\"len\",{\"1\":{\"128\":1,\"152\":9,\"277\":3,\"318\":2}}],[\"legacy\",{\"1\":{\"59\":1}}],[\"lower\",{\"1\":{\"1120\":1,\"1248\":1}}],[\"lowest\",{\"1\":{\"441\":1}}],[\"loadbalancer组件\",{\"1\":{\"1520\":1}}],[\"loadbalancer\",{\"1\":{\"1501\":1}}],[\"loadbalancer<\",{\"1\":{\"862\":1}}],[\"load先将镜像存到本地\",{\"1\":{\"1093\":1}}],[\"loadfactorynames\",{\"1\":{\"494\":1}}],[\"loadfilters\",{\"1\":{\"473\":1}}],[\"loader\",{\"1\":{\"435\":1,\"1066\":1}}],[\"loaded\",{\"1\":{\"435\":1,\"852\":1}}],[\"load\",{\"1\":{\"397\":1,\"494\":1,\"756\":1,\"914\":1,\"1093\":2}}],[\"loadtimeweaverawareprocessor\",{\"1\":{\"397\":1}}],[\"loadtimeweaver\",{\"1\":{\"397\":1}}],[\"loadcontext\",{\"1\":{\"346\":1}}],[\"loadauthorizedclient\",{\"1\":{\"345\":1}}],[\"looks\",{\"1\":{\"974\":1,\"983\":2}}],[\"looking\",{\"1\":{\"914\":1}}],[\"lookuporder\",{\"1\":{\"329\":1}}],[\"loopback\",{\"1\":{\"1026\":1}}],[\"loops\",{\"1\":{\"399\":1}}],[\"loop无限循环\",{\"0\":{\"280\":1}}],[\"loop\",{\"1\":{\"135\":2,\"280\":2,\"1445\":8}}],[\"longcodec\",{\"1\":{\"1246\":1}}],[\"longitude\",{\"1\":{\"1058\":4}}],[\"longpollingrunnable\",{\"0\":{\"881\":1}}],[\"long\",{\"1\":{\"179\":2,\"236\":2,\"255\":1,\"411\":1,\"421\":1,\"658\":3,\"773\":1,\"780\":1,\"786\":1,\"911\":4,\"1248\":2,\"1259\":1,\"1345\":2,\"1445\":3}}],[\"lockflag\",{\"1\":{\"1548\":1,\"1549\":1,\"1550\":1}}],[\"locks\",{\"1\":{\"1246\":1}}],[\"lock\",{\"1\":{\"911\":12,\"1048\":7,\"1050\":1,\"1139\":1,\"1246\":2}}],[\"lockqty\",{\"1\":{\"236\":5}}],[\"lock语句\",{\"1\":{\"113\":1}}],[\"localprotocolsupportloader\",{\"1\":{\"1357\":1}}],[\"localscheduler本地调度器\",{\"1\":{\"1335\":1}}],[\"localtime\",{\"1\":{\"1115\":1,\"1116\":1,\"1130\":2}}],[\"localfileoffsetstore\",{\"1\":{\"914\":1}}],[\"localhost\",{\"1\":{\"679\":2,\"850\":1,\"1137\":1,\"1141\":2,\"1210\":4,\"1211\":2,\"1407\":1,\"1455\":2,\"1458\":1}}],[\"localdatetime\",{\"1\":{\"658\":2}}],[\"localeutil工具对消息进行转换\",{\"1\":{\"1313\":1}}],[\"localeutils\",{\"1\":{\"557\":2}}],[\"locale\",{\"1\":{\"557\":9}}],[\"locally\",{\"1\":{\"435\":1}}],[\"local\",{\"0\":{\"43\":1},\"1\":{\"103\":1,\"411\":1,\"1092\":2,\"1097\":1,\"1118\":3,\"1130\":8,\"1182\":1,\"1188\":2,\"1210\":1,\"1219\":1,\"1458\":2}}],[\"location路径配置\",{\"0\":{\"1209\":1}}],[\"locations=classpath\",{\"1\":{\"852\":1}}],[\"locations\",{\"1\":{\"593\":1,\"594\":1,\"1515\":1}}],[\"location配置配置文件扫描路径\",{\"1\":{\"593\":1}}],[\"locationtype\",{\"1\":{\"236\":10}}],[\"location\",{\"1\":{\"36\":3,\"236\":15,\"852\":2,\"977\":2,\"1210\":10,\"1211\":4,\"1249\":2}}],[\"logtype\",{\"1\":{\"1635\":1}}],[\"logouri\",{\"1\":{\"1541\":2}}],[\"logoutfilter\",{\"1\":{\"346\":1}}],[\"logout\",{\"1\":{\"330\":1,\"1533\":1,\"1597\":1}}],[\"loglevel\",{\"1\":{\"1450\":1}}],[\"loglistener\",{\"1\":{\"413\":1}}],[\"logical\",{\"1\":{\"1197\":2}}],[\"loginconfiguration\",{\"1\":{\"1584\":1}}],[\"loginuri\",{\"1\":{\"1513\":1}}],[\"loginlog\",{\"1\":{\"1513\":1,\"1584\":1,\"1586\":3,\"1628\":1,\"1629\":1,\"1630\":1}}],[\"login=yes\",{\"1\":{\"1126\":1}}],[\"loginpage\",{\"1\":{\"348\":2}}],[\"loginprocessingurl\",{\"1\":{\"348\":2}}],[\"login\",{\"1\":{\"181\":1,\"346\":1,\"348\":2,\"421\":1,\"945\":1,\"977\":2,\"1097\":1,\"1129\":1,\"1215\":2,\"1506\":1,\"1513\":1,\"1515\":2}}],[\"log<\",{\"1\":{\"596\":6}}],[\"logs\",{\"1\":{\"596\":1,\"786\":3,\"1087\":2,\"1127\":2,\"1133\":6,\"1159\":1,\"1210\":5}}],[\"logback\",{\"1\":{\"596\":13}}],[\"logfilter<\",{\"1\":{\"652\":1}}],[\"logfilter\",{\"1\":{\"421\":2,\"652\":1}}],[\"logfilewebendpointproperties\",{\"1\":{\"370\":1}}],[\"logclient\",{\"1\":{\"413\":4}}],[\"logevent\",{\"1\":{\"413\":7}}],[\"logginghandler\",{\"1\":{\"1450\":1}}],[\"logging\",{\"1\":{\"411\":2,\"596\":1,\"1515\":1}}],[\"loggerfactory\",{\"1\":{\"780\":2}}],[\"logger\",{\"1\":{\"176\":1,\"346\":6,\"397\":2,\"406\":2,\"410\":2,\"411\":7,\"438\":2,\"456\":1,\"473\":2,\"596\":2,\"678\":1,\"780\":2,\"852\":18,\"858\":1,\"900\":3,\"1445\":9,\"1450\":2,\"1518\":2}}],[\"logmessage\",{\"1\":{\"346\":2}}],[\"log\",{\"0\":{\"596\":1,\"1052\":1,\"1053\":1,\"1054\":1},\"1\":{\"98\":1,\"179\":2,\"206\":1,\"236\":1,\"360\":1,\"411\":1,\"413\":3,\"471\":1,\"509\":3,\"596\":13,\"657\":1,\"780\":1,\"783\":1,\"786\":5,\"801\":1,\"804\":5,\"833\":3,\"911\":1,\"914\":4,\"991\":1,\"992\":2,\"1032\":1,\"1049\":1,\"1050\":1,\"1054\":1,\"1127\":2,\"1147\":1,\"1187\":5,\"1210\":12,\"1251\":1,\"1345\":1,\"1353\":2,\"1407\":3,\"1445\":2,\"1515\":2,\"1522\":4,\"1526\":3}}],[\"lombook注解和\",{\"0\":{\"38\":1}}],[\"lisy\",{\"1\":{\"1579\":1,\"1580\":1}}],[\"listen\",{\"1\":{\"1210\":4,\"1211\":2}}],[\"listener=yes\",{\"1\":{\"1126\":1}}],[\"listeners=plaintext\",{\"1\":{\"1126\":1}}],[\"listeners\",{\"1\":{\"1026\":2}}],[\"listenercontainerconfiguration实现applicationcontextaware\",{\"0\":{\"918\":1}}],[\"listenercontainerconfiguration实现smartinitializingsingleton接口\",{\"1\":{\"914\":1}}],[\"listenerconsumer\",{\"0\":{\"813\":1},\"1\":{\"798\":4}}],[\"listenerexecutionfailedexception\",{\"1\":{\"801\":1}}],[\"listener\",{\"0\":{\"412\":1},\"1\":{\"397\":1,\"450\":2,\"798\":1,\"802\":1,\"804\":2,\"1026\":2}}],[\"listfiles\",{\"1\":{\"1032\":1}}],[\"listmap\",{\"1\":{\"1013\":2}}],[\"listtypeinfo<>\",{\"1\":{\"792\":1}}],[\"listtypeinfo\",{\"1\":{\"792\":1}}],[\"list可能不包含父类别\",{\"1\":{\"672\":1}}],[\"list>\",{\"1\":{\"479\":2}}],[\"lists\",{\"1\":{\"399\":2}}],[\"list<objecterror>\",{\"1\":{\"1526\":1}}],[\"list<reactiveusertokenparser>\",{\"1\":{\"1345\":1}}],[\"list<receiptrecord>\",{\"1\":{\"236\":1}}],[\"list<receipt>\",{\"1\":{\"236\":1}}],[\"list<entryorderitem>\",{\"1\":{\"1244\":1}}],[\"list<e>\",{\"1\":{\"852\":1}}],[\"list<class<\",{\"1\":{\"1032\":4}}],[\"list<customeritemstockvo>\",{\"1\":{\"236\":2}}],[\"list<user>\",{\"1\":{\"982\":1}}],[\"list<dbpatchschedulerequestentity>\",{\"1\":{\"902\":1}}],[\"list<deviceproductcategory>\",{\"1\":{\"672\":8}}],[\"list<deferredimportselectorholder>\",{\"1\":{\"490\":1}}],[\"list<message>\",{\"1\":{\"804\":1}}],[\"list<tree<e>>\",{\"1\":{\"1036\":1}}],[\"list<triggerconfig>>\",{\"1\":{\"792\":1}}],[\"list<t>\",{\"1\":{\"780\":2}}],[\"list<propertycountvo\",{\"1\":{\"786\":1}}],[\"list<\",{\"1\":{\"786\":1}}],[\"list<alarmlog>\",{\"1\":{\"786\":1}}],[\"list<gatewayfilter>\",{\"1\":{\"473\":2}}],[\"list<beandefinitionregistrypostprocessor>\",{\"1\":{\"399\":2}}],[\"list<beanfactorypostprocessor>\",{\"1\":{\"399\":5}}],[\"list<fielderror>\",{\"1\":{\"378\":1}}],[\"list<securityconfigurer<filter\",{\"1\":{\"329\":1}}],[\"list<string>\",{\"1\":{\"256\":4,\"399\":2,\"422\":1,\"438\":1,\"494\":2,\"672\":2,\"780\":1,\"786\":1,\"804\":1,\"982\":1,\"1245\":1}}],[\"list<itemstockvo>\",{\"1\":{\"236\":1}}],[\"list<itemstock>\",{\"1\":{\"236\":1}}],[\"list<inventory>\",{\"1\":{\"236\":2}}],[\"list<list<inventory>>\",{\"1\":{\"236\":1}}],[\"list1\",{\"1\":{\"236\":2}}],[\"list\",{\"1\":{\"96\":1,\"173\":1,\"228\":1,\"236\":7,\"256\":4,\"309\":2,\"399\":1,\"623\":1,\"672\":2,\"780\":2,\"792\":1,\"902\":1,\"911\":1,\"1025\":1,\"1095\":2,\"1130\":2,\"1177\":1,\"1455\":1,\"1458\":1,\"1513\":1,\"1541\":1,\"1550\":1,\"1555\":1,\"1561\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1572\":1,\"1574\":1,\"1584\":1,\"1586\":2,\"1592\":2,\"1597\":1,\"1603\":1,\"1628\":1,\"1635\":1}}],[\"live\",{\"1\":{\"1153\":1}}],[\"livingobjects\",{\"1\":{\"218\":1}}],[\"li>\",{\"1\":{\"974\":3,\"975\":4}}],[\"lindorm\",{\"0\":{\"1037\":1}}],[\"links\",{\"1\":{\"1139\":1}}],[\"link>\",{\"1\":{\"974\":3,\"975\":4}}],[\"link\",{\"0\":{\"978\":1},\"1\":{\"973\":1,\"974\":1,\"1090\":1,\"1136\":2}}],[\"linkedhashset\",{\"1\":{\"471\":1}}],[\"linkedhashmap<string\",{\"1\":{\"255\":1}}],[\"linkedblockingdeque<>\",{\"1\":{\"236\":1}}],[\"linkedlist是双向链表\",{\"1\":{\"228\":1}}],[\"linger\",{\"1\":{\"801\":1,\"802\":1}}],[\"linux系统\",{\"0\":{\"1195\":1}}],[\"linux系统使用crt\",{\"1\":{\"625\":1}}],[\"linux\",{\"0\":{\"1175\":1,\"1458\":1},\"1\":{\"1093\":1,\"1127\":1,\"1130\":2,\"1170\":1,\"1197\":1,\"1215\":1}}],[\"linux的系统内核要在4\",{\"1\":{\"1093\":1}}],[\"linux下pem或der存储格式的证书格式\",{\"1\":{\"627\":1}}],[\"lifecyclebase\",{\"0\":{\"457\":1,\"693\":1}}],[\"lifecyclelistener\",{\"1\":{\"450\":1}}],[\"lifetime=1800000\",{\"1\":{\"850\":1}}],[\"lifetimes\",{\"1\":{\"273\":1}}],[\"lifetime小于wait\",{\"1\":{\"6\":1}}],[\"lifetime大于wait\",{\"1\":{\"6\":1}}],[\"lifetime表示连接最大存活时间\",{\"1\":{\"6\":1}}],[\"lifetime和mysql的wait\",{\"0\":{\"6\":1}}],[\"limits\",{\"1\":{\"1206\":2}}],[\"limit\",{\"1\":{\"255\":9,\"716\":1}}],[\"like\",{\"1\":{\"206\":1,\"410\":1,\"672\":2,\"717\":2,\"983\":2}}],[\"liquibase\",{\"1\":{\"65\":1}}],[\"library\",{\"1\":{\"1074\":1}}],[\"libs\",{\"1\":{\"218\":1,\"934\":2}}],[\"lib\",{\"1\":{\"13\":1,\"22\":1,\"996\":3,\"1066\":2,\"1139\":1,\"1140\":5,\"1141\":4,\"1458\":1}}],[\"l\",{\"1\":{\"5\":1,\"17\":1,\"656\":4,\"1092\":1,\"1113\":2,\"1114\":1,\"1118\":1,\"1146\":1,\"1153\":1,\"1179\":2,\"1180\":1,\"1197\":2,\"1230\":1}}],[\"|let\",{\"1\":{\"991\":1}}],[\"|nosuchmethodexception\",{\"1\":{\"648\":1}}],[\"|sort|uniq\",{\"1\":{\"647\":1}}],[\"|sed\",{\"1\":{\"647\":1}}],[\"|str|\",{\"1\":{\"318\":2}}],[\"|z|\",{\"1\":{\"317\":1,\"318\":2}}],[\"|param1|\",{\"1\":{\"315\":1}}],[\"|param1\",{\"1\":{\"315\":1}}],[\"|y|\",{\"1\":{\"315\":1}}],[\"||\",{\"1\":{\"236\":4,\"319\":1,\"358\":1,\"383\":1,\"434\":1,\"435\":1,\"649\":4,\"786\":3,\"852\":1,\"929\":3,\"1032\":2,\"1222\":1,\"1224\":1,\"1259\":1,\"1445\":4}}],[\"|\",{\"1\":{\"5\":1,\"17\":1,\"19\":1,\"277\":1,\"282\":3,\"284\":1,\"315\":1,\"411\":1,\"648\":1,\"987\":1,\"988\":1,\"991\":2,\"1087\":6,\"1095\":1,\"1180\":1,\"1187\":1,\"1190\":2,\"1257\":1,\"1445\":1,\"1514\":1,\"1515\":1}}],[\"pc有无线和有线两个网卡\",{\"1\":{\"1432\":1}}],[\"pc\",{\"1\":{\"1429\":1}}],[\"pdu包括功能码和数据\",{\"1\":{\"1279\":1}}],[\"pvdisplay\",{\"1\":{\"1197\":1}}],[\"pvremove\",{\"1\":{\"1197\":2}}],[\"pvcreate\",{\"1\":{\"1197\":2}}],[\"pv\",{\"1\":{\"1197\":2}}],[\"pvstouse\",{\"1\":{\"359\":5}}],[\"pvs\",{\"1\":{\"358\":2,\"359\":5,\"410\":3,\"1197\":1}}],[\"pwd\",{\"1\":{\"1192\":1,\"1215\":2}}],[\"pwa\",{\"0\":{\"958\":1}}],[\"p的区别\",{\"1\":{\"1109\":1}}],[\"p命令\",{\"1\":{\"1109\":1}}],[\"pttl\",{\"1\":{\"1246\":1}}],[\"ptest\",{\"1\":{\"1079\":1}}],[\"ptr\",{\"1\":{\"144\":1,\"145\":3,\"146\":8}}],[\"p后跟上profile的唯一id\",{\"1\":{\"1079\":1}}],[\"p参数\",{\"1\":{\"1079\":1}}],[\"png\",{\"1\":{\"982\":2,\"1572\":1,\"1574\":1,\"1641\":1}}],[\"pnpm\",{\"0\":{\"953\":1},\"1\":{\"29\":2}}],[\"p>\",{\"1\":{\"982\":9,\"983\":5,\"1407\":1}}],[\"pm2\",{\"0\":{\"951\":1}}],[\"pjb\",{\"1\":{\"647\":1}}],[\"py0in4oyryntseiioriw6os1w2f2kyqrakeast903eqx\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"py\",{\"1\":{\"646\":1}}],[\"pythoninterpreter\",{\"1\":{\"646\":3}}],[\"python<\",{\"1\":{\"646\":1}}],[\"python等语言使用进行内存管理\",{\"1\":{\"201\":1,\"243\":1}}],[\"python\",{\"0\":{\"646\":1},\"1\":{\"124\":1,\"151\":2,\"646\":1}}],[\"pfx\",{\"1\":{\"623\":1,\"1514\":1}}],[\"pk>\",{\"1\":{\"1296\":1}}],[\"pks\",{\"1\":{\"627\":1}}],[\"pkcs12\",{\"1\":{\"623\":5}}],[\"pkg包及其子包下的所有controller\",{\"1\":{\"376\":1}}],[\"pkg\",{\"0\":{\"161\":1},\"1\":{\"168\":2,\"173\":1,\"376\":3}}],[\"physical\",{\"1\":{\"1197\":4}}],[\"phrase查询类似\",{\"1\":{\"751\":1}}],[\"phrase的分词结果必须在被检索字段的分词中都包含\",{\"1\":{\"751\":1}}],[\"phrase\",{\"0\":{\"751\":2,\"766\":1},\"1\":{\"751\":2,\"766\":3}}],[\"phpthreads\",{\"1\":{\"647\":1}}],[\"php下载链接\",{\"1\":{\"647\":1}}],[\"php\",{\"0\":{\"647\":1},\"1\":{\"647\":12,\"1087\":1}}],[\"phase\",{\"1\":{\"399\":1}}],[\"phone\",{\"1\":{\"157\":7,\"1532\":2,\"1548\":1,\"1549\":1,\"1550\":2}}],[\"ppname\",{\"1\":{\"399\":20}}],[\"pptr\",{\"1\":{\"146\":5}}],[\"pluins\",{\"1\":{\"1025\":1}}],[\"plus\",{\"0\":{\"856\":1,\"901\":1},\"1\":{\"585\":1,\"707\":1,\"902\":2,\"1501\":1,\"1515\":1,\"1524\":1}}],[\"plugin=mysql\",{\"1\":{\"1141\":3}}],[\"plugin=protoc\",{\"1\":{\"643\":1}}],[\"plugins\",{\"1\":{\"852\":2,\"1025\":2,\"1130\":3}}],[\"plugins<\",{\"1\":{\"49\":1}}],[\"plugin\",{\"0\":{\"57\":1,\"1077\":1},\"1\":{\"643\":2,\"852\":4,\"853\":2,\"993\":1,\"994\":2,\"995\":4,\"1074\":1,\"1130\":1,\"1140\":1}}],[\"plugin>\",{\"1\":{\"49\":1}}],[\"plugin<\",{\"1\":{\"49\":1}}],[\"pluginrepositories>\",{\"1\":{\"49\":1,\"1202\":1}}],[\"pluginrepository>\",{\"1\":{\"49\":1,\"1202\":1}}],[\"plateformmanager\",{\"1\":{\"1582\":3,\"1583\":2,\"1584\":1}}],[\"platformrole\",{\"1\":{\"1583\":3,\"1584\":1}}],[\"platformname=chint\",{\"1\":{\"1475\":3}}],[\"platform=mysql\",{\"1\":{\"1132\":1}}],[\"platform=linux\",{\"1\":{\"1093\":1}}],[\"platformtransactionmanager\",{\"1\":{\"202\":1}}],[\"platform\",{\"1\":{\"102\":1,\"103\":1,\"924\":1,\"1120\":5,\"1121\":10,\"1137\":1,\"1475\":12}}],[\"plaintext\",{\"1\":{\"1126\":1}}],[\"placeholders\",{\"1\":{\"399\":1}}],[\"please\",{\"1\":{\"329\":1,\"399\":1,\"900\":1,\"914\":1}}],[\"plist\",{\"1\":{\"256\":2}}],[\"pieces\",{\"1\":{\"975\":1}}],[\"piecenum\",{\"1\":{\"236\":4}}],[\"pingrunnable实现runnable接口\",{\"1\":{\"843\":1}}],[\"pingtask类实现timertask接口\",{\"1\":{\"843\":1}}],[\"ping的次数\",{\"1\":{\"824\":1}}],[\"pingoutstanding\",{\"1\":{\"824\":1}}],[\"pingpoint\",{\"1\":{\"80\":1}}],[\"pick\",{\"1\":{\"1249\":2,\"1445\":1}}],[\"picking\",{\"1\":{\"236\":2}}],[\"pic\",{\"1\":{\"716\":1,\"1058\":4}}],[\"pipeline处理消息时\",{\"1\":{\"1396\":1}}],[\"pipeline初始化handler就是创建带有channelhandler的context\",{\"1\":{\"1396\":1}}],[\"pipeline自带headcontext和tailcontext\",{\"1\":{\"1396\":1}}],[\"pipeline如何维护带有channelhandler的context\",{\"0\":{\"1396\":1}}],[\"pipeline维护handlercontext\",{\"1\":{\"1395\":1}}],[\"pipeline样例\",{\"1\":{\"1215\":1}}],[\"pipeline\",{\"0\":{\"1213\":1},\"1\":{\"678\":1,\"694\":1,\"1215\":5,\"1450\":7}}],[\"pixels\",{\"1\":{\"288\":1}}],[\"pigx\",{\"1\":{\"65\":1}}],[\"pid信息\",{\"1\":{\"1190\":1}}],[\"pid值\",{\"1\":{\"19\":1}}],[\"pid\",{\"0\":{\"19\":1},\"1\":{\"5\":4,\"17\":4,\"19\":1,\"1153\":9,\"1191\":3,\"1206\":1,\"1210\":2,\"1230\":2}}],[\"pexpire\",{\"1\":{\"1246\":2}}],[\"pe\",{\"1\":{\"1197\":1}}],[\"pendinghandlercallbackhead\",{\"1\":{\"1448\":1}}],[\"pending\",{\"1\":{\"1445\":1}}],[\"pendingmessages\",{\"1\":{\"824\":1}}],[\"pendingflows\",{\"1\":{\"824\":1}}],[\"pem\",{\"1\":{\"625\":2,\"627\":1,\"1210\":1,\"1211\":1}}],[\"pem证书通常将根证书\",{\"1\":{\"625\":1}}],[\"pem是基于base64编码的证书格式\",{\"1\":{\"625\":1}}],[\"person\",{\"1\":{\"1256\":4,\"1583\":1}}],[\"persistencedevicesessionmanager\",{\"0\":{\"1321\":1}}],[\"persistenceexception\",{\"1\":{\"852\":2}}],[\"persistence\",{\"0\":{\"327\":1},\"1\":{\"886\":1}}],[\"per\",{\"1\":{\"346\":1,\"1515\":1}}],[\"permitall\",{\"1\":{\"348\":1,\"467\":1,\"1031\":1}}],[\"permitall配置上述url是否允许访问\",{\"1\":{\"348\":1}}],[\"permitall等\",{\"1\":{\"336\":1}}],[\"permission\",{\"0\":{\"21\":1},\"1\":{\"471\":1,\"1579\":1,\"1580\":1,\"1582\":4,\"1607\":2}}],[\"performdeferredloadonstartup\",{\"1\":{\"456\":2}}],[\"performbuild\",{\"1\":{\"334\":1}}],[\"performbuild方法进行构建\",{\"1\":{\"334\":1}}],[\"performbuild方法构造认证管理器authenticationmanager及内部的provider\",{\"1\":{\"333\":1}}],[\"performbuild方法构造安全过滤器链\",{\"1\":{\"333\":1}}],[\"perform\",{\"1\":{\"250\":1}}],[\"performed\",{\"1\":{\"250\":1,\"411\":1}}],[\"performing\",{\"1\":{\"250\":2}}],[\"performs\",{\"1\":{\"250\":3}}],[\"peer\",{\"1\":{\"59\":1}}],[\"panel\",{\"1\":{\"1506\":1,\"1514\":2}}],[\"panbaidu\",{\"1\":{\"1118\":1}}],[\"panicking\",{\"1\":{\"159\":2,\"160\":1}}],[\"panic\",{\"0\":{\"159\":1,\"160\":1},\"1\":{\"159\":7,\"160\":3}}],[\"pair\",{\"0\":{\"1169\":1,\"1170\":1},\"1\":{\"1169\":1,\"1170\":2}}],[\"pair网络接口对\",{\"1\":{\"1088\":1}}],[\"painless\",{\"1\":{\"758\":2,\"759\":2}}],[\"packbo\",{\"1\":{\"1244\":1}}],[\"packet=128m\",{\"1\":{\"1120\":1}}],[\"packet\",{\"1\":{\"833\":1}}],[\"package`\",{\"1\":{\"1464\":1}}],[\"packagepath\",{\"1\":{\"1032\":2}}],[\"packagedirname\",{\"1\":{\"1032\":2}}],[\"packagename\",{\"1\":{\"1032\":6}}],[\"packagetoscan\",{\"1\":{\"852\":6}}],[\"packagetypes>\",{\"1\":{\"103\":1}}],[\"package=com\",{\"1\":{\"852\":1}}],[\"packages\",{\"1\":{\"173\":1}}],[\"package包\",{\"0\":{\"170\":1}}],[\"package\",{\"0\":{\"960\":1},\"1\":{\"103\":2,\"116\":1,\"117\":1,\"122\":1,\"124\":1,\"127\":1,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"139\":3,\"140\":2,\"141\":1,\"143\":1,\"145\":1,\"146\":1,\"148\":1,\"151\":1,\"152\":2,\"154\":1,\"155\":1,\"156\":1,\"157\":1,\"158\":1,\"173\":1,\"189\":1,\"190\":2,\"241\":1,\"648\":1,\"780\":1,\"792\":1,\"852\":2,\"900\":1,\"965\":1,\"1079\":1,\"1215\":2,\"1256\":1,\"1458\":1,\"1464\":2,\"1467\":1,\"1515\":1}}],[\"package>\",{\"1\":{\"103\":1}}],[\"packaging\",{\"1\":{\"103\":1,\"494\":1}}],[\"paho\",{\"0\":{\"818\":1,\"1023\":1}}],[\"payload\",{\"1\":{\"649\":4,\"726\":1,\"1271\":3,\"1272\":1}}],[\"payloadg\",{\"1\":{\"649\":4}}],[\"padzero\",{\"1\":{\"649\":6}}],[\"patcheddate\",{\"1\":{\"902\":1}}],[\"pattern为\",{\"1\":{\"679\":1}}],[\"pattern>\",{\"1\":{\"596\":4,\"652\":4}}],[\"pattern\",{\"0\":{\"1253\":1,\"1255\":1},\"1\":{\"594\":1,\"596\":6,\"649\":2,\"1515\":1}}],[\"pathparameters\",{\"1\":{\"1421\":1}}],[\"pathparam从路径中获取信息进行校验\",{\"1\":{\"1408\":1}}],[\"path>指定了要将文件或目录复制到当前镜像的文件系统中的路径\",{\"1\":{\"1111\":1}}],[\"path>指定了要复制的文件或目录在源容器中的路径\",{\"1\":{\"1111\":1}}],[\"path>\",{\"1\":{\"1111\":2}}],[\"pathitem\",{\"1\":{\"1032\":3}}],[\"pathitem>\",{\"1\":{\"1032\":1}}],[\"pathitem>>\",{\"1\":{\"1032\":1}}],[\"pathname\",{\"1\":{\"977\":1,\"1032\":1}}],[\"path=http\",{\"1\":{\"1283\":1}}],[\"path=$path\",{\"1\":{\"1182\":1,\"1458\":2}}],[\"path=$maven\",{\"1\":{\"1130\":1}}],[\"path=$java\",{\"1\":{\"1130\":1}}],[\"path=\",{\"1\":{\"643\":1,\"679\":1,\"974\":3,\"975\":1,\"1130\":3,\"1188\":1,\"1513\":2}}],[\"path4\",{\"1\":{\"592\":2}}],[\"pathwithinapplication\",{\"1\":{\"471\":1}}],[\"pathmatchers\",{\"1\":{\"467\":2,\"1031\":1}}],[\"pathmatcher\",{\"1\":{\"422\":3}}],[\"path\",{\"1\":{\"179\":4,\"348\":1,\"422\":2,\"456\":1,\"594\":1,\"596\":7,\"643\":1,\"974\":2,\"976\":1,\"1025\":4,\"1026\":4,\"1105\":2,\"1414\":1,\"1415\":3,\"1522\":4,\"1579\":1,\"1580\":1,\"1582\":4,\"1583\":9,\"1607\":2}}],[\"pagenum\",{\"1\":{\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1622\":1,\"1628\":1,\"1635\":1}}],[\"pageno\",{\"1\":{\"1455\":1}}],[\"pageinterceptor\",{\"1\":{\"853\":1}}],[\"pagehelper\",{\"1\":{\"853\":1}}],[\"pagesize\",{\"1\":{\"1248\":2,\"1455\":1,\"1541\":1,\"1550\":1,\"1561\":1,\"1572\":1,\"1592\":1,\"1603\":1,\"1613\":1,\"1622\":1,\"1628\":1,\"1635\":1}}],[\"pages\",{\"1\":{\"651\":1,\"674\":1,\"1613\":1,\"1622\":1}}],[\"page\",{\"1\":{\"255\":9,\"1210\":1,\"1211\":2,\"1513\":1,\"1586\":5,\"1597\":1,\"1613\":1}}],[\"parsetoken\",{\"1\":{\"1345\":2}}],[\"parsearray\",{\"1\":{\"1245\":1}}],[\"parselong\",{\"1\":{\"911\":2,\"1345\":1}}],[\"parsedtoken\",{\"1\":{\"1345\":2}}],[\"parsed\",{\"1\":{\"852\":2}}],[\"parseobject\",{\"1\":{\"786\":1,\"1245\":1,\"1480\":1}}],[\"parsefloat\",{\"1\":{\"649\":1}}],[\"parse\",{\"0\":{\"1149\":1},\"1\":{\"486\":1,\"487\":1,\"649\":2,\"852\":5,\"860\":1,\"930\":1,\"1149\":4}}],[\"parsers\",{\"1\":{\"1345\":4}}],[\"parser\",{\"1\":{\"486\":1,\"1345\":4}}],[\"parseint\",{\"1\":{\"255\":2,\"649\":2}}],[\"partprobe\",{\"1\":{\"1197\":1}}],[\"partial<appconfig>\",{\"1\":{\"985\":1}}],[\"partitions\",{\"1\":{\"804\":2}}],[\"partitionsfor\",{\"1\":{\"801\":1,\"802\":1}}],[\"partition数量\",{\"1\":{\"804\":1}}],[\"partitioner\",{\"1\":{\"801\":1,\"802\":2}}],[\"partitioning\",{\"1\":{\"792\":1}}],[\"part\",{\"1\":{\"438\":1,\"1445\":1}}],[\"parentname\",{\"1\":{\"1582\":4}}],[\"parentnode\",{\"1\":{\"1036\":3}}],[\"parentid\",{\"1\":{\"672\":4,\"1036\":4,\"1579\":1,\"1580\":1,\"1582\":4,\"1607\":2}}],[\"parent\",{\"1\":{\"411\":4,\"537\":2,\"672\":9,\"716\":2,\"1034\":1,\"1058\":2,\"1445\":1}}],[\"parentcontextapplicationcontextinitializer父上下文初始化器暂存父上下文\",{\"1\":{\"389\":1}}],[\"parentauthenticationmanager\",{\"1\":{\"330\":1}}],[\"param>\",{\"1\":{\"652\":2}}],[\"paramvovalidator\",{\"1\":{\"379\":1}}],[\"parametertypes\",{\"1\":{\"911\":2}}],[\"parametertool\",{\"1\":{\"791\":1,\"792\":6}}],[\"parameterhandler\",{\"1\":{\"853\":1}}],[\"parameters\",{\"1\":{\"410\":1,\"411\":1,\"1215\":1}}],[\"parameter\",{\"1\":{\"345\":2,\"852\":2,\"924\":2,\"1531\":1,\"1532\":1}}],[\"param2\",{\"1\":{\"315\":1}}],[\"param\",{\"1\":{\"249\":6,\"250\":2,\"413\":1,\"652\":2,\"672\":4,\"719\":2,\"780\":12,\"801\":1,\"804\":3,\"871\":1,\"911\":2,\"1013\":6,\"1036\":3,\"1526\":1}}],[\"paramsexample\",{\"1\":{\"975\":1}}],[\"params\",{\"1\":{\"51\":2,\"255\":6,\"649\":6,\"758\":3,\"759\":4,\"760\":4,\"1251\":4,\"1480\":1,\"1635\":1}}],[\"paramsserializer\",{\"1\":{\"51\":1}}],[\"parallel\",{\"1\":{\"243\":2,\"1311\":2}}],[\"parnew\",{\"1\":{\"243\":1}}],[\"pausejob\",{\"1\":{\"1013\":1}}],[\"pause\",{\"1\":{\"113\":1,\"218\":1,\"1170\":6}}],[\"paxos\",{\"1\":{\"97\":1}}],[\"pass=123456\",{\"1\":{\"1125\":1}}],[\"passwd中\",{\"1\":{\"1177\":1}}],[\"passwd\",{\"1\":{\"792\":1,\"1129\":1}}],[\"passworddecoderfilter\",{\"1\":{\"1513\":1}}],[\"password>\",{\"1\":{\"1202\":2}}],[\"password=minio\",{\"1\":{\"1131\":1}}],[\"password=admin\",{\"1\":{\"1126\":1}}],[\"password=123456\",{\"1\":{\"1120\":1,\"1121\":2,\"1132\":1,\"1137\":1,\"1140\":3,\"1141\":1}}],[\"password=$\",{\"1\":{\"850\":1}}],[\"passwordencoder\",{\"1\":{\"330\":2,\"333\":1,\"1518\":1}}],[\"password\",{\"1\":{\"181\":4,\"360\":1,\"595\":2,\"723\":1,\"850\":1,\"924\":1,\"1056\":3,\"1120\":1,\"1127\":2,\"1139\":1,\"1140\":2,\"1141\":9,\"1177\":1,\"1514\":1,\"1515\":3,\"1518\":1,\"1539\":1,\"1544\":1,\"1548\":1,\"1575\":1}}],[\"passing\",{\"1\":{\"647\":1}}],[\"passes\",{\"1\":{\"399\":1}}],[\"pass\",{\"1\":{\"36\":3,\"1026\":2,\"1210\":7,\"1211\":2,\"1445\":1}}],[\"pure\",{\"1\":{\"1248\":1}}],[\"pubcomp\",{\"1\":{\"1275\":7}}],[\"pubrel\",{\"1\":{\"1275\":2}}],[\"pubrec\",{\"1\":{\"1275\":2}}],[\"publish发布消息\",{\"1\":{\"1349\":1}}],[\"publisher<t>\",{\"1\":{\"531\":1}}],[\"publisher<void>\",{\"1\":{\"509\":1}}],[\"publisher\",{\"0\":{\"531\":1},\"1\":{\"509\":2,\"535\":5,\"556\":5}}],[\"publishevent\",{\"1\":{\"413\":2}}],[\"publishcontext\",{\"1\":{\"411\":1}}],[\"publish\",{\"1\":{\"397\":1,\"411\":1,\"1127\":6,\"1130\":4,\"1139\":1,\"1275\":1,\"1286\":1}}],[\"public<\",{\"1\":{\"49\":2}}],[\"publickey\",{\"1\":{\"32\":1}}],[\"public\",{\"1\":{\"9\":3,\"106\":1,\"116\":1,\"202\":2,\"210\":4,\"234\":2,\"236\":2,\"241\":3,\"249\":1,\"250\":1,\"251\":1,\"252\":3,\"255\":6,\"256\":1,\"326\":1,\"329\":3,\"331\":2,\"334\":1,\"343\":1,\"345\":2,\"346\":1,\"353\":2,\"354\":8,\"360\":1,\"377\":7,\"378\":2,\"379\":1,\"397\":2,\"399\":1,\"410\":2,\"411\":1,\"413\":10,\"421\":10,\"422\":2,\"430\":4,\"433\":1,\"438\":1,\"441\":1,\"450\":1,\"456\":1,\"467\":1,\"473\":1,\"476\":3,\"480\":2,\"490\":1,\"491\":1,\"505\":4,\"509\":1,\"513\":2,\"530\":5,\"531\":2,\"535\":1,\"537\":1,\"556\":4,\"557\":4,\"589\":1,\"594\":3,\"602\":20,\"621\":1,\"632\":9,\"646\":2,\"647\":3,\"648\":4,\"652\":11,\"657\":3,\"658\":8,\"672\":1,\"711\":1,\"719\":5,\"780\":3,\"786\":1,\"792\":6,\"801\":14,\"804\":3,\"833\":1,\"852\":5,\"853\":1,\"858\":2,\"869\":1,\"871\":1,\"900\":10,\"911\":6,\"914\":3,\"982\":2,\"1013\":4,\"1031\":1,\"1032\":3,\"1201\":1,\"1202\":3,\"1244\":1,\"1247\":1,\"1249\":1,\"1256\":6,\"1257\":2,\"1296\":1,\"1320\":1,\"1345\":4,\"1352\":1,\"1353\":1,\"1383\":1,\"1397\":1,\"1445\":5,\"1446\":1,\"1450\":5,\"1451\":3,\"1480\":2,\"1517\":2,\"1518\":1,\"1519\":4,\"1521\":2,\"1522\":1,\"1523\":3,\"1525\":2,\"1526\":4}}],[\"pub\",{\"1\":{\"290\":3,\"297\":5}}],[\"push命令\",{\"1\":{\"1151\":1}}],[\"push直接推到仓库\",{\"1\":{\"1093\":1}}],[\"pushconsumer\",{\"1\":{\"914\":1}}],[\"pushdelaytaskexecuteengine\",{\"1\":{\"893\":1}}],[\"push\",{\"0\":{\"1097\":1},\"1\":{\"287\":3,\"302\":1,\"318\":2,\"914\":1,\"1097\":2,\"1144\":1,\"1215\":4,\"1425\":1}}],[\"putifabsent\",{\"1\":{\"1415\":1}}],[\"putorderedobject\",{\"0\":{\"258\":1}}],[\"putall\",{\"1\":{\"255\":1,\"345\":1,\"852\":1,\"1345\":1}}],[\"put\",{\"1\":{\"236\":5,\"377\":2,\"383\":4,\"434\":4,\"439\":1,\"602\":1,\"647\":2,\"648\":1,\"658\":2,\"748\":1,\"759\":1,\"773\":1,\"774\":1,\"778\":1,\"792\":6,\"801\":25,\"860\":1,\"1013\":1,\"1251\":3,\"1345\":4,\"1513\":3,\"1540\":1,\"1544\":1,\"1549\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1560\":1,\"1571\":1,\"1575\":1,\"1580\":1,\"1586\":9,\"1591\":1,\"1592\":2,\"1602\":1,\"1612\":1}}],[\"pullmessageprocessor\",{\"1\":{\"921\":1}}],[\"pullmessageservice\",{\"1\":{\"914\":1,\"920\":1}}],[\"pullrequestholdservice\",{\"1\":{\"921\":1}}],[\"pullrequest\",{\"1\":{\"920\":1}}],[\"pullapiwrapper\",{\"1\":{\"914\":3}}],[\"pull\",{\"1\":{\"43\":1,\"399\":1,\"914\":1,\"1123\":4,\"1144\":1,\"1200\":1}}],[\"policy\",{\"1\":{\"1201\":1}}],[\"pollconsumer\",{\"1\":{\"814\":1}}],[\"pollandinvoke\",{\"1\":{\"814\":1}}],[\"poll\",{\"1\":{\"801\":1,\"802\":1,\"815\":1}}],[\"poller\",{\"1\":{\"683\":1}}],[\"poll方法若队列已空\",{\"1\":{\"239\":1}}],[\"pod中容器使用同一网络命名空间\",{\"1\":{\"1174\":1}}],[\"pod中容器共享pause容器的网络命名空间和虚拟网络设备veth\",{\"0\":{\"1170\":1}}],[\"pod中的容器的\",{\"1\":{\"1168\":1}}],[\"pod中的容器可以挂载共享的存储卷\",{\"1\":{\"1161\":1}}],[\"pod中的所有容器共享相同的网络命名空间\",{\"1\":{\"1161\":1}}],[\"pod容器\",{\"0\":{\"1168\":1}}],[\"pod的ip与容器内部ip\",{\"0\":{\"1165\":1}}],[\"pod具有更丰富的功能和可扩展性\",{\"1\":{\"1164\":1}}],[\"pod更适用于分布式环境中的容器编排和管理\",{\"1\":{\"1164\":1}}],[\"pod与docker\",{\"0\":{\"1164\":1}}],[\"pod在kubernetes中不是一个配置文件\",{\"1\":{\"1163\":1}}],[\"pod工作原理\",{\"0\":{\"1162\":1}}],[\"pod是kubernetes中的核心概念\",{\"1\":{\"1161\":1}}],[\"pod是可扩展的\",{\"1\":{\"1161\":1}}],[\"pod是最小的可调度和可部署的单元\",{\"1\":{\"1161\":1}}],[\"pod通过调度器\",{\"1\":{\"1161\":1}}],[\"pod作为一个整体具有生命周期\",{\"1\":{\"1161\":1}}],[\"pod可以通过配置文件\",{\"1\":{\"1163\":1}}],[\"pod可以理解为一个配置文件吗\",{\"0\":{\"1163\":1}}],[\"pod可以包含一个或多个容器\",{\"1\":{\"1161\":1}}],[\"pod可以看作是一个或多个相关容器的组合\",{\"1\":{\"1161\":1}}],[\"pod\",{\"0\":{\"1161\":1,\"1166\":1},\"1\":{\"1159\":2,\"1167\":7,\"1170\":9}}],[\"pods\",{\"1\":{\"1159\":1}}],[\"pojomethodmapping\",{\"1\":{\"1415\":2}}],[\"pojomethodmapping方法映射\",{\"1\":{\"1415\":1}}],[\"pojo\",{\"1\":{\"792\":3,\"1414\":2,\"1515\":2}}],[\"potentially\",{\"1\":{\"411\":2}}],[\"powi\",{\"1\":{\"295\":2}}],[\"pointcutmethod\",{\"1\":{\"382\":1}}],[\"pointcut注解的方法\",{\"1\":{\"382\":1}}],[\"pointcut\",{\"1\":{\"382\":2,\"911\":3}}],[\"pointcut用于方法上\",{\"1\":{\"382\":1}}],[\"point<f32>\",{\"1\":{\"295\":2}}],[\"point<t>\",{\"1\":{\"295\":3}}],[\"point\",{\"1\":{\"282\":1,\"295\":1,\"386\":1,\"1421\":1,\"1445\":3}}],[\"pointer\",{\"1\":{\"121\":1}}],[\"pokercard\",{\"1\":{\"275\":3}}],[\"pokersuit\",{\"1\":{\"275\":3}}],[\"possible\",{\"1\":{\"1445\":1}}],[\"post认证\",{\"1\":{\"1616\":2}}],[\"posthandle\",{\"1\":{\"1259\":1}}],[\"postgresqlschemametadata包含rdbdatabasemetadata\",{\"1\":{\"1299\":1}}],[\"postgresql\",{\"1\":{\"1139\":1}}],[\"postgres\",{\"1\":{\"1139\":7,\"1302\":1}}],[\"post等\",{\"1\":{\"725\":1}}],[\"postmapping\",{\"1\":{\"360\":1}}],[\"postprocessafterinitialization调用register\",{\"1\":{\"1348\":1}}],[\"postprocessafterinitialization\",{\"1\":{\"433\":1,\"1345\":1}}],[\"postprocessorname\",{\"1\":{\"399\":4}}],[\"postprocessornames\",{\"1\":{\"399\":8}}],[\"postprocessor\",{\"1\":{\"399\":4}}],[\"postprocessorregistrationdelegate\",{\"0\":{\"483\":1},\"1\":{\"397\":1,\"399\":3,\"482\":1}}],[\"postprocessbeandefinitionregistry\",{\"1\":{\"399\":1,\"486\":1}}],[\"postprocessbeandefinitionregistry是一个拓展\",{\"1\":{\"399\":1}}],[\"postprocessbeanfactory\",{\"1\":{\"397\":2,\"399\":1}}],[\"postprocesspropertyvalues\",{\"1\":{\"359\":1}}],[\"postprocessproperties\",{\"1\":{\"359\":1}}],[\"postprocess\",{\"1\":{\"329\":2}}],[\"postconstruct\",{\"1\":{\"210\":1,\"441\":2,\"719\":1,\"1249\":1}}],[\"post\",{\"1\":{\"133\":2,\"297\":1,\"397\":2,\"399\":3,\"438\":1,\"758\":5,\"759\":4,\"760\":2,\"945\":1,\"991\":3,\"1025\":1,\"1026\":1,\"1248\":2,\"1455\":1,\"1513\":1,\"1531\":1,\"1539\":1,\"1548\":1,\"1559\":1,\"1566\":1,\"1570\":1,\"1579\":1,\"1586\":8,\"1590\":1,\"1592\":3,\"1601\":1,\"1606\":1,\"1611\":1,\"1616\":2,\"1621\":1,\"1641\":1}}],[\"postbuffer\",{\"1\":{\"52\":1}}],[\"position=522751320\",{\"1\":{\"13\":1}}],[\"pom\",{\"0\":{\"44\":1},\"1\":{\"1201\":1}}],[\"populatebean\",{\"1\":{\"440\":1}}],[\"populated\",{\"1\":{\"386\":1}}],[\"pop从数组尾部弹出元素\",{\"1\":{\"287\":1}}],[\"pop\",{\"1\":{\"43\":1,\"287\":2}}],[\"pool\",{\"0\":{\"1382\":1},\"1\":{\"33\":1,\"596\":1,\"717\":3,\"850\":4,\"1515\":2}}],[\"port进行服务之间的通信\",{\"1\":{\"1161\":1}}],[\"port=9200\",{\"1\":{\"1137\":1}}],[\"port=3306\",{\"1\":{\"1120\":1,\"1121\":2,\"1137\":1}}],[\"ports字段可以包含多个端口定义\",{\"1\":{\"1171\":1}}],[\"ports字段是service对象中用于定义要公开的端口和与之相关的配置的部分\",{\"1\":{\"1171\":1}}],[\"ports\",{\"1\":{\"1120\":2,\"1122\":1,\"1133\":3,\"1139\":4,\"1171\":1,\"1475\":1}}],[\"portinuseexception\",{\"1\":{\"456\":1}}],[\"port\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"34\":1,\"456\":1,\"595\":1,\"850\":1,\"924\":1,\"1026\":1,\"1139\":2,\"1171\":2,\"1210\":1,\"1514\":1,\"1515\":1}}],[\"pr<\",{\"1\":{\"1202\":2}}],[\"prs\",{\"1\":{\"399\":1}}],[\"pr\",{\"1\":{\"399\":1}}],[\"prehandle\",{\"1\":{\"1525\":1}}],[\"prematurely\",{\"1\":{\"1445\":1}}],[\"premature\",{\"1\":{\"1445\":1}}],[\"pretty=oneline\",{\"1\":{\"1147\":1}}],[\"prependhello\",{\"1\":{\"993\":4}}],[\"prepared\",{\"1\":{\"1515\":3}}],[\"preparewebapplicationcontext\",{\"0\":{\"448\":1},\"1\":{\"447\":1}}],[\"prepare\",{\"1\":{\"397\":3,\"853\":1}}],[\"preparebeanfactory\",{\"0\":{\"398\":1},\"1\":{\"397\":2}}],[\"preparerefresh\",{\"1\":{\"397\":2}}],[\"preparecontext\",{\"0\":{\"451\":1},\"1\":{\"394\":1,\"450\":1}}],[\"prepareenvironment\",{\"0\":{\"395\":1},\"1\":{\"394\":1}}],[\"predicates\",{\"1\":{\"1513\":2}}],[\"predicate<string>\",{\"1\":{\"491\":1}}],[\"predicatedefinition\",{\"1\":{\"468\":1}}],[\"predestroy\",{\"1\":{\"441\":2}}],[\"presentedpassword+salt\",{\"1\":{\"1518\":1}}],[\"presentedpassword\",{\"1\":{\"1518\":5}}],[\"present\",{\"1\":{\"441\":1}}],[\"presetparam4\",{\"1\":{\"377\":1}}],[\"presetparam3\",{\"1\":{\"377\":1}}],[\"presetparam2\",{\"1\":{\"377\":1}}],[\"presetparam\",{\"1\":{\"377\":1}}],[\"precedence\",{\"1\":{\"441\":1}}],[\"preflightrequesthandler\",{\"1\":{\"513\":1}}],[\"prefix的区别\",{\"0\":{\"751\":1}}],[\"prefix\",{\"1\":{\"438\":1,\"751\":1,\"911\":3,\"1514\":1}}],[\"prefer\",{\"1\":{\"1210\":1,\"1211\":1}}],[\"preferipv4stack=true\",{\"1\":{\"1139\":1}}],[\"preferrednetworks=172\",{\"1\":{\"1137\":1}}],[\"preferredauthentications\",{\"1\":{\"32\":1}}],[\"prefernamedirectory\",{\"1\":{\"103\":1}}],[\"pre\",{\"1\":{\"438\":1,\"1122\":1,\"1215\":1}}],[\"preinstantiatesingletons\",{\"1\":{\"438\":1}}],[\"prevent\",{\"0\":{\"979\":1},\"1\":{\"411\":1}}],[\"previousconfig\",{\"1\":{\"329\":3}}],[\"previousorder\",{\"1\":{\"329\":4}}],[\"prelude\",{\"1\":{\"286\":1,\"308\":1}}],[\"prerun\",{\"1\":{\"164\":1}}],[\"primary\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"primary类似\",{\"1\":{\"398\":1}}],[\"privileges\",{\"1\":{\"1141\":1}}],[\"privileged=true\",{\"1\":{\"1130\":1}}],[\"privileged\",{\"1\":{\"1093\":1,\"1122\":1,\"1130\":2}}],[\"privilegedaction<object>\",{\"1\":{\"438\":1}}],[\"privilegedaction<boolean>\",{\"1\":{\"438\":1}}],[\"privatekey\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"privateroute\",{\"1\":{\"977\":1}}],[\"private\",{\"1\":{\"9\":2,\"192\":1,\"236\":6,\"241\":2,\"255\":3,\"334\":2,\"346\":1,\"353\":1,\"354\":1,\"399\":1,\"406\":1,\"413\":2,\"422\":1,\"446\":1,\"447\":1,\"467\":9,\"476\":1,\"505\":1,\"602\":2,\"632\":1,\"648\":1,\"652\":1,\"658\":3,\"672\":2,\"719\":2,\"780\":4,\"792\":4,\"852\":2,\"872\":1,\"900\":3,\"902\":1,\"911\":1,\"1031\":6,\"1032\":5,\"1036\":2,\"1249\":1,\"1256\":4,\"1345\":3,\"1445\":4,\"1522\":1,\"1523\":1,\"1616\":1}}],[\"priorityorderedpostprocessors\",{\"1\":{\"399\":4}}],[\"priorityordered\",{\"1\":{\"399\":7}}],[\"principal\",{\"0\":{\"344\":1},\"1\":{\"345\":11}}],[\"print$1\",{\"1\":{\"1087\":1}}],[\"printwriter\",{\"1\":{\"652\":1}}],[\"printcrl\",{\"1\":{\"623\":1}}],[\"printcertreq\",{\"1\":{\"623\":1}}],[\"printcert\",{\"1\":{\"623\":1}}],[\"printbanner\",{\"1\":{\"394\":1}}],[\"printbook\",{\"1\":{\"151\":3}}],[\"print\",{\"1\":{\"275\":3,\"277\":2,\"647\":1,\"649\":1,\"792\":1,\"924\":1,\"1087\":1,\"1130\":1,\"1451\":1}}],[\"printlambdamethodname\",{\"1\":{\"252\":2}}],[\"println\",{\"1\":{\"9\":1,\"116\":1,\"117\":1,\"122\":2,\"124\":1,\"127\":1,\"128\":1,\"129\":1,\"133\":1,\"139\":7,\"148\":3,\"154\":5,\"157\":2,\"158\":2,\"179\":2,\"189\":1,\"190\":3,\"234\":6,\"236\":1,\"241\":4,\"252\":1,\"269\":1,\"274\":1,\"275\":1,\"277\":2,\"279\":1,\"280\":1,\"282\":13,\"283\":1,\"285\":3,\"287\":1,\"288\":1,\"290\":1,\"295\":1,\"296\":2,\"297\":3,\"304\":3,\"306\":1,\"309\":1,\"312\":1,\"318\":6,\"319\":1,\"353\":1,\"354\":6,\"377\":1,\"421\":6,\"647\":1,\"648\":5,\"652\":3,\"657\":1,\"658\":3,\"719\":3,\"1256\":2,\"1257\":2}}],[\"printsb\",{\"1\":{\"241\":3}}],[\"printstacktrace\",{\"1\":{\"236\":2,\"648\":2,\"786\":1,\"1032\":2,\"1451\":1}}],[\"printslice\",{\"1\":{\"152\":8}}],[\"printf\",{\"1\":{\"131\":2,\"133\":1,\"135\":1,\"138\":1,\"140\":7,\"141\":1,\"143\":3,\"145\":1,\"146\":3,\"151\":4,\"152\":3,\"155\":1,\"156\":1}}],[\"pro\",{\"1\":{\"1283\":1}}],[\"profile=system\",{\"1\":{\"1211\":1}}],[\"profile\",{\"1\":{\"1182\":2,\"1458\":2,\"1486\":1}}],[\"profile只在会话开始时被读取\",{\"1\":{\"1118\":1}}],[\"profile和\",{\"1\":{\"1118\":1}}],[\"profile>\",{\"1\":{\"1078\":3,\"1079\":1,\"1202\":2}}],[\"profiles>\",{\"1\":{\"1078\":1,\"1202\":1}}],[\"profiles\",{\"1\":{\"1078\":6,\"1079\":1}}],[\"profile的使用\",{\"0\":{\"1078\":1}}],[\"promise息息相关\",{\"1\":{\"1000\":1}}],[\"promise对象本身是同步的\",{\"1\":{\"1000\":1}}],[\"promise<void>\",{\"1\":{\"985\":2}}],[\"prodid=2\",{\"1\":{\"982\":1}}],[\"prodid=$\",{\"1\":{\"982\":1}}],[\"prod\",{\"1\":{\"982\":1}}],[\"produceoutput\",{\"1\":{\"1383\":2}}],[\"producer\",{\"1\":{\"802\":1}}],[\"producerconfig\",{\"1\":{\"801\":13}}],[\"producerfactory<integer\",{\"1\":{\"801\":1}}],[\"producerfactory<string\",{\"1\":{\"801\":2}}],[\"producerfactorywithtransaction\",{\"1\":{\"801\":2}}],[\"producerfactory\",{\"1\":{\"801\":8}}],[\"productkey\",{\"1\":{\"1486\":1}}],[\"productservice\",{\"1\":{\"1482\":1}}],[\"productoperatormap\",{\"1\":{\"1342\":1}}],[\"productwrapper\",{\"1\":{\"786\":4}}],[\"product\",{\"1\":{\"716\":2,\"982\":2,\"1058\":5,\"1304\":3}}],[\"productids\",{\"1\":{\"786\":3}}],[\"productid\",{\"1\":{\"649\":2,\"1373\":1,\"1482\":1}}],[\"productidg\",{\"1\":{\"649\":4}}],[\"provide\",{\"1\":{\"411\":1}}],[\"provided\",{\"1\":{\"345\":2,\"1518\":1}}],[\"providers\",{\"1\":{\"1359\":1}}],[\"providersettings是容器管理的单例对象\",{\"1\":{\"338\":1}}],[\"provider\",{\"1\":{\"481\":1,\"1312\":2}}],[\"providermanager找到合适的provider对authentication处理\",{\"1\":{\"346\":1}}],[\"providermanager\",{\"1\":{\"333\":1}}],[\"proto文件依赖地址\",{\"1\":{\"643\":1}}],[\"proto\",{\"1\":{\"643\":5}}],[\"protoc\",{\"1\":{\"642\":1,\"643\":4}}],[\"protocolsupporthandler\",{\"0\":{\"1358\":1}}],[\"protocolsupportprovider\",{\"1\":{\"1357\":1}}],[\"protocolsupportloaderprovider\",{\"1\":{\"1357\":1}}],[\"protocolsupportloader\",{\"0\":{\"1357\":1}}],[\"protocolsupportmanager\",{\"0\":{\"1355\":1}}],[\"protocolsupports\",{\"1\":{\"1342\":1}}],[\"protocolbuffers\",{\"1\":{\"642\":1}}],[\"protocol\",{\"0\":{\"745\":1,\"1354\":1,\"1424\":1},\"1\":{\"450\":1,\"1032\":2,\"1171\":2,\"1305\":1,\"1408\":1}}],[\"protobuf\",{\"1\":{\"642\":1}}],[\"proto3\",{\"0\":{\"641\":1}}],[\"prototype\",{\"1\":{\"330\":1,\"932\":2,\"991\":2}}],[\"protected\",{\"0\":{\"24\":1},\"1\":{\"24\":1,\"116\":1,\"334\":1,\"345\":1,\"383\":1,\"397\":1,\"411\":2,\"434\":1,\"435\":1,\"445\":1,\"494\":1,\"632\":1,\"658\":1,\"852\":1,\"1259\":3,\"1412\":2,\"1445\":1,\"1518\":1}}],[\"props\",{\"1\":{\"801\":31,\"971\":6}}],[\"propsprovider\",{\"1\":{\"505\":2}}],[\"proposal\",{\"1\":{\"399\":1}}],[\"propagate\",{\"1\":{\"397\":1}}],[\"propagation\",{\"1\":{\"202\":4}}],[\"propertymetadata\",{\"1\":{\"1480\":1,\"1483\":1}}],[\"propertymap\",{\"1\":{\"649\":1}}],[\"propertyname\",{\"1\":{\"1479\":1}}],[\"property>\",{\"1\":{\"1079\":1}}],[\"property=\",{\"1\":{\"1059\":1}}],[\"propertycountquery\",{\"1\":{\"786\":7}}],[\"propertycountvo\",{\"1\":{\"786\":8}}],[\"propertyaccessorfactory\",{\"1\":{\"410\":1}}],[\"propertyeditor的一个子类\",{\"1\":{\"379\":1}}],[\"propertyeditor\",{\"1\":{\"379\":3}}],[\"propertyvalues\",{\"1\":{\"359\":1,\"410\":1}}],[\"propertydescriptor\",{\"1\":{\"359\":1}}],[\"property\",{\"1\":{\"358\":2,\"649\":1,\"786\":4,\"852\":5}}],[\"properties>\",{\"1\":{\"1078\":3,\"1079\":1,\"1202\":1}}],[\"properties都有spring\",{\"1\":{\"1078\":1}}],[\"properties及application\",{\"1\":{\"593\":1}}],[\"properties且存在相同配置\",{\"1\":{\"593\":2}}],[\"properties中的配置\",{\"1\":{\"593\":1}}],[\"properties中的配置覆盖\",{\"1\":{\"593\":1}}],[\"properties中都存在时\",{\"1\":{\"593\":1}}],[\"properties但是会被applicatioin\",{\"1\":{\"593\":1}}],[\"properties和application\",{\"1\":{\"593\":1}}],[\"properties和bootstrap\",{\"1\":{\"593\":1}}],[\"properties或yaml配置文件加载优先级\",{\"0\":{\"593\":1}}],[\"properties\",{\"1\":{\"31\":1,\"410\":2,\"505\":4,\"593\":3,\"773\":1,\"802\":2,\"852\":12,\"869\":3,\"872\":12,\"1078\":1,\"1352\":3,\"1353\":9,\"1484\":2,\"1486\":1}}],[\"projects\",{\"1\":{\"399\":1}}],[\"project\",{\"1\":{\"103\":1,\"585\":1,\"707\":1,\"1304\":2}}],[\"proxyfactory\",{\"1\":{\"435\":14}}],[\"proxyfactory继承proxycreatorsupport包含要被代理的对象信息\",{\"1\":{\"383\":1}}],[\"proxytargetclass\",{\"1\":{\"435\":1}}],[\"proxytransactionmanagementconfiguration\",{\"0\":{\"430\":1},\"1\":{\"430\":1}}],[\"proxytypes\",{\"1\":{\"383\":1,\"434\":1}}],[\"proxycallbackfilter\",{\"1\":{\"386\":1}}],[\"proxycreatorsupport\",{\"1\":{\"383\":1}}],[\"proxysuperclass\",{\"1\":{\"386\":2}}],[\"proxybeanmethods\",{\"1\":{\"329\":1,\"330\":1,\"430\":1,\"505\":1}}],[\"proxy\",{\"1\":{\"36\":5,\"383\":5,\"385\":1,\"386\":2,\"434\":5,\"435\":3,\"852\":1,\"900\":8,\"1198\":1,\"1210\":42,\"1211\":10}}],[\"procinst中创建流程实例\",{\"1\":{\"583\":1}}],[\"procinst\",{\"1\":{\"579\":1,\"582\":1,\"703\":1}}],[\"procdef中创建流程定义\",{\"1\":{\"583\":1}}],[\"procdef\",{\"1\":{\"578\":1,\"582\":1,\"702\":1}}],[\"processselectedkey\",{\"1\":{\"1445\":1}}],[\"processselectedkey处理io事件\",{\"1\":{\"1445\":1}}],[\"processselectedkeys\",{\"1\":{\"1445\":2}}],[\"processsocket\",{\"1\":{\"685\":1}}],[\"processdispatchresult\",{\"1\":{\"1259\":1}}],[\"processevents处理连接完成事件\",{\"1\":{\"1382\":1}}],[\"processevents的processsessionrequests处理要添加通道的session请求\",{\"1\":{\"1382\":1}}],[\"processes\",{\"1\":{\"1210\":1}}],[\"processedrequest\",{\"1\":{\"1259\":14}}],[\"processed\",{\"1\":{\"399\":1,\"833\":1}}],[\"processedbeans\",{\"1\":{\"399\":7}}],[\"processbeandefinitions\",{\"1\":{\"859\":1}}],[\"processor\",{\"0\":{\"691\":1},\"1\":{\"1419\":6}}],[\"processors\",{\"1\":{\"397\":2,\"399\":8}}],[\"processgroupimports\",{\"1\":{\"490\":1,\"491\":1}}],[\"processimports\",{\"0\":{\"489\":1},\"1\":{\"491\":1}}],[\"processingcontext\",{\"1\":{\"406\":2}}],[\"processing\",{\"1\":{\"397\":1,\"833\":1,\"1259\":2,\"1445\":1}}],[\"processconfigurationclass\",{\"1\":{\"487\":1}}],[\"processrequest\",{\"1\":{\"401\":1}}],[\"process\",{\"1\":{\"397\":1,\"439\":1,\"490\":1,\"491\":1,\"690\":1,\"691\":1,\"792\":3,\"995\":2,\"1259\":1,\"1445\":2}}],[\"proceedingjoinpoint\",{\"1\":{\"911\":1}}],[\"proceed\",{\"1\":{\"158\":2,\"911\":1}}],[\"proc\",{\"1\":{\"5\":1,\"17\":1,\"1180\":1,\"1206\":1}}],[\"programming\",{\"0\":{\"3\":1}}],[\"p\",{\"1\":{\"5\":1,\"17\":1,\"59\":1,\"295\":3,\"995\":1,\"1056\":3,\"1058\":3,\"1109\":1,\"1116\":1,\"1125\":2,\"1126\":2,\"1129\":1,\"1130\":12,\"1131\":2,\"1132\":4,\"1134\":1,\"1135\":1,\"1136\":4,\"1137\":3,\"1138\":1,\"1140\":3,\"1141\":2,\"1142\":1,\"1187\":1,\"1188\":1,\"1200\":1,\"1215\":2,\"1227\":2,\"1230\":1,\"1283\":1,\"1450\":4}}],[\"psw\",{\"1\":{\"1215\":2}}],[\"ps获取需要构建镜像的容器\",{\"1\":{\"218\":1}}],[\"ps\",{\"1\":{\"5\":1,\"17\":1,\"1087\":3,\"1190\":2,\"1206\":1}}],[\"fs\",{\"1\":{\"1206\":2}}],[\"fsslo\",{\"1\":{\"1130\":1}}],[\"fgluy2x1zgvfy29udgv4df91dwlkdxf1zxj5qw5krmv0y2gbfmv0cje1q3jfumpxef95nvlyvdlfuncaaaaaaacmmbztc29kegx0dfeyyuo2vtvevwmtdnf3\",{\"1\":{\"780\":2}}],[\"f64\",{\"1\":{\"298\":2}}],[\"f32\",{\"1\":{\"295\":2}}],[\"fnmut\",{\"1\":{\"318\":1,\"319\":2}}],[\"fnonce\",{\"1\":{\"318\":3,\"319\":2}}],[\"fn\",{\"0\":{\"318\":1,\"319\":1},\"1\":{\"269\":2,\"271\":1,\"274\":1,\"275\":4,\"277\":3,\"279\":1,\"280\":1,\"282\":4,\"285\":1,\"288\":2,\"290\":3,\"291\":1,\"292\":2,\"295\":3,\"296\":4,\"297\":9,\"298\":9,\"309\":1,\"312\":1,\"315\":1,\"316\":1,\"317\":1,\"318\":11,\"319\":7}}],[\"fuc1\",{\"1\":{\"1484\":1}}],[\"full\",{\"1\":{\"1155\":1}}],[\"fully\",{\"1\":{\"833\":1}}],[\"fullgc\",{\"1\":{\"243\":1}}],[\"funwithparam\",{\"1\":{\"1221\":2}}],[\"fun\",{\"1\":{\"780\":3}}],[\"func\",{\"1\":{\"116\":1,\"117\":1,\"122\":1,\"123\":1,\"124\":1,\"127\":2,\"128\":1,\"129\":1,\"131\":1,\"133\":1,\"135\":1,\"137\":1,\"138\":1,\"139\":11,\"140\":3,\"141\":1,\"143\":1,\"145\":1,\"146\":1,\"148\":1,\"151\":2,\"152\":4,\"154\":1,\"155\":2,\"156\":1,\"157\":3,\"158\":3,\"164\":2,\"179\":4,\"189\":2,\"190\":3,\"252\":3,\"318\":6}}],[\"functiontaskexecutor\",{\"1\":{\"1335\":1}}],[\"functions\",{\"1\":{\"604\":1,\"792\":2,\"1484\":1}}],[\"functional\",{\"1\":{\"604\":1}}],[\"functionalinterface\",{\"1\":{\"249\":1,\"250\":1,\"251\":1,\"252\":1}}],[\"functionalinterface函数式接口注解\",{\"0\":{\"247\":1}}],[\"function<searchhit\",{\"1\":{\"780\":2}}],[\"function<\",{\"1\":{\"249\":2,\"537\":1}}],[\"function<v\",{\"1\":{\"249\":1}}],[\"function<t\",{\"1\":{\"249\":3,\"297\":1}}],[\"function\",{\"0\":{\"249\":1},\"1\":{\"51\":1,\"249\":32,\"647\":1,\"649\":21,\"780\":2,\"792\":1,\"932\":5,\"935\":3,\"943\":1,\"944\":1,\"945\":1,\"947\":1,\"970\":1,\"971\":2,\"974\":1,\"975\":2,\"977\":1,\"985\":1,\"986\":4,\"988\":5,\"991\":7,\"992\":6,\"994\":2,\"995\":3,\"1345\":1,\"1407\":5}}],[\"future<result<boolean>>\",{\"1\":{\"1522\":1}}],[\"future\",{\"0\":{\"574\":1},\"1\":{\"1445\":2,\"1450\":3}}],[\"futuretask\",{\"1\":{\"573\":1}}],[\"futurereturnvalueignored\",{\"1\":{\"509\":1}}],[\"future类获取异步线程结果\",{\"1\":{\"238\":1}}],[\"further\",{\"1\":{\"399\":1,\"486\":1}}],[\"fetchnameserveraddr\",{\"1\":{\"914\":1}}],[\"fetched\",{\"1\":{\"852\":1}}],[\"fetchsource\",{\"1\":{\"780\":1}}],[\"fetch\",{\"0\":{\"954\":1},\"1\":{\"754\":1}}],[\"feature\",{\"0\":{\"326\":1}}],[\"feign传参问题\",{\"0\":{\"608\":1}}],[\"feignclientsregistrar\",{\"1\":{\"607\":1}}],[\"feignclient\",{\"1\":{\"607\":1}}],[\"feign被hystrix包裹\",{\"1\":{\"213\":1}}],[\"feign开启hystrix\",{\"1\":{\"213\":1}}],[\"feign\",{\"0\":{\"606\":1},\"1\":{\"213\":5}}],[\"female\",{\"1\":{\"128\":1}}],[\"fp1\",{\"1\":{\"1484\":1}}],[\"fp\",{\"1\":{\"142\":1}}],[\"fmt\",{\"1\":{\"116\":2,\"117\":3,\"122\":3,\"127\":2,\"129\":2,\"131\":3,\"133\":3,\"135\":2,\"138\":1,\"139\":10,\"140\":9,\"141\":2,\"143\":4,\"145\":2,\"146\":4,\"148\":4,\"151\":5,\"152\":5,\"154\":6,\"155\":2,\"156\":2,\"157\":3,\"158\":4,\"189\":2,\"190\":5,\"296\":1,\"1130\":1}}],[\"flatmapinner<>\",{\"1\":{\"537\":1}}],[\"flatmapinner内部消费者\",{\"1\":{\"537\":1}}],[\"flatmapinner\",{\"1\":{\"537\":2}}],[\"flatmapmain订阅者对象\",{\"1\":{\"537\":1}}],[\"flatmapmain\",{\"1\":{\"537\":3}}],[\"flatmap方法\",{\"0\":{\"536\":1,\"545\":1}}],[\"flatmap\",{\"1\":{\"513\":2,\"1345\":3}}],[\"flag\",{\"1\":{\"173\":1,\"397\":1,\"435\":1,\"648\":4,\"672\":4,\"786\":3,\"982\":1,\"1251\":2,\"1383\":1}}],[\"flags\",{\"1\":{\"173\":1}}],[\"flutter\",{\"0\":{\"926\":1}}],[\"flushconsolidationhandler\",{\"0\":{\"1403\":1}}],[\"flush分析\",{\"0\":{\"1402\":1}}],[\"flush\",{\"1\":{\"1136\":1,\"1141\":1,\"1383\":1,\"1451\":1}}],[\"flushdisktype\",{\"1\":{\"1136\":1}}],[\"flushdns\",{\"1\":{\"30\":1}}],[\"flushall\",{\"1\":{\"908\":1}}],[\"fluxmapmain核心订阅者信息\",{\"1\":{\"556\":1}}],[\"fluxbuffer\",{\"1\":{\"556\":1}}],[\"fluxjust\",{\"1\":{\"556\":2}}],[\"flux方法\",{\"0\":{\"539\":1}}],[\"fluxsink\",{\"0\":{\"525\":1}}],[\"flux\",{\"0\":{\"524\":1,\"544\":1},\"1\":{\"468\":1,\"513\":1,\"1320\":1,\"1345\":2}}],[\"float\",{\"1\":{\"1486\":24}}],[\"float32\",{\"1\":{\"140\":10,\"142\":1,\"156\":3}}],[\"float64\",{\"1\":{\"139\":2}}],[\"flinkconfig\",{\"1\":{\"792\":5}}],[\"flink<\",{\"1\":{\"790\":7}}],[\"flink\",{\"0\":{\"787\":1},\"1\":{\"65\":1,\"790\":7,\"792\":12}}],[\"firechannelread\",{\"1\":{\"1451\":2}}],[\"firefox\",{\"1\":{\"1425\":1}}],[\"firstname\",{\"1\":{\"986\":2}}],[\"first\",{\"1\":{\"249\":4,\"399\":4,\"974\":1,\"1445\":2}}],[\"fi\",{\"1\":{\"1226\":1}}],[\"fish\",{\"1\":{\"988\":3}}],[\"fielddatacache\",{\"1\":{\"786\":1}}],[\"fielddata\",{\"1\":{\"786\":1}}],[\"fieldsort\",{\"1\":{\"1248\":1}}],[\"fieldstrategy\",{\"1\":{\"902\":2}}],[\"fields=name\",{\"1\":{\"776\":1}}],[\"fields\",{\"1\":{\"773\":1}}],[\"field\",{\"1\":{\"748\":1,\"759\":3,\"769\":1,\"770\":2,\"774\":2,\"782\":1,\"786\":1,\"902\":1,\"909\":2}}],[\"fielderrors\",{\"1\":{\"378\":2}}],[\"fix\",{\"1\":{\"852\":1}}],[\"fixedrecvbytebufallocator\",{\"0\":{\"1393\":1}}],[\"fixeddelayrestart\",{\"1\":{\"792\":1}}],[\"fixedinterceptoroffset\",{\"1\":{\"386\":1}}],[\"fixedinterceptormap\",{\"1\":{\"386\":2}}],[\"fixcontextlistener\",{\"1\":{\"451\":1}}],[\"five\",{\"1\":{\"282\":1}}],[\"fibonacci\",{\"1\":{\"155\":4,\"190\":2}}],[\"fiber\",{\"1\":{\"67\":1}}],[\"fine\",{\"1\":{\"438\":1,\"833\":3}}],[\"finishconnect\",{\"1\":{\"1397\":1,\"1445\":2}}],[\"finish\",{\"1\":{\"647\":1,\"1397\":1}}],[\"finishrefresh触发生命周期方法启动监听器容器\",{\"1\":{\"811\":1}}],[\"finishrefresh\",{\"0\":{\"400\":1},\"1\":{\"397\":2}}],[\"finishbeanfactoryinitialization\",{\"1\":{\"397\":2}}],[\"final修饰\",{\"1\":{\"1256\":1}}],[\"finalize\",{\"1\":{\"243\":1}}],[\"finali\",{\"1\":{\"234\":6}}],[\"final\",{\"1\":{\"192\":1,\"255\":1,\"334\":1,\"353\":1,\"399\":1,\"410\":1,\"411\":1,\"413\":1,\"422\":1,\"467\":9,\"476\":1,\"505\":1,\"509\":1,\"535\":1,\"556\":2,\"632\":1,\"647\":2,\"648\":6,\"780\":3,\"792\":2,\"833\":1,\"852\":3,\"911\":1,\"1031\":6,\"1032\":3,\"1036\":3,\"1249\":1,\"1256\":1,\"1345\":2,\"1383\":3,\"1421\":1,\"1445\":12,\"1450\":8,\"1517\":1,\"1519\":1}}],[\"finally\",{\"0\":{\"1252\":1},\"1\":{\"138\":1,\"212\":2,\"346\":1,\"397\":1,\"399\":2,\"456\":1,\"490\":1,\"780\":1,\"852\":4,\"911\":1,\"1252\":1,\"1259\":1,\"1383\":2,\"1419\":1,\"1445\":8,\"1451\":1}}],[\"findandaddclassesinpackagebyfile\",{\"1\":{\"1032\":3}}],[\"findjobinfobyid\",{\"1\":{\"1013\":1}}],[\"findcandidatecomponents\",{\"1\":{\"495\":1}}],[\"findcontext\",{\"1\":{\"456\":1}}],[\"findwebapplicationcontext\",{\"1\":{\"411\":1}}],[\"findbyusername\",{\"1\":{\"348\":2}}],[\"findbyregistrationid\",{\"1\":{\"345\":1}}],[\"find\",{\"1\":{\"22\":2,\"345\":1,\"989\":1,\"1176\":1}}],[\"findstr\",{\"1\":{\"19\":1}}],[\"filtermessagehooklist\",{\"1\":{\"914\":1}}],[\"filter查询\",{\"1\":{\"762\":1}}],[\"filter>\",{\"1\":{\"596\":3,\"652\":1}}],[\"filterwebhandler\",{\"1\":{\"473\":1}}],[\"filteringwebhandler被exceptionhandlingwebhandler装饰\",{\"1\":{\"1262\":1}}],[\"filteringwebhandler是过滤器的核心\",{\"1\":{\"473\":1}}],[\"filterinvocationsecuritymetadatasource包含需校验的路径以及判别逻辑\",{\"1\":{\"336\":1}}],[\"filterdefinition\",{\"1\":{\"468\":1}}],[\"filterregistrationbean=new\",{\"1\":{\"421\":1}}],[\"filterregistrationbean\",{\"1\":{\"421\":6}}],[\"filterconfig\",{\"1\":{\"421\":5,\"652\":1}}],[\"filterchain\",{\"1\":{\"345\":3,\"346\":1,\"421\":6,\"652\":1}}],[\"filterpropertydescriptorsfordependencycheck\",{\"1\":{\"359\":1}}],[\"filteredpds\",{\"1\":{\"359\":4}}],[\"filter\",{\"0\":{\"342\":1,\"420\":1},\"1\":{\"329\":6,\"346\":4,\"421\":2,\"422\":3,\"471\":2,\"473\":1,\"557\":2,\"596\":3,\"652\":6,\"761\":1,\"762\":2,\"767\":2,\"1272\":2,\"1345\":4,\"1523\":2}}],[\"filtersecurityinterceptor\",{\"1\":{\"329\":2,\"342\":1,\"346\":1}}],[\"filters\",{\"1\":{\"111\":1,\"1513\":2,\"1515\":1}}],[\"filename\",{\"1\":{\"1187\":1}}],[\"filenamepattern>\",{\"1\":{\"596\":3}}],[\"file=\",{\"1\":{\"1153\":2}}],[\"file命令中的\",{\"1\":{\"1151\":1}}],[\"filereservedtime\",{\"1\":{\"1136\":1}}],[\"filefilter\",{\"1\":{\"1032\":1}}],[\"filepath\",{\"1\":{\"1032\":2}}],[\"file>\",{\"1\":{\"596\":3,\"1079\":1}}],[\"fileoutputstream=new\",{\"1\":{\"241\":1}}],[\"fileoutputstream\",{\"1\":{\"241\":5}}],[\"file\",{\"1\":{\"241\":2,\"450\":1,\"494\":1,\"593\":3,\"594\":1,\"596\":6,\"852\":2,\"1032\":15,\"1133\":3,\"1206\":1,\"1227\":13,\"1641\":2}}],[\"files挂载\",{\"1\":{\"1140\":1}}],[\"files\",{\"0\":{\"43\":1},\"1\":{\"36\":1,\"1095\":1,\"1140\":4,\"1141\":4}}],[\"f\",{\"1\":{\"19\":1,\"121\":1,\"124\":2,\"129\":2,\"138\":1,\"139\":3,\"140\":3,\"156\":1,\"218\":1,\"284\":1,\"291\":1,\"318\":5,\"319\":9,\"378\":2,\"994\":1,\"1087\":1,\"1123\":16,\"1159\":2,\"1184\":1,\"1187\":1,\"1227\":2,\"1474\":2}}],[\"fds\",{\"1\":{\"1256\":1}}],[\"fd\",{\"1\":{\"9\":1,\"252\":2,\"929\":3,\"1256\":1}}],[\"fri\",{\"1\":{\"656\":2}}],[\"frame\",{\"0\":{\"1242\":1},\"1\":{\"737\":1}}],[\"framemodel\",{\"0\":{\"735\":1}}],[\"frameworkservlet\",{\"0\":{\"411\":1},\"1\":{\"411\":1,\"601\":1}}],[\"framework\",{\"0\":{\"1244\":1},\"1\":{\"399\":1}}],[\"frameoptions\",{\"1\":{\"348\":1}}],[\"france\",{\"1\":{\"154\":1}}],[\"frontend\",{\"1\":{\"1122\":2}}],[\"frozenquantity\",{\"1\":{\"236\":5}}],[\"fromat\",{\"1\":{\"1513\":1,\"1514\":1}}],[\"fromannotatedpojo\",{\"0\":{\"1415\":1},\"1\":{\"1415\":1}}],[\"from参数指定了要复制文件或目录所在的源容器\",{\"1\":{\"1111\":1}}],[\"from=<source\",{\"1\":{\"1111\":1}}],[\"from指令用于从另一个容器中复制文件或目录到当前镜像的文件系统中\",{\"1\":{\"1111\":1}}],[\"fromsource\",{\"1\":{\"792\":1}}],[\"frommap\",{\"1\":{\"792\":1}}],[\"from+size\",{\"0\":{\"765\":1}}],[\"fromdirect\",{\"1\":{\"509\":1}}],[\"fromiterable方法\",{\"0\":{\"550\":1}}],[\"fromiterable\",{\"1\":{\"468\":1,\"513\":1,\"1345\":2}}],[\"from\",{\"0\":{\"7\":1,\"1103\":1,\"1111\":1},\"1\":{\"218\":1,\"264\":1,\"267\":1,\"269\":2,\"270\":1,\"271\":4,\"277\":2,\"282\":1,\"292\":1,\"295\":2,\"297\":3,\"311\":3,\"410\":1,\"439\":1,\"486\":1,\"647\":1,\"716\":5,\"749\":1,\"765\":1,\"783\":1,\"786\":1,\"899\":1,\"914\":1,\"924\":1,\"973\":2,\"977\":1,\"992\":8,\"994\":4,\"995\":2,\"1048\":2,\"1058\":10,\"1059\":1,\"1113\":1,\"1114\":1,\"1115\":1,\"1116\":1,\"1130\":1,\"1140\":1,\"1243\":1,\"1248\":3,\"1259\":1,\"1292\":2,\"1397\":1,\"1445\":3,\"1515\":1}}],[\"freezeproxy\",{\"1\":{\"435\":1}}],[\"free\",{\"0\":{\"1179\":1},\"1\":{\"5\":1,\"17\":1,\"264\":2,\"1179\":2,\"1445\":1}}],[\"foxiswho\",{\"1\":{\"1136\":2}}],[\"foo\",{\"1\":{\"284\":2,\"989\":5,\"991\":2,\"992\":34,\"993\":4,\"994\":9,\"995\":6}}],[\"followed\",{\"1\":{\"250\":2}}],[\"follower\",{\"1\":{\"98\":1}}],[\"following\",{\"0\":{\"43\":1}}],[\"forum\",{\"1\":{\"1248\":1}}],[\"forwarded\",{\"1\":{\"1210\":11,\"1211\":2}}],[\"forname\",{\"1\":{\"871\":1,\"1032\":1}}],[\"forking\",{\"1\":{\"730\":1}}],[\"fork无法分配问题\",{\"0\":{\"5\":1}}],[\"forlanguagetag\",{\"1\":{\"557\":1}}],[\"forbeanpropertyaccess\",{\"1\":{\"410\":1}}],[\"foreach\",{\"1\":{\"236\":1,\"490\":1,\"491\":1,\"494\":1,\"672\":2,\"902\":1,\"1480\":1}}],[\"forceclose\",{\"1\":{\"1450\":2}}],[\"forceflush\",{\"1\":{\"1397\":1,\"1445\":2}}],[\"forceeagersessioncreation\",{\"1\":{\"346\":1}}],[\"force\",{\"1\":{\"206\":1,\"852\":1,\"1059\":1,\"1231\":1}}],[\"formlogin\",{\"1\":{\"348\":1}}],[\"formatvalue\",{\"1\":{\"1479\":1}}],[\"format=dynamic\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"format=b\",{\"1\":{\"1153\":1}}],[\"formatdatetime\",{\"1\":{\"657\":1}}],[\"formatteddate\",{\"1\":{\"649\":2}}],[\"formatter\",{\"1\":{\"330\":2,\"345\":4}}],[\"format\",{\"1\":{\"297\":1,\"298\":2,\"346\":2,\"509\":2,\"649\":5,\"786\":6,\"1013\":1,\"1210\":1}}],[\"form\",{\"1\":{\"181\":1,\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"for循环\",{\"0\":{\"133\":1},\"1\":{\"982\":1}}],[\"for\",{\"0\":{\"7\":1,\"26\":1,\"40\":1,\"279\":1},\"1\":{\"132\":1,\"133\":9,\"135\":1,\"138\":1,\"140\":3,\"145\":2,\"153\":2,\"154\":1,\"155\":1,\"189\":1,\"190\":2,\"229\":1,\"234\":1,\"236\":2,\"272\":1,\"277\":3,\"279\":7,\"282\":1,\"297\":2,\"298\":3,\"306\":2,\"312\":1,\"320\":1,\"329\":5,\"331\":1,\"334\":3,\"345\":1,\"359\":1,\"386\":1,\"397\":7,\"399\":8,\"411\":1,\"422\":1,\"435\":3,\"438\":4,\"439\":1,\"447\":1,\"450\":2,\"491\":2,\"647\":5,\"649\":2,\"780\":2,\"786\":1,\"833\":1,\"852\":8,\"858\":1,\"900\":1,\"977\":1,\"1032\":1,\"1036\":2,\"1048\":1,\"1050\":1,\"1120\":1,\"1210\":11,\"1211\":2,\"1226\":1,\"1248\":2,\"1259\":6,\"1411\":1,\"1445\":8,\"1515\":1}}],[\"found\",{\"0\":{\"4\":1,\"40\":1},\"1\":{\"329\":1,\"397\":1,\"494\":1,\"647\":1,\"852\":1,\"858\":1,\"900\":1,\"1653\":1}}],[\"fall\",{\"1\":{\"1445\":2}}],[\"false\",{\"1\":{\"52\":1,\"123\":1,\"190\":1,\"329\":2,\"330\":1,\"341\":1,\"379\":1,\"383\":3,\"386\":1,\"399\":5,\"406\":1,\"430\":1,\"434\":3,\"450\":1,\"491\":1,\"505\":1,\"596\":1,\"649\":1,\"652\":1,\"672\":1,\"786\":3,\"801\":2,\"802\":1,\"911\":1,\"914\":2,\"929\":1,\"931\":1,\"988\":2,\"1026\":2,\"1036\":1,\"1222\":5,\"1223\":3,\"1227\":7,\"1259\":1,\"1311\":3,\"1353\":1,\"1419\":2,\"1445\":3,\"1486\":3,\"1515\":4,\"1522\":1,\"1532\":2,\"1583\":9,\"1613\":1,\"1622\":1}}],[\"fastjson\",{\"1\":{\"1501\":1}}],[\"fastthreadlocal\",{\"1\":{\"1445\":1}}],[\"fastthreadlocals\",{\"1\":{\"1445\":1}}],[\"fasle\",{\"1\":{\"341\":1}}],[\"fatal=no\",{\"1\":{\"1198\":2}}],[\"family>\",{\"1\":{\"1079\":1}}],[\"factiries\",{\"1\":{\"851\":1}}],[\"factories中加上我们自定义的自动配置类\",{\"1\":{\"481\":1}}],[\"factories则更强大\",{\"1\":{\"481\":1}}],[\"factories\",{\"1\":{\"481\":2,\"494\":1}}],[\"factories文件\",{\"1\":{\"211\":1}}],[\"factorymethod\",{\"1\":{\"479\":2}}],[\"factorybean<t>\",{\"1\":{\"480\":1,\"900\":1}}],[\"factorybean<\",{\"1\":{\"438\":2}}],[\"factorybean\",{\"1\":{\"438\":1,\"480\":2}}],[\"factorybeans\",{\"1\":{\"399\":2}}],[\"factory\",{\"0\":{\"357\":1,\"900\":1},\"1\":{\"397\":4,\"399\":3,\"438\":7,\"446\":5,\"479\":5,\"801\":5,\"852\":13,\"914\":2}}],[\"far\",{\"1\":{\"399\":1}}],[\"failure\",{\"1\":{\"833\":1,\"1130\":2,\"1198\":2}}],[\"failurehandler\",{\"1\":{\"348\":1}}],[\"failback\",{\"1\":{\"730\":1}}],[\"failsafe\",{\"1\":{\"730\":1}}],[\"failfast\",{\"1\":{\"730\":1}}],[\"failover\",{\"1\":{\"730\":1}}],[\"failed\",{\"0\":{\"3\":1},\"1\":{\"345\":2,\"410\":1,\"411\":1,\"491\":1,\"801\":1,\"833\":2,\"852\":3,\"914\":6,\"1259\":2,\"1518\":2}}],[\"faqurl\",{\"1\":{\"914\":4}}],[\"faq\",{\"0\":{\"0\":1},\"2\":{\"60\":1,\"61\":1}}],[\"cwms\",{\"0\":{\"1673\":1}}],[\"cwac\",{\"1\":{\"411\":5}}],[\"cfe22bdf9e3446fb8c0ddd080903f23e\",{\"1\":{\"1628\":1}}],[\"cfg\",{\"1\":{\"1126\":2}}],[\"cv856fq1owiqjojwtu5\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"cc\",{\"1\":{\"1185\":1}}],[\"ccp\",{\"1\":{\"179\":3}}],[\"cp98qs2112ltu313tsbrulvb91e8xcpjaizhklne0+yadyzileo4+t5xyfpctvou\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"cp\",{\"1\":{\"1129\":1}}],[\"c|tr\",{\"1\":{\"647\":1}}],[\"c=vo\",{\"1\":{\"623\":1}}],[\"c=2\",{\"1\":{\"129\":1}}],[\"celsiusdegrees\",{\"1\":{\"1484\":1}}],[\"ce\",{\"1\":{\"1127\":1,\"1130\":1,\"1139\":4}}],[\"central<\",{\"1\":{\"1202\":2}}],[\"central\",{\"1\":{\"1201\":1}}],[\"centos\",{\"1\":{\"1113\":1,\"1114\":1}}],[\"centerjwtgenerator\",{\"1\":{\"1519\":1}}],[\"centeruser\",{\"1\":{\"1518\":2,\"1521\":1,\"1522\":8}}],[\"centeruserdetailsauthenticationprovider\",{\"1\":{\"1518\":1}}],[\"center\",{\"1\":{\"1513\":16,\"1514\":1,\"1535\":2,\"1585\":1,\"1586\":44,\"1592\":10,\"1595\":2,\"1597\":5}}],[\"centerauthenticationentrypoint\",{\"1\":{\"467\":1,\"1031\":1}}],[\"centeraccessdeniedhandler\",{\"1\":{\"467\":4,\"1031\":4}}],[\"centeropaquetokenintrospector\",{\"1\":{\"467\":3,\"1031\":3,\"1521\":1}}],[\"centertokenextractor\",{\"1\":{\"467\":3,\"1031\":3}}],[\"centerresourceserverconfig\",{\"1\":{\"467\":1,\"1031\":1}}],[\"cerebro\",{\"0\":{\"1138\":1},\"1\":{\"1137\":3,\"1138\":2}}],[\"cert\",{\"1\":{\"1130\":2,\"1210\":2,\"1211\":2,\"1514\":1}}],[\"certs\",{\"1\":{\"1130\":12}}],[\"certdir=\",{\"1\":{\"1130\":2}}],[\"certificate\",{\"0\":{\"626\":1},\"1\":{\"1210\":2,\"1211\":2,\"1305\":1,\"1514\":1}}],[\"certreq\",{\"1\":{\"623\":1}}],[\"cer\",{\"1\":{\"625\":1,\"627\":1}}],[\"cer是标准证书格式\",{\"1\":{\"625\":1}}],[\"cj\",{\"1\":{\"595\":1,\"1515\":1}}],[\"cglib\",{\"1\":{\"386\":1}}],[\"cglib动态代理\",{\"0\":{\"386\":1}}],[\"cglibaopproxy的getproxy\",{\"0\":{\"436\":1}}],[\"cglibaopproxy实现aopproxy\",{\"1\":{\"383\":1}}],[\"cglibaopproxy\",{\"1\":{\"383\":1}}],[\"cszb\",{\"1\":{\"1484\":1}}],[\"csdn\",{\"1\":{\"1374\":2}}],[\"cs\",{\"1\":{\"1130\":1}}],[\"css内联\",{\"1\":{\"983\":1}}],[\"css\",{\"1\":{\"948\":1}}],[\"csr\",{\"1\":{\"627\":1}}],[\"csrf\",{\"1\":{\"330\":1,\"348\":1,\"467\":1,\"1031\":1}}],[\"csharp\",{\"0\":{\"100\":1}}],[\"c++\",{\"1\":{\"290\":1}}],[\"c2\",{\"1\":{\"275\":1}}],[\"cmake\",{\"1\":{\"1178\":1}}],[\"cms\",{\"1\":{\"243\":1}}],[\"cmd\",{\"0\":{\"173\":1,\"1113\":1},\"1\":{\"164\":2,\"218\":1,\"1113\":2,\"1116\":1}}],[\"ctx\",{\"1\":{\"509\":2,\"557\":2,\"758\":1,\"759\":4,\"760\":2,\"1345\":2,\"1450\":1,\"1451\":4}}],[\"ctmethod\",{\"1\":{\"241\":2}}],[\"ctconstructor=new\",{\"1\":{\"241\":1}}],[\"ctconstructor\",{\"1\":{\"241\":4}}],[\"ctclass\",{\"1\":{\"241\":4}}],[\"ctclass对象容器中创建一个public的jatest类\",{\"1\":{\"241\":1}}],[\"ctclass对象容器\",{\"1\":{\"241\":1}}],[\"ctnewmethod\",{\"1\":{\"241\":4}}],[\"ctusernamefield\",{\"1\":{\"241\":4}}],[\"ctusernamefield=new\",{\"1\":{\"241\":1}}],[\"ctidfield\",{\"1\":{\"241\":4}}],[\"ctidfield=new\",{\"1\":{\"241\":1}}],[\"ctfield\",{\"1\":{\"241\":4}}],[\"ctrl\",{\"1\":{\"103\":1}}],[\"crc校验\",{\"1\":{\"1279\":1}}],[\"crd文件\",{\"1\":{\"1173\":1}}],[\"credentialsnonexpired\",{\"1\":{\"1532\":2}}],[\"credentialsid\",{\"1\":{\"1215\":2}}],[\"credentials=true\",{\"1\":{\"1137\":1}}],[\"credentials\",{\"1\":{\"725\":1,\"1518\":4,\"1531\":2,\"1570\":1,\"1571\":1}}],[\"credential\",{\"1\":{\"723\":1}}],[\"creatoreventlistener\",{\"1\":{\"1372\":1}}],[\"creator\",{\"1\":{\"716\":1,\"1042\":1,\"1058\":3}}],[\"creation\",{\"1\":{\"397\":1,\"439\":1}}],[\"createupgradeprocessor\",{\"1\":{\"1419\":1}}],[\"createforddl\",{\"1\":{\"1344\":1}}],[\"createforquery\",{\"1\":{\"1344\":1}}],[\"createoperator\",{\"1\":{\"1342\":1}}],[\"create<\",{\"1\":{\"975\":1}}],[\"createelement\",{\"1\":{\"969\":2}}],[\"createenhancer\",{\"1\":{\"386\":1}}],[\"createendpoints构建endpoint端点\",{\"1\":{\"108\":1}}],[\"createmaintainservice\",{\"1\":{\"870\":1}}],[\"createmqttexception\",{\"1\":{\"833\":1}}],[\"createnetwork\",{\"0\":{\"1352\":1},\"1\":{\"1352\":1}}],[\"createnamingservice\",{\"1\":{\"870\":1,\"871\":1}}],[\"createnotfounderror\",{\"1\":{\"513\":2}}],[\"createconfigservice\",{\"1\":{\"870\":1}}],[\"createcontrollerfactory创建控制器工厂\",{\"1\":{\"108\":1}}],[\"createroot\",{\"1\":{\"970\":2,\"971\":1}}],[\"createrichrmqsink\",{\"1\":{\"792\":1}}],[\"createrequestdelegate创建控制器请求委托实例\",{\"1\":{\"108\":1}}],[\"createsocketprocessor\",{\"1\":{\"685\":1}}],[\"createsharedobjects\",{\"1\":{\"330\":1}}],[\"createtransactionssource\",{\"1\":{\"792\":1}}],[\"createtime\",{\"1\":{\"786\":1,\"1550\":1,\"1564\":3,\"1565\":1,\"1582\":4,\"1586\":44,\"1592\":10,\"1597\":5,\"1607\":2,\"1613\":2,\"1622\":1,\"1628\":2,\"1635\":1}}],[\"createtime=new\",{\"1\":{\"652\":1}}],[\"createtempdir\",{\"1\":{\"450\":1}}],[\"createby\",{\"1\":{\"1564\":3,\"1565\":1,\"1582\":4,\"1586\":44,\"1592\":10,\"1607\":2,\"1613\":2,\"1622\":1,\"1628\":2,\"1635\":1}}],[\"createbuild\",{\"1\":{\"985\":1}}],[\"createbindings\",{\"1\":{\"648\":1}}],[\"createbeaninstance\",{\"1\":{\"440\":1}}],[\"createbean\",{\"1\":{\"439\":1}}],[\"createbean中populatebean方法\",{\"1\":{\"358\":1,\"359\":1}}],[\"createbean中createbeaninstance方法会判断是否构造器注入\",{\"1\":{\"357\":1}}],[\"createwebserver方法\",{\"0\":{\"507\":1}}],[\"createwebserver\",{\"0\":{\"446\":1},\"1\":{\"445\":1,\"446\":4}}],[\"createwebapplicationcontext\",{\"1\":{\"411\":1}}],[\"createinvocablehandlermethod\",{\"1\":{\"403\":1}}],[\"createapplicationcontext\",{\"1\":{\"394\":1}}],[\"createattributes\",{\"1\":{\"345\":2}}],[\"create方法生成target的代理类\",{\"1\":{\"386\":1}}],[\"createproxyclassandinstance创建代理实例\",{\"1\":{\"436\":1}}],[\"createproxyclassandinstance\",{\"1\":{\"386\":1}}],[\"createproxy创建代理工厂proxyfactory\",{\"1\":{\"383\":1}}],[\"createproxy\",{\"1\":{\"383\":1,\"434\":1,\"435\":1}}],[\"created\",{\"1\":{\"241\":1,\"346\":1,\"397\":1,\"914\":2}}],[\"create\",{\"0\":{\"524\":1},\"1\":{\"96\":1,\"103\":1,\"383\":1,\"386\":1,\"411\":1,\"434\":1,\"446\":1,\"589\":1,\"647\":3,\"711\":1,\"716\":2,\"801\":3,\"914\":3,\"965\":4,\"975\":1,\"1042\":3,\"1058\":3,\"1099\":1,\"1122\":1,\"1159\":1,\"1353\":2,\"1419\":1,\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"cronschedule\",{\"1\":{\"1013\":1}}],[\"crontab\",{\"1\":{\"925\":2}}],[\"crontriggerfactorybean\",{\"1\":{\"658\":5}}],[\"crontrigger触发器\",{\"1\":{\"658\":1}}],[\"crontrigger\",{\"1\":{\"657\":1,\"658\":1}}],[\"cron\",{\"1\":{\"658\":1,\"1013\":2}}],[\"cron表达式\",{\"1\":{\"657\":1}}],[\"cross\",{\"1\":{\"236\":1}}],[\"crttime\",{\"1\":{\"1248\":1}}],[\"crt\",{\"1\":{\"625\":2,\"627\":1,\"1211\":1}}],[\"crt和cer\",{\"1\":{\"625\":1}}],[\"crl\",{\"1\":{\"623\":1}}],[\"crucial\",{\"1\":{\"346\":1}}],[\"custreffids\",{\"1\":{\"1244\":1}}],[\"customexceptionhandler\",{\"1\":{\"1526\":1}}],[\"customervo>\",{\"1\":{\"1249\":1}}],[\"customer\",{\"1\":{\"762\":1,\"1249\":2}}],[\"customerid\",{\"1\":{\"236\":1,\"1248\":1}}],[\"customeritemstockvo\",{\"1\":{\"236\":23}}],[\"customeritemstockvos\",{\"1\":{\"236\":6}}],[\"customoptions\",{\"1\":{\"993\":2}}],[\"customclick\",{\"1\":{\"991\":2}}],[\"customscheduledtask\",{\"1\":{\"657\":1}}],[\"custom\",{\"0\":{\"978\":1},\"1\":{\"494\":1,\"1122\":5,\"1173\":1,\"1514\":2}}],[\"customdateeditor\",{\"1\":{\"379\":1}}],[\"customannotation\",{\"1\":{\"376\":2}}],[\"customizeconnector\",{\"1\":{\"450\":1}}],[\"customizeproxyfactory\",{\"1\":{\"435\":1}}],[\"customize\",{\"1\":{\"329\":1}}],[\"customizer\",{\"1\":{\"329\":2,\"348\":1}}],[\"cuttree\",{\"1\":{\"1036\":2}}],[\"currency\",{\"1\":{\"1584\":1}}],[\"currentpassword\",{\"1\":{\"1544\":1}}],[\"currentpagesize\",{\"1\":{\"1455\":1}}],[\"currentpageno\",{\"1\":{\"1455\":1}}],[\"currentpage\",{\"1\":{\"1248\":2}}],[\"currentuserinfo\",{\"1\":{\"1513\":1}}],[\"currentchildattrs\",{\"1\":{\"1450\":2}}],[\"currentchildoptions\",{\"1\":{\"1450\":2}}],[\"currentchildhandler\",{\"1\":{\"1450\":2}}],[\"currentchildgroup\",{\"1\":{\"1450\":2}}],[\"currentcontext\",{\"1\":{\"509\":1,\"537\":1}}],[\"currentdepp\",{\"1\":{\"1036\":4}}],[\"current\",{\"1\":{\"974\":1,\"1058\":1,\"1259\":2,\"1445\":1,\"1464\":3,\"1465\":3,\"1466\":3,\"1467\":3,\"1513\":1,\"1613\":1,\"1622\":1}}],[\"currentreactive\",{\"1\":{\"557\":1}}],[\"currentregistryprocessors\",{\"1\":{\"399\":16}}],[\"currenttenant\",{\"1\":{\"1584\":1,\"1586\":2}}],[\"currenttimemillis\",{\"1\":{\"411\":2,\"421\":2,\"911\":4}}],[\"currentthread\",{\"1\":{\"234\":1,\"236\":1,\"658\":2,\"833\":1,\"1032\":1,\"1415\":1,\"1445\":1}}],[\"curl\",{\"0\":{\"1189\":1},\"1\":{\"1092\":1,\"1118\":1,\"1130\":1,\"1185\":2,\"1189\":1,\"1248\":2}}],[\"curdeadlinenanos\",{\"1\":{\"1445\":5}}],[\"curd\",{\"1\":{\"860\":1}}],[\"c18c1459c602\",{\"1\":{\"1198\":1}}],[\"c1\",{\"1\":{\"139\":3,\"275\":1}}],[\"camel\",{\"1\":{\"852\":1,\"1515\":1}}],[\"camunda\",{\"0\":{\"576\":1},\"1\":{\"78\":1,\"585\":2,\"589\":3,\"707\":2,\"711\":3}}],[\"calculatestrategy\",{\"1\":{\"1445\":1}}],[\"calendar\",{\"1\":{\"1445\":1}}],[\"calendarkey\",{\"1\":{\"994\":1,\"995\":2}}],[\"calendarinterval\",{\"1\":{\"786\":3}}],[\"calltype\",{\"1\":{\"1486\":1}}],[\"called\",{\"1\":{\"1445\":2}}],[\"caller\",{\"1\":{\"249\":2,\"250\":1,\"397\":1}}],[\"callerrunspolicy\",{\"1\":{\"236\":1,\"476\":1}}],[\"calling\",{\"1\":{\"852\":1}}],[\"callable\",{\"1\":{\"573\":1}}],[\"callablemethodreturnvaluehandler\",{\"1\":{\"405\":1}}],[\"callback线程\",{\"1\":{\"833\":1}}],[\"callback回调中设置clientstate\",{\"1\":{\"827\":1}}],[\"callbacks\",{\"1\":{\"386\":4,\"436\":1}}],[\"callback\",{\"1\":{\"386\":1,\"399\":1,\"438\":1,\"833\":1}}],[\"call\",{\"1\":{\"157\":9,\"292\":2,\"386\":1,\"833\":1,\"852\":1,\"1246\":7,\"1445\":2}}],[\"calls\",{\"1\":{\"139\":1,\"647\":1}}],[\"cas是乐观锁的实现方式\",{\"1\":{\"911\":1}}],[\"cast\",{\"1\":{\"647\":1}}],[\"case=\",{\"1\":{\"982\":2}}],[\"case=true\",{\"1\":{\"852\":1}}],[\"cases\",{\"1\":{\"345\":1}}],[\"case\",{\"1\":{\"131\":5,\"345\":1,\"360\":4,\"914\":10,\"1120\":1,\"1445\":5,\"1515\":1,\"1521\":2}}],[\"cat\",{\"1\":{\"986\":2,\"988\":5,\"991\":1,\"992\":1,\"1187\":1,\"1206\":1}}],[\"catalogcontroller\",{\"0\":{\"891\":1}}],[\"catalina\",{\"1\":{\"453\":1,\"1187\":2}}],[\"catalinahome\",{\"1\":{\"453\":1}}],[\"category\",{\"1\":{\"1304\":2}}],[\"categorylist\",{\"1\":{\"672\":8}}],[\"categoriesbyname\",{\"1\":{\"672\":5}}],[\"catch方法是异步的\",{\"1\":{\"1000\":1}}],[\"catch一样的逻辑\",{\"1\":{\"213\":1}}],[\"catch\",{\"0\":{\"1252\":1},\"1\":{\"160\":1,\"212\":2,\"234\":2,\"236\":2,\"345\":5,\"397\":1,\"410\":1,\"411\":1,\"439\":1,\"445\":1,\"446\":1,\"456\":2,\"491\":2,\"509\":1,\"535\":1,\"556\":1,\"648\":2,\"649\":2,\"786\":2,\"833\":2,\"852\":5,\"871\":1,\"911\":1,\"914\":1,\"1032\":2,\"1257\":2,\"1259\":4,\"1383\":1,\"1445\":10,\"1450\":2,\"1518\":1,\"1522\":1}}],[\"cause\",{\"1\":{\"399\":1,\"852\":1,\"1353\":1,\"1450\":1,\"1451\":2}}],[\"causechain\",{\"1\":{\"345\":2}}],[\"care\",{\"1\":{\"1445\":1}}],[\"carinfo\",{\"1\":{\"480\":1}}],[\"carfactorybean\",{\"1\":{\"480\":1}}],[\"car\",{\"1\":{\"480\":1,\"1256\":1}}],[\"card\",{\"1\":{\"275\":2}}],[\"carl\",{\"1\":{\"241\":1}}],[\"cacheutil\",{\"1\":{\"1249\":1}}],[\"cacheapi\",{\"1\":{\"911\":2}}],[\"cacheclear修饰的方法\",{\"1\":{\"911\":1}}],[\"cache和\",{\"1\":{\"911\":1}}],[\"cachemap\",{\"1\":{\"880\":1}}],[\"cachedir\",{\"1\":{\"872\":1}}],[\"cached\",{\"1\":{\"399\":1,\"473\":1,\"1025\":1,\"1026\":1}}],[\"caches\",{\"1\":{\"397\":1}}],[\"cachekey\",{\"1\":{\"383\":6,\"433\":3,\"434\":6,\"853\":1}}],[\"cacher<t>\",{\"1\":{\"316\":1}}],[\"cache\",{\"0\":{\"1249\":1,\"1369\":1},\"1\":{\"236\":4,\"439\":1,\"852\":2,\"911\":3,\"985\":1,\"988\":2,\"1025\":5,\"1026\":5,\"1179\":2,\"1210\":1,\"1211\":1,\"1249\":11}}],[\"cap服务\",{\"0\":{\"1487\":1}}],[\"captcha\",{\"1\":{\"945\":1}}],[\"capital\",{\"1\":{\"154\":3}}],[\"cap=0\",{\"1\":{\"152\":1}}],[\"cap=\",{\"1\":{\"152\":2}}],[\"cap=len=3\",{\"1\":{\"152\":1}}],[\"capacity\",{\"1\":{\"152\":2,\"302\":2}}],[\"cap\",{\"1\":{\"128\":1,\"152\":6,\"190\":1}}],[\"cancelled\",{\"1\":{\"1445\":1}}],[\"cancelledkeyexception\",{\"1\":{\"1445\":3}}],[\"cancelledkeys\",{\"1\":{\"1445\":1}}],[\"cancelling\",{\"1\":{\"397\":1}}],[\"canceltask\",{\"1\":{\"1013\":2}}],[\"cancel\",{\"1\":{\"529\":1,\"664\":1}}],[\"cancelrefresh\",{\"1\":{\"397\":1}}],[\"cannot\",{\"1\":{\"158\":2,\"329\":1,\"345\":3,\"446\":1,\"989\":1}}],[\"candidatecomponentsindexloader\",{\"1\":{\"495\":1}}],[\"candidates\",{\"1\":{\"486\":1,\"491\":1}}],[\"candidate\",{\"1\":{\"98\":1}}],[\"canal\",{\"1\":{\"81\":1}}],[\"can\",{\"0\":{\"7\":1},\"1\":{\"157\":4,\"399\":1,\"435\":1,\"833\":1,\"852\":1,\"975\":1,\"1445\":3}}],[\"ciphers\",{\"1\":{\"1210\":2,\"1211\":2}}],[\"cip\",{\"1\":{\"1185\":1}}],[\"circular\",{\"1\":{\"439\":1}}],[\"circle\",{\"1\":{\"139\":5}}],[\"ci替换为utf8\",{\"1\":{\"56\":1}}],[\"ci\",{\"0\":{\"56\":1,\"562\":1},\"1\":{\"56\":1,\"1120\":1,\"1128\":1,\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"click\",{\"1\":{\"947\":1}}],[\"cli\",{\"1\":{\"908\":1,\"985\":1,\"1130\":2}}],[\"client或tenant或user\",{\"1\":{\"1641\":1}}],[\"clientname\",{\"1\":{\"1564\":4,\"1565\":1,\"1570\":1,\"1571\":1,\"1572\":2,\"1574\":1,\"1579\":1,\"1580\":1}}],[\"clientauthenticationmethods\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"clientauthentication\",{\"1\":{\"1517\":3}}],[\"clientauthorizationrequiredexception\",{\"1\":{\"345\":4}}],[\"clientrole\",{\"1\":{\"1564\":1,\"1584\":4}}],[\"clientroleidlist\",{\"1\":{\"1566\":1}}],[\"clientroleid\",{\"1\":{\"1494\":1}}],[\"clientregistrationrepository\",{\"1\":{\"345\":1}}],[\"clientregistration\",{\"1\":{\"345\":5}}],[\"clientregistrationid\",{\"1\":{\"345\":7}}],[\"clientconfig\",{\"1\":{\"914\":1}}],[\"clientcomms\",{\"0\":{\"827\":1,\"832\":1},\"1\":{\"833\":2}}],[\"clientmanager\",{\"1\":{\"893\":2}}],[\"client客户端\",{\"1\":{\"893\":1}}],[\"clientworker\",{\"0\":{\"880\":1,\"881\":1}}],[\"clientid\",{\"1\":{\"602\":2,\"914\":1,\"1513\":1,\"1531\":1,\"1532\":2,\"1534\":1,\"1564\":4,\"1565\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1574\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1596\":1,\"1601\":1,\"1602\":1}}],[\"client的refresh\",{\"1\":{\"476\":1}}],[\"client来实现\",{\"1\":{\"476\":1}}],[\"client1\",{\"1\":{\"345\":2}}],[\"clientdetailsserviceconfiguration\",{\"1\":{\"343\":1}}],[\"clientdetailsserviceconfigurer\",{\"1\":{\"343\":1}}],[\"clientsecretexpiresat\",{\"1\":{\"1570\":1,\"1571\":1}}],[\"clientsecret\",{\"1\":{\"1531\":1,\"1570\":1,\"1571\":1,\"1575\":1}}],[\"clientsecretauthenticationprovider\",{\"1\":{\"1517\":1}}],[\"clientserviceindexesmanager\",{\"1\":{\"893\":1}}],[\"clientserviceindexesmanager管理service和client之间关系\",{\"1\":{\"893\":1}}],[\"clientstate\",{\"0\":{\"824\":1},\"1\":{\"833\":2}}],[\"clientstate是核心\",{\"1\":{\"818\":1}}],[\"clients<\",{\"1\":{\"790\":1}}],[\"clients\",{\"1\":{\"343\":1,\"792\":1}}],[\"client\",{\"0\":{\"345\":1,\"818\":1,\"1378\":1,\"1379\":1},\"1\":{\"36\":2,\"344\":1,\"345\":1,\"602\":2,\"780\":13,\"801\":1,\"802\":1,\"871\":2,\"886\":1,\"914\":2,\"1023\":1,\"1130\":6,\"1248\":2,\"1353\":3,\"1506\":1,\"1513\":2,\"1531\":1,\"1534\":1,\"1570\":3,\"1571\":3,\"1572\":1,\"1574\":2,\"1584\":4,\"1592\":1,\"1607\":2,\"1616\":3,\"1641\":1}}],[\"clusterprotocolsupportmanager\",{\"0\":{\"1356\":1}}],[\"clusterprotocolsupportmanager包含clustermanager\",{\"1\":{\"1355\":1}}],[\"clustermanager接口\",{\"0\":{\"1366\":1}}],[\"clustermanager\",{\"1\":{\"1342\":1}}],[\"clusterdeviceregistry\",{\"0\":{\"1342\":1},\"1\":{\"1341\":1,\"1344\":1}}],[\"clustersendtodevicemessagehandler\",{\"0\":{\"1364\":1},\"1\":{\"1330\":1,\"1331\":1}}],[\"clustering\",{\"1\":{\"914\":2}}],[\"cluster\",{\"0\":{\"1365\":1},\"1\":{\"730\":6,\"1133\":3}}],[\"clubs\",{\"1\":{\"275\":1}}],[\"clearcache\",{\"1\":{\"786\":1}}],[\"clearcontext\",{\"1\":{\"346\":1}}],[\"clearindicescacheresponse\",{\"1\":{\"786\":1}}],[\"clearindicescacherequest\",{\"1\":{\"786\":2}}],[\"clearindicescache\",{\"1\":{\"786\":1}}],[\"clearscroll\",{\"1\":{\"780\":2}}],[\"clearscrollresponse\",{\"1\":{\"780\":3}}],[\"clearscrollrequest\",{\"1\":{\"780\":11}}],[\"cleardatasourcetype\",{\"1\":{\"632\":1}}],[\"clearmetadatacache\",{\"1\":{\"399\":1}}],[\"clear\",{\"1\":{\"399\":4,\"1445\":1}}],[\"cleared\",{\"1\":{\"346\":1}}],[\"cleanup\",{\"1\":{\"1445\":1}}],[\"cleanupmultipart\",{\"1\":{\"1259\":1}}],[\"cleancache\",{\"1\":{\"985\":1}}],[\"cleantemp\",{\"1\":{\"985\":1}}],[\"clean\",{\"1\":{\"173\":1,\"1073\":2,\"1079\":1,\"1130\":1,\"1215\":2,\"1259\":1,\"1458\":1}}],[\"closing\",{\"1\":{\"1383\":1}}],[\"closures\",{\"1\":{\"604\":1}}],[\"closeall\",{\"1\":{\"1445\":1}}],[\"closeable\",{\"1\":{\"647\":2}}],[\"closed\",{\"1\":{\"1383\":1,\"1445\":1}}],[\"closesqlsession\",{\"1\":{\"852\":2}}],[\"closetransaction\",{\"1\":{\"852\":1}}],[\"close\",{\"1\":{\"190\":2,\"241\":1,\"509\":1,\"647\":1,\"852\":2,\"873\":1,\"1210\":1,\"1383\":1,\"1407\":1,\"1445\":5,\"1451\":2}}],[\"close方法\",{\"0\":{\"187\":1}}],[\"cloud<\",{\"1\":{\"476\":2,\"862\":5}}],[\"cloud相关依赖\",{\"1\":{\"476\":1}}],[\"cloud\",{\"1\":{\"476\":7,\"862\":5,\"1137\":2,\"1501\":3,\"1513\":1,\"1520\":2,\"1649\":1}}],[\"clone\",{\"1\":{\"96\":1,\"297\":2,\"298\":2,\"1144\":1,\"1458\":1}}],[\"claims\",{\"1\":{\"1532\":2}}],[\"clazz\",{\"1\":{\"241\":1,\"1247\":2}}],[\"clazz=jatestclazz\",{\"1\":{\"241\":1}}],[\"clause\",{\"1\":{\"131\":2}}],[\"clause错误的解决方法\",{\"0\":{\"7\":1}}],[\"class文件\",{\"1\":{\"1065\":1}}],[\"classnotfoundexception\",{\"1\":{\"1032\":1,\"1257\":1}}],[\"classname\",{\"1\":{\"969\":1,\"1032\":2}}],[\"classname=\",{\"1\":{\"969\":1}}],[\"class结尾的文件\",{\"1\":{\"1032\":1}}],[\"classlist\",{\"1\":{\"1032\":1}}],[\"classloaderawaregeneratorstrategy\",{\"1\":{\"386\":1}}],[\"classloader\",{\"1\":{\"383\":2,\"386\":5,\"435\":8,\"1419\":1}}],[\"class组件\",{\"1\":{\"971\":1}}],[\"class>\",{\"1\":{\"652\":2}}],[\"class>com\",{\"1\":{\"652\":2}}],[\"classic\",{\"1\":{\"596\":5}}],[\"classifications\",{\"1\":{\"103\":1}}],[\"classpath=$java\",{\"1\":{\"1458\":1}}],[\"classpathmapperscanner\",{\"1\":{\"859\":1}}],[\"classpath\",{\"0\":{\"1065\":1},\"1\":{\"593\":2,\"594\":6,\"596\":1,\"1065\":1,\"1066\":2,\"1514\":1,\"1515\":1}}],[\"classpathscanningcandidatecomponentprovider\",{\"1\":{\"495\":1}}],[\"classpathbeandefinitionscanner\",{\"1\":{\"495\":1,\"900\":1}}],[\"classpool=classpool\",{\"1\":{\"241\":1}}],[\"classpool\",{\"1\":{\"241\":3}}],[\"classes文件夹下\",{\"1\":{\"1065\":1}}],[\"classes\",{\"1\":{\"486\":1,\"494\":1,\"801\":1,\"802\":1,\"1032\":6,\"1065\":1,\"1066\":2,\"1445\":1}}],[\"class=\",{\"1\":{\"479\":6,\"480\":1,\"596\":12,\"982\":2}}],[\"classutils\",{\"1\":{\"435\":1}}],[\"class<t>\",{\"1\":{\"413\":1,\"480\":1,\"900\":2,\"1247\":1}}],[\"class<\",{\"1\":{\"241\":1,\"379\":1,\"386\":2,\"435\":2,\"852\":1,\"871\":1,\"900\":1,\"911\":1,\"1411\":1}}],[\"class\",{\"0\":{\"374\":1},\"1\":{\"9\":1,\"210\":3,\"234\":1,\"236\":1,\"241\":3,\"252\":1,\"255\":1,\"329\":1,\"330\":1,\"331\":2,\"334\":1,\"345\":5,\"346\":1,\"353\":2,\"354\":2,\"370\":1,\"376\":1,\"378\":2,\"379\":2,\"386\":1,\"397\":1,\"398\":3,\"399\":15,\"410\":2,\"411\":1,\"413\":4,\"421\":3,\"422\":1,\"430\":1,\"435\":2,\"441\":2,\"451\":1,\"467\":2,\"476\":1,\"482\":1,\"491\":1,\"494\":1,\"505\":2,\"509\":1,\"513\":1,\"557\":2,\"589\":1,\"592\":3,\"594\":1,\"595\":1,\"602\":1,\"632\":3,\"646\":1,\"647\":2,\"648\":1,\"652\":2,\"657\":1,\"658\":4,\"711\":1,\"719\":1,\"780\":2,\"786\":1,\"792\":4,\"801\":14,\"802\":1,\"833\":3,\"850\":2,\"852\":3,\"853\":15,\"858\":4,\"871\":2,\"900\":5,\"911\":1,\"932\":1,\"971\":1,\"991\":4,\"992\":3,\"1031\":2,\"1032\":4,\"1066\":2,\"1244\":1,\"1245\":2,\"1248\":5,\"1256\":3,\"1257\":1,\"1297\":1,\"1345\":3,\"1411\":1,\"1414\":1,\"1445\":3,\"1450\":1,\"1451\":1,\"1515\":1,\"1517\":1,\"1518\":1,\"1519\":2,\"1521\":1,\"1522\":1,\"1523\":1,\"1525\":1,\"1526\":4}}],[\"cnf里找到\",{\"1\":{\"1231\":1}}],[\"cnf\",{\"1\":{\"1141\":1,\"1176\":1}}],[\"cnf文件的存放路径根据自己需求自定义即可\",{\"1\":{\"1141\":1}}],[\"cn=hostname\",{\"1\":{\"623\":1}}],[\"cn\",{\"1\":{\"33\":1,\"173\":1,\"1096\":2,\"1118\":1,\"1127\":1,\"1137\":1,\"1283\":1,\"1646\":1}}],[\"cdc\",{\"1\":{\"65\":1}}],[\"cd\",{\"0\":{\"562\":1},\"1\":{\"30\":1,\"32\":1,\"479\":1,\"1118\":1,\"1123\":1,\"1136\":1,\"1458\":1,\"1474\":1}}],[\"chrome107\",{\"1\":{\"1628\":1}}],[\"chrome=1\",{\"1\":{\"1407\":1}}],[\"chrom\",{\"1\":{\"1425\":1}}],[\"chown\",{\"1\":{\"1177\":1,\"1200\":1}}],[\"childattrs\",{\"1\":{\"1450\":2}}],[\"childoptions\",{\"1\":{\"1450\":2}}],[\"childgroup\",{\"1\":{\"1450\":2}}],[\"childhandler\",{\"1\":{\"1450\":3}}],[\"child\",{\"1\":{\"975\":1,\"1036\":2,\"1450\":7}}],[\"children=\",{\"1\":{\"975\":1}}],[\"children\",{\"1\":{\"672\":3,\"971\":1,\"974\":1,\"977\":2,\"1036\":3,\"1582\":4,\"1583\":9}}],[\"chint\",{\"1\":{\"792\":11}}],[\"checkuri\",{\"1\":{\"1522\":2}}],[\"checkupdatedataids\",{\"1\":{\"880\":1}}],[\"checknotnull\",{\"1\":{\"1445\":4}}],[\"checknotmodified\",{\"1\":{\"1259\":1}}],[\"checknetwork\",{\"1\":{\"1320\":1}}],[\"checkmultipart\",{\"1\":{\"1259\":1}}],[\"checkout命令\",{\"1\":{\"1151\":1}}],[\"checkout\",{\"0\":{\"1150\":1},\"1\":{\"1147\":1,\"1148\":2,\"1150\":4,\"1151\":2}}],[\"checkout=true\",{\"1\":{\"1130\":2}}],[\"checkdispatch\",{\"1\":{\"1013\":1}}],[\"checkclientinbroker\",{\"1\":{\"914\":1}}],[\"checkconfig\",{\"1\":{\"914\":1}}],[\"checkinitparam\",{\"1\":{\"872\":1}}],[\"checkforactivity\",{\"0\":{\"830\":1}}],[\"checkforactivity方法\",{\"1\":{\"824\":1}}],[\"checkthatconnectorshavestarted\",{\"1\":{\"456\":1}}],[\"checks\",{\"1\":{\"435\":1}}],[\"checksumpolicy>\",{\"1\":{\"49\":2}}],[\"check\",{\"1\":{\"345\":1,\"359\":1,\"397\":1,\"471\":1,\"647\":1,\"900\":1,\"948\":1,\"1445\":2,\"1514\":1,\"1532\":1,\"1597\":1}}],[\"ch\",{\"1\":{\"190\":13,\"596\":12,\"1397\":1,\"1445\":9,\"1450\":6}}],[\"chaining\",{\"1\":{\"604\":1}}],[\"chain\",{\"1\":{\"346\":3,\"422\":3,\"557\":2,\"652\":2,\"1345\":4,\"1421\":1,\"1523\":2}}],[\"charset=utf\",{\"1\":{\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":1}}],[\"charset=utf8mb3\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"charset=\",{\"1\":{\"1407\":1}}],[\"charset\",{\"1\":{\"1210\":1}}],[\"charset>\",{\"1\":{\"596\":2}}],[\"character\",{\"1\":{\"1120\":1,\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"characterencoding=utf\",{\"1\":{\"34\":1,\"595\":1,\"1515\":1}}],[\"characterencoding=utf8\",{\"1\":{\"23\":1,\"850\":1}}],[\"charat\",{\"1\":{\"649\":2}}],[\"char\",{\"1\":{\"275\":2,\"1451\":1}}],[\"chan\",{\"1\":{\"123\":1,\"190\":5}}],[\"channelinboundhandleradapter\",{\"1\":{\"1451\":1}}],[\"channelinitializer<channel>\",{\"1\":{\"1450\":1}}],[\"channelinitializer<socketchannel>\",{\"1\":{\"1450\":1}}],[\"channelinitializer\",{\"0\":{\"1447\":1}}],[\"channelread\",{\"1\":{\"1450\":1,\"1451\":1}}],[\"channelhandlercontext\",{\"1\":{\"1450\":1,\"1451\":2}}],[\"channelhandler\",{\"1\":{\"1450\":2}}],[\"channel初始化\",{\"1\":{\"1450\":1}}],[\"channelfactory\",{\"1\":{\"1450\":1}}],[\"channelfuturelistener\",{\"1\":{\"1450\":1}}],[\"channelfuture\",{\"1\":{\"1446\":1,\"1450\":3}}],[\"channel与eventloop绑定\",{\"1\":{\"1445\":1}}],[\"channel通道\",{\"0\":{\"1437\":1}}],[\"channel注册到eventloop\",{\"1\":{\"1405\":1}}],[\"channeloutboundbuffer维护了写出数据entry队列\",{\"1\":{\"1401\":1}}],[\"channel维护了channeloutboundbuffer\",{\"1\":{\"1401\":1}}],[\"channelpipeline\",{\"0\":{\"1448\":1},\"1\":{\"1400\":1,\"1450\":3}}],[\"channelconfig\",{\"1\":{\"1391\":1}}],[\"channel\",{\"0\":{\"190\":1,\"1444\":1},\"1\":{\"121\":1,\"131\":2,\"153\":1,\"174\":1,\"190\":1,\"509\":3,\"914\":1,\"924\":1,\"1383\":1,\"1445\":6,\"1446\":3,\"1450\":15}}],[\"changepwd\",{\"1\":{\"1553\":1,\"1586\":1}}],[\"changeinstancenametopid\",{\"1\":{\"914\":1}}],[\"changealias\",{\"1\":{\"623\":1}}],[\"change\",{\"1\":{\"282\":1,\"399\":2,\"1058\":4}}],[\"changecolorrgb\",{\"1\":{\"282\":3}}],[\"changecolor\",{\"1\":{\"275\":2,\"292\":1}}],[\"changetoken\",{\"1\":{\"108\":1}}],[\"changestatus\",{\"1\":{\"1552\":1,\"1586\":1}}],[\"changes\",{\"0\":{\"43\":1},\"1\":{\"399\":1}}],[\"chmod\",{\"1\":{\"21\":1,\"27\":1,\"1092\":1,\"1118\":1,\"1130\":1,\"1177\":1}}],[\"coding代码规范检查\",{\"1\":{\"1243\":1}}],[\"code`\",{\"1\":{\"1467\":3}}],[\"codehaus\",{\"1\":{\"648\":1}}],[\"code=\",{\"1\":{\"117\":1}}],[\"code\",{\"1\":{\"86\":1,\"249\":6,\"250\":6,\"360\":1,\"723\":1,\"762\":2,\"988\":2,\"1034\":1,\"1243\":2,\"1513\":1,\"1531\":5,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":2,\"1539\":2,\"1540\":2,\"1541\":3,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":4,\"1565\":2,\"1566\":1,\"1570\":2,\"1571\":2,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":2,\"1580\":2,\"1581\":2,\"1582\":5,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":2,\"1601\":2,\"1602\":2,\"1603\":4,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":3,\"1611\":2,\"1612\":2,\"1613\":4,\"1614\":2,\"1615\":2,\"1616\":2,\"1617\":1,\"1621\":1,\"1622\":3,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":3,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":3,\"1641\":1}}],[\"coalesce\",{\"1\":{\"1058\":14}}],[\"coyoteadapter\",{\"0\":{\"692\":1}}],[\"coyote\",{\"0\":{\"684\":1},\"1\":{\"692\":2}}],[\"cors\",{\"1\":{\"1137\":4}}],[\"corsutils\",{\"1\":{\"513\":1}}],[\"correct\",{\"1\":{\"494\":1}}],[\"corresponding\",{\"1\":{\"397\":1}}],[\"coresubscriber<\",{\"1\":{\"537\":1,\"556\":1}}],[\"coresubscriber\",{\"1\":{\"535\":1,\"556\":1}}],[\"corepublisher\",{\"0\":{\"532\":1},\"1\":{\"535\":1,\"556\":1}}],[\"core之类的\",{\"1\":{\"103\":1}}],[\"core\",{\"0\":{\"1347\":1},\"1\":{\"103\":1,\"397\":1,\"596\":7,\"780\":1,\"852\":1,\"886\":1}}],[\"course\",{\"1\":{\"982\":2}}],[\"could\",{\"1\":{\"345\":1,\"1445\":2}}],[\"countid\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"count>\",{\"1\":{\"1159\":1}}],[\"counter\",{\"1\":{\"280\":4,\"759\":2}}],[\"countdown\",{\"1\":{\"236\":1,\"1445\":1}}],[\"countdownlatch\",{\"1\":{\"236\":4,\"238\":1}}],[\"count\",{\"0\":{\"554\":1},\"1\":{\"156\":2,\"205\":1,\"236\":3,\"271\":5,\"312\":4,\"647\":11,\"758\":2,\"759\":2,\"782\":1,\"786\":5,\"798\":2,\"804\":2,\"1248\":4}}],[\"country\",{\"1\":{\"154\":3}}],[\"countrycapitalmap\",{\"1\":{\"154\":9}}],[\"column=\",{\"1\":{\"1059\":1}}],[\"column\",{\"1\":{\"748\":1,\"760\":1,\"1042\":4}}],[\"color\",{\"1\":{\"282\":1}}],[\"collate\",{\"1\":{\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"collation\",{\"0\":{\"56\":1},\"1\":{\"1120\":1}}],[\"collutil\",{\"1\":{\"1036\":1}}],[\"collector\",{\"1\":{\"758\":2}}],[\"collectors\",{\"1\":{\"378\":1,\"672\":2,\"786\":2,\"1522\":1}}],[\"collectlist\",{\"0\":{\"555\":1}}],[\"collect\",{\"1\":{\"309\":1,\"378\":3,\"672\":2,\"786\":2,\"1522\":1}}],[\"collection<securityconfigurer<o\",{\"1\":{\"334\":2}}],[\"collections\",{\"1\":{\"309\":1,\"311\":1,\"312\":2,\"491\":1,\"505\":1,\"1246\":1}}],[\"collection\",{\"1\":{\"279\":6}}],[\"collectionutils\",{\"1\":{\"345\":1,\"786\":2}}],[\"collectionutil\",{\"1\":{\"236\":1,\"672\":2,\"786\":1,\"1032\":1}}],[\"cookies\",{\"1\":{\"652\":2}}],[\"cookie\",{\"1\":{\"652\":10,\"675\":1,\"676\":1,\"1514\":1}}],[\"cookie处理器\",{\"1\":{\"451\":1}}],[\"cookie存放信息<=4kb\",{\"1\":{\"203\":1}}],[\"cookie是客户端会话技术\",{\"1\":{\"203\":1}}],[\"cookie和session的区别\",{\"0\":{\"203\":1}}],[\"cobra\",{\"0\":{\"163\":1},\"1\":{\"164\":3}}],[\"copysubscription\",{\"1\":{\"914\":1}}],[\"copyfrom\",{\"1\":{\"435\":1}}],[\"copy特征\",{\"0\":{\"266\":1}}],[\"copyproperties\",{\"1\":{\"236\":2}}],[\"copy\",{\"0\":{\"1110\":1,\"1111\":1},\"1\":{\"152\":3,\"179\":1,\"266\":2,\"310\":2,\"318\":3,\"438\":1,\"1110\":2,\"1111\":1,\"1115\":1,\"1421\":1,\"1617\":1}}],[\"combined\",{\"1\":{\"473\":5}}],[\"comment=\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1}}],[\"comment\",{\"1\":{\"1042\":4,\"1464\":7,\"1465\":7,\"1466\":7,\"1467\":11,\"1468\":2}}],[\"comments\",{\"1\":{\"982\":2}}],[\"commscallback\",{\"0\":{\"834\":1}}],[\"commssender\",{\"0\":{\"835\":1},\"1\":{\"833\":1}}],[\"commsreceiver\",{\"0\":{\"837\":1},\"1\":{\"833\":1}}],[\"commsreceiver和commssender与其交互获取消息\",{\"1\":{\"818\":1}}],[\"commit或git\",{\"1\":{\"1151\":1}}],[\"commitid\",{\"1\":{\"1147\":1,\"1150\":2}}],[\"commit记录\",{\"1\":{\"1130\":1,\"1145\":1}}],[\"commit=true\",{\"1\":{\"850\":1}}],[\"commitasync\",{\"1\":{\"798\":1}}],[\"commit为false\",{\"1\":{\"798\":2}}],[\"commit为true\",{\"1\":{\"798\":2}}],[\"commit\",{\"1\":{\"202\":1,\"212\":1,\"218\":1,\"798\":2,\"801\":2,\"802\":2,\"852\":3,\"1123\":1,\"1144\":1,\"1147\":1,\"1244\":1}}],[\"commandexecutor\",{\"1\":{\"1246\":1}}],[\"commandn\",{\"1\":{\"1226\":2}}],[\"command2\",{\"1\":{\"1226\":2}}],[\"command1\",{\"1\":{\"1226\":2}}],[\"commandoptions\",{\"1\":{\"985\":2}}],[\"commandlinerunner\",{\"1\":{\"1032\":1}}],[\"commandlinerunner初始化用户和服务的公私密钥\",{\"1\":{\"471\":1}}],[\"commandlinerunner接口\",{\"1\":{\"210\":1}}],[\"command\",{\"0\":{\"164\":1},\"1\":{\"164\":3,\"476\":2,\"985\":2,\"1120\":1,\"1139\":1,\"1226\":1,\"1246\":1,\"1445\":6}}],[\"communication\",{\"1\":{\"131\":2}}],[\"commonjs\",{\"1\":{\"992\":3,\"996\":1}}],[\"commonmapper\",{\"1\":{\"852\":1}}],[\"commons\",{\"1\":{\"780\":1,\"1130\":1}}],[\"commonconstants\",{\"1\":{\"602\":12}}],[\"commonannotationbeanpostprocessor\",{\"1\":{\"441\":1}}],[\"commonannotationbeanpostprocessor继承initdestroyannotationbeanpostprocessor\",{\"0\":{\"441\":1}}],[\"commonannotationbeanpostprocessor的initdestroyannotationbeanpostprocessor的postprocessbeforeinitialization方法\",{\"1\":{\"440\":1}}],[\"commonannotationbeanpostprocessor处理\",{\"1\":{\"359\":1}}],[\"common\",{\"1\":{\"103\":1,\"397\":1,\"792\":6,\"802\":4,\"852\":1,\"886\":1,\"911\":1,\"1059\":1}}],[\"compsoe\",{\"1\":{\"1474\":1}}],[\"compression\",{\"1\":{\"801\":1,\"802\":1}}],[\"compatible\",{\"1\":{\"1407\":1}}],[\"companyname\",{\"1\":{\"1079\":1}}],[\"company\",{\"1\":{\"760\":1}}],[\"compareandset\",{\"1\":{\"1445\":2}}],[\"compareandswapobject\",{\"0\":{\"259\":1}}],[\"comparingint\",{\"1\":{\"672\":1}}],[\"comparator\",{\"1\":{\"490\":1,\"672\":1}}],[\"compliance\",{\"1\":{\"623\":1}}],[\"completablefuture\",{\"0\":{\"575\":1},\"1\":{\"574\":1}}],[\"completely\",{\"1\":{\"1445\":1}}],[\"completequeue完成队列\",{\"1\":{\"834\":1}}],[\"completeexceptionally\",{\"1\":{\"575\":1}}],[\"completed\",{\"1\":{\"411\":1,\"1421\":1}}],[\"completeproxiedinterfaces\",{\"1\":{\"386\":1}}],[\"complete\",{\"1\":{\"346\":1,\"537\":1,\"575\":1}}],[\"component等注解的类识别为配置类configurationclass\",{\"1\":{\"486\":1}}],[\"component\",{\"0\":{\"1346\":1,\"1350\":1,\"1354\":1,\"1359\":1},\"1\":{\"421\":1,\"422\":1,\"480\":1,\"589\":1,\"658\":2,\"711\":1,\"971\":1,\"1345\":1,\"1579\":1,\"1580\":1,\"1582\":4,\"1583\":9}}],[\"componentscan\",{\"1\":{\"488\":3}}],[\"components\",{\"1\":{\"31\":4,\"495\":1}}],[\"compositeeventlistener\",{\"0\":{\"1372\":1},\"1\":{\"1371\":1}}],[\"compositeentitytablemetadataresolver实现entitytablemetadataresolver\",{\"1\":{\"1294\":1}}],[\"compositeendpointdatasource\",{\"1\":{\"108\":1}}],[\"compose更适用于单个主机上的容器编排和管理\",{\"1\":{\"1164\":1}}],[\"compose配置文件示例\",{\"0\":{\"1120\":1}}],[\"compose会为我们的应用创建一个网络\",{\"1\":{\"1117\":1}}],[\"composed\",{\"1\":{\"249\":8,\"250\":3}}],[\"compose\",{\"0\":{\"35\":1,\"566\":1,\"1092\":1,\"1117\":1,\"1164\":1},\"1\":{\"35\":1,\"249\":2,\"1092\":5,\"1118\":7,\"1119\":3,\"1121\":1,\"1123\":1,\"1458\":2,\"1474\":3,\"1475\":2}}],[\"compile\",{\"1\":{\"851\":6,\"1074\":1}}],[\"compileonly\",{\"1\":{\"31\":1,\"1074\":1}}],[\"compilerversion>\",{\"1\":{\"1202\":1}}],[\"compilerversion>1\",{\"1\":{\"1202\":1}}],[\"compileroptions\",{\"1\":{\"996\":1}}],[\"compiler\",{\"0\":{\"4\":1},\"1\":{\"1202\":6}}],[\"com\",{\"0\":{\"32\":1},\"1\":{\"20\":1,\"29\":1,\"32\":4,\"39\":3,\"49\":2,\"86\":1,\"103\":1,\"148\":3,\"151\":2,\"172\":1,\"173\":1,\"241\":2,\"271\":3,\"373\":1,\"399\":1,\"479\":4,\"480\":1,\"585\":1,\"595\":1,\"596\":3,\"623\":1,\"642\":1,\"648\":2,\"652\":1,\"707\":1,\"780\":1,\"792\":11,\"850\":2,\"871\":1,\"911\":2,\"934\":2,\"1032\":1,\"1059\":2,\"1066\":2,\"1079\":1,\"1092\":1,\"1096\":3,\"1115\":1,\"1116\":1,\"1118\":1,\"1130\":2,\"1137\":1,\"1144\":2,\"1145\":1,\"1146\":1,\"1215\":2,\"1256\":1,\"1283\":1,\"1445\":4,\"1455\":1,\"1458\":1,\"1513\":1,\"1515\":3,\"1541\":2,\"1550\":1,\"1635\":1}}],[\"conpacket\",{\"1\":{\"833\":2}}],[\"concurrency\",{\"1\":{\"804\":3}}],[\"concurrentmessagelistenercontainer\",{\"0\":{\"812\":1}}],[\"concurrentkafkalistenercontainerfactory<>\",{\"1\":{\"801\":1}}],[\"concurrentkafkalistenercontainerfactory<string\",{\"1\":{\"801\":1}}],[\"concurrent\",{\"1\":{\"647\":1}}],[\"concurrently\",{\"1\":{\"647\":2}}],[\"concurrentresultcontext\",{\"1\":{\"406\":1}}],[\"concurrentresult\",{\"1\":{\"406\":1}}],[\"concurrentqueue\",{\"1\":{\"113\":1}}],[\"concurrentdictionary\",{\"1\":{\"113\":1}}],[\"concat\",{\"1\":{\"1297\":1}}],[\"concat方法\",{\"0\":{\"548\":1}}],[\"concatmap\",{\"1\":{\"513\":1}}],[\"convert\",{\"1\":{\"297\":1,\"1353\":1}}],[\"condition2\",{\"1\":{\"1226\":1}}],[\"condition1\",{\"1\":{\"1226\":1}}],[\"condition=\",{\"1\":{\"589\":1,\"711\":1}}],[\"conditionalonsinglecandidate\",{\"0\":{\"374\":1}}],[\"conditionalonproperty\",{\"0\":{\"373\":1}}],[\"conditionalonclass\",{\"0\":{\"369\":1}}],[\"conditionalonwebapplication\",{\"0\":{\"368\":1},\"1\":{\"368\":2}}],[\"conditionalonmissingbean失效问题\",{\"1\":{\"367\":1}}],[\"conditionalonmissingbean\",{\"0\":{\"367\":1},\"1\":{\"852\":1,\"858\":1}}],[\"conditional\",{\"0\":{\"366\":1}}],[\"condition\",{\"1\":{\"133\":3,\"237\":1,\"1226\":1,\"1445\":1}}],[\"conda\",{\"0\":{\"95\":1},\"1\":{\"96\":12}}],[\"consistency\",{\"1\":{\"886\":1}}],[\"consistenthash\",{\"1\":{\"730\":1}}],[\"consent\",{\"1\":{\"344\":1}}],[\"consumemode\",{\"1\":{\"1245\":2}}],[\"consumemodel\",{\"1\":{\"920\":1}}],[\"consumemessgeorderlyservice\",{\"1\":{\"920\":1}}],[\"consumemessageconcurrentlyservice\",{\"1\":{\"914\":1}}],[\"consumemessageorderlyservice\",{\"1\":{\"914\":1}}],[\"consumemessageservice\",{\"1\":{\"914\":4}}],[\"consumeorderly\",{\"1\":{\"914\":2}}],[\"consumergroup\",{\"1\":{\"914\":1,\"1245\":1}}],[\"consumercoordinator\",{\"0\":{\"816\":1}}],[\"consumerconfig\",{\"1\":{\"801\":11}}],[\"consumerawarelistenererrorhandler\",{\"1\":{\"801\":3}}],[\"consumerfactory<string\",{\"1\":{\"801\":1}}],[\"consumerfactory\",{\"1\":{\"801\":4}}],[\"consumerrecord\",{\"1\":{\"792\":1}}],[\"consumer<\",{\"1\":{\"250\":1,\"801\":1}}],[\"consumer<t>\",{\"1\":{\"250\":2}}],[\"consumer\",{\"0\":{\"250\":1},\"1\":{\"250\":2,\"792\":1,\"801\":2,\"802\":1,\"804\":8,\"914\":4}}],[\"consul\",{\"1\":{\"165\":1}}],[\"constructor<testsingleton>\",{\"1\":{\"1257\":1}}],[\"constructor\",{\"1\":{\"479\":2,\"871\":3,\"932\":1,\"991\":2,\"992\":2,\"1257\":3}}],[\"construction\",{\"1\":{\"411\":3}}],[\"const关键字出现时将被重置为\",{\"1\":{\"129\":1}}],[\"const\",{\"0\":{\"296\":1},\"1\":{\"128\":3,\"129\":6,\"145\":1,\"296\":1,\"932\":2,\"969\":2,\"970\":4,\"971\":3,\"985\":1,\"988\":2,\"991\":4,\"992\":7}}],[\"consoleappender\",{\"1\":{\"596\":1}}],[\"console\",{\"1\":{\"103\":1,\"596\":8,\"991\":1,\"992\":2,\"1131\":1,\"1136\":1,\"1141\":1,\"1407\":3}}],[\"contoken\",{\"1\":{\"833\":3}}],[\"container3\",{\"1\":{\"1243\":2}}],[\"containerd等\",{\"1\":{\"1162\":1}}],[\"container>\",{\"1\":{\"1111\":1}}],[\"container\",{\"0\":{\"694\":1},\"1\":{\"678\":1,\"1013\":5,\"1120\":2,\"1122\":1,\"1133\":3,\"1139\":4,\"1243\":2,\"1475\":1}}],[\"containercontext是容器上下文\",{\"1\":{\"600\":1}}],[\"containskey\",{\"1\":{\"786\":1}}],[\"containsbean\",{\"1\":{\"397\":1}}],[\"contains\",{\"1\":{\"383\":1,\"399\":3,\"434\":1,\"672\":1}}],[\"control\",{\"1\":{\"725\":5}}],[\"controllername\",{\"1\":{\"1586\":44,\"1590\":1,\"1591\":1,\"1592\":10,\"1597\":5}}],[\"controlleradvice只是作用范围可以自定义\",{\"1\":{\"375\":1}}],[\"controlleradvice\",{\"0\":{\"375\":1},\"1\":{\"376\":4,\"1526\":1}}],[\"controlleractionendpointdatasource\",{\"1\":{\"108\":1}}],[\"controlleractioninvokercache\",{\"1\":{\"108\":1}}],[\"controlleractioninvoker\",{\"1\":{\"108\":1}}],[\"controller\",{\"1\":{\"354\":2,\"376\":1,\"1032\":1,\"1635\":1}}],[\"controllerfactoryprovider\",{\"1\":{\"108\":1}}],[\"controllerrequestdelegatefactory\",{\"1\":{\"108\":1}}],[\"controllertest\",{\"1\":{\"106\":1}}],[\"controller相关\",{\"1\":{\"104\":1}}],[\"contracts\",{\"1\":{\"399\":1}}],[\"continue\",{\"1\":{\"132\":1,\"852\":1,\"1036\":2,\"1445\":3}}],[\"contenttype\",{\"1\":{\"1531\":1,\"1532\":1,\"1533\":1,\"1534\":1,\"1535\":1}}],[\"content=\",{\"1\":{\"1407\":2}}],[\"contentencoder\",{\"1\":{\"1383\":4}}],[\"content\",{\"1\":{\"297\":2,\"621\":1,\"719\":3,\"924\":1,\"1137\":2,\"1248\":2,\"1455\":1,\"1539\":1,\"1540\":1,\"1541\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1563\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1582\":1,\"1583\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1594\":1,\"1596\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1605\":1,\"1606\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1615\":1,\"1616\":1,\"1621\":1,\"1622\":1,\"1624\":1,\"1628\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1637\":1,\"1641\":1}}],[\"contents\",{\"1\":{\"86\":1,\"346\":1}}],[\"contextutils\",{\"1\":{\"1345\":1}}],[\"context=nexus表示在访问nexus后台web时\",{\"1\":{\"1200\":1}}],[\"context=nexus\",{\"1\":{\"1142\":1,\"1200\":1}}],[\"context把执行完了之后的httpservletresponse对象返回给host\",{\"1\":{\"679\":1}}],[\"context匹配到url\",{\"1\":{\"679\":1}}],[\"contextobject\",{\"1\":{\"649\":6}}],[\"contextholder\",{\"1\":{\"632\":4}}],[\"context上下文在web开发中是一个重要的概念\",{\"1\":{\"599\":1}}],[\"contextwrite\",{\"0\":{\"543\":1}}],[\"contextpathcompositehandler\",{\"1\":{\"505\":1}}],[\"context<\",{\"1\":{\"476\":1}}],[\"context等容器对象\",{\"1\":{\"460\":1}}],[\"contexttypematchclassloader\",{\"1\":{\"397\":1}}],[\"contextrefresher\",{\"1\":{\"884\":1}}],[\"contextrefresh\",{\"1\":{\"397\":2}}],[\"contextafterchainexecution\",{\"1\":{\"346\":2}}],[\"contextattributesmapper\",{\"1\":{\"345\":1}}],[\"contextattributes\",{\"1\":{\"345\":3}}],[\"contextbindings\",{\"1\":{\"456\":1}}],[\"contextbeforechainexecution\",{\"1\":{\"346\":4}}],[\"contextbuilder\",{\"1\":{\"345\":5}}],[\"context\",{\"0\":{\"387\":1,\"557\":1,\"599\":1},\"1\":{\"31\":4,\"179\":2,\"330\":1,\"348\":1,\"397\":10,\"399\":1,\"411\":16,\"446\":1,\"456\":5,\"509\":1,\"601\":2,\"602\":14,\"647\":2,\"649\":4,\"678\":3,\"733\":1,\"1120\":2,\"1345\":1,\"1411\":1,\"1475\":1,\"1519\":1}}],[\"connect连接事件的触发\",{\"0\":{\"1398\":1}}],[\"connect=zookeeper\",{\"1\":{\"1126\":1}}],[\"connectbg\",{\"0\":{\"832\":1},\"1\":{\"833\":1}}],[\"connectactionlister\",{\"0\":{\"826\":1}}],[\"connectactionlistener\",{\"1\":{\"819\":1}}],[\"connect进行连接\",{\"1\":{\"819\":1}}],[\"connect方法\",{\"0\":{\"828\":1},\"1\":{\"819\":1,\"826\":1}}],[\"connector把httpservletresponse对象返回给客户browse\",{\"1\":{\"679\":1}}],[\"connector把该请求交给它所在的service的engine来处理\",{\"1\":{\"679\":1}}],[\"connectorstartfailedexception\",{\"1\":{\"456\":1}}],[\"connector\",{\"0\":{\"688\":1},\"1\":{\"450\":9,\"456\":3,\"585\":1,\"678\":1,\"679\":1,\"707\":1,\"790\":5,\"792\":1,\"1243\":1}}],[\"connecttimeout=5000\",{\"1\":{\"213\":1}}],[\"connections\",{\"1\":{\"1210\":1,\"1243\":1}}],[\"connectionlost\",{\"1\":{\"834\":1}}],[\"connectionhandler\",{\"0\":{\"690\":1},\"1\":{\"689\":1}}],[\"connectionfactory\",{\"1\":{\"559\":1}}],[\"connectionfactoryconfigurations\",{\"1\":{\"559\":1}}],[\"connectionpoolconfiguration\",{\"1\":{\"559\":1}}],[\"connectionpool\",{\"1\":{\"559\":1}}],[\"connectionobserver\",{\"1\":{\"509\":1}}],[\"connectionrefused\",{\"1\":{\"215\":1}}],[\"connection\",{\"0\":{\"32\":1,\"52\":1},\"1\":{\"509\":7,\"850\":2,\"852\":2,\"853\":1,\"911\":4,\"924\":1,\"1026\":1,\"1210\":3,\"1211\":1,\"1451\":1,\"1515\":1}}],[\"connectivity\",{\"0\":{\"3\":1}}],[\"connect\",{\"0\":{\"32\":1},\"1\":{\"792\":2,\"833\":3,\"1089\":1,\"1210\":2,\"1211\":1,\"1353\":3,\"1397\":1,\"1445\":3}}],[\"confirmshutdown\",{\"1\":{\"1445\":5}}],[\"confirm任务触发的任务事件\",{\"1\":{\"589\":1,\"711\":1}}],[\"confirm\",{\"1\":{\"589\":1,\"664\":1,\"711\":1}}],[\"configtemplatematchmap\",{\"1\":{\"1415\":1}}],[\"configtest\",{\"1\":{\"106\":6}}],[\"configstoragemanager\",{\"1\":{\"1342\":1}}],[\"config的类型\",{\"1\":{\"1309\":1}}],[\"configfactory\",{\"1\":{\"870\":1}}],[\"configlocation\",{\"1\":{\"852\":8}}],[\"config下的生效\",{\"1\":{\"593\":1}}],[\"config<\",{\"1\":{\"476\":1,\"862\":1}}],[\"config还提供了一种机制来自动刷新依赖该对象的其他bean对象\",{\"1\":{\"476\":1}}],[\"configdataenvironmentcontributor\",{\"1\":{\"355\":1}}],[\"configdataenvironmentcontributors\",{\"1\":{\"355\":1}}],[\"configdataenvironment\",{\"1\":{\"355\":1}}],[\"configdataenvironmentpostprocessor\",{\"1\":{\"355\":1}}],[\"configyml\",{\"1\":{\"164\":1}}],[\"config文件夹\",{\"1\":{\"103\":1}}],[\"config\",{\"0\":{\"887\":1},\"1\":{\"29\":2,\"32\":1,\"51\":3,\"52\":2,\"96\":1,\"106\":3,\"164\":1,\"329\":4,\"331\":2,\"476\":4,\"593\":5,\"596\":1,\"652\":2,\"733\":1,\"792\":14,\"801\":25,\"852\":4,\"886\":1,\"902\":1,\"985\":1,\"1093\":1,\"1127\":2,\"1128\":1,\"1134\":2,\"1146\":5,\"1305\":1,\"1308\":1,\"1312\":1,\"1450\":3,\"1515\":1}}],[\"configuring\",{\"1\":{\"334\":1}}],[\"configurator\",{\"0\":{\"1416\":1},\"1\":{\"1417\":1}}],[\"configuration的getmapper\",{\"1\":{\"852\":1}}],[\"configuration的配置类gateconfig类\",{\"1\":{\"468\":1}}],[\"configurations\",{\"0\":{\"1070\":1},\"1\":{\"494\":4}}],[\"configurationclasses\",{\"1\":{\"491\":1}}],[\"configurationclass\",{\"1\":{\"491\":5}}],[\"configurationclass处理\",{\"1\":{\"489\":1}}],[\"configurationclassparser\",{\"0\":{\"487\":1}}],[\"configurationclasspostprocessor\",{\"0\":{\"486\":1},\"1\":{\"397\":1}}],[\"configurationclassbeandefinitionreader配置类beandefinition读取器\",{\"1\":{\"486\":1}}],[\"configurationpropertiesrebinder\",{\"1\":{\"884\":1}}],[\"configurationproperties注解的对象放入configurationpropertiesrebinder\",{\"1\":{\"884\":1}}],[\"configurationproperties注解的bean对象的属性值\",{\"1\":{\"476\":1}}],[\"configurationproperties注解的类\",{\"1\":{\"370\":1}}],[\"configurationproperties\",{\"0\":{\"372\":1},\"1\":{\"476\":1,\"852\":6}}],[\"configuration注解的配置类\",{\"1\":{\"211\":1}}],[\"configuration在项目启动时已注册到容器中\",{\"1\":{\"106\":1}}],[\"configuration>\",{\"1\":{\"49\":1,\"596\":1}}],[\"configuration\",{\"0\":{\"328\":1,\"863\":1},\"1\":{\"26\":1,\"106\":5,\"329\":1,\"330\":1,\"421\":1,\"430\":1,\"486\":1,\"491\":1,\"494\":1,\"505\":1,\"657\":1,\"658\":1,\"801\":3,\"849\":1,\"852\":36,\"858\":2,\"900\":1,\"1031\":1,\"1210\":1,\"1215\":1,\"1259\":1,\"1515\":1}}],[\"configurablewebapplicationcontext\",{\"1\":{\"411\":3}}],[\"configurableapplicationcontext\",{\"1\":{\"397\":1,\"411\":1,\"852\":2}}],[\"configurablelistablebeanfactory\",{\"1\":{\"329\":1,\"397\":2,\"399\":1,\"435\":2}}],[\"configured\",{\"1\":{\"1215\":1}}],[\"configuretasks\",{\"1\":{\"657\":1}}],[\"configureengine\",{\"1\":{\"450\":1}}],[\"configureandrefreshwebapplicationcontext\",{\"1\":{\"411\":1}}],[\"configurer\",{\"0\":{\"335\":1},\"1\":{\"334\":6}}],[\"configurers\",{\"1\":{\"334\":5}}],[\"configurersaddedininitializing\",{\"1\":{\"333\":1,\"334\":1}}],[\"configurers配置器\",{\"1\":{\"333\":1}}],[\"configure<configtest>\",{\"1\":{\"106\":1}}],[\"configure\",{\"0\":{\"4\":1},\"1\":{\"26\":1,\"326\":2,\"334\":3,\"343\":3,\"386\":1,\"851\":1,\"1178\":1}}],[\"conf\",{\"0\":{\"1026\":1,\"1210\":1,\"1211\":2},\"1\":{\"5\":1,\"17\":1,\"1025\":1,\"1136\":5,\"1140\":4,\"1141\":2,\"1206\":2,\"1210\":2}}],[\"conf中\",{\"1\":{\"5\":1,\"17\":1}}],[\"conf在\",{\"1\":{\"5\":1,\"17\":1}}],[\"c\",{\"0\":{\"4\":1,\"1452\":1,\"1657\":1},\"1\":{\"12\":2,\"30\":1,\"103\":1,\"117\":1,\"121\":1,\"122\":2,\"124\":2,\"127\":2,\"128\":2,\"129\":4,\"138\":1,\"139\":4,\"140\":4,\"164\":2,\"179\":4,\"190\":9,\"218\":1,\"236\":5,\"290\":1,\"1096\":1,\"1130\":2,\"1145\":2,\"1148\":1,\"1155\":1,\"1227\":2}}],[\"svn\",{\"1\":{\"1646\":2}}],[\"svn拉取代码构建打jar包推送到gitlab仓库\",{\"1\":{\"564\":1}}],[\"sm\",{\"1\":{\"1414\":1}}],[\"smartlifecycle接口\",{\"1\":{\"919\":1}}],[\"smartsingleton\",{\"1\":{\"438\":3}}],[\"smart\",{\"1\":{\"438\":1}}],[\"smartinitialize\",{\"1\":{\"438\":2}}],[\"smartinitializingsingleton\",{\"0\":{\"918\":1},\"1\":{\"438\":3}}],[\"smartfactorybean<\",{\"1\":{\"438\":2}}],[\"smartfactorybean\",{\"1\":{\"438\":2}}],[\"smartclassloader\",{\"1\":{\"386\":2,\"435\":2}}],[\"sgid\",{\"1\":{\"1227\":1}}],[\"srv\",{\"1\":{\"1127\":1}}],[\"src\",{\"1\":{\"991\":7,\"992\":3,\"993\":2,\"994\":2,\"995\":2,\"1065\":2,\"1110\":2}}],[\"src进行结合使用\",{\"1\":{\"982\":1}}],[\"src=\",{\"1\":{\"934\":3,\"943\":2,\"982\":2,\"1407\":1}}],[\"srcstorepass\",{\"1\":{\"623\":1}}],[\"srcstoretype\",{\"1\":{\"623\":1}}],[\"srckeystore\",{\"1\":{\"623\":2}}],[\"src目录\",{\"1\":{\"168\":2}}],[\"sf\",{\"1\":{\"1115\":1,\"1116\":1,\"1119\":1,\"1123\":4,\"1184\":1}}],[\"sn\",{\"1\":{\"1243\":10}}],[\"snd\",{\"1\":{\"833\":1}}],[\"snapshotrepository>\",{\"1\":{\"1203\":1}}],[\"snapshots\",{\"1\":{\"1201\":1,\"1203\":1}}],[\"snapshots<\",{\"1\":{\"621\":1}}],[\"snapshots>\",{\"1\":{\"49\":2,\"621\":1,\"1202\":2}}],[\"snappy\",{\"1\":{\"801\":1,\"802\":1}}],[\"s=to\",{\"1\":{\"623\":1}}],[\"skip\",{\"1\":{\"399\":1,\"1141\":1,\"1522\":1}}],[\"swim\",{\"1\":{\"988\":2}}],[\"switching\",{\"1\":{\"1445\":1}}],[\"switchifempty\",{\"1\":{\"513\":1}}],[\"switch=\",{\"1\":{\"982\":1}}],[\"switch>\",{\"1\":{\"974\":1,\"975\":1}}],[\"switch\",{\"1\":{\"360\":1,\"914\":3,\"973\":1,\"974\":1,\"982\":2,\"1148\":1,\"1445\":1,\"1521\":1}}],[\"sw\",{\"0\":{\"959\":1}}],[\"swap\",{\"1\":{\"139\":2}}],[\"swagger\",{\"1\":{\"79\":1}}],[\"swagger文档空指针报错问题\",{\"0\":{\"1\":1}}],[\"sqrt\",{\"1\":{\"295\":1}}],[\"sq\",{\"1\":{\"291\":1}}],[\"square\",{\"1\":{\"288\":1,\"616\":1}}],[\"sqloperator\",{\"1\":{\"1301\":1}}],[\"sql语句\",{\"1\":{\"902\":1}}],[\"sql\",{\"0\":{\"1059\":1},\"1\":{\"860\":1,\"1056\":3,\"1057\":1,\"1115\":3,\"1207\":1}}],[\"sqlexception\",{\"1\":{\"852\":1}}],[\"sql框架允许多个数据库驱动程序\",{\"1\":{\"850\":1}}],[\"sqlsessionproxy\",{\"1\":{\"852\":2}}],[\"sqlsession是defaultsqlsession\",{\"1\":{\"852\":1}}],[\"sqlsessioninterceptor\",{\"1\":{\"852\":1}}],[\"sqlsession拦截器\",{\"1\":{\"852\":1}}],[\"sqlsession\",{\"1\":{\"852\":11}}],[\"sqlsessiontemplate\",{\"1\":{\"849\":1,\"852\":9}}],[\"sqlsessionfactory方法\",{\"1\":{\"858\":1}}],[\"sqlsessionfactorybuilder\",{\"1\":{\"852\":3}}],[\"sqlsessionfactorybean\",{\"1\":{\"852\":2}}],[\"sqlsessionfactory\",{\"1\":{\"849\":1,\"852\":11}}],[\"sqlserver\",{\"1\":{\"75\":1}}],[\"sql层\",{\"0\":{\"716\":1}}],[\"sql优化\",{\"0\":{\"714\":1}}],[\"sql支持不足\",{\"1\":{\"221\":1}}],[\"sql相关\",{\"1\":{\"104\":1}}],[\"sbin\",{\"1\":{\"1130\":3,\"1188\":2}}],[\"sbe\",{\"1\":{\"982\":2}}],[\"sb\",{\"1\":{\"241\":3,\"1185\":1}}],[\"salt\",{\"1\":{\"1518\":1}}],[\"safari\",{\"1\":{\"1425\":1}}],[\"sara\",{\"1\":{\"971\":2}}],[\"saml协议的核心是\",{\"1\":{\"1491\":1}}],[\"saml2\",{\"1\":{\"1491\":1}}],[\"sample\",{\"1\":{\"780\":1}}],[\"sameorigin\",{\"1\":{\"348\":1}}],[\"sat\",{\"1\":{\"656\":1}}],[\"savetoken\",{\"1\":{\"833\":1}}],[\"save\",{\"1\":{\"467\":5,\"833\":1,\"965\":1}}],[\"saveoperationlog\",{\"1\":{\"413\":1}}],[\"saveloginlog\",{\"1\":{\"413\":1}}],[\"savelog\",{\"1\":{\"413\":1}}],[\"saved\",{\"1\":{\"348\":1}}],[\"savecontext\",{\"1\":{\"346\":1}}],[\"saverequest\",{\"1\":{\"345\":1}}],[\"saascloud\",{\"1\":{\"218\":1,\"852\":2,\"911\":2,\"1059\":2}}],[\"saga\",{\"0\":{\"669\":1},\"1\":{\"212\":1}}],[\"sayhi\",{\"1\":{\"991\":1,\"992\":2}}],[\"say\",{\"1\":{\"189\":3,\"241\":2,\"269\":4,\"282\":3}}],[\"slf4j\",{\"1\":{\"657\":1,\"780\":2,\"792\":1,\"801\":1,\"1031\":1,\"1345\":1}}],[\"slow\",{\"1\":{\"206\":1}}],[\"sleep\",{\"1\":{\"179\":4,\"189\":1,\"234\":2}}],[\"slice=\",{\"1\":{\"152\":3}}],[\"slice1\",{\"1\":{\"152\":2}}],[\"slice\",{\"1\":{\"133\":1,\"153\":1,\"174\":1,\"277\":2}}],[\"site\",{\"1\":{\"652\":3}}],[\"sinkparallelism\",{\"1\":{\"792\":3}}],[\"sinks\",{\"1\":{\"792\":2}}],[\"sink\",{\"0\":{\"789\":1},\"1\":{\"789\":2,\"792\":1}}],[\"singlethreadeventexecutor\",{\"1\":{\"1445\":7}}],[\"singlethreadeventloop\",{\"1\":{\"1445\":2}}],[\"singletonmap\",{\"1\":{\"505\":1}}],[\"singletoninstance\",{\"1\":{\"438\":3}}],[\"singleton\",{\"0\":{\"1255\":1},\"1\":{\"397\":1,\"438\":1,\"439\":1,\"491\":1,\"1256\":3}}],[\"singletons\",{\"1\":{\"397\":2,\"438\":1}}],[\"singletontargetsource\",{\"1\":{\"383\":1,\"434\":1}}],[\"singletonfactories中取\",{\"1\":{\"439\":1}}],[\"singletonfactories\",{\"1\":{\"380\":1}}],[\"singletonobjects\",{\"1\":{\"380\":1}}],[\"single\",{\"1\":{\"802\":2,\"1139\":1}}],[\"singleorempty方法\",{\"0\":{\"552\":1}}],[\"since\",{\"1\":{\"241\":1,\"397\":1,\"399\":1,\"657\":1,\"1445\":1,\"1518\":2}}],[\"simpleservlethandleradapter\",{\"1\":{\"1259\":1}}],[\"simplecontrollerhandleradapter\",{\"1\":{\"1259\":1}}],[\"simpletriggerfactorybean\",{\"1\":{\"658\":5}}],[\"simpletrigger触发器\",{\"1\":{\"658\":1}}],[\"simpletrigger\",{\"1\":{\"658\":1}}],[\"simplejndibeanfactory\",{\"1\":{\"441\":1}}],[\"simpledateformat\",{\"1\":{\"379\":1}}],[\"simpleauthenticationentrypoint\",{\"1\":{\"348\":2}}],[\"signed\",{\"1\":{\"1130\":1}}],[\"signin\",{\"1\":{\"947\":1,\"1345\":1,\"1584\":1}}],[\"signature使用加密后的头和载荷以及密钥加密形成\",{\"1\":{\"726\":1}}],[\"signature\",{\"1\":{\"726\":1,\"853\":3,\"911\":2,\"991\":1}}],[\"signalall\",{\"1\":{\"237\":1,\"1246\":1}}],[\"signal\",{\"1\":{\"237\":1,\"1246\":1}}],[\"sign\",{\"1\":{\"271\":5,\"649\":2,\"1345\":1}}],[\"silenceusage\",{\"1\":{\"164\":1}}],[\"size=15\",{\"1\":{\"850\":1}}],[\"size则为10\",{\"1\":{\"850\":1}}],[\"size或接收到消息linger\",{\"1\":{\"801\":1,\"802\":2}}],[\"size大小的hits记录\",{\"1\":{\"780\":1}}],[\"size的大小\",{\"1\":{\"717\":1}}],[\"sizeof\",{\"1\":{\"128\":2}}],[\"size\",{\"1\":{\"36\":2,\"140\":1,\"236\":3,\"256\":1,\"399\":2,\"717\":5,\"765\":2,\"769\":1,\"770\":1,\"780\":6,\"782\":3,\"783\":1,\"786\":1,\"801\":2,\"802\":1,\"804\":2,\"1127\":2,\"1248\":2,\"1486\":4,\"1515\":2,\"1613\":1,\"1622\":1}}],[\"s1\",{\"1\":{\"152\":2}}],[\"suffix\",{\"1\":{\"1514\":1}}],[\"sun\",{\"1\":{\"1249\":1}}],[\"sunface\",{\"1\":{\"297\":1}}],[\"suid\",{\"1\":{\"1227\":1}}],[\"suit\",{\"1\":{\"275\":3}}],[\"sudo\",{\"1\":{\"1096\":2,\"1128\":1,\"1129\":1}}],[\"suggesttodo\",{\"1\":{\"914\":2}}],[\"sure\",{\"1\":{\"494\":1,\"1445\":1}}],[\"such\",{\"1\":{\"411\":2}}],[\"success\",{\"1\":{\"360\":2,\"945\":1,\"1353\":1,\"1445\":3,\"1522\":1,\"1531\":2,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":1,\"1543\":1,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":1,\"1552\":1,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":1,\"1563\":1,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":1,\"1574\":1,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":1,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":1,\"1594\":1,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":2,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":2,\"1641\":1}}],[\"successhandler\",{\"1\":{\"348\":1}}],[\"succeeded\",{\"1\":{\"780\":1,\"1353\":1}}],[\"succeed\",{\"1\":{\"353\":1,\"786\":1}}],[\"supports\",{\"1\":{\"1259\":2}}],[\"support\",{\"1\":{\"411\":1,\"780\":1,\"1445\":1}}],[\"supported\",{\"1\":{\"345\":1,\"1259\":1,\"1445\":1}}],[\"suppresswarnings\",{\"1\":{\"334\":1,\"900\":1}}],[\"supplier<t>\",{\"1\":{\"251\":1}}],[\"supplier\",{\"0\":{\"251\":1}}],[\"super\",{\"1\":{\"249\":2,\"250\":1,\"413\":1,\"445\":1,\"531\":1,\"535\":1,\"537\":3,\"556\":2,\"632\":3,\"900\":1,\"1534\":1,\"1564\":1,\"1565\":1,\"1603\":1}}],[\"summarizable\",{\"1\":{\"297\":1}}],[\"summarize\",{\"1\":{\"297\":4}}],[\"summary>\",{\"1\":{\"297\":1}}],[\"summary\",{\"1\":{\"297\":7}}],[\"sum\",{\"1\":{\"140\":4,\"156\":2,\"173\":1,\"236\":3,\"277\":3,\"315\":2,\"786\":1}}],[\"subadmin\",{\"1\":{\"1643\":1}}],[\"subprotocol\",{\"1\":{\"1421\":1}}],[\"submit\",{\"1\":{\"1013\":1}}],[\"submitting\",{\"1\":{\"399\":1}}],[\"substr\",{\"1\":{\"931\":1}}],[\"substring\",{\"1\":{\"471\":1,\"649\":3,\"986\":3,\"1032\":1}}],[\"subscription\",{\"0\":{\"529\":1},\"1\":{\"530\":1,\"556\":2,\"1272\":1}}],[\"subscriptions\",{\"1\":{\"10\":2}}],[\"subscribecontext\",{\"0\":{\"543\":1}}],[\"subscribeorreturn\",{\"1\":{\"535\":1,\"556\":1}}],[\"subscribeorreturn方法\",{\"1\":{\"527\":1}}],[\"subscribe方法\",{\"0\":{\"535\":1}}],[\"subscribers\",{\"1\":{\"1312\":1}}],[\"subscribercontext\",{\"1\":{\"557\":2,\"1345\":4}}],[\"subscriber<\",{\"1\":{\"531\":1,\"535\":1,\"556\":1}}],[\"subscriber<t>\",{\"1\":{\"530\":1}}],[\"subscriber\",{\"0\":{\"530\":1},\"1\":{\"535\":6,\"537\":2,\"556\":6,\"1312\":1}}],[\"subscribenext\",{\"1\":{\"527\":1}}],[\"subscribe\",{\"1\":{\"509\":1,\"527\":1,\"531\":1,\"535\":3,\"556\":4,\"1271\":1,\"1286\":1,\"1287\":1,\"1320\":1,\"1338\":1,\"1345\":1}}],[\"subclasses\",{\"1\":{\"397\":2,\"410\":1}}],[\"subclass\",{\"1\":{\"397\":1}}],[\"subtract\",{\"1\":{\"236\":1}}],[\"subject\",{\"1\":{\"148\":2,\"151\":5,\"272\":1}}],[\"sub函数\",{\"0\":{\"14\":1}}],[\"sub\",{\"1\":{\"10\":1,\"1532\":2}}],[\"sub=new\",{\"1\":{\"10\":1}}],[\"sdc\",{\"1\":{\"1197\":2}}],[\"sdc格式化成pv\",{\"1\":{\"1197\":1}}],[\"sdb1是指将这个已经初始化成pv的设备添加套这个卷组中\",{\"1\":{\"1197\":1}}],[\"sdb1和\",{\"1\":{\"1197\":1}}],[\"sdb1\",{\"1\":{\"1197\":3}}],[\"sdb\",{\"1\":{\"1197\":1}}],[\"sds\",{\"1\":{\"991\":1}}],[\"sd\",{\"1\":{\"106\":2}}],[\"soa\",{\"1\":{\"729\":1,\"1233\":1}}],[\"soluble\",{\"1\":{\"647\":1}}],[\"software\",{\"1\":{\"643\":1}}],[\"sonatype\",{\"1\":{\"621\":1,\"1142\":1,\"1200\":1}}],[\"so\",{\"1\":{\"329\":1,\"399\":1,\"852\":1,\"1445\":3}}],[\"sortsindex\",{\"1\":{\"1484\":4}}],[\"sortbuilders\",{\"1\":{\"1248\":1}}],[\"sortbyvalue\",{\"1\":{\"1036\":1}}],[\"sortorder\",{\"1\":{\"780\":2,\"1248\":1,\"1579\":1,\"1580\":1,\"1582\":4,\"1607\":2,\"1613\":2,\"1622\":1}}],[\"sort排序\",{\"1\":{\"764\":1}}],[\"sorted\",{\"1\":{\"473\":1}}],[\"sortpostprocessors\",{\"1\":{\"399\":5}}],[\"sort\",{\"1\":{\"329\":1,\"473\":1,\"490\":1,\"672\":5,\"717\":1,\"764\":1,\"765\":1,\"780\":3,\"783\":1,\"1248\":1}}],[\"sourcexxx\",{\"1\":{\"1309\":1}}],[\"source和target字段\",{\"1\":{\"1309\":1}}],[\"source>\",{\"1\":{\"1202\":1}}],[\"source>1\",{\"1\":{\"1202\":1}}],[\"sourcedir\",{\"1\":{\"985\":2}}],[\"sourceparallelism\",{\"1\":{\"792\":4}}],[\"sources\",{\"1\":{\"792\":1,\"1079\":1,\"1130\":1}}],[\"sourcebuilder\",{\"1\":{\"780\":11,\"786\":5}}],[\"source\",{\"0\":{\"1186\":1},\"1\":{\"397\":1,\"413\":2,\"535\":1,\"556\":1,\"716\":1,\"758\":3,\"759\":6,\"760\":4,\"780\":3,\"782\":1,\"792\":4,\"986\":3,\"1057\":2,\"1058\":3,\"1118\":2,\"1182\":1,\"1186\":2,\"1248\":2,\"1458\":1,\"1484\":1}}],[\"sourcename\",{\"1\":{\"103\":1}}],[\"south\",{\"1\":{\"282\":8}}],[\"somename\",{\"1\":{\"1210\":2}}],[\"somecontroller\",{\"1\":{\"354\":2}}],[\"some\",{\"1\":{\"282\":2,\"283\":1,\"284\":2,\"285\":2,\"286\":5,\"287\":2,\"294\":1,\"297\":1,\"304\":1,\"305\":1,\"311\":1,\"312\":2,\"852\":1,\"1025\":4,\"1445\":1}}],[\"sometrait\",{\"1\":{\"272\":1}}],[\"something\",{\"1\":{\"202\":2,\"290\":1,\"298\":1,\"991\":2}}],[\"someusername123\",{\"1\":{\"271\":1}}],[\"someone\",{\"1\":{\"271\":1}}],[\"sock和客户端命令\",{\"1\":{\"1130\":1}}],[\"socketchannel\",{\"1\":{\"1450\":1}}],[\"socketchannel维护pipeline\",{\"1\":{\"1395\":1}}],[\"socketwrapper\",{\"1\":{\"1421\":2}}],[\"socketfactory\",{\"1\":{\"840\":1}}],[\"socket属性\",{\"1\":{\"840\":1}}],[\"socket\",{\"1\":{\"690\":1,\"833\":1,\"1338\":1,\"1382\":1,\"1425\":2}}],[\"socketprocessor\",{\"0\":{\"687\":1}}],[\"sock\",{\"0\":{\"21\":1},\"1\":{\"21\":1,\"1128\":5,\"1130\":17}}],[\"sc\",{\"1\":{\"1422\":1}}],[\"scms\",{\"1\":{\"850\":1,\"852\":1,\"911\":1,\"1059\":1,\"1123\":15}}],[\"scenedata中包含这些数据\",{\"1\":{\"1309\":1}}],[\"scene\",{\"0\":{\"1311\":1},\"1\":{\"1308\":1}}],[\"sceneservice\",{\"0\":{\"1325\":1}}],[\"scenes\",{\"1\":{\"792\":2}}],[\"scenebroadcaststream\",{\"1\":{\"792\":2}}],[\"scenerule转换为规则模型rulemodel\",{\"1\":{\"1335\":1}}],[\"scenerules\",{\"1\":{\"792\":1}}],[\"sceneruleskey\",{\"1\":{\"792\":1}}],[\"scenerulestream\",{\"1\":{\"792\":3}}],[\"sceneruledescriptor\",{\"1\":{\"792\":2}}],[\"scenerulekeydescriptor\",{\"1\":{\"792\":2}}],[\"scenerulekeybroadcaststream\",{\"1\":{\"792\":2}}],[\"scenarios\",{\"1\":{\"435\":1,\"1259\":1}}],[\"screen\",{\"1\":{\"977\":1}}],[\"scrollrequest\",{\"1\":{\"780\":3,\"786\":1}}],[\"scrollidlist\",{\"1\":{\"780\":4}}],[\"scrollid\",{\"1\":{\"780\":9}}],[\"scroll\",{\"1\":{\"780\":26}}],[\"scroll=5m\",{\"1\":{\"780\":1}}],[\"scroll查询\",{\"0\":{\"780\":1},\"1\":{\"1248\":1}}],[\"scripts\",{\"1\":{\"1198\":1}}],[\"scriptconsole加以下脚本\",{\"1\":{\"1130\":1}}],[\"scriptcontent\",{\"1\":{\"648\":2}}],[\"script>\",{\"1\":{\"934\":3,\"943\":3,\"983\":2,\"1407\":2}}],[\"scripted\",{\"1\":{\"758\":1}}],[\"scriptexception\",{\"1\":{\"648\":2}}],[\"scriptengine提供的eval\",{\"1\":{\"648\":1}}],[\"scriptenginemanager\",{\"1\":{\"647\":3,\"648\":1}}],[\"scriptengine\",{\"1\":{\"647\":4,\"648\":1}}],[\"scriptname\",{\"1\":{\"648\":5}}],[\"script\",{\"0\":{\"568\":1,\"644\":1},\"1\":{\"647\":8,\"648\":1,\"649\":1,\"758\":3,\"759\":4,\"760\":2,\"983\":1,\"989\":1,\"991\":1,\"993\":1}}],[\"school\",{\"1\":{\"479\":3}}],[\"scheme定义了表及表字段\",{\"1\":{\"748\":1}}],[\"scheme\",{\"1\":{\"748\":1}}],[\"schemalocation=\",{\"1\":{\"479\":1}}],[\"schema\",{\"1\":{\"479\":3}}],[\"schemas\",{\"1\":{\"103\":1}}],[\"schemastore\",{\"1\":{\"103\":1}}],[\"schedulingconfigurer\",{\"1\":{\"657\":1}}],[\"schedule方法根据schedulejob调度任务\",{\"1\":{\"1335\":1}}],[\"schedulejobcompiler\",{\"1\":{\"1335\":1}}],[\"scheduleprune\",{\"1\":{\"1249\":10}}],[\"scheduleasync\",{\"1\":{\"1013\":2}}],[\"schedulestatus\",{\"1\":{\"902\":2}}],[\"scheduler调度器接口\",{\"1\":{\"1335\":1}}],[\"scheduler会将pod绑定到一个合适的nodes节点\",{\"1\":{\"1162\":1}}],[\"scheduler组件\",{\"1\":{\"1162\":1}}],[\"scheduler\",{\"1\":{\"1161\":1}}],[\"schedulerequestlist\",{\"1\":{\"902\":2}}],[\"schedulerequest\",{\"1\":{\"902\":4}}],[\"schedulerfactorybean\",{\"1\":{\"658\":4}}],[\"schedule\",{\"1\":{\"843\":1,\"902\":4,\"914\":1}}],[\"scheduled\",{\"1\":{\"658\":1}}],[\"scheduledtaskregistrar\",{\"1\":{\"657\":1}}],[\"scheduled标注在方法上\",{\"1\":{\"657\":1}}],[\"scheduledexecutorservice\",{\"1\":{\"192\":3}}],[\"schedulewithfixeddelay\",{\"1\":{\"192\":1}}],[\"scopes\",{\"1\":{\"1532\":2,\"1570\":1}}],[\"scopebeanextensioninjector\",{\"1\":{\"736\":1}}],[\"scopebeanfactory\",{\"1\":{\"735\":1}}],[\"scopemodel\",{\"0\":{\"735\":1}}],[\"scope\",{\"1\":{\"330\":1,\"467\":2,\"476\":1,\"1531\":2,\"1532\":2}}],[\"score\",{\"1\":{\"311\":1,\"767\":1}}],[\"scores\",{\"1\":{\"311\":4,\"312\":6}}],[\"scale=1\",{\"1\":{\"1407\":2}}],[\"scalecuberpcmanager实现rpcmanager接口\",{\"0\":{\"1368\":1}}],[\"scale\",{\"1\":{\"1159\":1,\"1484\":1}}],[\"scalarsubscription\",{\"1\":{\"556\":1}}],[\"scanentities获取实体类名\",{\"1\":{\"1297\":1}}],[\"scanner\",{\"1\":{\"859\":1}}],[\"scanned\",{\"1\":{\"852\":2}}],[\"scanperiod=\",{\"1\":{\"596\":1}}],[\"scan=\",{\"1\":{\"596\":1}}],[\"scanbasepackages=\",{\"1\":{\"20\":1}}],[\"scavenge\",{\"1\":{\"243\":1}}],[\"ss\",{\"1\":{\"379\":1,\"596\":2,\"649\":1,\"1513\":1,\"1514\":1,\"1539\":2,\"1540\":2,\"1570\":1,\"1571\":1}}],[\"ssl加密通信\",{\"1\":{\"1211\":1}}],[\"ssl证书格式主要有公钥证书格式标准x\",{\"1\":{\"625\":1}}],[\"sslverify\",{\"1\":{\"52\":1}}],[\"ssl\",{\"0\":{\"52\":1,\"625\":1},\"1\":{\"1026\":1,\"1207\":1,\"1210\":8,\"1211\":9,\"1425\":1}}],[\"ssha\",{\"1\":{\"1491\":1}}],[\"ssh\",{\"0\":{\"32\":1,\"1145\":1},\"1\":{\"32\":4,\"1130\":3,\"1145\":1}}],[\"sshkey\",{\"0\":{\"26\":1}}],[\"sychronized是重量级锁\",{\"1\":{\"911\":1}}],[\"sychronized只适用于单体应用\",{\"1\":{\"911\":1}}],[\"symmetricalgorithm\",{\"1\":{\"719\":1}}],[\"symmetriccrypto\",{\"1\":{\"719\":2}}],[\"symbol\",{\"1\":{\"672\":1}}],[\"syncsend\",{\"1\":{\"1245\":1}}],[\"syncsendorderly\",{\"1\":{\"1245\":1}}],[\"synchronized\",{\"1\":{\"334\":1,\"397\":1,\"406\":1,\"411\":1,\"456\":1,\"914\":2,\"1256\":1}}],[\"synchronized持有的监视器对象\",{\"1\":{\"243\":1}}],[\"synchronizedmap\",{\"1\":{\"198\":1}}],[\"sync\",{\"1\":{\"39\":1,\"179\":1}}],[\"sysdictitemcontroller\",{\"1\":{\"1586\":5,\"1592\":1}}],[\"sysconfig\",{\"1\":{\"1198\":1}}],[\"sysctl\",{\"1\":{\"5\":4,\"17\":4,\"1206\":3}}],[\"systenantcontroller\",{\"1\":{\"1586\":7,\"1592\":1}}],[\"systen\",{\"1\":{\"1087\":1}}],[\"systemmanager\",{\"1\":{\"1582\":3,\"1583\":2,\"1584\":1}}],[\"system用户系统服务\",{\"1\":{\"1511\":1}}],[\"systemrunner\",{\"1\":{\"1032\":1}}],[\"systemdefault\",{\"1\":{\"786\":1}}],[\"systemsecurityfilterchain\",{\"1\":{\"348\":1}}],[\"system32\",{\"1\":{\"30\":1}}],[\"system\",{\"1\":{\"9\":1,\"11\":1,\"112\":1,\"234\":6,\"236\":1,\"241\":3,\"252\":1,\"348\":7,\"353\":1,\"354\":6,\"377\":1,\"378\":1,\"411\":2,\"421\":8,\"438\":2,\"592\":1,\"647\":3,\"648\":4,\"652\":2,\"657\":1,\"658\":3,\"719\":3,\"911\":4,\"1032\":1,\"1130\":1,\"1137\":1,\"1256\":2,\"1257\":2,\"1445\":2,\"1451\":2,\"1513\":14,\"1515\":2,\"1535\":2,\"1585\":1,\"1586\":44,\"1592\":10,\"1595\":1,\"1635\":1}}],[\"systemctl\",{\"1\":{\"3\":1,\"1093\":2,\"1095\":4,\"1096\":2,\"1193\":1,\"1198\":1,\"1205\":3}}],[\"sysapi\",{\"1\":{\"467\":1,\"1513\":1,\"1595\":1,\"1597\":1}}],[\"sysoperationlogcontroller\",{\"1\":{\"1586\":4,\"1592\":1}}],[\"sysoperationlog\",{\"1\":{\"413\":2}}],[\"sysloginlogcontroller\",{\"1\":{\"1586\":4}}],[\"sysloginlog\",{\"1\":{\"413\":2}}],[\"sys\",{\"1\":{\"5\":1,\"17\":1,\"467\":4}}],[\"s\",{\"1\":{\"36\":1,\"117\":2,\"131\":3,\"133\":2,\"151\":3,\"152\":9,\"189\":2,\"264\":4,\"267\":2,\"269\":6,\"282\":2,\"318\":6,\"319\":2,\"346\":2,\"397\":1,\"435\":2,\"456\":1,\"530\":1,\"531\":1,\"556\":11,\"647\":1,\"1013\":1,\"1048\":1,\"1058\":4,\"1092\":1,\"1118\":2,\"1183\":2,\"1184\":1,\"1187\":1,\"1205\":3,\"1215\":1,\"1227\":2,\"1308\":1,\"1445\":1}}],[\"shutting\",{\"1\":{\"1445\":3}}],[\"shutdownconnection\",{\"1\":{\"833\":1}}],[\"shutdownconnection方法\",{\"0\":{\"831\":1}}],[\"shutdown\",{\"1\":{\"234\":1,\"914\":3,\"1445\":5}}],[\"shenzhen\",{\"1\":{\"1283\":1}}],[\"shelvesubmitdto\",{\"1\":{\"1252\":1}}],[\"shelveoperator\",{\"1\":{\"1252\":1}}],[\"shell脚本\",{\"0\":{\"1217\":1}}],[\"shell会话期间生效\",{\"1\":{\"1206\":1}}],[\"sh文件格式\",{\"0\":{\"1192\":1}}],[\"shm\",{\"1\":{\"1127\":2}}],[\"sh\",{\"1\":{\"925\":2,\"1115\":1,\"1129\":1,\"1215\":21}}],[\"shop\",{\"1\":{\"1211\":3}}],[\"shouldreplquantity\",{\"1\":{\"1251\":1}}],[\"should\",{\"1\":{\"767\":1,\"1445\":1}}],[\"shouldproxytargetclass\",{\"1\":{\"435\":1}}],[\"shouldskip\",{\"1\":{\"383\":1,\"434\":1}}],[\"shouldbinduri\",{\"1\":{\"181\":1}}],[\"shouldbindxml\",{\"1\":{\"181\":1}}],[\"shouldbindjson\",{\"1\":{\"181\":1}}],[\"shouldbindbodywith\",{\"1\":{\"180\":1}}],[\"shouldbind\",{\"1\":{\"180\":1}}],[\"short\",{\"1\":{\"164\":1,\"801\":1,\"1149\":1}}],[\"shortname\",{\"1\":{\"103\":1}}],[\"shown\",{\"1\":{\"411\":1}}],[\"show\",{\"1\":{\"13\":1,\"206\":1,\"717\":3,\"948\":1,\"1149\":1}}],[\"shakelimit\",{\"1\":{\"1311\":1}}],[\"sha2\",{\"1\":{\"1140\":1}}],[\"shadowjar\",{\"0\":{\"1069\":1}}],[\"shadednettygrpcserverfactory\",{\"1\":{\"640\":1}}],[\"sharp\",{\"0\":{\"1657\":1}}],[\"shards\",{\"1\":{\"773\":1}}],[\"sharding不支持批量更新\",{\"1\":{\"1243\":1}}],[\"sharding\",{\"1\":{\"65\":1}}],[\"sharedresource\",{\"1\":{\"647\":5}}],[\"shared\",{\"1\":{\"647\":2,\"1141\":1,\"1210\":1,\"1211\":1}}],[\"sharedinstance\",{\"1\":{\"439\":2}}],[\"share\",{\"1\":{\"36\":1,\"716\":2,\"1048\":1,\"1050\":1,\"1058\":6,\"1115\":1,\"1116\":1,\"1130\":2,\"1210\":1}}],[\"shanghai\",{\"1\":{\"23\":1,\"34\":1,\"218\":1,\"595\":1,\"1115\":1,\"1116\":1,\"1122\":1,\"1130\":1,\"1137\":1,\"1139\":2,\"1515\":1}}],[\"sed\",{\"0\":{\"1183\":1},\"1\":{\"1183\":1,\"1187\":4,\"1215\":1}}],[\"separate\",{\"1\":{\"399\":2}}],[\"sent\",{\"1\":{\"1210\":1}}],[\"sentinel\",{\"1\":{\"73\":1,\"1501\":1}}],[\"sendfile\",{\"1\":{\"1210\":1}}],[\"sendmessagewithvipchannel=false\",{\"1\":{\"1136\":2}}],[\"sendmessagethreadpoolnums=64\",{\"1\":{\"1136\":1}}],[\"sendheartbeattoallbrokerwithlock\",{\"1\":{\"914\":1}}],[\"sending\",{\"1\":{\"833\":1}}],[\"sender\",{\"1\":{\"833\":3}}],[\"send方法\",{\"0\":{\"825\":1},\"1\":{\"824\":1}}],[\"send\",{\"1\":{\"801\":1,\"802\":1,\"833\":1,\"1210\":2,\"1211\":1,\"1407\":3,\"1513\":1,\"1597\":1}}],[\"sendredirectforauthorization\",{\"1\":{\"345\":2}}],[\"sensitive\",{\"1\":{\"411\":2}}],[\"sessionmanger\",{\"1\":{\"1319\":1}}],[\"sessionmanagement\",{\"1\":{\"330\":1}}],[\"sessions\",{\"1\":{\"852\":1}}],[\"session超时\",{\"1\":{\"801\":1,\"802\":1}}],[\"session存放于对应的服务器中\",{\"1\":{\"722\":1}}],[\"session从字面意思来讲\",{\"1\":{\"722\":1}}],[\"session=request\",{\"1\":{\"652\":1}}],[\"session跟踪\",{\"1\":{\"652\":1}}],[\"sessionrepositoryfilter\",{\"0\":{\"418\":1},\"1\":{\"418\":1}}],[\"session\",{\"0\":{\"414\":1,\"724\":1},\"1\":{\"346\":4,\"415\":1,\"451\":1,\"652\":7,\"675\":1,\"676\":1,\"801\":1,\"802\":1,\"852\":1,\"1210\":2,\"1211\":2,\"1272\":2,\"1383\":2,\"1514\":2}}],[\"session是服务端会话技术\",{\"1\":{\"203\":1}}],[\"selfinitialize\",{\"0\":{\"447\":1},\"1\":{\"447\":1}}],[\"self指代的就是当前的实例对象\",{\"1\":{\"298\":1}}],[\"self\",{\"0\":{\"289\":3},\"1\":{\"288\":3,\"289\":6,\"290\":3,\"291\":2,\"292\":1,\"295\":5,\"297\":4,\"298\":14,\"1167\":1,\"1521\":1}}],[\"selectionkey\",{\"1\":{\"1445\":6}}],[\"selectitems\",{\"1\":{\"1059\":1}}],[\"selectnowsupplier\",{\"1\":{\"1445\":1}}],[\"selectstrategy\",{\"1\":{\"1445\":4}}],[\"selectcnt++\",{\"1\":{\"1445\":1}}],[\"selectcnt\",{\"1\":{\"1445\":7}}],[\"selectablechannel\",{\"1\":{\"1397\":1}}],[\"select>\",{\"1\":{\"1059\":2}}],[\"selectbyquery\",{\"1\":{\"1059\":1}}],[\"selectbyid\",{\"1\":{\"672\":1}}],[\"select语句前\",{\"1\":{\"1049\":1}}],[\"selectorprovider\",{\"1\":{\"1445\":1}}],[\"selector\",{\"1\":{\"989\":1,\"991\":1,\"1445\":10}}],[\"selectdepartlistbyparentids\",{\"1\":{\"256\":1}}],[\"selectlist\",{\"1\":{\"236\":3,\"786\":1,\"852\":2}}],[\"selectforitemcache\",{\"1\":{\"236\":1}}],[\"select方法\",{\"0\":{\"188\":1}}],[\"select\",{\"1\":{\"131\":4,\"188\":1,\"329\":1,\"716\":2,\"748\":1,\"749\":1,\"899\":1,\"908\":1,\"924\":1,\"1048\":2,\"1050\":2,\"1058\":2,\"1140\":1,\"1243\":1,\"1292\":2,\"1440\":1,\"1445\":5,\"1515\":1}}],[\"seven\",{\"1\":{\"282\":1}}],[\"sequence\",{\"1\":{\"250\":2,\"604\":1}}],[\"seed\",{\"1\":{\"1139\":1}}],[\"see\",{\"1\":{\"249\":2,\"345\":1,\"411\":1,\"852\":1,\"1445\":3}}],[\"serialversionuid\",{\"1\":{\"255\":1}}],[\"serialization\",{\"1\":{\"802\":4}}],[\"serializable\",{\"1\":{\"252\":2,\"1044\":1,\"1256\":1}}],[\"serializer\",{\"1\":{\"801\":2,\"802\":2}}],[\"serializedlambda\",{\"1\":{\"252\":6}}],[\"serial\",{\"1\":{\"243\":2}}],[\"servlet3\",{\"0\":{\"695\":1}}],[\"servlet引擎\",{\"0\":{\"681\":1}}],[\"servlet的cookie\",{\"1\":{\"652\":1}}],[\"servlet实例\",{\"1\":{\"652\":1}}],[\"servlet>\",{\"1\":{\"652\":1}}],[\"servlet没有main方法\",{\"1\":{\"652\":1,\"681\":1}}],[\"servlet标准的服务器上运行\",{\"1\":{\"651\":1}}],[\"servlet特有context引用rootcontext\",{\"1\":{\"601\":1}}],[\"servletwebserverfactory\",{\"1\":{\"446\":2}}],[\"servletwebserverapplicationcontext\",{\"0\":{\"444\":1}}],[\"servletwebrequest\",{\"1\":{\"403\":2,\"1259\":1}}],[\"servletcomponentscan\",{\"1\":{\"421\":1}}],[\"servletconfig是servlet特有\",{\"1\":{\"600\":1}}],[\"servletconfigpropertyvalues\",{\"1\":{\"410\":1}}],[\"servletcontext中的组件\",{\"1\":{\"678\":1}}],[\"servletcontext上下文\",{\"1\":{\"652\":1}}],[\"servletcontext是servlet运行上下文\",{\"1\":{\"600\":1}}],[\"servletcontextinitializer\",{\"1\":{\"447\":1,\"450\":1}}],[\"servletcontext相互配置\",{\"1\":{\"447\":1}}],[\"servletcontext\",{\"0\":{\"600\":1},\"1\":{\"446\":5,\"447\":6,\"1412\":3}}],[\"servletcontextresourceloader\",{\"1\":{\"410\":1}}],[\"servlet\",{\"0\":{\"650\":1,\"652\":1},\"1\":{\"410\":1,\"411\":4,\"446\":1,\"600\":1,\"601\":1,\"651\":3,\"652\":9,\"674\":2,\"1514\":1,\"1515\":1}}],[\"servlet接口\",{\"0\":{\"407\":1}}],[\"servletinvocablehandlermethod\",{\"0\":{\"404\":1},\"1\":{\"403\":1}}],[\"servletexception\",{\"1\":{\"345\":3,\"346\":1,\"410\":1,\"411\":2,\"421\":4,\"446\":1,\"447\":1,\"652\":5,\"1259\":2}}],[\"servletresponse\",{\"1\":{\"345\":7,\"421\":6,\"652\":1,\"692\":1}}],[\"servletrequest\",{\"1\":{\"345\":8,\"421\":7,\"652\":1}}],[\"servletapi\",{\"1\":{\"330\":1}}],[\"servehttp\",{\"1\":{\"139\":3}}],[\"server组件\",{\"1\":{\"1516\":1}}],[\"serverbootstrapacceptor\",{\"1\":{\"1450\":2}}],[\"serverbootstrap的init\",{\"1\":{\"1450\":1}}],[\"serverbootstrap\",{\"0\":{\"1450\":1},\"1\":{\"1450\":3}}],[\"servercontainer\",{\"0\":{\"1413\":1},\"1\":{\"1412\":6,\"1413\":1,\"1414\":1}}],[\"serverendpoint注解中配置的配置器\",{\"1\":{\"1416\":1}}],[\"serverendpointconfig\",{\"0\":{\"1415\":1,\"1417\":1},\"1\":{\"1421\":3}}],[\"serverendpointexporter\",{\"0\":{\"1410\":1}}],[\"serverendpoint\",{\"0\":{\"1409\":1},\"1\":{\"1411\":1,\"1414\":2}}],[\"serverendpoint无法依赖注入问题解决\",{\"0\":{\"25\":1}}],[\"server>\",{\"1\":{\"1202\":2}}],[\"server汇报节点的状态和可用资源情况\",{\"1\":{\"1162\":1}}],[\"server将存储pod的描述信息到etcd中的集群配置存储中\",{\"1\":{\"1162\":1}}],[\"server接收到用户提交的pod描述后\",{\"1\":{\"1162\":1}}],[\"server=utf8mb4\",{\"1\":{\"1120\":2}}],[\"server层\",{\"1\":{\"1054\":1}}],[\"serverproxy\",{\"1\":{\"872\":4}}],[\"serversocketchannel的处理器\",{\"1\":{\"1450\":1}}],[\"servers>\",{\"1\":{\"1202\":1}}],[\"servers\",{\"1\":{\"801\":3,\"802\":1}}],[\"server和spring\",{\"1\":{\"476\":1}}],[\"serverlist\",{\"1\":{\"871\":2,\"872\":1}}],[\"serverlistrefreshinterval=5000\",{\"1\":{\"213\":1}}],[\"serverlifecyclelisteners\",{\"1\":{\"450\":1}}],[\"serverhttprequest\",{\"1\":{\"422\":2,\"471\":3,\"1522\":1,\"1523\":3}}],[\"serverhttpsecurity\",{\"0\":{\"321\":1},\"1\":{\"467\":1,\"1031\":1}}],[\"serverwebexchangeutils\",{\"1\":{\"471\":1,\"1522\":1}}],[\"serverwebexchange\",{\"1\":{\"422\":1,\"471\":3,\"473\":1,\"513\":1,\"557\":2,\"1345\":1,\"1522\":1,\"1523\":1}}],[\"server的启动\",{\"1\":{\"391\":1}}],[\"server\",{\"0\":{\"346\":1,\"347\":1,\"886\":1,\"1377\":1},\"1\":{\"164\":4,\"344\":1,\"348\":2,\"360\":1,\"445\":1,\"446\":1,\"456\":1,\"473\":2,\"639\":1,\"651\":1,\"678\":1,\"833\":1,\"914\":1,\"1025\":5,\"1058\":1,\"1091\":1,\"1116\":1,\"1126\":3,\"1131\":1,\"1132\":1,\"1134\":3,\"1136\":2,\"1139\":1,\"1210\":10,\"1211\":3,\"1412\":1,\"1514\":1}}],[\"servertimezone=asia\",{\"1\":{\"23\":1,\"34\":1,\"595\":1,\"1515\":1}}],[\"servicelist\",{\"1\":{\"1585\":1,\"1586\":1,\"1595\":1}}],[\"service将公开端口号为80\",{\"1\":{\"1171\":1}}],[\"service是用于公开和暴露应用程序的网络服务的抽象\",{\"1\":{\"1171\":1}}],[\"service配置的ports字段只是定义了service的端口映射规则\",{\"1\":{\"1171\":1}}],[\"service配置\",{\"0\":{\"1171\":1}}],[\"servicemodeltoopenapimapper\",{\"1\":{\"1032\":1}}],[\"servicemanager\",{\"1\":{\"893\":1}}],[\"servicename\",{\"1\":{\"1032\":1,\"1513\":12,\"1522\":5,\"1535\":2}}],[\"service服务\",{\"1\":{\"893\":1}}],[\"servicecontroller\",{\"0\":{\"892\":1}}],[\"serviceregistry\",{\"0\":{\"873\":1}}],[\"serviceannotationpostprocessor\",{\"0\":{\"739\":1}}],[\"servicepackagesholder\",{\"1\":{\"738\":1}}],[\"service内部组件\",{\"1\":{\"678\":1}}],[\"service等\",{\"1\":{\"480\":1}}],[\"service添加连接器connector\",{\"1\":{\"450\":1}}],[\"servicestate\",{\"1\":{\"914\":13}}],[\"services\",{\"1\":{\"106\":1,\"411\":1,\"1120\":1,\"1122\":1,\"1133\":1,\"1139\":1,\"1159\":1,\"1475\":1,\"1486\":1}}],[\"service\",{\"0\":{\"959\":1,\"1235\":1},\"1\":{\"25\":1,\"51\":1,\"212\":1,\"450\":1,\"476\":1,\"652\":1,\"678\":1,\"691\":1,\"893\":1,\"914\":5,\"1013\":3,\"1025\":1,\"1095\":2,\"1122\":1,\"1132\":4,\"1159\":2,\"1193\":3,\"1198\":1,\"1252\":1,\"1344\":1,\"1522\":2}}],[\"secure\",{\"1\":{\"1421\":1}}],[\"securitywebfiltersorder\",{\"1\":{\"467\":1}}],[\"securitywebfilterchain\",{\"1\":{\"467\":1,\"1031\":1}}],[\"security配置\",{\"0\":{\"467\":1}}],[\"securityconstants\",{\"1\":{\"413\":2,\"1523\":3,\"1525\":3}}],[\"securityconfigurer<o\",{\"1\":{\"334\":3}}],[\"securityconfigurer<filter\",{\"1\":{\"329\":2}}],[\"securitycontextpersistencefilter\",{\"1\":{\"346\":2}}],[\"securitycontextholderawarerequestfilter\",{\"1\":{\"346\":1}}],[\"securitycontextholder\",{\"1\":{\"345\":1,\"346\":7,\"1522\":3,\"1523\":4,\"1525\":5}}],[\"securitycontext和requestcache等\",{\"1\":{\"333\":1}}],[\"securitycontext\",{\"1\":{\"330\":1,\"346\":3,\"348\":1}}],[\"securitycontextrepository\",{\"1\":{\"327\":1,\"348\":4}}],[\"securitycontextserverwebexchangewebfilter\",{\"1\":{\"322\":1}}],[\"securityinterceptor\",{\"1\":{\"329\":1}}],[\"securityfilterchain中处理\",{\"0\":{\"470\":1}}],[\"securityfilterchains\",{\"1\":{\"329\":2}}],[\"securityfilterchain\",{\"0\":{\"334\":1},\"1\":{\"326\":2,\"329\":5,\"348\":1,\"467\":1,\"1031\":1}}],[\"security\",{\"0\":{\"323\":1,\"1661\":1},\"1\":{\"26\":1,\"218\":1,\"326\":2,\"343\":1,\"344\":1,\"348\":1,\"596\":1,\"1116\":1,\"1137\":1,\"1206\":1,\"1513\":1,\"1520\":1}}],[\"sec\",{\"0\":{\"1415\":1},\"1\":{\"1415\":4}}],[\"secret=fff0fd7a21b94569a46299a96c0c068e\",{\"1\":{\"1475\":3}}],[\"secret=techsel123\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"secret\",{\"1\":{\"719\":6,\"1058\":4,\"1121\":1,\"1515\":1,\"1570\":1,\"1571\":1,\"1616\":3}}],[\"seconds\",{\"1\":{\"236\":2,\"596\":1,\"649\":2,\"792\":1}}],[\"second\",{\"1\":{\"179\":2,\"537\":1,\"792\":1,\"1249\":1}}],[\"searchcount\",{\"1\":{\"1613\":1,\"1622\":1}}],[\"searchfunc\",{\"1\":{\"986\":2}}],[\"search查询\",{\"1\":{\"786\":1}}],[\"searchscrollresponse\",{\"1\":{\"780\":3}}],[\"searchscrollrequest\",{\"1\":{\"780\":8,\"786\":2}}],[\"searchsourcebuilder\",{\"1\":{\"778\":1,\"780\":10,\"786\":2,\"1248\":12}}],[\"searchhits\",{\"1\":{\"780\":4,\"1248\":6}}],[\"searchhit\",{\"1\":{\"780\":4,\"786\":2,\"1248\":4}}],[\"searchresponse\",{\"1\":{\"780\":17,\"786\":6,\"1248\":6}}],[\"searchrequest\",{\"1\":{\"780\":11,\"1248\":8}}],[\"search\",{\"1\":{\"96\":1,\"593\":1,\"762\":1,\"763\":1,\"764\":1,\"765\":1,\"766\":1,\"767\":1,\"769\":1,\"770\":1,\"778\":1,\"780\":16,\"782\":1,\"783\":1,\"786\":2,\"986\":1,\"1248\":3}}],[\"seataio\",{\"1\":{\"1134\":1}}],[\"seata官网\",{\"1\":{\"660\":1}}],[\"seata\",{\"0\":{\"670\":1,\"1134\":1},\"1\":{\"76\":1,\"212\":2,\"1134\":7}}],[\"setrange\",{\"1\":{\"910\":1}}],[\"setrestartstrategy\",{\"1\":{\"792\":1}}],[\"setrepeatinterval\",{\"1\":{\"658\":1}}],[\"setrepeatcount\",{\"1\":{\"658\":1}}],[\"setrepllockqty\",{\"1\":{\"236\":1}}],[\"setreceiptstatus\",{\"1\":{\"236\":2}}],[\"setreturnqty\",{\"1\":{\"236\":1}}],[\"set<beandefinitionholder>\",{\"1\":{\"900\":2}}],[\"set<string>\",{\"1\":{\"399\":1}}],[\"setex\",{\"1\":{\"910\":1,\"911\":1}}],[\"setexception\",{\"1\":{\"833\":1}}],[\"setenvironment\",{\"1\":{\"852\":1}}],[\"setvariables\",{\"1\":{\"852\":2}}],[\"setvfsimpl\",{\"1\":{\"852\":1}}],[\"setvfs\",{\"1\":{\"852\":1}}],[\"setglobaljobparameters\",{\"1\":{\"792\":1}}],[\"setgoodscode\",{\"1\":{\"236\":1}}],[\"setjobdatamap\",{\"1\":{\"658\":1}}],[\"setjobdetail\",{\"1\":{\"658\":2}}],[\"setjobclass\",{\"1\":{\"658\":1}}],[\"setmqclientfactory\",{\"1\":{\"914\":1}}],[\"setmessagemodel\",{\"1\":{\"914\":1}}],[\"setmapperlocations\",{\"1\":{\"852\":1}}],[\"setmaxage\",{\"1\":{\"652\":2}}],[\"setmodifiers\",{\"1\":{\"241\":3}}],[\"setbeanclass\",{\"1\":{\"900\":1,\"1297\":1}}],[\"setbatchlistener\",{\"1\":{\"801\":1}}],[\"setbasedir\",{\"1\":{\"450\":1}}],[\"setbody\",{\"1\":{\"241\":2}}],[\"setdaointerface\",{\"1\":{\"900\":1}}],[\"setdatabaseid\",{\"1\":{\"852\":1}}],[\"setdatabaseidprovider\",{\"1\":{\"852\":1}}],[\"setdatasource\",{\"1\":{\"852\":1}}],[\"setdatasourcelookup\",{\"1\":{\"632\":2}}],[\"setdatasourcetype\",{\"1\":{\"632\":1}}],[\"setdatecount\",{\"1\":{\"786\":1}}],[\"setdefaulttargetdatasource\",{\"1\":{\"632\":2}}],[\"setdestroyannotationtype\",{\"1\":{\"441\":1}}],[\"setdiffqty\",{\"1\":{\"236\":1}}],[\"sethandlermethodreturnvaluehandlers\",{\"1\":{\"403\":1}}],[\"sethandlermethodargumentresolvers\",{\"1\":{\"403\":1}}],[\"setsuccess\",{\"1\":{\"1445\":1}}],[\"setsuperclass\",{\"1\":{\"386\":1}}],[\"setschedulestatus\",{\"1\":{\"902\":1}}],[\"setscrollids\",{\"1\":{\"780\":1}}],[\"setsearchsourcebuilder\",{\"1\":{\"786\":2}}],[\"setsecret\",{\"1\":{\"719\":1}}],[\"setsessionattrname\",{\"1\":{\"348\":1}}],[\"setstarted\",{\"1\":{\"695\":1}}],[\"setstarttime\",{\"1\":{\"658\":1}}],[\"setstrategy\",{\"1\":{\"386\":1}}],[\"setstoragecache\",{\"1\":{\"236\":1}}],[\"setspringsecuritycontextkey\",{\"1\":{\"348\":1}}],[\"setchanneloptions\",{\"1\":{\"1450\":2}}],[\"setchildren\",{\"1\":{\"672\":1,\"1036\":1}}],[\"setcurrenteventexecutor\",{\"1\":{\"1445\":3}}],[\"setcustomerid\",{\"1\":{\"236\":2}}],[\"setcount\",{\"1\":{\"786\":1}}],[\"setconsumergroup\",{\"1\":{\"914\":2}}],[\"setconsumerfactory\",{\"1\":{\"801\":1}}],[\"setconfigurationproperties\",{\"1\":{\"852\":1}}],[\"setconfiglocation\",{\"1\":{\"852\":1}}],[\"setconcurrency\",{\"1\":{\"801\":1}}],[\"setcontenttype\",{\"1\":{\"652\":1}}],[\"setcontext\",{\"1\":{\"346\":1,\"649\":2}}],[\"setconnector\",{\"1\":{\"450\":1}}],[\"setcronexpression\",{\"1\":{\"658\":1}}],[\"setclient\",{\"1\":{\"1353\":1}}],[\"setclientid\",{\"1\":{\"602\":1}}],[\"setclassloader\",{\"1\":{\"386\":1}}],[\"setcallbacktypes\",{\"1\":{\"386\":1}}],[\"setcallbackfilter\",{\"1\":{\"386\":1}}],[\"setfrozen\",{\"1\":{\"435\":1}}],[\"setfrozenquantity\",{\"1\":{\"236\":1}}],[\"setfilterchainproxysecurityconfigurer\",{\"1\":{\"329\":1}}],[\"set注入\",{\"1\":{\"329\":1,\"479\":1}}],[\"setloading\",{\"1\":{\"1353\":2}}],[\"setlocal\",{\"1\":{\"602\":1}}],[\"setlockqty\",{\"1\":{\"236\":1}}],[\"setlimit\",{\"1\":{\"255\":1}}],[\"setplugins\",{\"1\":{\"852\":1}}],[\"setprefiltered\",{\"1\":{\"435\":1}}],[\"setproperty\",{\"1\":{\"1130\":1}}],[\"setpropertyvalues\",{\"1\":{\"410\":1}}],[\"setproxy\",{\"1\":{\"900\":1}}],[\"setproxytargetclass\",{\"1\":{\"435\":1}}],[\"setpatcheddate\",{\"1\":{\"902\":1}}],[\"setparam\",{\"1\":{\"1248\":1}}],[\"setparallelism\",{\"1\":{\"792\":5}}],[\"setparent\",{\"1\":{\"411\":1}}],[\"setpage\",{\"1\":{\"255\":1}}],[\"setpiecenum\",{\"1\":{\"236\":1}}],[\"setautowiremode\",{\"1\":{\"1297\":1}}],[\"setautodeploy\",{\"1\":{\"450\":1}}],[\"setallocatemessagequeuestrategy\",{\"1\":{\"914\":1}}],[\"setactioncallback设置回调\",{\"1\":{\"821\":1}}],[\"setaccessible\",{\"1\":{\"252\":1,\"1257\":1}}],[\"setadvice\",{\"1\":{\"430\":1}}],[\"setattributes\",{\"1\":{\"1450\":2}}],[\"setattribute\",{\"1\":{\"346\":1,\"411\":1}}],[\"setapplicationcontext\",{\"1\":{\"210\":1,\"413\":1}}],[\"setinitannotationtype\",{\"1\":{\"441\":1}}],[\"setinterval\",{\"1\":{\"970\":1}}],[\"setinterfaces\",{\"1\":{\"386\":1}}],[\"setintransitquantity\",{\"1\":{\"236\":2}}],[\"setid\",{\"1\":{\"241\":1,\"658\":1}}],[\"setitemid\",{\"1\":{\"236\":1}}],[\"setqrqty\",{\"1\":{\"236\":2}}],[\"setqcstatus\",{\"1\":{\"236\":1}}],[\"setquantity\",{\"1\":{\"236\":1}}],[\"setnx\",{\"1\":{\"910\":1,\"911\":2}}],[\"setnamingpolicy\",{\"1\":{\"386\":1}}],[\"setname\",{\"1\":{\"9\":2,\"192\":1,\"602\":1,\"833\":1}}],[\"setnormalflag\",{\"1\":{\"236\":1}}],[\"setwarehouseid\",{\"1\":{\"236\":2}}],[\"settypehandlerspackage\",{\"1\":{\"852\":1}}],[\"settypealiasessupertype\",{\"1\":{\"852\":1}}],[\"settypealiasespackage\",{\"1\":{\"852\":1}}],[\"settopicprefix\",{\"1\":{\"1353\":1}}],[\"settotalcount\",{\"1\":{\"786\":1}}],[\"settoken\",{\"1\":{\"602\":1}}],[\"settimestring\",{\"1\":{\"786\":1}}],[\"setting\",{\"1\":{\"411\":3,\"924\":1}}],[\"settings\",{\"1\":{\"164\":1,\"773\":1,\"775\":1,\"778\":1,\"779\":1,\"991\":4,\"1201\":1}}],[\"settransformation\",{\"1\":{\"1421\":1}}],[\"settransactionidprefix\",{\"1\":{\"801\":1}}],[\"settransactionmanager\",{\"1\":{\"430\":1}}],[\"settransactionattributesource\",{\"1\":{\"430\":2}}],[\"settriggers\",{\"1\":{\"658\":1}}],[\"settargettype\",{\"1\":{\"1297\":1}}],[\"settargetmethod\",{\"1\":{\"658\":1}}],[\"settargetbeanname\",{\"1\":{\"658\":1}}],[\"settargetdatasources\",{\"1\":{\"632\":2}}],[\"settargetsource\",{\"1\":{\"435\":1}}],[\"setthrowonfailure\",{\"1\":{\"450\":1}}],[\"settempclassloader\",{\"1\":{\"397\":1}}],[\"setter方法\",{\"1\":{\"241\":1}}],[\"settenantid\",{\"1\":{\"236\":2,\"602\":1,\"1522\":1,\"1525\":2}}],[\"setoffsetstore\",{\"1\":{\"914\":1}}],[\"setobjectwrapperfactory\",{\"1\":{\"852\":1}}],[\"setobjectfactory\",{\"1\":{\"852\":1}}],[\"setorder\",{\"1\":{\"430\":1,\"441\":1}}],[\"setorderqty\",{\"1\":{\"236\":1}}],[\"setoddquantity\",{\"1\":{\"236\":1}}],[\"setoutgoingcache\",{\"1\":{\"236\":1}}],[\"setutcmilliseconds\",{\"1\":{\"649\":1}}],[\"setuserservice\",{\"1\":{\"658\":1}}],[\"setuserid\",{\"1\":{\"602\":1,\"1522\":1,\"1525\":2}}],[\"setusername\",{\"1\":{\"241\":1,\"602\":1,\"1522\":1,\"1525\":1}}],[\"setusecache\",{\"1\":{\"386\":1}}],[\"setusableqty\",{\"1\":{\"236\":1}}],[\"setup\",{\"1\":{\"164\":1}}],[\"set\",{\"1\":{\"29\":1,\"36\":2,\"53\":2,\"228\":1,\"346\":2,\"410\":2,\"411\":2,\"435\":1,\"602\":10,\"632\":1,\"717\":1,\"786\":3,\"833\":1,\"852\":1,\"902\":2,\"910\":3,\"911\":2,\"1120\":1,\"1144\":1,\"1210\":21,\"1211\":4,\"1243\":2,\"1383\":1,\"1408\":1,\"1445\":5,\"1464\":4,\"1465\":3,\"1466\":3,\"1467\":3}}],[\"sp\",{\"1\":{\"1491\":1}}],[\"specs\",{\"1\":{\"1486\":8}}],[\"special\",{\"1\":{\"397\":1}}],[\"specified\",{\"1\":{\"852\":3,\"914\":1}}],[\"specificclosure\",{\"1\":{\"647\":1}}],[\"specifically\",{\"1\":{\"399\":1}}],[\"specific\",{\"1\":{\"397\":1,\"604\":1}}],[\"specificinterceptors\",{\"1\":{\"383\":3,\"434\":3,\"435\":2}}],[\"specify\",{\"0\":{\"7\":1},\"1\":{\"914\":1}}],[\"speechrecognitionalternative\",{\"1\":{\"991\":2}}],[\"speechrecognitionresult\",{\"1\":{\"991\":7}}],[\"speed\",{\"1\":{\"924\":1}}],[\"spin\",{\"1\":{\"1445\":1}}],[\"spingboot初始化分析\",{\"0\":{\"809\":1}}],[\"spi数据库规范接口\",{\"1\":{\"1291\":1}}],[\"spiextensioninjector\",{\"1\":{\"736\":1}}],[\"spi\",{\"0\":{\"1291\":1},\"1\":{\"481\":1}}],[\"spi就是提供这样的一个机制\",{\"1\":{\"481\":1}}],[\"spi的全名为service\",{\"1\":{\"481\":1}}],[\"spi机制的思想\",{\"1\":{\"481\":1}}],[\"spi机制\",{\"0\":{\"481\":1}}],[\"spresult\",{\"1\":{\"353\":1}}],[\"spresult<integer>\",{\"1\":{\"353\":1}}],[\"sprintf\",{\"1\":{\"117\":2,\"158\":1}}],[\"springprotocolsupportloader包含protocolsupportloaderprovider\",{\"1\":{\"1357\":1}}],[\"springmessagebroker\",{\"0\":{\"1287\":1}}],[\"springmanagedtransactionfactory\",{\"1\":{\"852\":1}}],[\"springmvc在处理请求时使用的就是适配器模式\",{\"1\":{\"1259\":1}}],[\"springmvc\",{\"1\":{\"354\":1}}],[\"springextensioninjector\",{\"1\":{\"736\":1}}],[\"springquerymap\",{\"1\":{\"609\":1}}],[\"spring事件总线\",{\"0\":{\"589\":1,\"711\":1}}],[\"springfactoriesloader\",{\"1\":{\"494\":1}}],[\"springframework\",{\"1\":{\"31\":2,\"326\":1,\"476\":2,\"479\":3,\"481\":1,\"494\":1,\"585\":2,\"596\":2,\"601\":2,\"658\":1,\"707\":2,\"799\":1,\"851\":9,\"862\":3,\"981\":1,\"1066\":1}}],[\"springframework<\",{\"1\":{\"31\":1}}],[\"spring中的xml形式\",{\"0\":{\"479\":1}}],[\"spring中使用三级缓存\",{\"1\":{\"380\":1}}],[\"spring自动装配\",{\"0\":{\"477\":1}}],[\"spring提供了一种机制来自动更新被\",{\"1\":{\"476\":1}}],[\"springcloudgateway网关的应用\",{\"1\":{\"1262\":1}}],[\"springcloud\",{\"0\":{\"475\":1}}],[\"springcontextholder\",{\"1\":{\"413\":2}}],[\"spring单例对象的生成\",{\"0\":{\"437\":1}}],[\"spring代理对象的生成\",{\"0\":{\"431\":1}}],[\"springhttpsessionconfiguration\",{\"0\":{\"416\":1},\"1\":{\"416\":2}}],[\"springnamingpolicy\",{\"1\":{\"386\":1}}],[\"springsecurityfilterchain\",{\"1\":{\"329\":1}}],[\"springapplicationname\",{\"1\":{\"1586\":45,\"1590\":1,\"1591\":1,\"1592\":11,\"1597\":5}}],[\"springapplication\",{\"0\":{\"393\":1},\"1\":{\"210\":1}}],[\"spring支持的事务管理类型\",{\"0\":{\"202\":1}}],[\"spring线程安全\",{\"0\":{\"196\":1}}],[\"spring\",{\"0\":{\"40\":1,\"323\":1,\"351\":1,\"352\":1,\"354\":1,\"412\":1,\"414\":1,\"425\":1,\"428\":1,\"585\":1,\"632\":1,\"707\":1,\"1077\":1,\"1285\":1,\"1662\":1},\"1\":{\"31\":10,\"211\":3,\"354\":1,\"373\":1,\"397\":3,\"399\":2,\"411\":1,\"438\":1,\"446\":1,\"476\":1,\"479\":1,\"481\":3,\"494\":2,\"495\":1,\"585\":3,\"593\":2,\"594\":1,\"595\":1,\"632\":2,\"639\":1,\"707\":3,\"802\":1,\"804\":11,\"850\":15,\"851\":10,\"1026\":1,\"1032\":1,\"1066\":4,\"1132\":1,\"1479\":1,\"1501\":4,\"1513\":1,\"1514\":2,\"1515\":1,\"1520\":2},\"2\":{\"464\":1,\"474\":1,\"499\":1,\"560\":1}}],[\"springboot配置\",{\"1\":{\"981\":1}}],[\"springbootvfs\",{\"1\":{\"852\":1}}],[\"springboot的核心jar包如下\",{\"1\":{\"851\":1}}],[\"springboot的spi机制\",{\"1\":{\"481\":1}}],[\"springboot仅仅是通过starter\",{\"1\":{\"851\":1}}],[\"springboot方式初始化\",{\"0\":{\"733\":1}}],[\"springboot方式\",{\"0\":{\"657\":1},\"1\":{\"655\":1}}],[\"springboot中\",{\"0\":{\"480\":1}}],[\"springboot容器启动\",{\"0\":{\"390\":1}}],[\"springbootadmin\",{\"1\":{\"65\":1}}],[\"springbootapplication\",{\"1\":{\"20\":1,\"632\":1}}],[\"springboot使用\",{\"0\":{\"25\":1}}],[\"springboot\",{\"0\":{\"20\":1,\"23\":1,\"355\":1,\"360\":1,\"607\":1},\"1\":{\"65\":1,\"585\":1,\"707\":1}}],[\"spades\",{\"1\":{\"275\":2}}],[\"spark\",{\"1\":{\"81\":1,\"1039\":1}}],[\"split\",{\"1\":{\"236\":1,\"252\":1,\"312\":1,\"649\":1,\"1244\":1,\"1522\":1}}],[\"splitstocks\",{\"1\":{\"236\":3}}],[\"sphere\",{\"1\":{\"65\":1}}],[\"st\",{\"1\":{\"1445\":6}}],[\"still\",{\"1\":{\"1445\":3}}],[\"sticky\",{\"1\":{\"1227\":1}}],[\"stirng是不可变的\",{\"1\":{\"199\":1}}],[\"styletang\",{\"1\":{\"1136\":1}}],[\"style=normal\",{\"1\":{\"852\":1}}],[\"student\",{\"1\":{\"479\":2,\"899\":1}}],[\"stufactory\",{\"1\":{\"479\":4}}],[\"steps\",{\"1\":{\"1215\":8}}],[\"step\",{\"1\":{\"397\":1,\"1486\":4}}],[\"stdoutimpl\",{\"1\":{\"1515\":1}}],[\"stdout\",{\"1\":{\"1515\":1}}],[\"std\",{\"1\":{\"277\":1,\"296\":1,\"297\":1,\"309\":1,\"311\":1,\"312\":2}}],[\"stripprefix=1\",{\"1\":{\"1513\":2}}],[\"string类型utc毫秒\",{\"1\":{\"1486\":4}}],[\"string2obj\",{\"1\":{\"1248\":2}}],[\"stringdeserializer\",{\"1\":{\"801\":2,\"802\":2}}],[\"stringreader\",{\"1\":{\"647\":3}}],[\"stringtrimmereditor就是\",{\"1\":{\"379\":1}}],[\"stringtrimmereditor\",{\"1\":{\"379\":2}}],[\"string拥有该字符串数据的所有权\",{\"1\":{\"270\":1}}],[\"string和str\",{\"1\":{\"270\":2}}],[\"string与\",{\"0\":{\"269\":1}}],[\"stringutils\",{\"1\":{\"252\":1,\"345\":1,\"383\":1,\"422\":1,\"434\":1,\"505\":1,\"557\":1,\"672\":5,\"786\":1,\"852\":3,\"911\":1,\"1345\":1,\"1521\":2,\"1522\":1}}],[\"string>getlistmultimap\",{\"1\":{\"1013\":1}}],[\"string>>\",{\"1\":{\"792\":2,\"801\":1}}],[\"string>\",{\"1\":{\"252\":1,\"377\":6,\"792\":1,\"801\":9,\"1013\":1}}],[\"stringbuilder\",{\"0\":{\"199\":1}}],[\"stringbuffer是线程安全的\",{\"1\":{\"199\":1}}],[\"stringbuffer和stringbuilder通过append方法在原有内存中的字符串上\",{\"1\":{\"199\":1}}],[\"stringbuffer\",{\"0\":{\"199\":1},\"1\":{\"241\":4}}],[\"stringserializer\",{\"1\":{\"801\":2,\"802\":2}}],[\"stringsstreamtodevicedata\",{\"1\":{\"792\":1}}],[\"strings\",{\"1\":{\"133\":2}}],[\"stringify\",{\"1\":{\"51\":1,\"649\":2,\"930\":1}}],[\"string\",{\"0\":{\"199\":1,\"910\":1,\"931\":1},\"1\":{\"9\":3,\"122\":1,\"123\":2,\"127\":1,\"133\":1,\"139\":3,\"148\":3,\"151\":3,\"154\":4,\"158\":3,\"164\":3,\"181\":2,\"189\":1,\"210\":1,\"234\":1,\"241\":3,\"252\":2,\"264\":1,\"267\":1,\"269\":4,\"270\":3,\"271\":8,\"273\":1,\"275\":1,\"277\":2,\"282\":2,\"292\":2,\"297\":5,\"298\":3,\"309\":3,\"311\":3,\"318\":8,\"319\":5,\"345\":2,\"353\":1,\"354\":6,\"360\":2,\"377\":4,\"378\":1,\"379\":1,\"383\":1,\"399\":8,\"411\":2,\"422\":3,\"433\":1,\"434\":1,\"435\":1,\"438\":2,\"467\":3,\"471\":1,\"557\":1,\"592\":2,\"594\":4,\"602\":18,\"646\":1,\"647\":5,\"648\":6,\"649\":5,\"652\":2,\"657\":1,\"658\":1,\"672\":1,\"719\":6,\"780\":6,\"786\":2,\"792\":2,\"804\":1,\"833\":1,\"852\":5,\"871\":2,\"900\":1,\"910\":1,\"911\":11,\"982\":2,\"985\":6,\"986\":6,\"988\":6,\"989\":1,\"991\":6,\"992\":12,\"993\":7,\"994\":2,\"995\":2,\"1013\":8,\"1031\":1,\"1032\":11,\"1245\":1,\"1256\":1,\"1257\":2,\"1259\":1,\"1320\":1,\"1345\":2,\"1411\":1,\"1414\":1,\"1415\":1,\"1480\":4,\"1484\":1,\"1518\":2,\"1521\":2,\"1522\":6,\"1523\":5,\"1526\":1,\"1531\":11,\"1532\":18,\"1533\":1,\"1534\":4,\"1535\":4,\"1539\":8,\"1540\":8,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":3,\"1548\":11,\"1549\":11,\"1550\":3,\"1551\":2,\"1552\":3,\"1553\":2,\"1554\":5,\"1555\":1,\"1559\":3,\"1560\":4,\"1561\":1,\"1562\":2,\"1563\":1,\"1566\":1,\"1570\":11,\"1571\":9,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":3,\"1579\":15,\"1580\":16,\"1581\":2,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":2,\"1590\":6,\"1591\":7,\"1592\":3,\"1593\":2,\"1594\":2,\"1596\":1,\"1601\":4,\"1602\":5,\"1603\":1,\"1604\":1,\"1605\":1,\"1606\":2,\"1611\":4,\"1612\":5,\"1613\":2,\"1614\":1,\"1615\":1,\"1622\":2,\"1623\":1,\"1624\":1,\"1628\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1635\":1,\"1636\":1,\"1637\":1,\"1641\":1}}],[\"strlist\",{\"1\":{\"982\":8}}],[\"strlen\",{\"1\":{\"910\":1}}],[\"strategy\",{\"1\":{\"902\":2,\"1445\":7}}],[\"str的转换\",{\"0\":{\"269\":1}}],[\"str时\",{\"1\":{\"268\":1}}],[\"str是一个对字符串数据的引用\",{\"1\":{\"268\":1}}],[\"streamwriter\",{\"1\":{\"924\":1}}],[\"streamexecutionenvironment\",{\"1\":{\"791\":1,\"792\":5}}],[\"streaming\",{\"1\":{\"790\":1,\"792\":3}}],[\"stream\",{\"1\":{\"236\":3,\"378\":1,\"500\":1,\"672\":2,\"786\":3,\"1210\":1,\"1522\":1}}],[\"strformat\",{\"1\":{\"158\":2}}],[\"str\",{\"1\":{\"127\":1,\"267\":1,\"268\":1,\"269\":3,\"270\":3,\"273\":1,\"282\":2,\"318\":4,\"931\":1,\"982\":2}}],[\"strstat\",{\"1\":{\"982\":1}}],[\"strs\",{\"1\":{\"127\":2}}],[\"struct\",{\"1\":{\"121\":1,\"139\":1,\"148\":5,\"151\":1,\"157\":2,\"158\":1,\"181\":1,\"271\":2,\"272\":1,\"274\":1,\"288\":1,\"290\":1,\"295\":1,\"298\":1,\"316\":1,\"1486\":8}}],[\"stock\",{\"1\":{\"1249\":1}}],[\"stock3\",{\"1\":{\"1243\":2}}],[\"stockcode\",{\"1\":{\"117\":1}}],[\"stockcode=123\",{\"1\":{\"117\":1}}],[\"stopped\",{\"1\":{\"1137\":1}}],[\"stop\",{\"1\":{\"835\":1,\"837\":1,\"843\":1,\"1194\":1,\"1198\":1,\"1205\":2}}],[\"stopsilently\",{\"1\":{\"456\":1}}],[\"stored\",{\"1\":{\"1518\":1}}],[\"store\",{\"1\":{\"911\":1,\"1359\":1,\"1514\":1}}],[\"storetype\",{\"1\":{\"623\":3}}],[\"storepasswd\",{\"1\":{\"623\":1}}],[\"store可以下载\",{\"1\":{\"103\":1}}],[\"storagetype\",{\"1\":{\"1484\":1}}],[\"storage\",{\"1\":{\"236\":1,\"1130\":2}}],[\"storagecache\",{\"1\":{\"236\":5}}],[\"stage\",{\"1\":{\"1215\":8,\"1216\":3}}],[\"stages\",{\"1\":{\"1215\":4}}],[\"stable\",{\"1\":{\"1130\":1}}],[\"standalone<\",{\"1\":{\"646\":1}}],[\"standard\",{\"1\":{\"749\":1,\"762\":2,\"1514\":1}}],[\"standardcharsets\",{\"1\":{\"719\":1}}],[\"standardcontext实现context接口\",{\"1\":{\"678\":1}}],[\"standardcontext掌握控制权\",{\"1\":{\"675\":1}}],[\"standardcontext\",{\"0\":{\"458\":1,\"676\":1},\"1\":{\"457\":1,\"694\":1}}],[\"standardconfigdatalocationresolver\",{\"1\":{\"355\":1}}],[\"standardwrapper\",{\"1\":{\"694\":1}}],[\"standardwrapper等实例的启动及初始化\",{\"1\":{\"457\":1}}],[\"standardservice\",{\"1\":{\"693\":1}}],[\"standardservice中的mapper\",{\"0\":{\"460\":1}}],[\"standardservice中mapperlistener\",{\"0\":{\"459\":1}}],[\"standardserver\",{\"1\":{\"693\":1}}],[\"standardhost\",{\"1\":{\"457\":1,\"694\":1}}],[\"standardengine\",{\"1\":{\"457\":1,\"694\":1}}],[\"stack\",{\"1\":{\"287\":6}}],[\"stash\",{\"1\":{\"43\":2}}],[\"startthread\",{\"1\":{\"1445\":1}}],[\"starttime\",{\"1\":{\"236\":2,\"411\":2,\"421\":2,\"1539\":1,\"1540\":1,\"1541\":2}}],[\"startscheduledtask\",{\"1\":{\"914\":1}}],[\"startswith\",{\"1\":{\"422\":1,\"471\":1}}],[\"startpage\",{\"1\":{\"853\":1}}],[\"start方法\",{\"1\":{\"840\":1}}],[\"start方法启用线程\",{\"1\":{\"236\":1}}],[\"startreconnectcycle\",{\"1\":{\"819\":1}}],[\"startmetadatacenter启用元数据中心\",{\"1\":{\"744\":1}}],[\"started\",{\"1\":{\"406\":1,\"456\":3,\"647\":1,\"696\":1,\"914\":1}}],[\"starter<\",{\"1\":{\"639\":1}}],[\"starter\",{\"1\":{\"211\":2,\"468\":1,\"476\":1,\"585\":4,\"658\":1,\"707\":4,\"851\":1,\"862\":4,\"981\":1,\"1479\":1}}],[\"starter的意义\",{\"0\":{\"211\":1}}],[\"startasync\",{\"1\":{\"406\":1}}],[\"startasyncprocessing\",{\"1\":{\"406\":3}}],[\"startdeferredresultprocessing\",{\"1\":{\"406\":2}}],[\"startupstep\",{\"1\":{\"397\":2,\"438\":1,\"446\":1}}],[\"startupshutdownmonitor\",{\"1\":{\"397\":1}}],[\"starting\",{\"1\":{\"696\":1}}],[\"startinternal内部启动\",{\"1\":{\"458\":1}}],[\"startinternal\",{\"1\":{\"457\":1}}],[\"startindex\",{\"1\":{\"152\":5}}],[\"startiiapplication\",{\"1\":{\"210\":2}}],[\"startcmd\",{\"1\":{\"164\":1}}],[\"start\",{\"0\":{\"456\":1},\"1\":{\"13\":1,\"164\":1,\"397\":2,\"438\":1,\"445\":1,\"446\":1,\"455\":1,\"456\":2,\"457\":1,\"647\":2,\"811\":1,\"812\":1,\"833\":5,\"835\":1,\"837\":1,\"843\":1,\"914\":27,\"919\":1,\"1066\":1,\"1194\":1,\"1198\":2,\"1205\":1,\"1345\":2,\"1445\":1,\"1479\":1}}],[\"stat\",{\"1\":{\"1515\":2}}],[\"stationcode=qip\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"staticmeasurement\",{\"1\":{\"1482\":1}}],[\"staticstu\",{\"1\":{\"479\":1}}],[\"staticresourceconfigurer\",{\"1\":{\"451\":1}}],[\"static代码块中实例化\",{\"1\":{\"1256\":1}}],[\"static代码块\",{\"1\":{\"210\":1}}],[\"static\",{\"1\":{\"9\":2,\"25\":1,\"210\":1,\"234\":1,\"236\":1,\"241\":1,\"249\":1,\"252\":1,\"255\":1,\"399\":1,\"413\":4,\"467\":2,\"505\":1,\"509\":1,\"557\":1,\"594\":4,\"602\":21,\"632\":4,\"646\":1,\"647\":3,\"648\":1,\"719\":4,\"780\":6,\"792\":3,\"858\":1,\"871\":1,\"911\":1,\"1032\":1,\"1198\":1,\"1247\":1,\"1249\":1,\"1256\":8,\"1257\":2,\"1445\":3}}],[\"stats\",{\"1\":{\"756\":1,\"1230\":1,\"1515\":1}}],[\"statuscode\",{\"1\":{\"988\":1}}],[\"status=\",{\"1\":{\"749\":1}}],[\"status\",{\"1\":{\"13\":1,\"202\":3,\"360\":3,\"717\":2,\"1147\":1,\"1198\":1,\"1205\":1,\"1383\":3,\"1539\":1,\"1540\":1,\"1541\":2,\"1552\":1}}],[\"stateflag\",{\"1\":{\"1579\":1,\"1580\":1,\"1582\":4,\"1611\":1,\"1612\":1,\"1613\":2,\"1622\":1,\"1628\":2}}],[\"statefulset\",{\"1\":{\"1167\":1}}],[\"state字段维护3个状态\",{\"1\":{\"1327\":1}}],[\"state对象\",{\"1\":{\"998\":1}}],[\"statebackend\",{\"1\":{\"790\":1}}],[\"state=0\",{\"1\":{\"716\":1}}],[\"statements\",{\"1\":{\"1515\":2}}],[\"statementhandler\",{\"1\":{\"853\":3}}],[\"statement\",{\"1\":{\"131\":3,\"852\":2,\"1515\":1}}],[\"state\",{\"1\":{\"11\":1,\"329\":1,\"509\":1,\"716\":8,\"767\":1,\"769\":2,\"770\":2,\"792\":1,\"852\":1,\"914\":1,\"977\":1,\"998\":1,\"1058\":8,\"1445\":7}}],[\"eyjzd\",{\"1\":{\"1533\":1}}],[\"eyjrawqioii5nmixzwiyzi0xmzci9\",{\"1\":{\"1533\":1}}],[\"ekmzdtgcqbxz\",{\"1\":{\"1531\":1}}],[\"ewrwt345433535\",{\"1\":{\"1215\":1}}],[\"ep\",{\"1\":{\"1421\":2}}],[\"epoll\",{\"1\":{\"1210\":1}}],[\"eps\",{\"1\":{\"760\":1}}],[\"ef5ff8974c5d4282aed566ad83d25dfc\",{\"1\":{\"1582\":1}}],[\"ef\",{\"1\":{\"1190\":1,\"1206\":1}}],[\"etreemap\",{\"1\":{\"1036\":3}}],[\"etc\",{\"1\":{\"5\":2,\"17\":2,\"30\":1,\"36\":1,\"411\":1,\"1025\":1,\"1093\":1,\"1096\":1,\"1115\":2,\"1116\":1,\"1127\":3,\"1128\":1,\"1130\":3,\"1136\":2,\"1140\":3,\"1141\":2,\"1168\":2,\"1177\":2,\"1182\":2,\"1193\":1,\"1194\":3,\"1198\":1,\"1206\":2,\"1210\":1,\"1211\":2,\"1458\":2}}],[\"emqx\",{\"0\":{\"1264\":1}}],[\"emqx版本问题\",{\"1\":{\"846\":1}}],[\"emqserver\",{\"1\":{\"1210\":2}}],[\"emq的处理是1\",{\"1\":{\"845\":1}}],[\"embedded\",{\"1\":{\"456\":1}}],[\"empty=false\",{\"1\":{\"852\":1}}],[\"emptyasnull\",{\"1\":{\"379\":1}}],[\"empty\",{\"1\":{\"346\":1,\"672\":1,\"902\":1,\"1445\":1}}],[\"emailaddress=myemail\",{\"1\":{\"623\":1}}],[\"email\",{\"1\":{\"271\":6,\"1146\":3,\"1532\":2,\"1548\":1,\"1549\":1,\"1550\":2}}],[\"earliest\",{\"1\":{\"801\":1,\"802\":1}}],[\"earlyproxyreferences\",{\"1\":{\"433\":1}}],[\"earlysingletonobjects\",{\"1\":{\"380\":1,\"439\":1}}],[\"each=\",{\"1\":{\"982\":2}}],[\"each\",{\"1\":{\"647\":3,\"982\":1}}],[\"easyormrepositoryregistrar\",{\"0\":{\"1297\":1}}],[\"easyormproperties\",{\"1\":{\"1293\":1}}],[\"easyormconfiguration\",{\"0\":{\"1293\":1}}],[\"easy\",{\"0\":{\"746\":1,\"1292\":1}}],[\"easily\",{\"1\":{\"399\":1}}],[\"east\",{\"1\":{\"282\":6}}],[\"eagerly\",{\"1\":{\"346\":1,\"439\":1}}],[\"e>\",{\"1\":{\"294\":1}}],[\"equiv=\",{\"1\":{\"1407\":1}}],[\"equal\",{\"1\":{\"317\":2}}],[\"equals\",{\"1\":{\"236\":10,\"329\":1,\"383\":1,\"434\":1,\"602\":1,\"672\":1,\"780\":1,\"786\":2,\"1032\":1,\"1036\":1,\"1259\":2}}],[\"eq\",{\"1\":{\"277\":1,\"312\":4,\"315\":1,\"786\":1,\"902\":2,\"1222\":2,\"1311\":3}}],[\"either\",{\"1\":{\"249\":2,\"250\":1,\"411\":1}}],[\"edi\",{\"1\":{\"1123\":1}}],[\"edu\",{\"1\":{\"1096\":1}}],[\"eden区\",{\"1\":{\"243\":1}}],[\"edge\",{\"1\":{\"39\":2}}],[\"edge访问edge\",{\"1\":{\"39\":1}}],[\"edge一直设置同步问题\",{\"0\":{\"39\":1}}],[\"egd=file\",{\"1\":{\"218\":1,\"1116\":1,\"1137\":1}}],[\"eviction\",{\"1\":{\"1515\":1}}],[\"evictable\",{\"1\":{\"1515\":1}}],[\"evt\",{\"1\":{\"1407\":1}}],[\"evp2\",{\"1\":{\"1373\":1}}],[\"evp\",{\"1\":{\"1373\":1,\"1484\":1}}],[\"ev1\",{\"1\":{\"1373\":1,\"1484\":1}}],[\"even\",{\"1\":{\"852\":1,\"1445\":1}}],[\"eventmetadata\",{\"1\":{\"1483\":1}}],[\"eventexecutorgroup\",{\"1\":{\"1445\":1}}],[\"eventexecutor\",{\"1\":{\"1445\":13}}],[\"eventloopgroup\",{\"1\":{\"1450\":1}}],[\"eventloop与thread绑定\",{\"1\":{\"1445\":1}}],[\"eventloop\",{\"1\":{\"1445\":7,\"1450\":1}}],[\"eventloop维护socketchannel\",{\"1\":{\"1395\":1}}],[\"eventlistener注解\",{\"1\":{\"589\":1,\"711\":1}}],[\"eventlistener\",{\"1\":{\"413\":2,\"589\":1,\"711\":1,\"1285\":1,\"1345\":1}}],[\"eventid\",{\"1\":{\"1373\":1}}],[\"eventing\",{\"1\":{\"589\":3,\"711\":3}}],[\"event不支持更细粒度的订阅\",{\"1\":{\"1284\":1}}],[\"eventbus转换为同步或异步实现\",{\"1\":{\"1478\":1}}],[\"eventbusstoragemanager\",{\"1\":{\"1342\":1}}],[\"eventbus\",{\"0\":{\"1286\":1},\"1\":{\"1284\":1,\"1330\":2}}],[\"event和事件总线\",{\"1\":{\"1284\":1}}],[\"events\",{\"1\":{\"1210\":1,\"1484\":1,\"1486\":1}}],[\"eventtype\",{\"1\":{\"991\":4}}],[\"eventtime\",{\"1\":{\"792\":1}}],[\"eventname==\",{\"1\":{\"589\":1,\"711\":1}}],[\"event\",{\"0\":{\"412\":1,\"1285\":1},\"1\":{\"210\":1,\"391\":1,\"397\":2,\"413\":3,\"991\":2,\"1345\":9,\"1373\":2,\"1445\":6}}],[\"everything\",{\"1\":{\"748\":1}}],[\"ever\",{\"1\":{\"397\":1}}],[\"evalwriteasync\",{\"1\":{\"1246\":1}}],[\"evaluator\",{\"1\":{\"792\":1}}],[\"evaluateproxyinterfaces\",{\"1\":{\"435\":1}}],[\"evaluation\",{\"1\":{\"249\":2}}],[\"eval\",{\"1\":{\"16\":1,\"647\":2,\"648\":1}}],[\"els\",{\"1\":{\"1248\":4}}],[\"else\",{\"1\":{\"139\":1,\"154\":1,\"158\":1,\"234\":1,\"236\":2,\"345\":3,\"346\":2,\"357\":1,\"399\":5,\"413\":1,\"435\":2,\"438\":3,\"446\":1,\"649\":3,\"672\":2,\"786\":2,\"852\":4,\"911\":1,\"914\":2,\"1032\":1,\"1226\":1,\"1259\":1,\"1353\":1,\"1407\":1,\"1419\":1,\"1445\":3,\"1518\":1}}],[\"elif\",{\"1\":{\"1226\":1}}],[\"elements\",{\"1\":{\"974\":1}}],[\"element\",{\"1\":{\"969\":2,\"970\":4,\"971\":3}}],[\"elasticsearchrowmodequeryoperations\",{\"1\":{\"1344\":1}}],[\"elasticsearchrowmodestrategy\",{\"1\":{\"1344\":1}}],[\"elasticsearchrowmodestrategy继承thingsdatarepositorystrategy\",{\"1\":{\"1344\":1}}],[\"elasticsearchcolumnmodestrategy\",{\"1\":{\"1344\":1}}],[\"elasticsearchcolumnmodestrategy继承thingsdatarepositorystrategy\",{\"1\":{\"1344\":1}}],[\"elasticsearchindexmanager\",{\"1\":{\"1344\":1}}],[\"elasticsearchservice\",{\"1\":{\"1344\":1}}],[\"elasticsearchthingdataconfiguration\",{\"1\":{\"1344\":1}}],[\"elasticsearch配置\",{\"0\":{\"1137\":1}}],[\"elasticsearch\",{\"1\":{\"756\":1,\"780\":15,\"1137\":1,\"1139\":9,\"1248\":1}}],[\"elf\",{\"1\":{\"5\":1,\"17\":1}}],[\"e\",{\"1\":{\"121\":1,\"124\":2,\"129\":2,\"234\":4,\"236\":4,\"294\":1,\"378\":3,\"397\":1,\"399\":1,\"535\":2,\"556\":2,\"648\":4,\"786\":4,\"833\":1,\"852\":7,\"871\":2,\"911\":2,\"914\":2,\"925\":1,\"991\":2,\"1032\":4,\"1036\":1,\"1125\":2,\"1126\":6,\"1130\":4,\"1131\":2,\"1132\":7,\"1134\":2,\"1136\":4,\"1137\":7,\"1140\":3,\"1141\":1,\"1142\":1,\"1200\":1,\"1206\":2,\"1227\":2,\"1257\":2,\"1283\":1,\"1425\":1,\"1445\":9,\"1518\":1,\"1522\":2,\"1526\":9}}],[\"es查询命令\",{\"1\":{\"1248\":1}}],[\"es查询所有matchall\",{\"1\":{\"764\":1}}],[\"es和kibana\",{\"0\":{\"1139\":1}}],[\"es6\",{\"1\":{\"992\":2}}],[\"esutil\",{\"1\":{\"780\":2}}],[\"es会产生一个scrollid\",{\"1\":{\"780\":1}}],[\"es会索引每个\",{\"1\":{\"748\":1}}],[\"es还可以处理个聚合条件的嵌套\",{\"1\":{\"770\":1}}],[\"es的match\",{\"1\":{\"766\":1}}],[\"es分页查询from\",{\"1\":{\"765\":1}}],[\"es使用match\",{\"1\":{\"763\":1}}],[\"es集群\",{\"0\":{\"750\":1}}],[\"es是一个可扩展的高性能的用于数据分析的全文搜索引擎\",{\"1\":{\"748\":1}}],[\"es\",{\"0\":{\"747\":1,\"1248\":1},\"1\":{\"75\":1,\"748\":2,\"1137\":1,\"1139\":1}}],[\"es启动失败\",{\"0\":{\"22\":1}}],[\"er\",{\"1\":{\"929\":2}}],[\"ereka\",{\"1\":{\"71\":1}}],[\"err\",{\"1\":{\"294\":1,\"1259\":4}}],[\"errno\",{\"0\":{\"52\":1}}],[\"error=\",{\"1\":{\"1526\":1}}],[\"errors\",{\"1\":{\"1259\":1,\"1526\":2}}],[\"errorcontext\",{\"1\":{\"852\":3}}],[\"error异步输出\",{\"1\":{\"596\":1}}],[\"errorhandlinginprogress\",{\"1\":{\"406\":1}}],[\"errormsg\",{\"1\":{\"158\":9,\"353\":2}}],[\"error类型是一个接口类型\",{\"1\":{\"158\":1}}],[\"error\",{\"0\":{\"4\":1},\"1\":{\"123\":2,\"158\":5,\"159\":1,\"164\":1,\"230\":1,\"360\":3,\"378\":2,\"410\":1,\"411\":1,\"509\":1,\"596\":6,\"649\":2,\"786\":1,\"801\":1,\"852\":1,\"911\":1,\"988\":5,\"989\":1,\"1210\":7,\"1211\":2,\"1353\":1,\"1445\":5,\"1486\":1,\"1521\":2,\"1522\":2,\"1526\":6}}],[\"ext=\",{\"1\":{\"1136\":1}}],[\"extend\",{\"1\":{\"1197\":2}}],[\"extends\",{\"0\":{\"1397\":1},\"1\":{\"249\":2,\"252\":1,\"255\":1,\"397\":1,\"413\":1,\"430\":1,\"537\":2,\"632\":1,\"652\":1,\"658\":1,\"786\":1,\"900\":1,\"971\":1,\"988\":2,\"1397\":1,\"1451\":1,\"1518\":1}}],[\"extensionloader类型有scope\",{\"1\":{\"737\":1}}],[\"extensionloader\",{\"0\":{\"737\":1}}],[\"extensioninjector类型的extensionloader属于顶级loader\",{\"1\":{\"736\":1}}],[\"extensiondirector负责创建并管理相应scope级别\",{\"1\":{\"736\":1}}],[\"extensiondirector\",{\"0\":{\"736\":1},\"1\":{\"735\":1}}],[\"extensiondirector都记录了父级实例\",{\"1\":{\"735\":1}}],[\"externaldatasourcesink\",{\"1\":{\"792\":4}}],[\"external\",{\"0\":{\"3\":1},\"1\":{\"1120\":1,\"1122\":4,\"1475\":1}}],[\"exact\",{\"1\":{\"974\":1}}],[\"example\",{\"1\":{\"164\":1,\"172\":1,\"271\":3,\"652\":1,\"1066\":1,\"1145\":1,\"1146\":1,\"1215\":3,\"1256\":1,\"1458\":1}}],[\"exhook\",{\"1\":{\"643\":3}}],[\"exclude\",{\"1\":{\"632\":1}}],[\"exclusionfilter\",{\"1\":{\"491\":4}}],[\"exchangehandler之间进行交互\",{\"1\":{\"1381\":1}}],[\"exchange\",{\"1\":{\"422\":4,\"473\":3,\"513\":6,\"557\":6,\"1345\":8,\"1522\":3,\"1523\":3}}],[\"excelconfigid\",{\"1\":{\"1455\":1}}],[\"excel导出后打不开\",{\"0\":{\"45\":1}}],[\"exceptiondetail\",{\"1\":{\"1635\":1}}],[\"exceptioncaught\",{\"1\":{\"1451\":1}}],[\"exceptionfactory\",{\"1\":{\"852\":1}}],[\"exceptionhelper\",{\"1\":{\"833\":1}}],[\"exceptionhandle\",{\"1\":{\"1526\":1}}],[\"exceptionhandler\",{\"0\":{\"378\":1},\"1\":{\"378\":4,\"1259\":1,\"1526\":3}}],[\"exceptionhandler注解标注的方法\",{\"1\":{\"375\":1}}],[\"exceptionhandleconfigurer\",{\"0\":{\"337\":1}}],[\"exceptionhandlingwebhandler被httpwebhandleradapter装饰\",{\"1\":{\"1262\":1}}],[\"exceptionhandlingwebhandler异常处理\",{\"1\":{\"473\":1}}],[\"exceptionhandling\",{\"1\":{\"330\":1,\"348\":1,\"467\":1,\"1031\":1}}],[\"exceptionmsg\",{\"1\":{\"801\":1}}],[\"exceptionwebhandler包装filterwebhandler\",{\"1\":{\"473\":1}}],[\"exceptiontranslator\",{\"1\":{\"852\":3}}],[\"exceptiontranslationfilter\",{\"1\":{\"342\":1,\"346\":1}}],[\"exceptiontransactionwebfilter\",{\"1\":{\"322\":1}}],[\"exception\",{\"0\":{\"230\":1},\"1\":{\"230\":1,\"236\":1,\"241\":1,\"249\":2,\"250\":2,\"252\":2,\"326\":1,\"329\":2,\"330\":1,\"331\":1,\"334\":3,\"343\":3,\"345\":3,\"348\":1,\"378\":2,\"397\":2,\"413\":1,\"456\":1,\"467\":1,\"480\":1,\"647\":1,\"780\":4,\"786\":2,\"792\":1,\"801\":3,\"833\":4,\"852\":6,\"900\":1,\"911\":1,\"1031\":1,\"1257\":1,\"1259\":5,\"1383\":2,\"1445\":4,\"1450\":1,\"1451\":1,\"1518\":1,\"1522\":2,\"1525\":1,\"1526\":3,\"1628\":2}}],[\"ex\",{\"1\":{\"345\":14,\"397\":4,\"410\":3,\"411\":3,\"439\":2,\"445\":2,\"446\":2,\"456\":5,\"491\":4,\"833\":6,\"852\":2,\"1259\":4,\"1383\":2,\"1526\":2}}],[\"existing\",{\"1\":{\"833\":1,\"1122\":1}}],[\"existids\",{\"1\":{\"672\":5}}],[\"exists\",{\"1\":{\"411\":1,\"908\":1,\"1032\":1,\"1246\":1,\"1292\":1}}],[\"exist\",{\"1\":{\"305\":2,\"910\":1}}],[\"exit\",{\"1\":{\"113\":1,\"647\":2,\"1136\":1}}],[\"exectype\",{\"1\":{\"852\":2}}],[\"execfile\",{\"1\":{\"646\":1}}],[\"exec<f\",{\"1\":{\"319\":1}}],[\"exec2<f\",{\"1\":{\"319\":1}}],[\"exec2\",{\"1\":{\"319\":1}}],[\"exec1<f\",{\"1\":{\"319\":1}}],[\"exec1\",{\"1\":{\"319\":1}}],[\"exec\",{\"1\":{\"218\":1,\"319\":1,\"931\":1,\"1087\":1,\"1127\":1,\"1128\":1,\"1136\":1,\"1159\":1,\"1230\":1}}],[\"executablequeryoperator\",{\"1\":{\"1301\":1}}],[\"executabledeleteoperator\",{\"1\":{\"1301\":1}}],[\"executableupdateoperator\",{\"1\":{\"1301\":2}}],[\"execute方法\",{\"1\":{\"1445\":1}}],[\"execute执行任务\",{\"1\":{\"1013\":1}}],[\"executeintransaction\",{\"1\":{\"801\":1}}],[\"executeinternal\",{\"1\":{\"658\":2}}],[\"execute\",{\"1\":{\"234\":2,\"236\":1,\"252\":1,\"476\":2,\"648\":2,\"792\":1,\"911\":1,\"1013\":1,\"1445\":4,\"1450\":1}}],[\"executortype\",{\"1\":{\"852\":2}}],[\"executor\",{\"1\":{\"476\":4,\"852\":4,\"853\":2,\"1311\":2,\"1445\":15}}],[\"executor2\",{\"1\":{\"234\":2}}],[\"executor1\",{\"1\":{\"234\":4}}],[\"executors缓存\",{\"1\":{\"1335\":1}}],[\"executorservice\",{\"1\":{\"234\":2,\"236\":3,\"833\":3,\"1013\":1}}],[\"executors\",{\"0\":{\"191\":1},\"1\":{\"192\":1,\"234\":2,\"236\":1}}],[\"execution=true\",{\"1\":{\"589\":1,\"711\":1}}],[\"executionlistener\",{\"1\":{\"588\":1,\"710\":1}}],[\"execution\",{\"1\":{\"382\":1,\"580\":1,\"704\":1,\"911\":1}}],[\"executions>\",{\"1\":{\"49\":1}}],[\"execution>\",{\"1\":{\"49\":1}}],[\"exe\",{\"1\":{\"173\":1,\"642\":2,\"643\":1}}],[\"exp\",{\"1\":{\"1532\":2}}],[\"expands\",{\"1\":{\"1484\":9}}],[\"expansions\",{\"1\":{\"751\":1}}],[\"experimental\",{\"1\":{\"1093\":2}}],[\"expectqty\",{\"1\":{\"236\":2}}],[\"expiresat\",{\"1\":{\"1532\":4}}],[\"expires\",{\"1\":{\"1345\":5}}],[\"expired\",{\"1\":{\"1058\":1}}],[\"expiretime\",{\"1\":{\"911\":2}}],[\"expireat\",{\"1\":{\"911\":2}}],[\"expire\",{\"1\":{\"908\":1,\"910\":1,\"911\":4,\"1141\":2,\"1531\":2}}],[\"exposure\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"expose\",{\"0\":{\"1109\":1},\"1\":{\"1116\":1}}],[\"exposetargetclass\",{\"1\":{\"435\":1}}],[\"exportallexcelstream\",{\"1\":{\"1455\":1}}],[\"exports\",{\"1\":{\"992\":2}}],[\"exportservices\",{\"1\":{\"742\":1}}],[\"export=\",{\"1\":{\"992\":1}}],[\"export\",{\"0\":{\"1188\":1},\"1\":{\"974\":1,\"975\":1,\"992\":24,\"993\":3,\"994\":3,\"995\":3,\"1127\":2,\"1130\":4,\"1182\":2,\"1188\":3,\"1458\":5}}],[\"exportcert\",{\"1\":{\"623\":1}}],[\"explicitly\",{\"1\":{\"439\":1}}],[\"explicit\",{\"1\":{\"411\":1,\"435\":1,\"1120\":1}}],[\"explain\",{\"0\":{\"715\":1},\"1\":{\"206\":1}}],[\"explorer工具\",{\"1\":{\"103\":1}}],[\"expression\",{\"1\":{\"986\":1}}],[\"expressions\",{\"1\":{\"604\":1}}],[\"expressionurlauthorizationconfigurer继承abstractintercepturlconfigurer\",{\"0\":{\"336\":1}}],[\"express\",{\"1\":{\"65\":1}}],[\"en\",{\"1\":{\"1407\":1}}],[\"ens160\",{\"1\":{\"1198\":1}}],[\"ensureactivegroup\",{\"1\":{\"816\":1}}],[\"ensure\",{\"1\":{\"346\":1,\"399\":2,\"1445\":2}}],[\"encryptstr\",{\"1\":{\"719\":3}}],[\"encrypthex\",{\"1\":{\"719\":1}}],[\"encrypt\",{\"1\":{\"719\":1}}],[\"encoding\",{\"1\":{\"924\":1}}],[\"encoding=utf\",{\"1\":{\"1116\":1}}],[\"encoding=\",{\"1\":{\"55\":1,\"103\":1,\"479\":1,\"596\":1,\"652\":1}}],[\"encode\",{\"1\":{\"652\":1}}],[\"encoder>\",{\"1\":{\"596\":4}}],[\"encountered\",{\"1\":{\"397\":1}}],[\"engine=innodb\",{\"1\":{\"1464\":1,\"1465\":1,\"1466\":1,\"1467\":1,\"1468\":1}}],[\"engine把httpservletresponse对象返回给connector\",{\"1\":{\"679\":1}}],[\"engine匹配到名为localhost的host\",{\"1\":{\"679\":1}}],[\"engine获得请求localhost\",{\"1\":{\"679\":1}}],[\"engines\",{\"1\":{\"647\":9}}],[\"engine\",{\"1\":{\"450\":1,\"647\":3,\"648\":7,\"678\":2,\"792\":12}}],[\"enforced\",{\"1\":{\"435\":1}}],[\"enforcer\",{\"1\":{\"49\":1}}],[\"enhancer\",{\"1\":{\"386\":12}}],[\"enablewebfluxsecurity\",{\"1\":{\"1031\":1}}],[\"enable\",{\"1\":{\"801\":1,\"802\":1,\"1025\":2,\"1095\":2,\"1515\":1}}],[\"enablescheduling注解\",{\"1\":{\"658\":1}}],[\"enablescheduling\",{\"1\":{\"657\":1}}],[\"enablescheduling开启定时任务\",{\"1\":{\"657\":1}}],[\"enabletx\",{\"1\":{\"430\":2}}],[\"enableaspectjautoproxy注册annotationawareaspectjautoproxycreator代理后置处理器到容器中\",{\"1\":{\"427\":1}}],[\"enableredishttpsession\",{\"0\":{\"415\":1}}],[\"enableloggingrequestdetails=\",{\"1\":{\"411\":1}}],[\"enableloggingrequestdetails\",{\"1\":{\"411\":2}}],[\"enableconfigurationproperties\",{\"0\":{\"370\":1},\"1\":{\"370\":1}}],[\"enabled\",{\"1\":{\"1072\":1,\"1093\":1,\"1311\":1,\"1513\":1,\"1514\":1,\"1532\":2}}],[\"enabled=true\",{\"1\":{\"213\":2,\"1137\":1}}],[\"enabled=false\",{\"1\":{\"213\":1}}],[\"enabled>\",{\"1\":{\"49\":4,\"621\":1,\"1202\":4}}],[\"entityeventlistener\",{\"1\":{\"1372\":1}}],[\"entitytype\",{\"1\":{\"1296\":3,\"1297\":1}}],[\"entitytype在easyormrepositoryregistrar构造beandefinition时设置实体类型\",{\"1\":{\"1296\":1}}],[\"entitytablemetadataresolver\",{\"1\":{\"1296\":1}}],[\"entitytablemetadataparserconfiguration\",{\"0\":{\"1294\":1}}],[\"entityresultwrapperfactory\",{\"1\":{\"1296\":1}}],[\"entitymanager\",{\"1\":{\"1294\":1}}],[\"entityfactory\",{\"1\":{\"1293\":1}}],[\"entity\",{\"1\":{\"852\":1,\"1059\":1}}],[\"entry<attributekey<\",{\"1\":{\"1450\":1}}],[\"entry<channeloption<\",{\"1\":{\"1450\":1}}],[\"entry<string\",{\"1\":{\"1032\":2}}],[\"entrycatalogid\",{\"1\":{\"1248\":1}}],[\"entryorderitem\",{\"1\":{\"1248\":1}}],[\"entryorderitemlist\",{\"1\":{\"1244\":1}}],[\"entryorder\",{\"1\":{\"1244\":2}}],[\"entrypoint\",{\"0\":{\"1114\":1},\"1\":{\"1114\":2,\"1115\":2}}],[\"entryset\",{\"1\":{\"1032\":1}}],[\"entry\",{\"1\":{\"312\":3,\"491\":3,\"1032\":3}}],[\"enter\",{\"1\":{\"113\":1,\"632\":1}}],[\"enterprise\",{\"1\":{\"39\":1}}],[\"enum类型无此参数\",{\"1\":{\"1486\":4}}],[\"enumeration<url>\",{\"1\":{\"1032\":1}}],[\"enumerate\",{\"1\":{\"279\":1}}],[\"enum\",{\"1\":{\"275\":2,\"282\":4,\"286\":1,\"292\":1,\"294\":2,\"632\":1,\"991\":2,\"992\":3,\"1256\":1,\"1486\":4}}],[\"endswith\",{\"1\":{\"1032\":1}}],[\"end\",{\"1\":{\"241\":1,\"397\":2,\"438\":1,\"446\":1,\"1246\":2,\"1421\":1,\"1445\":1}}],[\"endtime\",{\"1\":{\"236\":2,\"1539\":1,\"1540\":1,\"1541\":2}}],[\"endindex\",{\"1\":{\"152\":5}}],[\"enddate\",{\"1\":{\"117\":1}}],[\"enddate=\",{\"1\":{\"117\":2}}],[\"endpointclasses\",{\"1\":{\"1411\":1}}],[\"endpointclass\",{\"1\":{\"1411\":2,\"1413\":1}}],[\"endpointbeannames\",{\"1\":{\"1411\":1}}],[\"endpoints\",{\"1\":{\"343\":1,\"1514\":1,\"1515\":1}}],[\"endpoint\",{\"0\":{\"3\":1},\"1\":{\"872\":1,\"1513\":1,\"1514\":1}}],[\"environmentchangeevent\",{\"1\":{\"884\":1}}],[\"environment\",{\"0\":{\"1121\":1},\"1\":{\"792\":1,\"852\":6,\"1025\":1,\"1120\":2,\"1121\":2,\"1122\":1,\"1139\":4,\"1215\":3,\"1475\":1}}],[\"environmentpostprocessorapplicationlistener\",{\"1\":{\"355\":1}}],[\"env相关\",{\"0\":{\"166\":1}}],[\"env\",{\"0\":{\"1105\":1},\"1\":{\"96\":2,\"173\":3,\"218\":1,\"792\":10,\"1105\":1,\"1115\":1,\"1130\":6,\"1133\":9}}],[\"ecommerce\",{\"1\":{\"780\":1}}],[\"ecdsa\",{\"0\":{\"26\":1}}],[\"eclipse\",{\"0\":{\"15\":1}}],[\"echo\",{\"1\":{\"5\":2,\"17\":2,\"647\":2,\"1115\":1,\"1130\":1,\"1136\":2,\"1215\":3,\"1219\":2,\"1221\":8}}],[\"d4cf75467d78407992c66ef72731b0bd\",{\"1\":{\"1607\":1}}],[\"d69ihnjfwut1lyy3\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"djw9s\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"djava\",{\"1\":{\"218\":1,\"1116\":1,\"1137\":1,\"1139\":1}}],[\"dns1=192\",{\"1\":{\"1198\":1}}],[\"dnacos\",{\"1\":{\"1137\":1}}],[\"dname\",{\"1\":{\"623\":1}}],[\"dhcp\",{\"1\":{\"1198\":1}}],[\"dhudson\",{\"1\":{\"1130\":2}}],[\"dzldazupipx\",{\"1\":{\"1514\":1,\"1515\":1}}],[\"dzl\",{\"1\":{\"1134\":1,\"1136\":1}}],[\"dpkg\",{\"1\":{\"1130\":1}}],[\"dmloperator\",{\"1\":{\"1301\":1}}],[\"dml语句\",{\"1\":{\"1052\":1}}],[\"dmonitor\",{\"1\":{\"1137\":1}}],[\"dmysql\",{\"1\":{\"1120\":2,\"1121\":4,\"1137\":3}}],[\"d键=值\",{\"1\":{\"1120\":1,\"1121\":1}}],[\"d目录下扫描\",{\"1\":{\"1115\":1}}],[\"d2\",{\"1\":{\"1058\":14}}],[\"d1\",{\"1\":{\"1058\":30}}],[\"dspring\",{\"1\":{\"1137\":2}}],[\"dst\",{\"1\":{\"716\":5}}],[\"ds\",{\"1\":{\"716\":5}}],[\"dsl\",{\"0\":{\"604\":1},\"1\":{\"748\":2}}],[\"df\",{\"1\":{\"657\":1,\"929\":2,\"1087\":1}}],[\"dfile\",{\"1\":{\"55\":1,\"1116\":1}}],[\"dcom\",{\"1\":{\"1136\":2}}],[\"dc=\",{\"1\":{\"1118\":1}}],[\"dc\",{\"1\":{\"623\":1,\"1123\":16}}],[\"dailystock\",{\"1\":{\"1248\":11}}],[\"daemonset\",{\"1\":{\"1167\":1}}],[\"daemon\",{\"1\":{\"1093\":2,\"1096\":2}}],[\"dashboardobject\",{\"1\":{\"1482\":1}}],[\"dashboard\",{\"1\":{\"974\":2}}],[\"dao\",{\"1\":{\"900\":1}}],[\"daointerface\",{\"1\":{\"900\":8}}],[\"dao接口\",{\"1\":{\"900\":1}}],[\"dao层\",{\"1\":{\"632\":1}}],[\"day\",{\"1\":{\"649\":2,\"786\":3}}],[\"dandelion\",{\"1\":{\"648\":2}}],[\"dangling\",{\"1\":{\"397\":1}}],[\"data+\",{\"1\":{\"1407\":1}}],[\"datatype\",{\"1\":{\"945\":1,\"1486\":4}}],[\"datainputstream\",{\"1\":{\"839\":1}}],[\"datastream<consumerrecord<string\",{\"1\":{\"792\":1}}],[\"datastream<string>\",{\"1\":{\"792\":2}}],[\"datastream<triggersink>\",{\"1\":{\"792\":1}}],[\"datastream<devicedata>\",{\"1\":{\"792\":3}}],[\"datastream<list<triggerconfig>>\",{\"1\":{\"792\":3}}],[\"datastream\",{\"1\":{\"791\":1,\"792\":3}}],[\"datasourcelookup\",{\"1\":{\"632\":3}}],[\"datasource4\",{\"1\":{\"632\":1}}],[\"datasourcetype\",{\"1\":{\"632\":9}}],[\"datasourcetransactionmanager进行事务管理\",{\"1\":{\"632\":1}}],[\"datasourcecontextholder\",{\"1\":{\"632\":2}}],[\"datasource提供abstractroutingdatasource在获取connection之前切换数据源\",{\"1\":{\"632\":1}}],[\"datasourceautoconfiguration\",{\"1\":{\"632\":2}}],[\"datasource的实例是否是单个\",{\"1\":{\"374\":1}}],[\"datasource\",{\"0\":{\"374\":1,\"632\":1,\"850\":1,\"897\":1},\"1\":{\"373\":1,\"595\":1,\"632\":2,\"850\":17,\"852\":7,\"1132\":1,\"1515\":1}}],[\"datasourcedependentmatcher\",{\"1\":{\"108\":1}}],[\"datasourcedependentcache\",{\"1\":{\"108\":1}}],[\"databinder\",{\"1\":{\"379\":4}}],[\"databaseoperator\",{\"1\":{\"1296\":1}}],[\"databaseoperator包含rdbdatabasemetadata\",{\"1\":{\"1293\":1}}],[\"databases\",{\"1\":{\"852\":1}}],[\"databaseid\",{\"1\":{\"852\":2}}],[\"databaseidprovider\",{\"1\":{\"852\":4}}],[\"database\",{\"0\":{\"75\":1},\"1\":{\"236\":1,\"748\":1,\"924\":2}}],[\"data\",{\"1\":{\"154\":4,\"211\":1,\"411\":2,\"468\":1,\"643\":1,\"649\":12,\"658\":2,\"780\":1,\"786\":1,\"912\":1,\"925\":1,\"945\":2,\"991\":2,\"992\":3,\"1123\":1,\"1127\":2,\"1130\":11,\"1131\":3,\"1133\":3,\"1139\":2,\"1140\":5,\"1141\":3,\"1142\":2,\"1197\":1,\"1200\":4,\"1244\":1,\"1312\":1,\"1373\":1,\"1531\":2,\"1532\":2,\"1533\":2,\"1534\":2,\"1535\":2,\"1539\":1,\"1540\":1,\"1541\":1,\"1542\":2,\"1543\":2,\"1544\":1,\"1548\":1,\"1549\":1,\"1550\":1,\"1551\":2,\"1552\":2,\"1553\":1,\"1554\":1,\"1555\":1,\"1559\":1,\"1560\":1,\"1561\":1,\"1562\":2,\"1563\":2,\"1564\":1,\"1565\":1,\"1566\":1,\"1570\":1,\"1571\":1,\"1572\":1,\"1573\":2,\"1574\":2,\"1575\":1,\"1579\":1,\"1580\":1,\"1581\":2,\"1582\":1,\"1583\":1,\"1584\":1,\"1585\":1,\"1586\":1,\"1590\":1,\"1591\":1,\"1592\":1,\"1593\":2,\"1594\":2,\"1595\":1,\"1596\":1,\"1597\":1,\"1601\":1,\"1602\":1,\"1603\":1,\"1604\":2,\"1605\":2,\"1606\":1,\"1607\":1,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":2,\"1615\":2,\"1616\":1,\"1617\":1,\"1621\":1,\"1622\":1,\"1623\":2,\"1624\":2,\"1628\":1,\"1629\":2,\"1630\":3,\"1631\":2,\"1635\":1,\"1636\":2,\"1637\":3,\"1641\":1}}],[\"datax\",{\"0\":{\"923\":1},\"1\":{\"81\":1}}],[\"dateunit\",{\"1\":{\"1249\":1}}],[\"dateutil\",{\"1\":{\"657\":1}}],[\"datevalue\",{\"1\":{\"786\":2}}],[\"datevalues\",{\"1\":{\"786\":3}}],[\"datevalue>\",{\"1\":{\"786\":1}}],[\"datehistograminterval\",{\"1\":{\"786\":3}}],[\"datehistogramaggregationbuilder\",{\"1\":{\"786\":9}}],[\"datetime\",{\"1\":{\"648\":1,\"1042\":2,\"1464\":2,\"1465\":2,\"1466\":2,\"1467\":3,\"1468\":1}}],[\"date\",{\"0\":{\"14\":1},\"1\":{\"236\":2,\"241\":1,\"379\":1,\"648\":8,\"649\":13,\"652\":4,\"657\":1,\"658\":1,\"902\":1,\"970\":1,\"1058\":2,\"1256\":1,\"1486\":4,\"1513\":1,\"1514\":1}}],[\"dual\",{\"1\":{\"1515\":1}}],[\"duration\",{\"1\":{\"1320\":1}}],[\"during\",{\"1\":{\"397\":1}}],[\"dump\",{\"1\":{\"1153\":2,\"1230\":1}}],[\"duser\",{\"1\":{\"1136\":1}}],[\"dushixiang\",{\"1\":{\"1126\":1}}],[\"duck\",{\"1\":{\"932\":1}}],[\"duplicate\",{\"1\":{\"914\":1}}],[\"dubboprotocol\",{\"1\":{\"745\":1}}],[\"dubborefrence注解\",{\"1\":{\"741\":1}}],[\"dubbo上下文初始化applicationcontext\",{\"1\":{\"740\":1}}],[\"dubboservice注解\",{\"1\":{\"739\":1}}],[\"dubbospringinitializer\",{\"0\":{\"738\":1}}],[\"dubboinfrabeanregisterpostprocessor\",{\"0\":{\"740\":1},\"1\":{\"738\":1}}],[\"dubboconfigbeaninitializer\",{\"1\":{\"738\":1}}],[\"dubboconfigapplicationlistener\",{\"0\":{\"743\":1},\"1\":{\"738\":1}}],[\"dubbodeployapplicationlistener\",{\"0\":{\"742\":1},\"1\":{\"738\":1}}],[\"dubbo底层封装了序列化与反序列化\",{\"1\":{\"730\":1}}],[\"dubbo是阿里巴巴公司开源的一个高性能\",{\"1\":{\"729\":1}}],[\"dubbo\",{\"0\":{\"728\":1},\"1\":{\"73\":1,\"730\":3}}],[\"ddloperator\",{\"1\":{\"1301\":1}}],[\"ddos\",{\"1\":{\"1207\":1}}],[\"dd\",{\"1\":{\"379\":1,\"596\":5,\"649\":1,\"716\":16,\"1513\":1,\"1514\":1,\"1539\":2,\"1540\":2,\"1570\":1,\"1571\":1}}],[\"ddata\",{\"1\":{\"158\":2}}],[\"dynamic\",{\"1\":{\"792\":1,\"975\":1}}],[\"dynamickeyfunction\",{\"1\":{\"792\":3}}],[\"dynamicalertfunction\",{\"1\":{\"792\":3}}],[\"dynamicdatasource\",{\"1\":{\"632\":1}}],[\"dynamicstu\",{\"1\":{\"479\":1}}],[\"dyn\",{\"1\":{\"298\":4}}],[\"draintasks\",{\"1\":{\"1445\":1}}],[\"draw\",{\"1\":{\"298\":17}}],[\"draw2\",{\"1\":{\"298\":4}}],[\"draw>\",{\"1\":{\"298\":4}}],[\"draw1\",{\"1\":{\"298\":4}}],[\"drocketmq\",{\"1\":{\"1136\":1}}],[\"drop\",{\"1\":{\"264\":3,\"1042\":4}}],[\"druid数据库连接池\",{\"1\":{\"1243\":1}}],[\"druiddatasource\",{\"1\":{\"850\":1}}],[\"druid\",{\"1\":{\"596\":1,\"850\":1,\"1515\":2}}],[\"driverimplclass\",{\"1\":{\"871\":2}}],[\"drivermanager将尝试加载尽可能多的驱动程序\",{\"1\":{\"850\":1}}],[\"drivers\",{\"1\":{\"30\":1}}],[\"driver\",{\"0\":{\"3\":1,\"1302\":1},\"1\":{\"595\":2,\"792\":1,\"850\":4,\"1122\":8,\"1130\":2,\"1515\":2}}],[\"dic\",{\"1\":{\"1584\":1}}],[\"dictid\",{\"1\":{\"1622\":1}}],[\"dict\",{\"1\":{\"1123\":1,\"1584\":3,\"1611\":1,\"1612\":1,\"1613\":1,\"1614\":1,\"1615\":1,\"1616\":1,\"1617\":1}}],[\"diff\",{\"1\":{\"1147\":1}}],[\"diffqty\",{\"1\":{\"236\":5}}],[\"dind\",{\"1\":{\"1130\":3}}],[\"div\",{\"1\":{\"971\":1}}],[\"div>\",{\"1\":{\"970\":1,\"974\":1,\"975\":2,\"982\":2,\"983\":3,\"1407\":1}}],[\"divide\",{\"1\":{\"158\":3}}],[\"divider\",{\"1\":{\"158\":6}}],[\"dividee\",{\"1\":{\"158\":5}}],[\"divideerror\",{\"1\":{\"158\":4}}],[\"di\",{\"1\":{\"716\":7}}],[\"dirfiles\",{\"1\":{\"1032\":3}}],[\"dirs\",{\"1\":{\"1032\":4}}],[\"dirty\",{\"1\":{\"852\":1}}],[\"dir\",{\"1\":{\"592\":1,\"1032\":4,\"1149\":1,\"1215\":5}}],[\"direct\",{\"1\":{\"1484\":1}}],[\"directions\",{\"1\":{\"992\":11}}],[\"direction\",{\"1\":{\"282\":11}}],[\"dire\",{\"1\":{\"282\":4}}],[\"distributionmanagement>\",{\"1\":{\"1203\":1}}],[\"distribution\",{\"0\":{\"894\":1}}],[\"distance\",{\"1\":{\"295\":2}}],[\"discardserverhandler\",{\"1\":{\"1451\":1}}],[\"discardingthreshold>\",{\"1\":{\"596\":2}}],[\"discovery\",{\"1\":{\"1137\":2,\"1139\":2}}],[\"discoveryclient\",{\"0\":{\"875\":1},\"1\":{\"866\":1}}],[\"discovery<\",{\"1\":{\"862\":1}}],[\"disconnect\",{\"1\":{\"833\":1}}],[\"disableregistry\",{\"1\":{\"450\":1}}],[\"disablembeanregistry\",{\"1\":{\"450\":1}}],[\"disable\",{\"1\":{\"348\":1,\"467\":1,\"1031\":1,\"1095\":1}}],[\"disposesubscriber\",{\"1\":{\"509\":1}}],[\"disposablebean\",{\"1\":{\"413\":1}}],[\"dispatch\",{\"1\":{\"1013\":1,\"1259\":1}}],[\"dispatching\",{\"1\":{\"696\":1}}],[\"dispatchexception\",{\"1\":{\"1259\":4}}],[\"dispatched\",{\"1\":{\"696\":1}}],[\"dispatcher\",{\"1\":{\"914\":1,\"1013\":1}}],[\"dispatcherhandler\",{\"0\":{\"513\":1},\"1\":{\"513\":1}}],[\"dispatcherservlet找到handlermapping\",{\"1\":{\"1259\":1}}],[\"dispatcherservlet或其他自定义servlet\",{\"1\":{\"652\":1}}],[\"dispatcherservlet\",{\"0\":{\"401\":1},\"1\":{\"601\":1,\"1259\":1}}],[\"dispatchhandler会根据handlermappings找到predicateroutehandlermapping找到处理器处理请求\",{\"1\":{\"1262\":1}}],[\"dispatchhandler找到routepredicatehandlermapping\",{\"1\":{\"473\":1}}],[\"dispatchhandler\",{\"1\":{\"473\":1}}],[\"dispatchservlet在执行handler\",{\"1\":{\"345\":1}}],[\"displayheader<\",{\"1\":{\"652\":2}}],[\"display>\",{\"1\":{\"297\":1}}],[\"display\",{\"1\":{\"296\":6,\"297\":2}}],[\"display特征\",{\"1\":{\"261\":1}}],[\"diamonds\",{\"1\":{\"275\":3}}],[\"diamond\",{\"1\":{\"275\":2}}],[\"d\",{\"0\":{\"1211\":1},\"1\":{\"51\":1,\"117\":2,\"121\":1,\"124\":2,\"129\":2,\"131\":1,\"133\":2,\"135\":1,\"138\":1,\"140\":7,\"143\":1,\"145\":2,\"146\":3,\"151\":1,\"152\":4,\"155\":1,\"158\":1,\"596\":5,\"646\":1,\"647\":1,\"984\":1,\"989\":2,\"991\":3,\"992\":6,\"993\":2,\"994\":2,\"995\":3,\"996\":3,\"1056\":2,\"1057\":1,\"1058\":31,\"1115\":1,\"1119\":1,\"1123\":8,\"1125\":1,\"1126\":3,\"1128\":1,\"1130\":7,\"1131\":1,\"1132\":2,\"1134\":1,\"1135\":1,\"1136\":3,\"1137\":3,\"1138\":1,\"1140\":4,\"1141\":2,\"1142\":1,\"1144\":2,\"1148\":1,\"1193\":1,\"1194\":3,\"1210\":1,\"1227\":2,\"1248\":2,\"1283\":1,\"1458\":1,\"1474\":1}}],[\"dbname\",{\"1\":{\"1056\":5}}],[\"dbsize\",{\"1\":{\"908\":1}}],[\"dbpatchconstant\",{\"1\":{\"902\":2}}],[\"dbpatchschedulerequestentity\",{\"1\":{\"902\":4}}],[\"dbpatchschedulerequestservice\",{\"1\":{\"902\":2}}],[\"dbpatchscheduleservice\",{\"1\":{\"902\":2}}],[\"dbpatchscheduleentity\",{\"1\":{\"902\":1}}],[\"db\",{\"1\":{\"34\":1,\"595\":1,\"908\":1,\"1057\":2,\"1120\":1,\"1132\":1,\"1139\":1,\"1183\":1,\"1215\":3}}],[\"deny\",{\"1\":{\"1515\":1}}],[\"denied\",{\"0\":{\"21\":1,\"1141\":1}}],[\"dejavu\",{\"1\":{\"1137\":2}}],[\"deb\",{\"1\":{\"1130\":1}}],[\"debian\",{\"1\":{\"1130\":2}}],[\"debugimplementation\",{\"1\":{\"1074\":1}}],[\"debugcompile\",{\"1\":{\"1074\":2}}],[\"debug=\",{\"1\":{\"596\":1}}],[\"debug<info<warn<error<fatal\",{\"1\":{\"596\":1}}],[\"debugenabled\",{\"1\":{\"329\":2}}],[\"debug\",{\"1\":{\"274\":1,\"288\":1,\"296\":1,\"297\":1,\"329\":1,\"346\":4,\"406\":1,\"411\":1,\"413\":1,\"473\":1,\"509\":1,\"596\":4,\"852\":9,\"858\":1,\"985\":1,\"1345\":1,\"1353\":1,\"1445\":2,\"1518\":2}}],[\"detach\",{\"1\":{\"1127\":2,\"1130\":2}}],[\"details\",{\"1\":{\"1374\":2,\"1523\":3,\"1525\":3}}],[\"detail\",{\"1\":{\"1059\":1}}],[\"determine\",{\"1\":{\"1259\":2,\"1445\":1}}],[\"determinecurrentlookupkey\",{\"1\":{\"632\":1}}],[\"determinecausechain\",{\"1\":{\"345\":1}}],[\"detection\",{\"1\":{\"792\":1}}],[\"detect\",{\"1\":{\"397\":1}}],[\"demo样例编写\",{\"1\":{\"1478\":1}}],[\"demo\",{\"1\":{\"780\":1}}],[\"deault\",{\"1\":{\"1561\":1}}],[\"dealref\",{\"1\":{\"1521\":1}}],[\"dealjwt\",{\"1\":{\"1521\":1}}],[\"deadlock\",{\"1\":{\"852\":1}}],[\"dea0637bc1\",{\"1\":{\"758\":2}}],[\"dea0637bc19yz6636093\",{\"1\":{\"758\":4}}],[\"deactivate\",{\"1\":{\"96\":1}}],[\"decodeandhandlemessage消息解码并处理消息\",{\"1\":{\"1360\":1}}],[\"decode\",{\"1\":{\"1032\":1}}],[\"declaration\",{\"1\":{\"986\":1,\"996\":5}}],[\"declare\",{\"1\":{\"985\":3,\"989\":3,\"991\":17,\"992\":11,\"993\":4,\"994\":7,\"995\":3}}],[\"declined\",{\"1\":{\"399\":1}}],[\"decrby\",{\"1\":{\"910\":1}}],[\"decr\",{\"1\":{\"910\":1}}],[\"decryptbyprivate\",{\"1\":{\"1518\":1}}],[\"decryptstr\",{\"1\":{\"719\":1}}],[\"decrypt\",{\"1\":{\"719\":1}}],[\"designpatterns\",{\"1\":{\"1256\":1}}],[\"design\",{\"0\":{\"1253\":1}}],[\"desktop已经包含了docker\",{\"1\":{\"1093\":1}}],[\"deserializer\",{\"1\":{\"801\":2,\"802\":2}}],[\"describe\",{\"1\":{\"1159\":3}}],[\"descriptors\",{\"1\":{\"792\":3}}],[\"description\",{\"1\":{\"241\":1,\"716\":1,\"1058\":4,\"1484\":1,\"1582\":4,\"1607\":2}}],[\"description>\",{\"1\":{\"103\":1}}],[\"desc\",{\"1\":{\"716\":1,\"783\":1,\"1110\":1,\"1248\":1,\"1486\":3,\"1564\":3,\"1565\":1,\"1601\":1,\"1602\":1,\"1603\":3}}],[\"dest\",{\"1\":{\"985\":1,\"1110\":1}}],[\"destinationid\",{\"1\":{\"649\":7}}],[\"deststorepass\",{\"1\":{\"623\":1}}],[\"deststoretype\",{\"1\":{\"623\":2}}],[\"destkeystore\",{\"1\":{\"623\":2}}],[\"destroysingleton\",{\"1\":{\"439\":1}}],[\"destroybeans\",{\"1\":{\"397\":1}}],[\"destroy\",{\"1\":{\"397\":1,\"413\":1,\"421\":2,\"652\":3}}],[\"desreport\",{\"1\":{\"594\":2}}],[\"deregistration\",{\"1\":{\"1445\":1}}],[\"deregistered\",{\"1\":{\"1445\":1}}],[\"deregister\",{\"1\":{\"873\":1}}],[\"deref\",{\"1\":{\"298\":1}}],[\"der格式的公钥\",{\"1\":{\"627\":1}}],[\"der\",{\"1\":{\"625\":1,\"627\":1}}],[\"derive\",{\"1\":{\"274\":1,\"288\":1,\"297\":1,\"298\":1,\"486\":1}}],[\"delflag\",{\"1\":{\"1564\":3,\"1565\":1,\"1582\":4,\"1607\":2,\"1613\":2,\"1622\":1,\"1628\":2,\"1635\":1}}],[\"delaytaskexecutorprovider\",{\"1\":{\"1335\":1}}],[\"delaytaskexecutor\",{\"1\":{\"1325\":1,\"1335\":1}}],[\"del\",{\"1\":{\"910\":1}}],[\"delimiters\",{\"1\":{\"852\":2}}],[\"deliberate\",{\"1\":{\"509\":1}}],[\"deliveryids\",{\"1\":{\"1245\":1}}],[\"delivery\",{\"1\":{\"236\":1,\"833\":2,\"1245\":2}}],[\"delegatetask\",{\"1\":{\"589\":1,\"711\":1}}],[\"delegatingwebfluxconfiguration\",{\"1\":{\"504\":1}}],[\"deleteoperator\",{\"1\":{\"1301\":1}}],[\"deletebycondition\",{\"1\":{\"1248\":1}}],[\"deletebyid\",{\"1\":{\"1248\":1}}],[\"deletebyqueryrequest区别\",{\"0\":{\"784\":1}}],[\"deletewhen\",{\"1\":{\"1136\":1}}],[\"deleterequest\",{\"0\":{\"784\":1}}],[\"delete\",{\"1\":{\"154\":2,\"623\":1,\"716\":1,\"780\":1,\"782\":1,\"911\":2,\"1048\":1,\"1058\":3,\"1159\":3,\"1245\":2,\"1248\":1,\"1252\":1,\"1533\":1,\"1542\":1,\"1543\":1,\"1551\":1,\"1562\":1,\"1563\":1,\"1573\":1,\"1581\":1,\"1584\":10,\"1586\":10,\"1592\":3,\"1593\":1,\"1594\":1,\"1597\":2,\"1604\":1,\"1605\":1,\"1614\":1,\"1615\":1,\"1623\":1,\"1624\":1,\"1629\":1,\"1630\":1,\"1631\":1,\"1636\":1,\"1637\":1}}],[\"devcommandoptions\",{\"1\":{\"985\":1}}],[\"devcommand\",{\"1\":{\"985\":1}}],[\"devicedynamicdashboard\",{\"1\":{\"1482\":1}}],[\"devicedashboard\",{\"1\":{\"1482\":1}}],[\"devicedashboardobject\",{\"1\":{\"1482\":1}}],[\"devicedataservice\",{\"1\":{\"1344\":1,\"1482\":3}}],[\"devicedata\",{\"1\":{\"792\":1}}],[\"devicemetadata\",{\"1\":{\"1482\":1}}],[\"devicemessagebusinesshandler\",{\"0\":{\"1340\":1}}],[\"devicemessagebusinesshandler在初始化时对上线topic进行了订阅\",{\"1\":{\"1328\":1}}],[\"devicemessageconnector的doreply将消息给sink\",{\"1\":{\"1331\":1}}],[\"devicemessageconnector\",{\"0\":{\"1362\":1},\"1\":{\"1330\":2}}],[\"devicemessageconnector实现decodedclientmessagehandler\",{\"1\":{\"1330\":2}}],[\"devicemessageconnector进行处理\",{\"1\":{\"1328\":1}}],[\"devicemessagesender\",{\"1\":{\"1330\":1,\"1342\":1}}],[\"devicekey获取deviceid\",{\"1\":{\"1480\":1}}],[\"devicethingsdatacustomizer\",{\"1\":{\"1344\":1}}],[\"devicethingsregistrysupport\",{\"1\":{\"1344\":1}}],[\"devicetransactionsstream\",{\"1\":{\"792\":2}}],[\"devicerepository\",{\"1\":{\"1342\":1}}],[\"deviceregistry\",{\"0\":{\"1341\":1},\"1\":{\"1331\":1,\"1342\":1,\"1482\":1}}],[\"deviceoperator\",{\"1\":{\"1331\":1,\"1342\":1}}],[\"deviceoperationbroker\",{\"1\":{\"1330\":1,\"1331\":1,\"1342\":1}}],[\"devicesessionmanager\",{\"1\":{\"1342\":1}}],[\"devicesession\",{\"1\":{\"1330\":1}}],[\"devicestatusmeasurementprovider中的方法对上线消息进行处理\",{\"1\":{\"1328\":1}}],[\"devicestransactionstream\",{\"1\":{\"792\":2}}],[\"devicecategoryservice\",{\"0\":{\"1322\":1}}],[\"devicegatewaycontroller包含devicegatewayservice\",{\"1\":{\"1359\":1}}],[\"devicegatewayservice\",{\"1\":{\"1359\":1}}],[\"devicegatewaypropertiesmanager\",{\"1\":{\"1359\":1}}],[\"devicegatewayprovider>\",{\"1\":{\"1359\":1}}],[\"devicegatewayprovider\",{\"1\":{\"1359\":1}}],[\"devicegatewayprovider通过networkmanager获取网络\",{\"1\":{\"1319\":1}}],[\"devicegateway>\",{\"1\":{\"1359\":1}}],[\"devicegatewaymanager\",{\"1\":{\"1342\":1,\"1359\":1}}],[\"devicegatewayeventhandler\",{\"0\":{\"1339\":1}}],[\"devicegatewayeventhandler网关事件处理器\",{\"0\":{\"1319\":1}}],[\"devicegatewayhelper\",{\"0\":{\"1361\":1},\"1\":{\"1330\":1}}],[\"devicegateway\",{\"1\":{\"1330\":1,\"1359\":1}}],[\"device=ens160\",{\"1\":{\"1198\":1}}],[\"deviceurl\",{\"1\":{\"792\":1}}],[\"devicepropertiesmeasurement\",{\"1\":{\"1482\":1}}],[\"deviceproductoperator\",{\"1\":{\"1482\":1}}],[\"deviceproductdeployhandler\",{\"0\":{\"1323\":1}}],[\"deviceproductmapper\",{\"1\":{\"786\":1}}],[\"deviceproduct\",{\"1\":{\"786\":2}}],[\"deviceproductcategories\",{\"1\":{\"672\":5}}],[\"deviceproductcategory>\",{\"1\":{\"672\":1}}],[\"deviceproductcategory\",{\"1\":{\"672\":14}}],[\"deviceproductcategoryquerydto\",{\"1\":{\"672\":1}}],[\"devicepointmapper\",{\"1\":{\"786\":2}}],[\"devicepoint\",{\"1\":{\"786\":4}}],[\"device\",{\"1\":{\"716\":4,\"758\":5,\"776\":1,\"782\":3,\"786\":1,\"924\":1,\"1042\":2,\"1058\":14,\"1292\":2,\"1304\":1,\"1305\":1,\"1309\":1,\"1484\":1}}],[\"devicename\",{\"1\":{\"649\":2}}],[\"devicenameg\",{\"1\":{\"649\":4}}],[\"deviceid\",{\"1\":{\"649\":2,\"1373\":1,\"1480\":5}}],[\"deviceidg\",{\"1\":{\"649\":4}}],[\"devh<\",{\"1\":{\"639\":1}}],[\"development\",{\"1\":{\"561\":1}}],[\"devops能力\",{\"1\":{\"1241\":1}}],[\"devops\",{\"0\":{\"561\":1},\"1\":{\"561\":1}}],[\"dev\",{\"1\":{\"218\":1,\"593\":5,\"716\":1,\"782\":1,\"1042\":2,\"1058\":4,\"1116\":1,\"1120\":1,\"1121\":2,\"1137\":1,\"1148\":6,\"1197\":16,\"1302\":1,\"1304\":5,\"1305\":1}}],[\"devtools热启动导致不同线程类变量被销毁\",{\"0\":{\"28\":1}}],[\"de\",{\"1\":{\"158\":2}}],[\"defultpropertymetadata\",{\"1\":{\"1480\":2}}],[\"defroute=yes\",{\"1\":{\"1198\":2}}],[\"def\",{\"1\":{\"648\":1}}],[\"defined\",{\"1\":{\"411\":1}}],[\"definitions\",{\"1\":{\"399\":1,\"438\":1,\"486\":1}}],[\"definition\",{\"1\":{\"148\":3,\"900\":7,\"1297\":6,\"1513\":1}}],[\"defer方法\",{\"0\":{\"546\":1}}],[\"deferwithcontext\",{\"0\":{\"542\":1}}],[\"defercontextual\",{\"1\":{\"509\":1}}],[\"deferred\",{\"1\":{\"490\":1}}],[\"deferredimportselectorgrouping中的组处理器\",{\"1\":{\"494\":1}}],[\"deferredimportselectorgrouping\",{\"0\":{\"492\":1},\"1\":{\"491\":1}}],[\"deferredimportselectorgroupinghandler\",{\"0\":{\"491\":1},\"1\":{\"490\":2}}],[\"deferredimportselectors\",{\"1\":{\"490\":3}}],[\"deferredimportselectorhandler\",{\"0\":{\"490\":1}}],[\"deferredimports\",{\"1\":{\"490\":4}}],[\"deferredresultmethodreturnvaluehandler\",{\"0\":{\"363\":1,\"406\":1},\"1\":{\"405\":1}}],[\"deferredresult\",{\"0\":{\"361\":1}}],[\"defer\",{\"0\":{\"138\":1,\"541\":1},\"1\":{\"138\":4,\"159\":2,\"160\":2}}],[\"defaultflag\",{\"1\":{\"1561\":3,\"1564\":3,\"1565\":1,\"1603\":3}}],[\"defaultnhttpclientconnection\",{\"0\":{\"1383\":1}}],[\"defaultnetworkmanager\",{\"0\":{\"1320\":1,\"1348\":1}}],[\"defaultchannelconfig\",{\"1\":{\"1391\":2}}],[\"defaultconnectingioreactor\",{\"1\":{\"1382\":1}}],[\"defaultclientexchangehandlerimpl\",{\"1\":{\"1384\":1}}],[\"defaultclientexchangehandlerimpl是核心\",{\"1\":{\"1381\":1}}],[\"defaultclientid\",{\"1\":{\"943\":2,\"1514\":1}}],[\"defaultcluster\",{\"1\":{\"1136\":1}}],[\"defaultvertxmqttserverprovider\",{\"1\":{\"1347\":1}}],[\"defaulthttpserverprovider\",{\"1\":{\"1347\":1}}],[\"defaultqueryresultoperator\",{\"1\":{\"1301\":1}}],[\"defaultupdateresultoperator\",{\"1\":{\"1301\":1}}],[\"defaultifempty\",{\"1\":{\"1345\":1}}],[\"defaultinsertresultoperator真正执行查询语句\",{\"1\":{\"1301\":1}}],[\"defaultidgenerator\",{\"1\":{\"1293\":1}}],[\"defaultdeleteresultoperator\",{\"1\":{\"1301\":1}}],[\"defaultdatabaseoperator\",{\"0\":{\"1301\":1}}],[\"defaultentityresultwrapperfactory\",{\"1\":{\"1294\":1}}],[\"default网络中\",{\"1\":{\"1117\":1}}],[\"defaultappconfig\",{\"1\":{\"985\":1}}],[\"defaultaopproxyfactory创建调用处理器对象\",{\"1\":{\"383\":1}}],[\"defaultmqpullconsumerimpl实现defaultmqpullconsumer接口\",{\"1\":{\"920\":1}}],[\"defaultmqpullconsumerimpl\",{\"0\":{\"920\":1}}],[\"defaultmqpushconsumerimpl\",{\"1\":{\"914\":2}}],[\"defaultmqpushconsumer\",{\"1\":{\"914\":20}}],[\"defaultmqproducer\",{\"1\":{\"914\":1}}],[\"defaultruleengine实现ruleengine接口\",{\"0\":{\"1335\":1}}],[\"defaultredirecturi\",{\"1\":{\"1514\":2}}],[\"defaultreactiverepository<>\",{\"1\":{\"1296\":1}}],[\"defaultresourceloader\",{\"1\":{\"397\":1}}],[\"defaultr2dbcexecutor\",{\"1\":{\"1295\":1}}],[\"defaultrocketmqlistenercontainer\",{\"0\":{\"919\":1},\"1\":{\"914\":1,\"1252\":1}}],[\"defaultkafkaconsumerfactory<>\",{\"1\":{\"801\":1}}],[\"defaultkafkaproducerfactory\",{\"1\":{\"801\":3}}],[\"defaultkafkaproducerfactory<string\",{\"1\":{\"801\":2}}],[\"defaultkafkaproducerfactory<>\",{\"1\":{\"801\":1}}],[\"defaultgatewayfilterchain\",{\"1\":{\"473\":1}}],[\"defaultlistablebeanfactory的preinstantiatesingletons方法\",{\"0\":{\"438\":1}}],[\"defaultloginpagegeneratingfilter\",{\"1\":{\"346\":1}}],[\"defaultloginpageconfigurer<>\",{\"1\":{\"330\":1}}],[\"defaultoauth2authorizedclientmanager\",{\"1\":{\"345\":1}}],[\"defaultpasswordencoderauthenticationmanagerbuilder容器管理\",{\"1\":{\"341\":1}}],[\"defaultpasswordencoderauthenticationmanagerbuilder\",{\"1\":{\"330\":1,\"341\":1}}],[\"defaulttcpserverprovider\",{\"1\":{\"1347\":1}}],[\"defaultthingsmetadata\",{\"1\":{\"1483\":1}}],[\"defaultthingsregistry\",{\"1\":{\"1344\":1}}],[\"defaultthingsdatarepository\",{\"1\":{\"1344\":1}}],[\"defaultthreadfactory\",{\"1\":{\"236\":1}}],[\"defaulttargetdatasource\",{\"1\":{\"632\":2}}],[\"defaulttransactiondefinition\",{\"1\":{\"202\":1,\"1244\":1}}],[\"default\",{\"1\":{\"131\":3,\"176\":1,\"179\":1,\"188\":2,\"249\":2,\"250\":1,\"329\":1,\"360\":1,\"435\":1,\"480\":1,\"557\":1,\"780\":7,\"786\":1,\"852\":1,\"914\":3,\"974\":1,\"975\":1,\"992\":5,\"1026\":6,\"1032\":1,\"1122\":2,\"1125\":2,\"1126\":2,\"1141\":3,\"1210\":2,\"1345\":1,\"1445\":2,\"1464\":7,\"1465\":6,\"1466\":7,\"1467\":8,\"1468\":2,\"1513\":1,\"1521\":1,\"1541\":1,\"1561\":1,\"1564\":1,\"1603\":1}}],[\"defaultsqlsession\",{\"1\":{\"852\":1}}],[\"defaults\",{\"1\":{\"13\":1,\"1120\":1}}],[\"depends\",{\"1\":{\"1139\":1}}],[\"dependencymanagement\",{\"1\":{\"1068\":1,\"1076\":1}}],[\"dependency\",{\"1\":{\"359\":1,\"1068\":1,\"1076\":1}}],[\"dependency>\",{\"1\":{\"31\":1,\"476\":2,\"621\":1,\"639\":1,\"646\":1,\"658\":1,\"790\":8,\"799\":1,\"862\":5,\"981\":1,\"1249\":1}}],[\"dependencies\",{\"1\":{\"31\":2,\"585\":1,\"707\":1}}],[\"dependencies>\",{\"1\":{\"31\":1,\"646\":1}}],[\"deploy\",{\"0\":{\"744\":1},\"1\":{\"733\":1,\"1215\":1,\"1216\":1}}],[\"deploymentexception\",{\"1\":{\"1414\":1}}],[\"deployments\",{\"1\":{\"1159\":1}}],[\"deployment\",{\"1\":{\"578\":1,\"702\":1,\"1159\":3,\"1167\":1,\"1201\":1}}],[\"deps\",{\"1\":{\"59\":1}}],[\"doupgrade\",{\"1\":{\"1422\":1}}],[\"double类型特有\",{\"1\":{\"1486\":16}}],[\"double\",{\"1\":{\"983\":2,\"1484\":1,\"1486\":8}}],[\"doublevalue\",{\"1\":{\"236\":2}}],[\"dodispatch的gethandleradapter\",{\"1\":{\"1259\":1}}],[\"dodispatch的gethandler\",{\"1\":{\"1259\":1}}],[\"dodispatch\",{\"1\":{\"1259\":2}}],[\"dodispatch方法\",{\"0\":{\"402\":1}}],[\"doris文档\",{\"1\":{\"1003\":1}}],[\"doris\",{\"0\":{\"1003\":1}}],[\"dorun\",{\"1\":{\"687\":1}}],[\"download\",{\"1\":{\"1092\":1,\"1118\":1,\"1130\":2}}],[\"down\",{\"1\":{\"992\":4,\"1119\":1,\"1445\":3}}],[\"domreadycallback\",{\"1\":{\"991\":1}}],[\"dom来跟踪真实dom\",{\"1\":{\"970\":1}}],[\"dom\",{\"0\":{\"970\":1},\"1\":{\"935\":3,\"965\":2,\"970\":4,\"971\":1,\"973\":1,\"991\":1}}],[\"domain=http\",{\"1\":{\"1475\":3}}],[\"domain=dataapi\",{\"1\":{\"1120\":1,\"1121\":2}}],[\"domain\",{\"1\":{\"604\":1,\"1513\":1}}],[\"dog\",{\"1\":{\"932\":1}}],[\"doget\",{\"1\":{\"652\":2}}],[\"dogetbean方法\",{\"0\":{\"439\":1}}],[\"dopull\",{\"1\":{\"814\":1}}],[\"doprocessconfigurationclass\",{\"0\":{\"488\":1},\"1\":{\"487\":1}}],[\"doprivileged\",{\"1\":{\"438\":2}}],[\"doctype\",{\"1\":{\"1407\":1}}],[\"doc\",{\"1\":{\"758\":4,\"762\":1,\"776\":1,\"782\":1}}],[\"documents\",{\"1\":{\"1583\":2}}],[\"documentationbygroup\",{\"1\":{\"1032\":1}}],[\"documentation\",{\"1\":{\"1032\":4}}],[\"documentationcache\",{\"1\":{\"1032\":3}}],[\"document或记录地址作为值\",{\"1\":{\"752\":1}}],[\"document作用于类\",{\"1\":{\"748\":1}}],[\"document\",{\"1\":{\"748\":1,\"935\":2,\"946\":1,\"970\":2,\"971\":1}}],[\"dockerhub\",{\"1\":{\"1215\":1}}],[\"docker搭建\",{\"0\":{\"1200\":1}}],[\"docker问题\",{\"1\":{\"1130\":1}}],[\"docker容器启动命令\",{\"0\":{\"1124\":1}}],[\"docker容器则可以认为是软件的运行态\",{\"1\":{\"1102\":1}}],[\"docker镜像是软件的交付品\",{\"1\":{\"1102\":1}}],[\"docker镜像与docker容器分别代表软件的三个不同阶段\",{\"1\":{\"1102\":1}}],[\"docker网络默认从17段\",{\"1\":{\"1099\":1}}],[\"docker的一个插件\",{\"1\":{\"1093\":1}}],[\"dockerfile中的copy\",{\"1\":{\"1111\":1}}],[\"dockerfile不明确指定要暴露的容器端口号\",{\"1\":{\"1109\":1}}],[\"dockerfile是软件的原材料\",{\"1\":{\"1102\":1}}],[\"dockerfile\",{\"0\":{\"1101\":1},\"1\":{\"218\":2,\"1102\":1,\"1130\":1,\"1183\":1,\"1215\":1}}],[\"dockerfile创建镜像文件\",{\"1\":{\"218\":1}}],[\"docker启动报错\",{\"0\":{\"50\":1}}],[\"docker拉取镜像失败\",{\"0\":{\"33\":1}}],[\"docker\",{\"0\":{\"3\":1,\"21\":1,\"35\":1,\"48\":1,\"566\":1,\"1085\":1,\"1093\":1,\"1117\":1,\"1230\":1},\"1\":{\"3\":1,\"21\":1,\"22\":2,\"35\":1,\"218\":2,\"1087\":13,\"1089\":1,\"1090\":1,\"1092\":4,\"1093\":7,\"1095\":2,\"1096\":4,\"1097\":5,\"1099\":2,\"1100\":1,\"1113\":1,\"1114\":1,\"1115\":2,\"1118\":7,\"1119\":3,\"1121\":1,\"1122\":1,\"1123\":3,\"1125\":1,\"1126\":3,\"1127\":3,\"1128\":5,\"1129\":2,\"1130\":66,\"1131\":1,\"1132\":2,\"1134\":1,\"1135\":1,\"1136\":4,\"1137\":4,\"1138\":1,\"1140\":3,\"1141\":2,\"1142\":1,\"1200\":2,\"1215\":15,\"1230\":2,\"1283\":1,\"1458\":3,\"1474\":4,\"1475\":2}}],[\"doafternext\",{\"0\":{\"520\":1}}],[\"dooncomplete\",{\"0\":{\"521\":1}}],[\"doonnext\",{\"0\":{\"518\":1},\"1\":{\"1345\":1}}],[\"dooneach\",{\"0\":{\"517\":1}}],[\"doonsubscribe\",{\"0\":{\"515\":1}}],[\"doloadindex\",{\"1\":{\"495\":1}}],[\"dostartthread\",{\"1\":{\"1445\":1}}],[\"dostartthread方法\",{\"1\":{\"1445\":1}}],[\"dostart方法\",{\"1\":{\"1360\":1}}],[\"dosomething\",{\"1\":{\"932\":3}}],[\"doscan\",{\"1\":{\"495\":1,\"900\":2}}],[\"doservice\",{\"1\":{\"401\":1}}],[\"dofilter\",{\"1\":{\"345\":1,\"346\":3,\"421\":4,\"652\":2}}],[\"dofilterinternal\",{\"1\":{\"345\":1}}],[\"dobuild\",{\"1\":{\"334\":1}}],[\"do\",{\"1\":{\"202\":2,\"298\":1,\"383\":1,\"399\":2,\"410\":1,\"434\":1,\"1118\":1,\"1226\":2,\"1445\":1}}],[\"done\",{\"1\":{\"179\":2,\"537\":2,\"1226\":2}}],[\"dotnet\",{\"1\":{\"102\":4,\"103\":2}}],[\"does\",{\"0\":{\"11\":1},\"1\":{\"305\":2,\"399\":1,\"438\":1,\"1445\":1,\"1518\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const u=bt[s];e==="suggest"?self.postMessage([e,o,tt(t,u,n)]):e==="search"?self.postMessage([e,o,Z(t,u,n)]):self.postMessage({suggestions:[e,o,tt(t,u,n)],results:[e,o,Z(t,u,n)]})};
//# sourceMappingURL=index.js.map
