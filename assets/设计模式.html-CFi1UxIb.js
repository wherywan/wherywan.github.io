import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="design-pattern" tabindex="-1"><a class="header-anchor" href="#design-pattern"><span>design pattern</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><blockquote><p>设计模式是一套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p></blockquote><blockquote><p>总体来说，设计模式分为三大类：</p></blockquote><p>创建型模式：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</p><p>结构型模式：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式</p><p>行为型模式：共11种：策略模式、模板方法模式、观察者模式、责任链模式、访问者模式、中介者模式、迭代器模式、命令模式、状态模式、备忘录模式、解释器模式</p><h2 id="单例设计模式-singleton-pattern" tabindex="-1"><a class="header-anchor" href="#单例设计模式-singleton-pattern"><span>单例设计模式(singleton pattern)</span></a></h2><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><blockquote><p>核心是双重检查，私有化构造方法，volatile修饰静态变量</p><p>懒汉式</p><p>饿汉式，类加载完成已经创建好对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">package</span><span style="color:#000000;"> com.example.learning_research.java.designpatterns;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * Author: wanhongji</span></span>
<span class="line"><span style="color:#008000;"> * Date: 2022/6/1216:38</span></span>
<span class="line"><span style="color:#008000;"> */</span></span>
<span class="line"><span style="color:#008000;">//懒汉式</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> TestSingleton</span></span>
<span class="line"><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#0000FF;"> static</span><span style="color:#0000FF;"> volatile</span><span style="color:#267F99;"> TestSingleton</span><span style="color:#001080;"> testSingleton</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#795E26;"> TestSingleton</span><span style="color:#000000;"> ()</span></span>
<span class="line"><span style="color:#000000;">    {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> TestSingleton</span><span style="color:#795E26;"> getInstance</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">    {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (testSingleton == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"><span style="color:#0000FF;">            synchronized</span><span style="color:#000000;">(</span><span style="color:#001080;">TestSingleton</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">            {</span></span>
<span class="line"><span style="color:#AF00DB;">                if</span><span style="color:#000000;"> (testSingleton == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">                {</span></span>
<span class="line"><span style="color:#000000;">                    testSingleton = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> TestSingleton</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">                }</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> testSingleton;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用枚举来创建单例对象</p><p>枚举实例默认被public static final修饰，static代码块中实例化</p><p>只有一个实例，可用作单例对象；私有化构造器</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public class TestSingleton implements Serializable</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    private static volatile TestSingleton testSingleton = null;</span></span>
<span class="line"><span>    private static final Person person;</span></span>
<span class="line"><span>    static</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        person = new Person(&quot;FD&quot;,18,new Car(&quot;fds&quot;,2));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public enum Singleton</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>    INSTANCE;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void test()</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        System.out.println(&quot;test&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void main(String[] args)</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>        test();</span></span>
<span class="line"><span>        System.out.println(Singleton.INSTANCE == Singleton.INSTANCE);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点"><span>缺点</span></a></h3><blockquote><p>反射和序列化会破坏单例，创建多个对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">//使用反射</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> main</span><span style="color:#000000;">(</span><span style="color:#267F99;">String</span><span style="color:#000000;">[] args)</span></span>
<span class="line"><span style="color:#000000;">    {</span></span>
<span class="line"><span style="color:#AF00DB;">        try</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"><span style="color:#267F99;">            Constructor</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">TestSingleton</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">constructor</span><span style="color:#000000;"> = </span><span style="color:#001080;">TestSingleton</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getDeclaredConstructor</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">            constructor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setAccessible</span><span style="color:#000000;">(</span><span style="color:#0000FF;">true</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#267F99;">            TestSingleton</span><span style="color:#001080;"> testSingleton1</span><span style="color:#000000;"> = </span><span style="color:#001080;">constructor</span><span style="color:#000000;">.</span><span style="color:#795E26;">newInstance</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">            TestSingleton</span><span style="color:#001080;"> testSingleton2</span><span style="color:#000000;"> = </span><span style="color:#001080;">TestSingleton</span><span style="color:#000000;">.</span><span style="color:#795E26;">getInstance</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">            System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(testSingleton1 == testSingleton2);</span></span>
<span class="line"><span style="color:#000000;">        }</span><span style="color:#AF00DB;">catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Exception</span><span style="color:#001080;"> e</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">//设用序列化破坏单例</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> main</span><span style="color:#000000;">(</span><span style="color:#267F99;">String</span><span style="color:#000000;">[] args)</span></span>
<span class="line"><span style="color:#000000;">    {</span></span>
<span class="line"><span style="color:#267F99;">        ByteArrayOutputStream</span><span style="color:#001080;"> byteArrayOutputStream</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ByteArrayOutputStream</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">        try</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"><span style="color:#267F99;">            ObjectOutputStream</span><span style="color:#001080;"> outputStream</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ObjectOutputStream</span><span style="color:#000000;">(byteArrayOutputStream);</span></span>
<span class="line"><span style="color:#001080;">            outputStream</span><span style="color:#000000;">.</span><span style="color:#795E26;">writeObject</span><span style="color:#000000;">(</span><span style="color:#001080;">TestSingleton</span><span style="color:#000000;">.</span><span style="color:#795E26;">getInstance</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#267F99;">            ByteArrayInputStream</span><span style="color:#001080;"> byteArrayInputStream</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ByteArrayInputStream</span><span style="color:#000000;">(</span><span style="color:#001080;">byteArrayOutputStream</span><span style="color:#000000;">.</span><span style="color:#795E26;">toByteArray</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#267F99;">            ObjectInputStream</span><span style="color:#001080;"> inputStream</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ObjectInputStream</span><span style="color:#000000;">(byteArrayInputStream);</span></span>
<span class="line"><span style="color:#267F99;">            TestSingleton</span><span style="color:#001080;"> testSingleton1</span><span style="color:#000000;">  =(TestSingleton)</span><span style="color:#001080;">inputStream</span><span style="color:#000000;">.</span><span style="color:#795E26;">readObject</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">            System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(testSingleton1 == </span><span style="color:#001080;">TestSingleton</span><span style="color:#000000;">.</span><span style="color:#795E26;">getInstance</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">IOException</span><span style="color:#000000;"> | </span><span style="color:#267F99;">ClassNotFoundException</span><span style="color:#001080;"> e</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="适配器模式" tabindex="-1"><a class="header-anchor" href="#适配器模式"><span>适配器模式</span></a></h2><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><blockquote><p>Adapter</p></blockquote><ul><li>AbstractHandlerMethodAdapter</li><li>handlerFunctionMethodAdapter</li><li>httpRequesthandlerAdapter</li><li>simpleControllerhandlerAdapter</li><li>simpleServletHandlerAdapter</li></ul><blockquote><p>springmvc在处理请求时使用的就是适配器模式</p></blockquote><p><strong>dispatcherServlet找到handlerMapping,再根据handler找到合适的适配器，最终找到对应的handlerMethod</strong></p><ol><li><p>doDispatch</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">protected</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> doDispatch</span><span style="color:#000000;">(</span><span style="color:#267F99;">HttpServletRequest</span><span style="color:#000000;"> request, </span><span style="color:#267F99;">HttpServletResponse</span><span style="color:#000000;"> response) throws Exception {</span></span>
<span class="line"><span style="color:#267F99;">		HttpServletRequest</span><span style="color:#001080;"> processedRequest</span><span style="color:#000000;"> = request;</span></span>
<span class="line"><span style="color:#267F99;">		HandlerExecutionChain</span><span style="color:#001080;"> mappedHandler</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#267F99;">		boolean</span><span style="color:#001080;"> multipartRequestParsed</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">false</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">		WebAsyncManager</span><span style="color:#001080;"> asyncManager</span><span style="color:#000000;"> = </span><span style="color:#001080;">WebAsyncUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">getAsyncManager</span><span style="color:#000000;">(request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">		try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#267F99;">			ModelAndView</span><span style="color:#001080;"> mv</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#267F99;">			Exception</span><span style="color:#001080;"> dispatchException</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">			try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">				processedRequest = </span><span style="color:#795E26;">checkMultipart</span><span style="color:#000000;">(request);</span></span>
<span class="line"><span style="color:#000000;">				multipartRequestParsed = (processedRequest != request);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">				// Determine handler for the current request.</span></span>
<span class="line"><span style="color:#000000;">				mappedHandler = </span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">(processedRequest);</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (mappedHandler == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#795E26;">					noHandlerFound</span><span style="color:#000000;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#AF00DB;">					return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">				// Determine handler adapter for the current request.</span></span>
<span class="line"><span style="color:#267F99;">				HandlerAdapter</span><span style="color:#001080;"> ha</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getHandlerAdapter</span><span style="color:#000000;">(</span><span style="color:#001080;">mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">				// Process last-modified header, if supported by the handler.</span></span>
<span class="line"><span style="color:#267F99;">				String</span><span style="color:#001080;"> method</span><span style="color:#000000;"> = </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getMethod</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">				boolean</span><span style="color:#001080;"> isGet</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&quot;GET&quot;</span><span style="color:#000000;">.</span><span style="color:#795E26;">equals</span><span style="color:#000000;">(method);</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (isGet || </span><span style="color:#A31515;">&quot;HEAD&quot;</span><span style="color:#000000;">.</span><span style="color:#795E26;">equals</span><span style="color:#000000;">(method)) {</span></span>
<span class="line"><span style="color:#267F99;">					long</span><span style="color:#001080;"> lastModified</span><span style="color:#000000;"> = </span><span style="color:#001080;">ha</span><span style="color:#000000;">.</span><span style="color:#795E26;">getLastModified</span><span style="color:#000000;">(request, </span><span style="color:#001080;">mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">					if</span><span style="color:#000000;"> (</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ServletWebRequest</span><span style="color:#000000;">(request, response).</span><span style="color:#795E26;">checkNotModified</span><span style="color:#000000;">(lastModified) &amp;&amp; isGet) {</span></span>
<span class="line"><span style="color:#AF00DB;">						return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">					}</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#008000;">				//执行拦截器的prehandle方法</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">applyPreHandle</span><span style="color:#000000;">(processedRequest, response)) {</span></span>
<span class="line"><span style="color:#AF00DB;">					return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">				// Actually invoke the handler.</span></span>
<span class="line"><span style="color:#008000;">                //执行处理器方法，即接口方法</span></span>
<span class="line"><span style="color:#000000;">				mv = </span><span style="color:#001080;">ha</span><span style="color:#000000;">.</span><span style="color:#795E26;">handle</span><span style="color:#000000;">(processedRequest, response, </span><span style="color:#001080;">mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (</span><span style="color:#001080;">asyncManager</span><span style="color:#000000;">.</span><span style="color:#795E26;">isConcurrentHandlingStarted</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#AF00DB;">					return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">				applyDefaultViewName</span><span style="color:#000000;">(processedRequest, mv);</span></span>
<span class="line"><span style="color:#001080;">				mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">applyPostHandle</span><span style="color:#000000;">(processedRequest, response, mv);</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#AF00DB;">			catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Exception</span><span style="color:#001080;"> ex</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">				dispatchException = ex;</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#AF00DB;">			catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Throwable</span><span style="color:#001080;"> err</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">				// As of 4.3, we&#39;re processing Errors thrown from handler methods as well,</span></span>
<span class="line"><span style="color:#008000;">				// making them available for @ExceptionHandler methods and other scenarios.</span></span>
<span class="line"><span style="color:#000000;">				dispatchException = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> NestedServletException</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Handler dispatch failed&quot;</span><span style="color:#000000;">, err);</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#795E26;">			processDispatchResult</span><span style="color:#000000;">(processedRequest, response, mappedHandler, mv, dispatchException);</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Exception</span><span style="color:#001080;"> ex</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#795E26;">			triggerAfterCompletion</span><span style="color:#000000;">(processedRequest, response, mappedHandler, ex);</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Throwable</span><span style="color:#001080;"> err</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#795E26;">			triggerAfterCompletion</span><span style="color:#000000;">(processedRequest, response, mappedHandler,</span></span>
<span class="line"><span style="color:#AF00DB;">					new</span><span style="color:#795E26;"> NestedServletException</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Handler processing failed&quot;</span><span style="color:#000000;">, err));</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		finally</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (</span><span style="color:#001080;">asyncManager</span><span style="color:#000000;">.</span><span style="color:#795E26;">isConcurrentHandlingStarted</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#008000;">				// Instead of postHandle and afterCompletion</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (mappedHandler != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">					mappedHandler</span><span style="color:#000000;">.</span><span style="color:#795E26;">applyAfterConcurrentHandlingStarted</span><span style="color:#000000;">(processedRequest, response);</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#AF00DB;">			else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">				// Clean up any resources used by a multipart request.</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (multipartRequestParsed) {</span></span>
<span class="line"><span style="color:#795E26;">					cleanupMultipart</span><span style="color:#000000;">(processedRequest);</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p></li><li><p>doDispatch的getHandler</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">protected</span><span style="color:#267F99;"> HandlerExecutionChain</span><span style="color:#795E26;"> getHandler</span><span style="color:#000000;">(</span><span style="color:#267F99;">HttpServletRequest</span><span style="color:#000000;"> request) throws </span><span style="color:#267F99;">Exception</span><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#AF00DB;">		if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerMappings</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">			for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">HandlerMapping</span><span style="color:#001080;"> mapping</span><span style="color:#AF00DB;"> :</span><span style="color:#0000FF;"> this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerMappings</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">				//处理器执行器包含handler和拦截器</span></span>
<span class="line"><span style="color:#267F99;">				HandlerExecutionChain</span><span style="color:#001080;"> handler</span><span style="color:#000000;"> = </span><span style="color:#001080;">mapping</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">(request);</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (handler != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">					return</span><span style="color:#000000;"> handler;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		return</span><span style="color:#0000FF;"> null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;"> }</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>doDispatch的getHandlerAdapter</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">protected</span><span style="color:#267F99;"> HandlerAdapter</span><span style="color:#795E26;"> getHandlerAdapter</span><span style="color:#000000;">(</span><span style="color:#267F99;">Object</span><span style="color:#000000;"> handler) throws ServletException {</span></span>
<span class="line"><span style="color:#AF00DB;">		if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerAdapters</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">			for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">HandlerAdapter</span><span style="color:#001080;"> adapter</span><span style="color:#AF00DB;"> :</span><span style="color:#0000FF;"> this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerAdapters</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (</span><span style="color:#001080;">adapter</span><span style="color:#000000;">.</span><span style="color:#795E26;">supports</span><span style="color:#000000;">(handler)) {</span></span>
<span class="line"><span style="color:#AF00DB;">					return</span><span style="color:#000000;"> adapter;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		throw</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> ServletException</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;No adapter for handler [&quot;</span><span style="color:#000000;"> + handler +</span></span>
<span class="line"><span style="color:#A31515;">				&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="装饰器模式" tabindex="-1"><a class="header-anchor" href="#装饰器模式"><span>装饰器模式</span></a></h2><h2 id="责任链模式" tabindex="-1"><a class="header-anchor" href="#责任链模式"><span>责任链模式</span></a></h2><h3 id="使用-2" tabindex="-1"><a class="header-anchor" href="#使用-2"><span>使用</span></a></h3><blockquote><p>springcloudGateway网关的应用</p><p>核心</p></blockquote><ul><li>入口ReactorhttphandlerAdapter的apply方法，使用httpwebhandlerAdapter的handle方法处理，创建serverwebchang网关上下文</li><li>httpwebhandlerAdapter的handle方法会找到dispatchhandler被FilteringWebHandler(web)装饰，FilteringWebHandler被ExceptionHandlingWebHandler装饰，ExceptionHandlingWebHandler被httpwebhandlerAdapter装饰，可以和请求经过过滤器到达dispatchServlet类比</li><li>dispatchhandler会根据handlerMappings找到predicateRoutehandlerMapping找到处理器处理请求</li><li>handler找到适配器处理</li><li>请求上下文ServerWebchange最终经过filterwebhandler的handle方法处理</li><li>handle方法会将全局过滤器装饰为有序网关过滤器和默认网关过滤器DefaultGatewayFilterAdapter合并到集合中</li><li>根据过滤器集创建网关过滤器链gatewayFilterChain,设置要执行的过滤器索引和过滤器集</li><li>调用filter方法对请求进行处理</li></ul><h2 id="模板方法模式" tabindex="-1"><a class="header-anchor" href="#模板方法模式"><span>模板方法模式</span></a></h2>`,29),t=[p];function o(i,r){return n(),a("div",null,t)}const y=s(e,[["render",o],["__file","设计模式.html.vue"]]),v=JSON.parse('{"path":"/note/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"design pattern","lang":"zh-CN","frontmatter":{"description":"design pattern 概述 设计模式是一套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 总体来说，设计模式分为三大类： 创建型模式：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式 结构型模式：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式 行为型模...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E6%9E%B6%E6%9E%84/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"design pattern"}],["meta",{"property":"og:description","content":"design pattern 概述 设计模式是一套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 总体来说，设计模式分为三大类： 创建型模式：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式 结构型模式：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式 行为型模..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-09-01T15:50:14.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2022-09-01T15:50:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"design pattern\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-09-01T15:50:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"单例设计模式(singleton pattern)","slug":"单例设计模式-singleton-pattern","link":"#单例设计模式-singleton-pattern","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"缺点","slug":"缺点","link":"#缺点","children":[]}]},{"level":2,"title":"适配器模式","slug":"适配器模式","link":"#适配器模式","children":[{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]}]},{"level":2,"title":"装饰器模式","slug":"装饰器模式","link":"#装饰器模式","children":[]},{"level":2,"title":"责任链模式","slug":"责任链模式","link":"#责任链模式","children":[{"level":3,"title":"使用","slug":"使用-2","link":"#使用-2","children":[]}]},{"level":2,"title":"模板方法模式","slug":"模板方法模式","link":"#模板方法模式","children":[]}],"git":{"createdTime":1655634857000,"updatedTime":1662047414000,"contributors":[{"name":"wanhongji","email":"wan_hongji@163.com","commits":1}]},"readingTime":{"minutes":3.61,"words":1082},"filePathRelative":"note/架构/设计模式.md","localizedDate":"2022年6月19日","excerpt":"\\n<h2>概述</h2>\\n<blockquote>\\n<p>设计模式是一套经过反复使用的代码设计经验，目的是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p>\\n</blockquote>\\n<blockquote>\\n<p>总体来说，设计模式分为三大类：</p>\\n</blockquote>\\n<p>创建型模式：共5种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式</p>\\n<p>结构型模式：共7种：适配器模式、装饰器模式、代理模式、桥接模式、外观模式、组合模式、享元模式</p>\\n<p>行为型模式：共11种：策略模式、模板方法模式、观察者模式、责任链模式、访问者模式、中介者模式、迭代器模式、命令模式、状态模式、备忘录模式、解释器模式</p>","autoDesc":true}');export{y as comp,v as data};
