import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as i,e as t}from"./app-hoN0JGLf.js";const a={},n=t('<h1 id="架构设计" tabindex="-1"><a class="header-anchor" href="#架构设计"><span>架构设计</span></a></h1><h2 id="架构演进" tabindex="-1"><a class="header-anchor" href="#架构演进"><span>架构演进</span></a></h2><blockquote><p>架构服务化</p></blockquote><ul><li>单体分层架构</li><li>面向服务架构 SOA</li><li>微服务架构</li><li>云原生架构</li></ul><blockquote><p>容器编排化</p></blockquote><ul><li>容器</li><li>kubernetes</li></ul><h3 id="云原生架构" tabindex="-1"><a class="header-anchor" href="#云原生架构"><span>云原生架构</span></a></h3><p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用；</p><p>云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</p><h4 id="service-mesh-服务网格" tabindex="-1"><a class="header-anchor" href="#service-mesh-服务网格"><span>Service Mesh 服务网格</span></a></h4><h2 id="架构的模式" tabindex="-1"><a class="header-anchor" href="#架构的模式"><span>架构的模式</span></a></h2><ul><li>事务补偿模式，数据一致性</li><li>熔断和降级</li></ul><h2 id="togaf架构设计工具" tabindex="-1"><a class="header-anchor" href="#togaf架构设计工具"><span>TOGAF架构设计工具</span></a></h2><ul><li>业务架构</li><li>数据架构</li><li>应用架构</li><li>技术架构</li></ul><h3 id="业务架构" tabindex="-1"><a class="header-anchor" href="#业务架构"><span>业务架构</span></a></h3><ul><li>L1能力域</li><li>L2能力组</li><li>L3能力</li><li>L4流程/子流程（业务项）</li><li>L5 活动/任务</li></ul><blockquote><p>架构融合拉通</p></blockquote><p>能力---流程---业务对象---服务---应用系统</p><h3 id="信息架构" tabindex="-1"><a class="header-anchor" href="#信息架构"><span>信息架构</span></a></h3><ul><li>L1主题域分组</li><li>L2 主题域</li><li>L3 主题子域</li><li>L4 业务对象</li><li>L5 逻辑实体</li></ul><h3 id="应用架构" tabindex="-1"><a class="header-anchor" href="#应用架构"><span>应用架构</span></a></h3><ul><li>L1 应用域 产品</li><li>L2 应用组 子产品</li><li>L3 应用系统</li><li>L4 服务</li><li>L5 功能需求 非功能需求</li></ul><blockquote><p>服务类别</p></blockquote><ul><li>功能类</li><li>流程类</li><li>数据类</li></ul><blockquote><p>服务拆分原则</p></blockquote><ul><li>合并原则，耦合度较高</li><li>拆分原则，服务变更频率较高</li><li>技术栈</li><li>资源占用</li><li>数据一致性</li></ul><h3 id="技术架构" tabindex="-1"><a class="header-anchor" href="#技术架构"><span>技术架构</span></a></h3><blockquote><p>技术能力识别</p></blockquote><p>技术需求----解决方案----技术能力</p><ul><li>微服务治理能力</li><li>devops能力</li><li>容器化</li><li>API管理</li><li>数据持久化与访问</li><li>认证与授权</li></ul><blockquote><p>技术能力分析</p></blockquote><ul><li>技术能力分析</li><li>方案对比</li><li>技术组件选取</li></ul>',32),o=[n];function r(c,h){return e(),i("div",null,o)}const u=l(a,[["render",r],["__file","架构设计.html.vue"]]),d=JSON.parse('{"path":"/note/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html","title":"架构设计","lang":"zh-CN","frontmatter":{"description":"架构设计 架构演进 架构服务化 单体分层架构 面向服务架构 SOA 微服务架构 云原生架构 容器编排化 容器 kubernetes 云原生架构 云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用； 云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。 Service Mesh 服务网格 架...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E6%9E%B6%E6%9E%84/%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"架构设计"}],["meta",{"property":"og:description","content":"架构设计 架构演进 架构服务化 单体分层架构 面向服务架构 SOA 微服务架构 云原生架构 容器编排化 容器 kubernetes 云原生架构 云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用； 云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。 Service Mesh 服务网格 架..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-09T16:00:59.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2024-04-09T16:00:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"架构设计\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-09T16:00:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"架构演进","slug":"架构演进","link":"#架构演进","children":[{"level":3,"title":"云原生架构","slug":"云原生架构","link":"#云原生架构","children":[]}]},{"level":2,"title":"架构的模式","slug":"架构的模式","link":"#架构的模式","children":[]},{"level":2,"title":"TOGAF架构设计工具","slug":"togaf架构设计工具","link":"#togaf架构设计工具","children":[{"level":3,"title":"业务架构","slug":"业务架构","link":"#业务架构","children":[]},{"level":3,"title":"信息架构","slug":"信息架构","link":"#信息架构","children":[]},{"level":3,"title":"应用架构","slug":"应用架构","link":"#应用架构","children":[]},{"level":3,"title":"技术架构","slug":"技术架构","link":"#技术架构","children":[]}]}],"git":{"createdTime":1712678459000,"updatedTime":1712678459000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":1}]},"readingTime":{"minutes":1.38,"words":413},"filePathRelative":"note/架构/架构设计.md","localizedDate":"2024年4月9日","excerpt":"\\n<h2>架构演进</h2>\\n<blockquote>\\n<p>架构服务化</p>\\n</blockquote>\\n<ul>\\n<li>单体分层架构</li>\\n<li>面向服务架构 SOA</li>\\n<li>微服务架构</li>\\n<li>云原生架构</li>\\n</ul>\\n<blockquote>\\n<p>容器编排化</p>\\n</blockquote>\\n<ul>\\n<li>容器</li>\\n<li>kubernetes</li>\\n</ul>\\n<h3>云原生架构</h3>\\n<p>云原生技术有利于各组织在公有云、私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用；</p>\\n<p>云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式 API。</p>","autoDesc":true}');export{u as comp,d as data};
