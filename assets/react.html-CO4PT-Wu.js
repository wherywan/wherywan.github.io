import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as d,a as s,b as n,d as l,e}from"./app-hoN0JGLf.js";const y={},v=s("h1",{id:"react",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#react"},[s("span",null,"react")])],-1),u=s("h2",{id:"应用框架",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#应用框架"},[s("span",null,"应用框架")])],-1),m={href:"https://reactjs.org/docs/",target:"_blank",rel:"noopener noreferrer"},F=e(`<h2 id="搭建步骤" tabindex="-1"><a class="header-anchor" href="#搭建步骤"><span>搭建步骤</span></a></h2><blockquote><p>react-app</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;"># 应用初始化</span></span>
<span class="line"><span style="color:#008000;"># npx是 npm 5.2+ 附带的 package 运行工具</span></span>
<span class="line"><span style="color:#795E26;">yarn</span><span style="color:#A31515;"> create</span><span style="color:#A31515;"> react-app</span><span style="color:#A31515;"> my-app</span></span>
<span class="line"><span style="color:#795E26;">npx</span><span style="color:#A31515;"> create-react-app</span><span style="color:#A31515;"> my-app</span><span style="color:#000000;"> </span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>ts支持</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">## 初始化ts项目</span></span>
<span class="line"><span style="color:#795E26;">npx</span><span style="color:#A31515;"> create-react-app</span><span style="color:#A31515;"> my-app</span><span style="color:#0000FF;"> --template</span><span style="color:#A31515;"> typescript</span></span>
<span class="line"><span style="color:#795E26;">yarn</span><span style="color:#A31515;"> create</span><span style="color:#A31515;"> react-app</span><span style="color:#A31515;"> my-app</span><span style="color:#0000FF;"> --template</span><span style="color:#A31515;"> typescript</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;"># 在已存在的项目引入ts检查和支持</span></span>
<span class="line"><span style="color:#795E26;">npm</span><span style="color:#A31515;"> install</span><span style="color:#0000FF;"> --save</span><span style="color:#A31515;"> typescript</span><span style="color:#A31515;"> @types/node</span><span style="color:#A31515;"> @types/react</span><span style="color:#A31515;"> @types/react-dom</span><span style="color:#A31515;"> @types/jest</span></span>
<span class="line"><span style="color:#795E26;">yarn</span><span style="color:#A31515;"> add</span><span style="color:#A31515;"> typescript</span><span style="color:#A31515;"> @types/node</span><span style="color:#A31515;"> @types/react</span><span style="color:#A31515;"> @types/react-dom</span><span style="color:#A31515;"> @types/jest</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="状态" tabindex="-1"><a class="header-anchor" href="#状态"><span>状态</span></a></h2><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由"><span>路由</span></a></h2><h2 id="jsx" tabindex="-1"><a class="header-anchor" href="#jsx"><span>jsx</span></a></h2><p>它是一个对象,是javascript的拓展语法，可以使用花括号{}，并使用js表达式</p><p>JSX 允许在大括号中嵌入任何表达式</p><h2 id="babel" tabindex="-1"><a class="header-anchor" href="#babel"><span>babel</span></a></h2><p>Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。</p><blockquote><p>下述样例等效</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#795E26;"> element</span><span style="color:#000000;"> = (</span></span>
<span class="line"><span style="color:#800000;">  &lt;h1</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;greeting&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">    Hello, world!</span></span>
<span class="line"><span style="color:#800000;">  &lt;/h1&gt;</span></span>
<span class="line"><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">//创建一个被称为react元素的对象，react最终将这些元素转为dom</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> element</span><span style="color:#000000;"> = </span><span style="color:#001080;">React</span><span style="color:#000000;">.</span><span style="color:#795E26;">createElement</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#A31515;">    &#39;h1&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">    {</span><span style="color:#001080;">className:</span><span style="color:#A31515;"> &#39;greeting&#39;</span><span style="color:#000000;">},</span></span>
<span class="line"><span style="color:#A31515;">    &#39;Hello, world!&#39;</span></span>
<span class="line"><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom"><span>dom</span></a></h2><blockquote><p>浏览器的dom</p></blockquote><p>html加载到浏览器会转变为一个文档对象模型dom来渲染</p><blockquote><p>react dom</p></blockquote><p>react根据react dom来跟踪真实dom ,它会更新dom来与react元素保持一致</p><blockquote><p>渲染元素到根节点</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#001080;">    document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> element</span><span style="color:#000000;"> = </span><span style="color:#800000;">&lt;h1&gt;</span><span style="color:#000000;">Hello, world</span><span style="color:#800000;">&lt;/h1&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#001080;">element</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>更新已渲染的函数</p></blockquote><p>React 元素是不可变对象。一旦被创建，你就无法更改它的子元素或者属性。一个元素就像电影的单帧：它代表了某个特定时刻的 UI。</p><p>根据我们已有的知识，更新 UI 唯一的方式是创建一个全新的元素，并将其传入 root.render()。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#001080;">  document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> tick</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">  const</span><span style="color:#795E26;"> element</span><span style="color:#000000;"> = (</span></span>
<span class="line"><span style="color:#800000;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;h1&gt;</span><span style="color:#000000;">Hello, world!</span><span style="color:#800000;">&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;h2&gt;</span><span style="color:#000000;">It is </span><span style="color:#0000FF;">{new</span><span style="color:#795E26;"> Date</span><span style="color:#000000FF;">().</span><span style="color:#795E26;">toLocaleTimeString</span><span style="color:#000000FF;">()</span><span style="color:#0000FF;">}</span><span style="color:#000000;">.</span><span style="color:#800000;">&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#001080;">  root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#001080;">element</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">setInterval</span><span style="color:#000000;">(</span><span style="color:#001080;">tick</span><span style="color:#000000;">, </span><span style="color:#098658;">1000</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>React 只更新它需要更新的部分</p></blockquote><p>React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。 上述例子，尽管每一秒我们都会新建一个描述整个 UI 树的元素，React DOM 只会更新实际改变了的内容，也就是例子中的文本节点。</p><h2 id="组件" tabindex="-1"><a class="header-anchor" href="#组件"><span>组件</span></a></h2><blockquote><p>函数式组件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Welcome</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#800000;"> &lt;h1&gt;</span><span style="color:#000000;">Hello, </span><span style="color:#0000FF;">{</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">name</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&lt;/h1&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>class组件</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Welcome</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#800000;"> &lt;h1&gt;</span><span style="color:#000000;">Hello, </span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">name</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&lt;/h1&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>渲染组件</p></blockquote><p>当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> element</span><span style="color:#000000;"> = </span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">Welcome</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Sara&quot;</span><span style="color:#800000;"> /&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#008000;">//样例</span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Welcome</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#800000;"> &lt;h1&gt;</span><span style="color:#000000;">Hello, </span><span style="color:#0000FF;">{</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">name</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&lt;/h1&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> element</span><span style="color:#000000;"> = </span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">Welcome</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Sara&quot;</span><span style="color:#800000;"> /&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#001080;">element</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： <code>组件名称必须以大写字母开头</code>。</p>`,36),b=s("div",null,null,-1),h=e(`<h2 id="组合组件" tabindex="-1"><a class="header-anchor" href="#组合组件"><span>组合组件</span></a></h2><p>我们可以创建一个可以多次渲染 Welcome 组件的 App 组件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Welcome</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#800000;"> &lt;h1&gt;</span><span style="color:#000000;">Hello, </span><span style="color:#0000FF;">{</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">name</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&lt;/h1&gt;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> App</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;</span><span style="color:#267F99;">Welcome</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Sara&quot;</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;</span><span style="color:#267F99;">Welcome</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Cahal&quot;</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;</span><span style="color:#267F99;">Welcome</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Edite&quot;</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="提取组件" tabindex="-1"><a class="header-anchor" href="#提取组件"><span>提取组件</span></a></h2><p>对复杂组件拆分，封装，使之更简洁</p><h2 id="props的只读性" tabindex="-1"><a class="header-anchor" href="#props的只读性"><span>props的只读性</span></a></h2><p>组件无论是使用函数声明还是通过 class 声明，都绝不能修改自身的 props。即不能更改入参 所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p><h2 id="state及生命周期" tabindex="-1"><a class="header-anchor" href="#state及生命周期"><span>state及生命周期</span></a></h2><p>class组件添加局部state，可类比java类</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Clock</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">    // 将props传给父类构造器</span></span>
<span class="line"><span style="color:#0000FF;">    super</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">    //定义局部组件属性</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">state</span><span style="color:#000000;"> = {</span><span style="color:#001080;">date:</span><span style="color:#0000FF;"> new</span><span style="color:#795E26;"> Date</span><span style="color:#000000;">()};</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">      &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;h1&gt;</span><span style="color:#000000;">Hello, world!</span><span style="color:#800000;">&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;h2&gt;</span><span style="color:#000000;">It is </span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">state</span><span style="color:#000000FF;">.</span><span style="color:#001080;">date</span><span style="color:#000000FF;">.</span><span style="color:#795E26;">toLocaleTimeString</span><span style="color:#000000FF;">()</span><span style="color:#0000FF;">}</span><span style="color:#000000;">.</span><span style="color:#800000;">&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">Clock</span><span style="color:#800000;"> /&gt;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>将生命周期方法添加到 Class 中</p></blockquote><p>当 Clock 组件第一次被渲染到 DOM 中的时候，就为其设置一个计时器。这在 React 中被称为“挂载（mount）”。</p><p>同时，当 DOM 中 Clock 组件被删除的时候，应该清除计时器。这在 React 中被称为“卸载（unmount）”。</p><p>我们可以为 class 组件声明一些特殊的方法，当组件挂载或卸载时就会去执行这些方法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Clock</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">    super</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">    //定义组件变量,即双向绑定变量，类似vue中的data属性</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">state</span><span style="color:#000000;"> = {</span><span style="color:#001080;">date:</span><span style="color:#0000FF;"> new</span><span style="color:#795E26;"> Date</span><span style="color:#000000;">()};</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">  // 当组件第一次被挂载运行</span></span>
<span class="line"><span style="color:#795E26;">  componentDidMount</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">timerID</span><span style="color:#000000;"> = </span><span style="color:#795E26;">setInterval</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#000000;">      () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#0000FF;"> this</span><span style="color:#000000;">.</span><span style="color:#795E26;">tick</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#098658;">      1000</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#008000;">  //当组将卸载时执行</span></span>
<span class="line"><span style="color:#795E26;">  componentWillUnmount</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#795E26;">    clearInterval</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">timerID</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  tick</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#795E26;">setState</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#001080;">      date:</span><span style="color:#0000FF;"> new</span><span style="color:#795E26;"> Date</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">    });</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">      &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;h1&gt;</span><span style="color:#000000;">Hello, world!</span><span style="color:#800000;">&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;h2&gt;</span><span style="color:#000000;">It is </span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">state</span><span style="color:#000000FF;">.</span><span style="color:#001080;">date</span><span style="color:#000000FF;">.</span><span style="color:#795E26;">toLocaleTimeString</span><span style="color:#000000FF;">()</span><span style="color:#0000FF;">}</span><span style="color:#000000;">.</span><span style="color:#800000;">&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">Clock</span><span style="color:#800000;"> /&gt;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>不要直接修改 State</code>,可使用setState(),只在构造器进行赋值</p><blockquote><p>State 的更新可能是异步的</p></blockquote><p>出于性能考虑，React 可能会把多个 setState() 调用合并成一个调用。</p><p>因为 this.props 和 this.state 可能会异步更新，所以你不要依赖他们的值来更新下一个状态。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// Wrong</span></span>
<span class="line"><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#795E26;">setState</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#001080;">  counter:</span><span style="color:#0000FF;"> this</span><span style="color:#000000;">.</span><span style="color:#001080;">state</span><span style="color:#000000;">.</span><span style="color:#001080;">counter</span><span style="color:#000000;"> + </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">props</span><span style="color:#000000;">.</span><span style="color:#001080;">increment</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"><span style="color:#008000;">// Correct</span></span>
<span class="line"><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#795E26;">setState</span><span style="color:#000000;">((</span><span style="color:#001080;">state</span><span style="color:#000000;">, </span><span style="color:#001080;">props</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> ({</span></span>
<span class="line"><span style="color:#001080;">    counter:</span><span style="color:#001080;"> state</span><span style="color:#000000;">.</span><span style="color:#001080;">counter</span><span style="color:#000000;"> + </span><span style="color:#001080;">props</span><span style="color:#000000;">.</span><span style="color:#001080;">increment</span></span>
<span class="line"><span style="color:#000000;">}));</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>数据是向下流动的</p></blockquote><p>这通常会被叫做“自上而下”或是“单向”的数据流。任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。</p><p>如果你把一个以组件构成的树想象成一个 props 的数据瀑布的话，那么每一个组件的 state 就像是在任意一点上给瀑布增加额外的水源，但是它只能向下流动。</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h2><p>React 元素的事件处理和 DOM 元素的很相似，但是有一点语法上的不同：</p><ul><li>React 事件的命名采用小驼峰式（camelCase），而不是纯小写。</li><li>使用 JSX 语法时你需要传入一个函数作为事件处理函数，而不是一个字符串。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;form</span><span style="color:#E50000;"> onsubmit</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;console.log(&#39;You clicked submit.&#39;); return false&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">  &lt;button</span><span style="color:#E50000;"> type</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;submit&quot;</span><span style="color:#800000;">&gt;</span><span style="color:#000000;">Submit</span><span style="color:#800000;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/form&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Form</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">    function</span><span style="color:#795E26;"> handleSubmit</span><span style="color:#000000;">(</span><span style="color:#001080;">e</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        e</span><span style="color:#000000;">.</span><span style="color:#795E26;">preventDefault</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">        console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;You clicked submit.&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">        &lt;form</span><span style="color:#E50000;"> onSubmit</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span><span style="color:#001080;">handleSubmit</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">            &lt;button</span><span style="color:#E50000;"> type</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;submit&quot;</span><span style="color:#800000;">&gt;</span><span style="color:#000000;">Submit</span><span style="color:#800000;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;/form&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若想在<code>回调函数中</code>使用this,必须<code>手动绑定this</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> LoggingButton</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">    // This syntax ensures \`this\` is bound within handleClick.</span></span>
<span class="line"><span style="color:#008000;">    // 使用箭头函数绑定this</span></span>
<span class="line"><span style="color:#795E26;">    handleClick</span><span style="color:#000000;"> = () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;this is:&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    };</span></span>
<span class="line"><span style="color:#795E26;">    render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">            &lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">handleClick</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">                Click me</span></span>
<span class="line"><span style="color:#800000;">            &lt;/button&gt;</span></span>
<span class="line"><span style="color:#000000;">        );</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> LoggingButton</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">    handleClick</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">        console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;this is:&#39;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">    render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#008000;">        // 此语法确保 \`handleClick\` 内的 \`this\` 已被绑定。需显示传入事件对象</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">            &lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span><span style="color:#000000FF;">() </span><span style="color:#0000FF;">=&gt;</span><span style="color:#0000FF;"> this</span><span style="color:#000000FF;">.</span><span style="color:#795E26;">handleClick</span><span style="color:#000000FF;">()</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">                Click me</span></span>
<span class="line"><span style="color:#800000;">            &lt;/button&gt;</span></span>
<span class="line"><span style="color:#000000;">        );</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">//下述绑定无法传参</span></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Toggle</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">    super</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">state</span><span style="color:#000000;"> = {</span><span style="color:#001080;">isToggleOn:</span><span style="color:#0000FF;"> true</span><span style="color:#000000;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // 为了在回调中使用 \`this\`，这个绑定是必不可少的</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">handleClick</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handleClick</span><span style="color:#000000;">.</span><span style="color:#795E26;">bind</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  handleClick</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#795E26;">setState</span><span style="color:#000000;">(</span><span style="color:#001080;">prevState</span><span style="color:#0000FF;"> =&gt;</span><span style="color:#000000;"> ({</span></span>
<span class="line"><span style="color:#001080;">      isToggleOn:</span><span style="color:#000000;"> !</span><span style="color:#001080;">prevState</span><span style="color:#000000;">.</span><span style="color:#001080;">isToggleOn</span></span>
<span class="line"><span style="color:#000000;">    }));</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">      &lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">handleClick</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">        {this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">state</span><span style="color:#000000FF;">.</span><span style="color:#001080;">isToggleOn</span><span style="color:#000000;"> ?</span><span style="color:#A31515;"> &#39;ON&#39;</span><span style="color:#000000;"> :</span><span style="color:#A31515;"> &#39;OFF&#39;</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">      &lt;/button&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>向事件处理程序传递参数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span><span style="color:#000000FF;">(</span><span style="color:#001080;">e</span><span style="color:#000000FF;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#0000FF;"> this</span><span style="color:#000000FF;">.</span><span style="color:#795E26;">deleteRow</span><span style="color:#000000FF;">(</span><span style="color:#001080;">id</span><span style="color:#000000FF;">, </span><span style="color:#001080;">e</span><span style="color:#000000FF;">)</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span><span style="color:#000000;">Delete Row</span><span style="color:#800000;">&lt;/button&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">deleteRow</span><span style="color:#000000FF;">.</span><span style="color:#795E26;">bind</span><span style="color:#000000FF;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000FF;">, </span><span style="color:#001080;">id</span><span style="color:#000000FF;">)</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span><span style="color:#000000;">Delete Row</span><span style="color:#800000;">&lt;/button&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述两种方式是等价的，分别通过箭头函数和 Function.prototype.bind 来实现。</p><p>在这两种情况下，React 的事件对象 e 会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 bind 的方式， 事件对象以及更多的参数将会被隐式的进行传递。</p><h2 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染"><span>条件渲染</span></a></h2><blockquote><p>阻止组件渲染 返回null</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> WarningBanner</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">  if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">props</span><span style="color:#000000;">.</span><span style="color:#001080;">warn</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#0000FF;"> null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">    &lt;div</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;warning&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">      Warning!</span></span>
<span class="line"><span style="color:#800000;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Page</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">    super</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">state</span><span style="color:#000000;"> = {</span><span style="color:#001080;">showWarning:</span><span style="color:#0000FF;"> true</span><span style="color:#000000;">};</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">handleToggleClick</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handleToggleClick</span><span style="color:#000000;">.</span><span style="color:#795E26;">bind</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  handleToggleClick</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#795E26;">setState</span><span style="color:#000000;">(</span><span style="color:#001080;">state</span><span style="color:#0000FF;"> =&gt;</span><span style="color:#000000;"> ({</span></span>
<span class="line"><span style="color:#001080;">      showWarning:</span><span style="color:#000000;"> !</span><span style="color:#001080;">state</span><span style="color:#000000;">.</span><span style="color:#001080;">showWarning</span></span>
<span class="line"><span style="color:#000000;">    }));</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">      &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;</span><span style="color:#267F99;">WarningBanner</span><span style="color:#E50000;"> warn</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">state</span><span style="color:#000000FF;">.</span><span style="color:#001080;">showWarning</span><span style="color:#0000FF;">}</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;button</span><span style="color:#E50000;"> onClick</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">handleToggleClick</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">          {this</span><span style="color:#000000FF;">.</span><span style="color:#001080;">state</span><span style="color:#000000FF;">.</span><span style="color:#001080;">showWarning</span><span style="color:#000000;"> ?</span><span style="color:#A31515;"> &#39;Hide&#39;</span><span style="color:#000000;"> :</span><span style="color:#A31515;"> &#39;Show&#39;</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">        &lt;/button&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> root</span><span style="color:#000000;"> = </span><span style="color:#001080;">ReactDOM</span><span style="color:#000000;">.</span><span style="color:#795E26;">createRoot</span><span style="color:#000000;">(</span><span style="color:#001080;">document</span><span style="color:#000000;">.</span><span style="color:#795E26;">getElementById</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;root&#39;</span><span style="color:#000000;">)); </span></span>
<span class="line"><span style="color:#001080;">root</span><span style="color:#000000;">.</span><span style="color:#795E26;">render</span><span style="color:#000000;">(</span><span style="color:#800000;">&lt;</span><span style="color:#267F99;">Page</span><span style="color:#800000;"> /&gt;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="列表与key" tabindex="-1"><a class="header-anchor" href="#列表与key"><span>列表与key</span></a></h2><blockquote><p>列表 使用map函数生成列表 key</p></blockquote><p>一个好的经验法则是：在 map() 方法中的元素需要设置 key 属性。</p><p>唯一标识一个标签元素或组件，识别是哪个组件改变或删除，提高渲染速度</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h2><p>可以在构造器中定义ref属性来获取组件中的值</p><h2 id="状态提升" tabindex="-1"><a class="header-anchor" href="#状态提升"><span>状态提升</span></a></h2><p>将多个子组件共用的属性提升到父组件中，数据自上而下处理</p><h2 id="组合vs继承" tabindex="-1"><a class="header-anchor" href="#组合vs继承"><span>组合vs继承</span></a></h2><blockquote><p>包含关系</p></blockquote><p>有些组件无法提前知晓它们子组件的具体内容。在 Sidebar（侧边栏）和 Dialog（对话框）等展现通用容器（box）的组件中特别容易遇到这种情况。</p><p>我们建议这些组件使用一个特殊的 children prop 来将他们的子组件传递到渲染结果中：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> FancyBorder</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">    &lt;div</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span><span style="color:#A31515;">&#39;FancyBorder FancyBorder-&#39;</span><span style="color:#000000;"> +</span><span style="color:#001080;"> props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">color</span><span style="color:#0000FF;">}</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">      {</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">children</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> WelcomeDialog</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">        &lt;</span><span style="color:#267F99;">FancyBorder</span><span style="color:#E50000;"> color</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;blue&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">            &lt;h1</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Dialog-title&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">                Welcome</span></span>
<span class="line"><span style="color:#800000;">            &lt;/h1&gt;</span></span>
<span class="line"><span style="color:#800000;">            &lt;p</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;Dialog-message&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">                Thank you for visiting our spacecraft!</span></span>
<span class="line"><span style="color:#800000;">            &lt;/p&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;/</span><span style="color:#267F99;">FancyBorder</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> SplitPane</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">        &lt;div</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;SplitPane&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">            &lt;div</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;SplitPane-left&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">                {</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">left</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">            &lt;/div&gt;</span></span>
<span class="line"><span style="color:#800000;">            &lt;div</span><span style="color:#E50000;"> className</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;SplitPane-right&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">                {</span><span style="color:#001080;">props</span><span style="color:#000000FF;">.</span><span style="color:#001080;">right</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">            &lt;/div&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> App</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">        &lt;</span><span style="color:#267F99;">SplitPane</span></span>
<span class="line"><span style="color:#E50000;">            left</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span></span>
<span class="line"><span style="color:#800000;">                &lt;</span><span style="color:#267F99;">Contacts</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#0000FF;">            }</span></span>
<span class="line"><span style="color:#E50000;">            right</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span></span>
<span class="line"><span style="color:#800000;">                &lt;</span><span style="color:#267F99;">Chat</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#0000FF;">            }</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),g=e(`<p>像其他数据一样传递。这种方法可能使你想起别的库中“槽”（slot）的概念，但在 React 中没有“槽”这一概念的限制，你可以将任何东西作为 props 进行传递。</p><h2 id="react-哲学" tabindex="-1"><a class="header-anchor" href="#react-哲学"><span>react 哲学</span></a></h2><h2 id="hook" tabindex="-1"><a class="header-anchor" href="#hook"><span>hook</span></a></h2><ul><li>Hook 是能让你在函数组件中“钩入” React 特性的函数</li><li>只能在函数组件的最外层使用</li></ul><blockquote><p>state hook</p></blockquote><p>创建一个<code>类似class组件的state变量</code></p><ul><li>useState(42) ,定义一个变量，以及设置值的函数，以对象的形式返回，可以使用数组解构获取值</li></ul><blockquote><p>Effect Hook</p></blockquote><ul><li>需清除的effect和不需清除的effect Similar to componentDidMount and componentDidUpdate: 在组件每次渲染后执行</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Example</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#0000FF;">  const</span><span style="color:#000000;"> [</span><span style="color:#0070C1;">count</span><span style="color:#000000;">, </span><span style="color:#0070C1;">setCount</span><span style="color:#000000;">] = </span><span style="color:#795E26;">useState</span><span style="color:#000000;">(</span><span style="color:#098658;">0</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  useEffect</span><span style="color:#000000;">(() </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    document</span><span style="color:#000000;">.</span><span style="color:#001080;">title</span><span style="color:#000000;"> = </span><span style="color:#A31515;">\`You clicked </span><span style="color:#0000FF;">\${</span><span style="color:#001080;">count</span><span style="color:#0000FF;">}</span><span style="color:#A31515;"> times\`</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能认为需要单独的 effect 来执行清除操作。但由于添加和删除订阅的代码的紧密性，所以 useEffect 的设计是在同一个地方执行。 如果你的 effect 返回一个函数，React 将会在执行清除操作时调用它：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#AF00DB;">import</span><span style="color:#001080;"> React</span><span style="color:#000000;">, { </span><span style="color:#001080;">useState</span><span style="color:#000000;">, </span><span style="color:#001080;">useEffect</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#A31515;"> &#39;react&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> FriendStatus</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">  const</span><span style="color:#000000;"> [</span><span style="color:#0070C1;">isOnline</span><span style="color:#000000;">, </span><span style="color:#0070C1;">setIsOnline</span><span style="color:#000000;">] = </span><span style="color:#795E26;">useState</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">  useEffect</span><span style="color:#000000;">(() </span><span style="color:#0000FF;">=&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    function</span><span style="color:#795E26;"> handleStatusChange</span><span style="color:#000000;">(</span><span style="color:#001080;">status</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#795E26;">      setIsOnline</span><span style="color:#000000;">(</span><span style="color:#001080;">status</span><span style="color:#000000;">.</span><span style="color:#001080;">isOnline</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#001080;">    ChatAPI</span><span style="color:#000000;">.</span><span style="color:#795E26;">subscribeToFriendStatus</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">.</span><span style="color:#001080;">friend</span><span style="color:#000000;">.</span><span style="color:#001080;">id</span><span style="color:#000000;">, </span><span style="color:#001080;">handleStatusChange</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">    // Specify how to clean up after this effect:</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> cleanup</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">      ChatAPI</span><span style="color:#000000;">.</span><span style="color:#795E26;">unsubscribeFromFriendStatus</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">.</span><span style="color:#001080;">friend</span><span style="color:#000000;">.</span><span style="color:#001080;">id</span><span style="color:#000000;">, </span><span style="color:#001080;">handleStatusChange</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    };</span></span>
<span class="line"><span style="color:#000000;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">  if</span><span style="color:#000000;"> (</span><span style="color:#001080;">isOnline</span><span style="color:#000000;"> === </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#A31515;"> &#39;Loading...&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#001080;"> isOnline</span><span style="color:#000000;"> ? </span><span style="color:#A31515;">&#39;Online&#39;</span><span style="color:#000000;"> : </span><span style="color:#A31515;">&#39;Offline&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h2><p>上下文(Context) 提供了一种通过<strong>组件树</strong>传递数据的方法，无需在每个级别手动传递 props 属性。</p><blockquote><p>useContext</p></blockquote><p>它是钩子函数，获取最近上下文对象provider元素中的值</p><blockquote><p>createContext</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">const</span><span style="color:#000000;"> {</span><span style="color:#0070C1;">Provider</span><span style="color:#000000;">, </span><span style="color:#0070C1;">Consumer</span><span style="color:#000000;">} = </span><span style="color:#001080;">React</span><span style="color:#000000;">.</span><span style="color:#795E26;">createContext</span><span style="color:#000000;">(</span><span style="color:#001080;">defaultValue</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>创建上下文对象元素对，provider和consumer。当 React 渲染 context Consumer 时， 它将从组件树中匹配最接近的 Provider 中读取当前的 context 值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// Context lets us pass a value deep into the component tree</span></span>
<span class="line"><span style="color:#008000;">// without explicitly threading it through every component.</span></span>
<span class="line"><span style="color:#008000;">// Create a context for the current theme (with &quot;light&quot; as the default).</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> ThemeContext</span><span style="color:#000000;"> = </span><span style="color:#001080;">React</span><span style="color:#000000;">.</span><span style="color:#795E26;">createContext</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;light&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> App</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> React</span><span style="color:#000000;">.</span><span style="color:#267F99;">Component</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">  render</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#008000;">    // Use a Provider to pass the current theme to the tree below.</span></span>
<span class="line"><span style="color:#008000;">    // Any component can read it, no matter how deep it is.</span></span>
<span class="line"><span style="color:#008000;">    // In this example, we&#39;re passing &quot;dark&quot; as the current value.</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">      &lt;</span><span style="color:#267F99;">ThemeContext.Provider</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;dark&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;</span><span style="color:#267F99;">Toolbar</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;/</span><span style="color:#267F99;">ThemeContext.Provider</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">    );</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// A component in the middle doesn&#39;t have to</span></span>
<span class="line"><span style="color:#008000;">// pass the theme down explicitly anymore.</span></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Toolbar</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">    &lt;div&gt;</span></span>
<span class="line"><span style="color:#800000;">      &lt;</span><span style="color:#267F99;">ThemedButton</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/div&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> ThemedButton</span><span style="color:#000000;">(</span><span style="color:#001080;">props</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">  // Use a Consumer to read the current theme context.</span></span>
<span class="line"><span style="color:#008000;">  // React will find the closest theme Provider above and use its value.</span></span>
<span class="line"><span style="color:#008000;">  // In this example, the current theme is &quot;dark&quot;.</span></span>
<span class="line"><span style="color:#AF00DB;">  return</span><span style="color:#000000;"> (</span></span>
<span class="line"><span style="color:#800000;">    &lt;</span><span style="color:#267F99;">ThemeContext.Consumer</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#0000FF;">      {</span><span style="color:#001080;">theme</span><span style="color:#0000FF;"> =&gt;</span><span style="color:#800000;"> &lt;</span><span style="color:#267F99;">Button</span><span style="color:#0000FF;"> {</span><span style="color:#000000;">...</span><span style="color:#001080;">props</span><span style="color:#0000FF;">}</span><span style="color:#E50000;"> theme</span><span style="color:#000000;">=</span><span style="color:#0000FF;">{</span><span style="color:#001080;">theme</span><span style="color:#0000FF;">}</span><span style="color:#800000;"> /&gt;</span><span style="color:#0000FF;">}</span></span>
<span class="line"><span style="color:#800000;">    &lt;/</span><span style="color:#267F99;">ThemeContext.Consumer</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#000000;">  );</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="组件库" tabindex="-1"><a class="header-anchor" href="#组件库"><span>组件库</span></a></h2><ul><li>ant</li><li>mui</li><li>react-bootstrap</li><li>sem</li></ul>`,22);function k(E,x){const p=a("ExternalLinkIcon"),o=a("Welcome"),c=a("Contacts"),t=a("Chat");return i(),d("div",null,[v,u,s("ul",null,[s("li",null,[n("next.js "),s("a",m,[n("参考"),l(p)])])]),F,s("p",null,[n("React 会将以小写字母开头的组件视为原生 DOM 标签。例如，"),b,n(" 代表 HTML 的 div 标签，而 "),l(o),n(" 则代表一个组件，并且需在作用域内使用 Welcome。")]),h,l(c),n(" 和 "),l(t),n(" 之类的 React 元素本质就是对象（object），所以你可以把它们当作 props，"),g])}const C=r(y,[["render",k],["__file","react.html.vue"]]),q=JSON.parse('{"path":"/note/%E5%89%8D%E7%AB%AF/react.html","title":"react","lang":"zh-CN","frontmatter":{"description":"react 应用框架 next.js 参考 搭建步骤 react-app ts支持 状态 路由 jsx 它是一个对象,是javascript的拓展语法，可以使用花括号{}，并使用js表达式 JSX 允许在大括号中嵌入任何表达式 babel Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。 下述样例等效 d...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E5%89%8D%E7%AB%AF/react.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"react"}],["meta",{"property":"og:description","content":"react 应用框架 next.js 参考 搭建步骤 react-app ts支持 状态 路由 jsx 它是一个对象,是javascript的拓展语法，可以使用花括号{}，并使用js表达式 JSX 允许在大括号中嵌入任何表达式 babel Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。 下述样例等效 d..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-10-26T09:58:50.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2022-10-26T09:58:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"react\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-10-26T09:58:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"应用框架","slug":"应用框架","link":"#应用框架","children":[]},{"level":2,"title":"搭建步骤","slug":"搭建步骤","link":"#搭建步骤","children":[]},{"level":2,"title":"状态","slug":"状态","link":"#状态","children":[]},{"level":2,"title":"路由","slug":"路由","link":"#路由","children":[]},{"level":2,"title":"jsx","slug":"jsx","link":"#jsx","children":[]},{"level":2,"title":"babel","slug":"babel","link":"#babel","children":[]},{"level":2,"title":"dom","slug":"dom","link":"#dom","children":[]},{"level":2,"title":"组件","slug":"组件","link":"#组件","children":[]},{"level":2,"title":"组合组件","slug":"组合组件","link":"#组合组件","children":[]},{"level":2,"title":"提取组件","slug":"提取组件","link":"#提取组件","children":[]},{"level":2,"title":"props的只读性","slug":"props的只读性","link":"#props的只读性","children":[]},{"level":2,"title":"state及生命周期","slug":"state及生命周期","link":"#state及生命周期","children":[]},{"level":2,"title":"事件","slug":"事件","link":"#事件","children":[]},{"level":2,"title":"条件渲染","slug":"条件渲染","link":"#条件渲染","children":[]},{"level":2,"title":"列表与key","slug":"列表与key","link":"#列表与key","children":[]},{"level":2,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":2,"title":"状态提升","slug":"状态提升","link":"#状态提升","children":[]},{"level":2,"title":"组合vs继承","slug":"组合vs继承","link":"#组合vs继承","children":[]},{"level":2,"title":"react 哲学","slug":"react-哲学","link":"#react-哲学","children":[]},{"level":2,"title":"hook","slug":"hook","link":"#hook","children":[]},{"level":2,"title":"context","slug":"context","link":"#context","children":[]},{"level":2,"title":"组件库","slug":"组件库","link":"#组件库","children":[]}],"git":{"createdTime":1662535549000,"updatedTime":1666778330000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":3}]},"readingTime":{"minutes":9.02,"words":2705},"filePathRelative":"note/前端/react.md","localizedDate":"2022年9月7日","excerpt":"\\n<h2>应用框架</h2>\\n<ul>\\n<li>next.js\\n<a href=\\"https://reactjs.org/docs/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考</a></li>\\n</ul>\\n<h2>搭建步骤</h2>\\n<blockquote>\\n<p>react-app</p>\\n</blockquote>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#008000\\"># 应用初始化</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\"># npx是 npm 5.2+ 附带的 package 运行工具</span></span>\\n<span class=\\"line\\"><span style=\\"color:#795E26\\">yarn</span><span style=\\"color:#A31515\\"> create</span><span style=\\"color:#A31515\\"> react-app</span><span style=\\"color:#A31515\\"> my-app</span></span>\\n<span class=\\"line\\"><span style=\\"color:#795E26\\">npx</span><span style=\\"color:#A31515\\"> create-react-app</span><span style=\\"color:#A31515\\"> my-app</span><span style=\\"color:#000000\\"> </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{C as comp,q as data};
