import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as i,c as r,a as s,b as l,d as e,e as n}from"./app-hoN0JGLf.js";const c={},t=n('<h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka"><span>kafka</span></a></h1><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>@KafkaListener注解只能循环拉取数据，即使前一次拉取的数据未确认，下一次也不会拉取未确认的数据，会顺序拉取数据，只有重启后才会从偏移处offset拉取消息</li></ul><h3 id="自动提交和手动提交" tabindex="-1"><a class="header-anchor" href="#自动提交和手动提交"><span>自动提交和手动提交</span></a></h3>',5),d={href:"https://blog.csdn.net/weixin_43767015/article/details/122005747",target:"_blank",rel:"noopener noreferrer"},y=n(`<blockquote><p>kafka api</p></blockquote><ol><li>如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll的数据处理完毕之后，将会在下一次poll数据的时候， 首先检查是否到达了auto.commit.interval.ms自动提交间隔的时间，如果到达了（默认5s），那么会提交此前拉取的消息的最大偏移量，否则不会提交。</li><li>如果enable.auto.commit为false，则表示手动提交，那么需要通过consumer.commitAsync()或者commitSync()手动提交偏移量， 这两个方法将会提交目前最大的offset，否则重启之后将会消费此前的数据。</li></ol><blockquote><p>kafka listener</p></blockquote><ol><li>如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll的数据处理完毕之后，将会在下一次poll数据的时候，首先检查是否到达了auto.commit.interval.ms自动提交间隔的时间，如果到达了（默认5s），那么会提交此前拉去的消息的最大偏移量，否则不会提交。</li><li>如果enable.auto.commit为false，则表示手动提交，此时需要注意选择提交的模式AckMode。</li></ol><ul><li>BATCH：默认的提交模式。当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后提交，由Spring帮我们提交。</li><li>RECORD：当每一条记录被消费者监听器（ListenerConsumer）处理之后提交，由Spring帮我们提交。</li><li>TIME：当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，距离上次提交时间大于TIME时提交，由Spring帮我们提交。</li><li>COUNT：当每一批poll()的数据被消费者监听器（ListenerConsumer）处理之后，被处理record数量大于等于COUNT时提交，由Spring帮我们提交。</li><li>COUNT_TIME：TIME和COUNT有一个条件满足时提交，由Spring帮我们提交。</li><li>MANUAL：需要对监听消息的方法中引入 Acknowledgment参数，并在代码中调用acknowledge()方法进行手动提交。实际上，对于每一批poll()的数据，每次调用acknowledge()方法之后仅仅是将offset存放到本地map缓存，在下一次poll的时候，在poll新数据之前从缓存中拿出来批量提交，也就是说与BATCH有相同的语义。</li><li>MANUAL_IMMEDIATE：需要对监听消息的方法中引入 Acknowledgment参数，并在代码中调用acknowledge()方法进行手动提交。实际上，对于每一批poll()的数据，每次调用acknowledge()方法之后立即进行偏移量的提交。</li></ul><blockquote><p>MANUAL和MANUAL_IMMEDIATE的区别</p></blockquote><p>MANUAL_IMMEDIATE是消费完一个消息就提交，MANUAL是处理完一批消息（默认500）之后，在下一次拉取消息之前批量提交。</p><p>如果中间有一批数据没有提交，那么在一次消费过程中，这些没有提交的数据不会重复消费，而是会一直向后消费，</p><p>除非重启消费者，会被再次消费。如果后面有消息的offset被提交，那么该offset之前的所有消息都算作已提交，重启之后也不会被再次消费。</p><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入"><span>引入</span></a></h3><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;"> &lt;dependency&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;groupId&gt;</span><span style="color:#000000;">org.springframework.kafka</span><span style="color:#800000;">&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;artifactId&gt;</span><span style="color:#000000;">spring-kafka</span><span style="color:#800000;">&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;version&gt;</span><span style="color:#000000;">2.4.0.RELEASE</span><span style="color:#800000;">&lt;/version&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/dependency&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h3><h4 id="java类配置" tabindex="-1"><a class="header-anchor" href="#java类配置"><span>java类配置</span></a></h4><blockquote><p>配置主题</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * kafka 主题配置类</span></span>
<span class="line"><span style="color:#008000;"> *</span></span>
<span class="line"><span style="color:#008000;"> * </span><span style="color:#0000FF;">@author</span><span style="color:#008000;"> Leo</span></span>
<span class="line"><span style="color:#008000;"> * @create 2020/12/31 15:57</span></span>
<span class="line"><span style="color:#008000;"> **/</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Configuration</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> KafkaTopicConfiguration</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 创建 KafkaAmin，可以自动检测集群中是否存在topic，不存在则创建</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> KafkaAdmin</span><span style="color:#795E26;"> kafkaAdmin</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">        Map</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">Object</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">props</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> HashMap</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">AdminClientConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">BOOTSTRAP_SERVERS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> KafkaAdmin</span><span style="color:#000000;">(props);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> NewTopic</span><span style="color:#795E26;"> newTopic</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#008000;">        // 创建 topic，指定 名称、分区数、副本数</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> NewTopic</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;hello-kafka-test-topic&quot;</span><span style="color:#000000;">, </span><span style="color:#098658;">3</span><span style="color:#000000;">, (</span><span style="color:#267F99;">short</span><span style="color:#000000;">) </span><span style="color:#098658;">2</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置生产者</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * kafka 生产者配置类</span></span>
<span class="line"><span style="color:#008000;"> *</span></span>
<span class="line"><span style="color:#008000;"> * </span><span style="color:#0000FF;">@author</span><span style="color:#008000;"> Leo</span></span>
<span class="line"><span style="color:#008000;"> * @create 2020/12/31 15:09</span></span>
<span class="line"><span style="color:#008000;"> **/</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Configuration</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> KafkaProducerConfiguration</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 不包含事务 producerFactory</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> ProducerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">producerFactory</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">        Map</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">Object</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">props</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> HashMap</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#008000;">        //kafka 集群地址</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">BOOTSTRAP_SERVERS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //重试次数</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">RETRIES_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">3</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //应答级别</span></span>
<span class="line"><span style="color:#008000;">        //acks=0 把消息发送到kafka就认为发送成功</span></span>
<span class="line"><span style="color:#008000;">        //acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功</span></span>
<span class="line"><span style="color:#008000;">        //acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">ACKS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;all&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">MAX_BLOCK_MS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">6000</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //批量处理的最大大小 单位 byte</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">BATCH_SIZE_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">4096</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">LINGER_MS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">1000</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //生产者可用缓冲区的最大值 单位 byte</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">BUFFER_MEMORY_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">33554432</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //每条消息最大的大小</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">MAX_REQUEST_SIZE_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">1048576</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //客户端ID</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">CLIENT_ID_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;hello-kafka&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //Key 序列化方式</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">KEY_SERIALIZER_CLASS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">StringSerializer</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#008000;">        //Value 序列化方式</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">VALUE_SERIALIZER_CLASS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">StringSerializer</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#008000;">        //消息压缩：none、lz4、gzip、snappy，默认为 none。</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">COMPRESSION_TYPE_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;gzip&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //自定义分区器</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ProducerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">PARTITIONER_CLASS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">MyPartitioner</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#267F99;"> DefaultKafkaProducerFactory</span><span style="color:#000000;">&lt;&gt;(props);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 包含事务 producerFactory</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> ProducerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">producerFactoryWithTransaction</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">        DefaultKafkaProducerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">defaultKafkaProducerFactory</span><span style="color:#000000;"> = (</span><span style="color:#267F99;">DefaultKafkaProducerFactory</span><span style="color:#000000;">&lt;String, String&gt;) </span><span style="color:#795E26;">producerFactory</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#008000;">        //设置事务Id前缀</span></span>
<span class="line"><span style="color:#001080;">        defaultKafkaProducerFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">setTransactionIdPrefix</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;tx&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> defaultKafkaProducerFactory;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 不包含事务 kafkaTemplate</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;kafkaTemplate&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> KafkaTemplate</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">kafkaTemplate</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#267F99;"> KafkaTemplate</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#795E26;">producerFactory</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 包含事务 kafkaTemplate</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;kafkaTemplateWithTransaction&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> KafkaTemplate</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">kafkaTemplateWithTransaction</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#267F99;"> KafkaTemplate</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#795E26;">producerFactoryWithTransaction</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 以该方式配置事务管理器：就不能以普通方式发送消息，只能通过 kafkaTemplate.executeInTransaction 或</span></span>
<span class="line"><span style="color:#008000;">     * 在方法上加 @Transactional 注解来发送消息，否则报错</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> producerFactory</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#008000;">//    @Bean</span></span>
<span class="line"><span style="color:#008000;">//    public KafkaTransactionManager&lt;Integer, String&gt; kafkaTransactionManager(ProducerFactory&lt;Integer, String&gt; producerFactory) {</span></span>
<span class="line"><span style="color:#008000;">//        return new KafkaTransactionManager&lt;&gt;(producerFactory);</span></span>
<span class="line"><span style="color:#008000;">//    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>配置消费者</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * kafka 消费者配置类</span></span>
<span class="line"><span style="color:#008000;"> *</span></span>
<span class="line"><span style="color:#008000;"> * </span><span style="color:#0000FF;">@author</span><span style="color:#008000;"> Leo</span></span>
<span class="line"><span style="color:#008000;"> * @create 2020/12/31 15:09</span></span>
<span class="line"><span style="color:#008000;"> **/</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Slf4j</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Configuration</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> KafkaConsumerConfiguration</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> KafkaListenerContainerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">ConcurrentMessageListenerContainer</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt;&gt; </span><span style="color:#795E26;">kafkaListenerContainerFactory</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">        ConcurrentKafkaListenerContainerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">factory</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ConcurrentKafkaListenerContainerFactory</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#008000;">        //设置 consumerFactory</span></span>
<span class="line"><span style="color:#001080;">        factory</span><span style="color:#000000;">.</span><span style="color:#795E26;">setConsumerFactory</span><span style="color:#000000;">(</span><span style="color:#795E26;">consumerFactory</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#008000;">        //设置是否开启批量监听</span></span>
<span class="line"><span style="color:#001080;">        factory</span><span style="color:#000000;">.</span><span style="color:#795E26;">setBatchListener</span><span style="color:#000000;">(</span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //设置消费者组中的线程数量</span></span>
<span class="line"><span style="color:#001080;">        factory</span><span style="color:#000000;">.</span><span style="color:#795E26;">setConcurrency</span><span style="color:#000000;">(</span><span style="color:#098658;">1</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> factory;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * consumerFactory</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> ConsumerFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">Object</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">consumerFactory</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">        Map</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">Object</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">props</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> HashMap</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#008000;">        //kafka集群地址</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">BOOTSTRAP_SERVERS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //自动提交 offset 默认 true</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">ENABLE_AUTO_COMMIT_CONFIG</span><span style="color:#000000;">, </span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //自动提交的频率 单位 ms</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">AUTO_COMMIT_INTERVAL_MS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">1000</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //批量消费最大数量</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">MAX_POLL_RECORDS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">100</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //消费者组</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">GROUP_ID_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;testGroup&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">SESSION_TIMEOUT_MS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">120000</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //请求超时</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">REQUEST_TIMEOUT_MS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#098658;">120000</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //Key 反序列化类</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">KEY_DESERIALIZER_CLASS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">StringDeserializer</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#008000;">        //Value 反序列化类</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">VALUE_DESERIALIZER_CLASS_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">StringDeserializer</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#008000;">        //当kafka中没有初始offset或offset超出范围时将自动重置offset</span></span>
<span class="line"><span style="color:#008000;">        //earliest:重置为分区中最小的offset</span></span>
<span class="line"><span style="color:#008000;">        //latest:重置为分区中最新的offset(消费分区中新产生的数据)</span></span>
<span class="line"><span style="color:#008000;">        //none:只要有一个分区不存在已提交的offset,就抛出异常</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">AUTO_OFFSET_RESET_CONFIG</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;latest&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //设置Consumer拦截器</span></span>
<span class="line"><span style="color:#001080;">        props</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">ConsumerConfig</span><span style="color:#000000;">.</span><span style="color:#001080;">INTERCEPTOR_CLASSES_CONFIG</span><span style="color:#000000;">, </span><span style="color:#001080;">MyConsumerInterceptor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#267F99;"> DefaultKafkaConsumerFactory</span><span style="color:#000000;">&lt;&gt;(props);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 消费异常处理器</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> ConsumerAwareListenerErrorHandler</span><span style="color:#795E26;"> consumerAwareListenerErrorHandler</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> ConsumerAwareListenerErrorHandler</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">            @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">            public</span><span style="color:#267F99;"> Object</span><span style="color:#795E26;"> handleError</span><span style="color:#000000;">(</span><span style="color:#267F99;">Message</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">message</span><span style="color:#000000;">, </span><span style="color:#267F99;">ListenerExecutionFailedException</span><span style="color:#001080;"> exception</span><span style="color:#000000;">, </span><span style="color:#267F99;">Consumer</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">, </span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">consumer</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">                //打印消费异常的消息和异常信息</span></span>
<span class="line"><span style="color:#001080;">                log</span><span style="color:#000000;">.</span><span style="color:#795E26;">error</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;consumer failed! message: {}, exceptionMsg: {}, groupId: {}&quot;</span><span style="color:#000000;">, message, </span><span style="color:#001080;">exception</span><span style="color:#000000;">.</span><span style="color:#795E26;">getMessage</span><span style="color:#000000;">(), </span><span style="color:#001080;">exception</span><span style="color:#000000;">.</span><span style="color:#795E26;">getGroupId</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">                return</span><span style="color:#0000FF;"> null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        };</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置文件配置" tabindex="-1"><a class="header-anchor" href="#配置文件配置"><span>配置文件配置</span></a></h4><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">spring</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">  application</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">    name</span><span style="color:#000000;">: </span><span style="color:#0000FF;">hello-kafka</span></span>
<span class="line"><span style="color:#800000;">  kafka</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">    listener</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">      #设置是否批量消费，默认 single（单条），batch（批量）</span></span>
<span class="line"><span style="color:#800000;">      type</span><span style="color:#000000;">: </span><span style="color:#0000FF;">single</span></span>
<span class="line"><span style="color:#000000;">      </span></span>
<span class="line"><span style="color:#008000;">    # 集群地址</span></span>
<span class="line"><span style="color:#800000;">    bootstrap-servers</span><span style="color:#000000;">: </span><span style="color:#0000FF;">127.0.0.1:9092,127.0.0.1:9093,127.0.0.1:9094</span></span>
<span class="line"><span style="color:#008000;">    # 生产者配置</span></span>
<span class="line"><span style="color:#800000;">    producer</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">      # 重试次数</span></span>
<span class="line"><span style="color:#800000;">      retries</span><span style="color:#000000;">: </span><span style="color:#098658;">3</span></span>
<span class="line"><span style="color:#008000;">      # 应答级别</span></span>
<span class="line"><span style="color:#008000;">      # acks=0 把消息发送到kafka就认为发送成功</span></span>
<span class="line"><span style="color:#008000;">      # acks=1 把消息发送到kafka leader分区，并且写入磁盘就认为发送成功</span></span>
<span class="line"><span style="color:#008000;">      # acks=all 把消息发送到kafka leader分区，并且leader分区的副本follower对消息进行了同步就任务发送成功</span></span>
<span class="line"><span style="color:#800000;">      acks</span><span style="color:#000000;">: </span><span style="color:#0000FF;">all</span></span>
<span class="line"><span style="color:#008000;">      # 批量处理的最大大小 单位 byte</span></span>
<span class="line"><span style="color:#800000;">      batch-size</span><span style="color:#000000;">: </span><span style="color:#098658;">4096</span></span>
<span class="line"><span style="color:#008000;">      # 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span></span>
<span class="line"><span style="color:#800000;">      buffer-memory</span><span style="color:#000000;">: </span><span style="color:#098658;">33554432</span></span>
<span class="line"><span style="color:#008000;">      # 客户端ID</span></span>
<span class="line"><span style="color:#800000;">      client-id</span><span style="color:#000000;">: </span><span style="color:#0000FF;">hello-kafka</span></span>
<span class="line"><span style="color:#008000;">      # Key 序列化类</span></span>
<span class="line"><span style="color:#800000;">      key-serializer</span><span style="color:#000000;">: </span><span style="color:#0000FF;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#008000;">      # Value 序列化类</span></span>
<span class="line"><span style="color:#800000;">      value-serializer</span><span style="color:#000000;">: </span><span style="color:#0000FF;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#008000;">      # 消息压缩：none、lz4、gzip、snappy，默认为 none。</span></span>
<span class="line"><span style="color:#800000;">      compression-type</span><span style="color:#000000;">: </span><span style="color:#0000FF;">gzip</span></span>
<span class="line"><span style="color:#800000;">      properties</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">        partitioner</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">          #指定自定义分区器</span></span>
<span class="line"><span style="color:#800000;">          class</span><span style="color:#000000;">: </span><span style="color:#0000FF;">top.zysite.hello.kafka.partitioner.MyPartitioner</span></span>
<span class="line"><span style="color:#800000;">        linger</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">          # 发送延时,当生产端积累的消息达到batch-size或接收到消息linger.ms后,生产者就会将消息提交给kafka</span></span>
<span class="line"><span style="color:#800000;">          ms</span><span style="color:#000000;">: </span><span style="color:#098658;">1000</span></span>
<span class="line"><span style="color:#800000;">        max</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">          block</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">            # KafkaProducer.send() 和 partitionsFor() 方法的最长阻塞时间 单位 ms</span></span>
<span class="line"><span style="color:#800000;">            ms</span><span style="color:#000000;">: </span><span style="color:#098658;">6000</span></span>
<span class="line"><span style="color:#008000;">    # 消费者配置</span></span>
<span class="line"><span style="color:#800000;">    consumer</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">      # 默认消费者组</span></span>
<span class="line"><span style="color:#800000;">      group-id</span><span style="color:#000000;">: </span><span style="color:#0000FF;">testGroup</span></span>
<span class="line"><span style="color:#008000;">      # 自动提交 offset 默认 true</span></span>
<span class="line"><span style="color:#800000;">      enable-auto-commit</span><span style="color:#000000;">: </span><span style="color:#0000FF;">false</span></span>
<span class="line"><span style="color:#008000;">      # 自动提交的频率 单位 ms</span></span>
<span class="line"><span style="color:#800000;">      auto-commit-interval</span><span style="color:#000000;">: </span><span style="color:#098658;">1000</span></span>
<span class="line"><span style="color:#008000;">      # 批量消费最大数量</span></span>
<span class="line"><span style="color:#800000;">      max-poll-records</span><span style="color:#000000;">: </span><span style="color:#098658;">100</span></span>
<span class="line"><span style="color:#008000;">      # Key 反序列化类</span></span>
<span class="line"><span style="color:#800000;">      key-deserializer</span><span style="color:#000000;">: </span><span style="color:#0000FF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#008000;">      # Value 反序列化类</span></span>
<span class="line"><span style="color:#800000;">      value-deserializer</span><span style="color:#000000;">: </span><span style="color:#0000FF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#008000;">      # 当kafka中没有初始offset或offset超出范围时将自动重置offset</span></span>
<span class="line"><span style="color:#008000;">      # earliest:重置为分区中最小的offset</span></span>
<span class="line"><span style="color:#008000;">      # latest:重置为分区中最新的offset(消费分区中新产生的数据)</span></span>
<span class="line"><span style="color:#008000;">      # none:只要有一个分区不存在已提交的offset,就抛出异常</span></span>
<span class="line"><span style="color:#800000;">      auto-offset-reset</span><span style="color:#000000;">: </span><span style="color:#0000FF;">latest</span></span>
<span class="line"><span style="color:#800000;">      properties</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">        interceptor</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">          classes</span><span style="color:#000000;">: </span><span style="color:#0000FF;">top.zysite.hello.kafka.interceptor.MyConsumerInterceptor</span></span>
<span class="line"><span style="color:#800000;">        session</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">          timeout</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">            # session超时，超过这个时间consumer没有发送心跳,就会触发rebalance操作</span></span>
<span class="line"><span style="color:#800000;">            ms</span><span style="color:#000000;">: </span><span style="color:#098658;">120000</span></span>
<span class="line"><span style="color:#800000;">        request</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">          timeout</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">            # 请求超时</span></span>
<span class="line"><span style="color:#800000;">            ms</span><span style="color:#000000;">: </span><span style="color:#098658;">120000</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="样例" tabindex="-1"><a class="header-anchor" href="#样例"><span>样例</span></a></h3>`,22),u={href:"https://blog.csdn.net/luo15242208310/article/details/122285689",target:"_blank",rel:"noopener noreferrer"},v=n(`<h4 id="消费者" tabindex="-1"><a class="header-anchor" href="#消费者"><span>消费者</span></a></h4><blockquote><p>单记录消费 - 手动确认</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * 定义biz1消息接收者</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @param message</span></span>
<span class="line"><span> * @kafka.topic topic1</span></span>
<span class="line"><span> * @kafka.group group1</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@KafkaListener(</span></span>
<span class="line"><span>        id = &quot;biz1-\${spring.kafka.biz1.consumer.group}&quot;,</span></span>
<span class="line"><span>        groupId = &quot;\${spring.kafka.biz1.consumer.group}&quot;,</span></span>
<span class="line"><span>        topics = &quot;\${spring.kafka.biz1.topic}&quot;)</span></span>
<span class="line"><span>public void biz1Consumer(String message, Acknowledgment ack) {</span></span>
<span class="line"><span>    log.info(&quot;[biz1Consumer] RECV MSG: {}&quot;, message);</span></span>
<span class="line"><span>    //确认单当前消息（及之前的消息）offset均已被消费完成</span></span>
<span class="line"><span>    ack.acknowledge();</span></span>
<span class="line"><span>    //拒绝当前消息（此方法仅适用于listener.type=single）</span></span>
<span class="line"><span>    //当前poll查询出的剩余消息记录均被抛弃，</span></span>
<span class="line"><span>    //且当前消费线程在阻塞指定sleep（如下3000毫秒）后重新调用poll获取待消费消息（包括之前poll被抛弃的消息）</span></span>
<span class="line"><span>    //ack.nack(3000)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>批量消费 - 手动确认</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>/**</span></span>
<span class="line"><span> * 定义biz1消息接收者</span></span>
<span class="line"><span> * 手动模式（需手动ack）：</span></span>
<span class="line"><span> * 1. listener.type=batch</span></span>
<span class="line"><span> * 2. ack-mode=manual</span></span>
<span class="line"><span> *</span></span>
<span class="line"><span> * @param messages</span></span>
<span class="line"><span> * @kafka.topic topic1</span></span>
<span class="line"><span> * @kafka.group group1</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@KafkaListener(</span></span>
<span class="line"><span>        id = &quot;biz1-\${spring.kafka.biz1.consumer.group}&quot;,</span></span>
<span class="line"><span>        groupId = &quot;\${spring.kafka.biz1.consumer.group}&quot;,</span></span>
<span class="line"><span>        //仅在多partition单个消费者时，用于多线程消费消息（concurrency &lt;= partition数量）</span></span>
<span class="line"><span>        //当存在多个消费者时，即便设置concurrency &gt; 1也仅有唯一消费线程生效</span></span>
<span class="line"><span>        concurrency = &quot;\${spring.kafka.biz1.consumer.concurrency}&quot;,</span></span>
<span class="line"><span>        topics = &quot;\${spring.kafka.biz1.topic}&quot;)</span></span>
<span class="line"><span>public void biz1Consumer(List&lt;String&gt; messages, Acknowledgment ack) {</span></span>
<span class="line"><span>    log.info(&quot;[biz1Consumer] RECV MSG COUNT: {}&quot;, messages.size());</span></span>
<span class="line"><span>    log.info(&quot;[biz1Consumer] RECV MSG[0]: {}&quot;, messages.get(0));</span></span>
<span class="line"><span>    //确认单当前消息（及之前的消息）offset均已被消费完成</span></span>
<span class="line"><span>    ack.acknowledge();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //拒绝消息列表中指定index（发生错误的消息index）对应的消息（此方法仅适用于listener.type=batch），</span></span>
<span class="line"><span>    //当前指定index之前的消息会被成功提交，</span></span>
<span class="line"><span>    //当前poll查询出的剩余消息记录（包括当前指定的index）均被抛弃，</span></span>
<span class="line"><span>    //且当前消费线程在阻塞指定sleep（如下3000毫秒）后重新调用poll获取待消费消息（包括当前index及之前poll抛弃的消息）</span></span>
<span class="line"><span>    //如下即确认当前list中前5条消息（0-4），抛弃当前list中后续消息，3秒后再次poll查询未消费消息</span></span>
<span class="line"><span>    //ack.nack(5, 3000);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span>/**</span></span>
<span class="line"><span> * 定义biz2消息接收者</span></span>
<span class="line"><span> * 手动模式（需手动ack）：</span></span>
<span class="line"><span> * 1. listener.type=batch</span></span>
<span class="line"><span> * 2. ack-mode=manual</span></span>
<span class="line"><span> * </span></span>
<span class="line"><span> * @param messages</span></span>
<span class="line"><span> * @kafka.topic topic2</span></span>
<span class="line"><span> * @kafka.group group2</span></span>
<span class="line"><span> */</span></span>
<span class="line"><span>@KafkaListener(</span></span>
<span class="line"><span>        id = &quot;biz2-\${spring.kafka.biz2.consumer.group}&quot;,</span></span>
<span class="line"><span>        groupId = &quot;\${spring.kafka.biz2.consumer.group}&quot;,</span></span>
<span class="line"><span>        //消费指定分区</span></span>
<span class="line"><span>        topicPartitions = {</span></span>
<span class="line"><span>                @TopicPartition(topic = &quot;\${spring.kafka.biz2.topic}&quot;, partitions = &quot;\${spring.kafka.biz2.consumer.partitions}&quot;)</span></span>
<span class="line"><span>        })</span></span>
<span class="line"><span>public void biz2Consumer(List&lt;Message&gt; messages, Acknowledgment ack) {</span></span>
<span class="line"><span>    log.info(&quot;[biz2Consumer] RECV MSG COUNT: {}&quot;, messages.size());</span></span>
<span class="line"><span>    log.info(&quot;[biz2Consumer] RECV MSG[0]: {}&quot;, messages.get(0));</span></span>
<span class="line"><span>    //确认单当前消息（及之前的消息）offset均已被消费完成</span></span>
<span class="line"><span>    ack.acknowledge();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令"><span>常用命令</span></a></h2><h2 id="生产" tabindex="-1"><a class="header-anchor" href="#生产"><span>生产</span></a></h2><h2 id="消费" tabindex="-1"><a class="header-anchor" href="#消费"><span>消费</span></a></h2><h3 id="多线程消费" tabindex="-1"><a class="header-anchor" href="#多线程消费"><span>多线程消费</span></a></h3><p>Kafka自身并没有多线程消费的模式，可采用如rocketmq的方式进行消费</p><p>每次批量消费消息，采用工作线程池来对消息进行消费</p><h2 id="spingboot初始化分析" tabindex="-1"><a class="header-anchor" href="#spingboot初始化分析"><span>spingboot初始化分析</span></a></h2><h3 id="kafkabootstrapconfiguration" tabindex="-1"><a class="header-anchor" href="#kafkabootstrapconfiguration"><span>KafkaBootstrapConfiguration</span></a></h3><h3 id="kafkalistenerannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#kafkalistenerannotationbeanpostprocessor"><span>KafkaListenerAnnotationBeanPostProcessor</span></a></h3><ul><li>获取被@KafkaListener注解的类或方法</li><li>获取KafkaListenerContainerFactory</li><li>afterSingletonsInstantiated注册监听器容器 <ul><li>KafkaListenerEndpointRegistrar</li><li>KafkaListenerEndpointRegistry # registerListenerContainer</li></ul></li><li>finishRefresh触发生命周期方法启动监听器容器 <ul><li>KafkaListenerEndpointRegistry # start</li></ul></li></ul><h3 id="concurrentmessagelistenercontainer-abstractmessagelistenercontainer" tabindex="-1"><a class="header-anchor" href="#concurrentmessagelistenercontainer-abstractmessagelistenercontainer"><span>ConcurrentMessageListenerContainer#AbstractMessageListenerContainer</span></a></h3><ul><li>start</li></ul><h3 id="kafkamessagelistenercontainer-listenerconsumer" tabindex="-1"><a class="header-anchor" href="#kafkamessagelistenercontainer-listenerconsumer"><span>kafkaMessageListenerContainer#ListenerConsumer</span></a></h3><h4 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>run</span></a></h4><ul><li>initAssignedPartitions</li><li>pollAndInvoke()</li><li>doPull</li><li>pollConsumer</li></ul><h3 id="kafkaconsumer" tabindex="-1"><a class="header-anchor" href="#kafkaconsumer"><span>kafkaConsumer</span></a></h3><ul><li>poll</li></ul><h3 id="consumercoordinator" tabindex="-1"><a class="header-anchor" href="#consumercoordinator"><span>ConsumerCoordinator</span></a></h3><p>用于分区的分配</p><ul><li>ensureActiveGroup</li><li>joinGroupIfNeeded</li><li>onJoinComplete</li><li>invokePartitionsAssigned</li></ul>`,25);function m(b,k){const a=o("ExternalLinkIcon");return i(),r("div",null,[t,s("p",null,[s("a",d,[l("参考"),e(a)])]),y,s("p",null,[s("a",u,[l("参考"),e(a)])]),v])}const F=p(c,[["render",m],["__file","kafka.html.vue"]]),h=JSON.parse('{"path":"/note/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka.html","title":"kafka","lang":"zh-CN","frontmatter":{"description":"kafka 使用 注意事项 @KafkaListener注解只能循环拉取数据，即使前一次拉取的数据未确认，下一次也不会拉取未确认的数据，会顺序拉取数据，只有重启后才会从偏移处offset拉取消息 自动提交和手动提交 参考 kafka api 如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"kafka"}],["meta",{"property":"og:description","content":"kafka 使用 注意事项 @KafkaListener注解只能循环拉取数据，即使前一次拉取的数据未确认，下一次也不会拉取未确认的数据，会顺序拉取数据，只有重启后才会从偏移处offset拉取消息 自动提交和手动提交 参考 kafka api 如果enable.auto.commit为true，则表示自动提交，但不会在拉取数据之后立即提交。在一次poll..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-07T01:21:15.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-09-07T01:21:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"kafka\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-09-07T01:21:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"自动提交和手动提交","slug":"自动提交和手动提交","link":"#自动提交和手动提交","children":[]},{"level":3,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":3,"title":"配置","slug":"配置","link":"#配置","children":[]},{"level":3,"title":"样例","slug":"样例","link":"#样例","children":[]}]},{"level":2,"title":"常用命令","slug":"常用命令","link":"#常用命令","children":[]},{"level":2,"title":"生产","slug":"生产","link":"#生产","children":[]},{"level":2,"title":"消费","slug":"消费","link":"#消费","children":[{"level":3,"title":"多线程消费","slug":"多线程消费","link":"#多线程消费","children":[]}]},{"level":2,"title":"spingboot初始化分析","slug":"spingboot初始化分析","link":"#spingboot初始化分析","children":[{"level":3,"title":"KafkaBootstrapConfiguration","slug":"kafkabootstrapconfiguration","link":"#kafkabootstrapconfiguration","children":[]},{"level":3,"title":"KafkaListenerAnnotationBeanPostProcessor","slug":"kafkalistenerannotationbeanpostprocessor","link":"#kafkalistenerannotationbeanpostprocessor","children":[]},{"level":3,"title":"ConcurrentMessageListenerContainer#AbstractMessageListenerContainer","slug":"concurrentmessagelistenercontainer-abstractmessagelistenercontainer","link":"#concurrentmessagelistenercontainer-abstractmessagelistenercontainer","children":[]},{"level":3,"title":"kafkaMessageListenerContainer#ListenerConsumer","slug":"kafkamessagelistenercontainer-listenerconsumer","link":"#kafkamessagelistenercontainer-listenerconsumer","children":[]},{"level":3,"title":"kafkaConsumer","slug":"kafkaconsumer","link":"#kafkaconsumer","children":[]},{"level":3,"title":"ConsumerCoordinator","slug":"consumercoordinator","link":"#consumercoordinator","children":[]}]}],"git":{"createdTime":1677684887000,"updatedTime":1694049675000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":6}]},"readingTime":{"minutes":9.92,"words":2976},"filePathRelative":"note/中间件/kafka.md","localizedDate":"2023年3月1日","excerpt":"\\n<h2>使用</h2>\\n<h3>注意事项</h3>\\n<ul>\\n<li>@KafkaListener注解只能循环拉取数据，即使前一次拉取的数据未确认，下一次也不会拉取未确认的数据，会顺序拉取数据，只有重启后才会从偏移处offset拉取消息</li>\\n</ul>\\n<h3>自动提交和手动提交</h3>\\n<p><a href=\\"https://blog.csdn.net/weixin_43767015/article/details/122005747\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考</a></p>\\n<blockquote>\\n<p>kafka api</p>\\n</blockquote>","autoDesc":true}');export{F as comp,h as data};
