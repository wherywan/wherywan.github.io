import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="lambda" tabindex="-1"><a class="header-anchor" href="#lambda"><span>lambda</span></a></h1><h2 id="lambda表达式" tabindex="-1"><a class="header-anchor" href="#lambda表达式"><span>Lambda表达式</span></a></h2><p><code>可以当作参数传递的函数</code>,这是重点和核心</p><blockquote><p>形式:</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>(参数) -&gt; {函数体}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="functionalinterface函数式接口注解" tabindex="-1"><a class="header-anchor" href="#functionalinterface函数式接口注解"><span>@FunctionalInterface函数式接口注解</span></a></h2><p><code>注解的接口中的方法必须唯一</code></p><h2 id="两者关系" tabindex="-1"><a class="header-anchor" href="#两者关系"><span>两者关系</span></a></h2><ul><li>lambda表达式是函数式接口的实例</li><li>函数式接口是lambda表达式的类型</li><li>本质上是对函数式接口中的方法的重写，即调用函数式接口的方法，就是执行lambda表达式</li></ul><h2 id="function" tabindex="-1"><a class="header-anchor" href="#function"><span>Function</span></a></h2><p>自定义函数式接口使用Function</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">FunctionalInterface</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Function</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">, </span><span style="color:#267F99;">R</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Applies this function to the given argument.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> t</span><span style="color:#008000;"> the function argument</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> the function result</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#267F99;">    R</span><span style="color:#795E26;"> apply</span><span style="color:#000000;">(</span><span style="color:#267F99;">T</span><span style="color:#001080;"> t</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Returns a composed function that first applies the {@code before}</span></span>
<span class="line"><span style="color:#008000;">     * function to its input, and then applies this function to the result.</span></span>
<span class="line"><span style="color:#008000;">     * If evaluation of either function throws an exception, it is relayed to</span></span>
<span class="line"><span style="color:#008000;">     * the caller of the composed function.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> &lt;V&gt;</span><span style="color:#008000;"> the type of input to the {@code before} function, and to the</span></span>
<span class="line"><span style="color:#008000;">     *           composed function</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> before</span><span style="color:#008000;"> the function to apply before this function is applied</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> a composed function that first applies the {@code before}</span></span>
<span class="line"><span style="color:#008000;">     * function and then applies this function</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@throws</span><span style="color:#267F99;"> NullPointerException</span><span style="color:#008000;"> if before is null</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@see</span><span style="color:#008000;"> #andThen(Function)</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    default</span><span style="color:#000000;"> &lt;</span><span style="color:#267F99;">V</span><span style="color:#000000;">&gt; </span><span style="color:#267F99;">Function</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">V</span><span style="color:#000000;">, </span><span style="color:#267F99;">R</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">compose</span><span style="color:#000000;">(</span><span style="color:#267F99;">Function</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> super</span><span style="color:#267F99;"> V</span><span style="color:#000000;">, </span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> T</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">before</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        Objects</span><span style="color:#000000;">.</span><span style="color:#795E26;">requireNonNull</span><span style="color:#000000;">(before);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (</span><span style="color:#267F99;">V</span><span style="color:#000000;"> v) </span><span style="color:#0000FF;">-&gt;</span><span style="color:#795E26;"> apply</span><span style="color:#000000;">(</span><span style="color:#001080;">before</span><span style="color:#000000;">.</span><span style="color:#795E26;">apply</span><span style="color:#000000;">(v));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Returns a composed function that first applies this function to</span></span>
<span class="line"><span style="color:#008000;">     * its input, and then applies the {@code after} function to the result.</span></span>
<span class="line"><span style="color:#008000;">     * If evaluation of either function throws an exception, it is relayed to</span></span>
<span class="line"><span style="color:#008000;">     * the caller of the composed function.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> &lt;V&gt;</span><span style="color:#008000;"> the type of output of the {@code after} function, and of the</span></span>
<span class="line"><span style="color:#008000;">     *           composed function</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> after</span><span style="color:#008000;"> the function to apply after this function is applied</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> a composed function that first applies this function and then</span></span>
<span class="line"><span style="color:#008000;">     * applies the {@code after} function</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@throws</span><span style="color:#267F99;"> NullPointerException</span><span style="color:#008000;"> if after is null</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@see</span><span style="color:#008000;"> #compose(Function)</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    default</span><span style="color:#000000;"> &lt;</span><span style="color:#267F99;">V</span><span style="color:#000000;">&gt; </span><span style="color:#267F99;">Function</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">, </span><span style="color:#267F99;">V</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">andThen</span><span style="color:#000000;">(</span><span style="color:#267F99;">Function</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> super</span><span style="color:#267F99;"> R</span><span style="color:#000000;">, </span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> V</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">after</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        Objects</span><span style="color:#000000;">.</span><span style="color:#795E26;">requireNonNull</span><span style="color:#000000;">(after);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (</span><span style="color:#267F99;">T</span><span style="color:#000000;"> t) </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> after</span><span style="color:#000000;">.</span><span style="color:#795E26;">apply</span><span style="color:#000000;">(</span><span style="color:#795E26;">apply</span><span style="color:#000000;">(t));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Returns a function that always returns its input argument.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> &lt;T&gt;</span><span style="color:#008000;"> the type of the input and output objects to the function</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> a function that always returns its input argument</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    static</span><span style="color:#000000;"> &lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#267F99;">Function</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">, </span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">identity</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> t </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> t;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="consumer" tabindex="-1"><a class="header-anchor" href="#consumer"><span>Consumer</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">FunctionalInterface</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Consumer</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Performs this operation on the given argument.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> t</span><span style="color:#008000;"> the input argument</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#267F99;">    void</span><span style="color:#795E26;"> accept</span><span style="color:#000000;">(</span><span style="color:#267F99;">T</span><span style="color:#001080;"> t</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Returns a composed {@code Consumer} that performs, in sequence, this</span></span>
<span class="line"><span style="color:#008000;">     * operation followed by the {@code after} operation. If performing either</span></span>
<span class="line"><span style="color:#008000;">     * operation throws an exception, it is relayed to the caller of the</span></span>
<span class="line"><span style="color:#008000;">     * composed operation.  If performing this operation throws an exception,</span></span>
<span class="line"><span style="color:#008000;">     * the {@code after} operation will not be performed.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@param</span><span style="color:#001080;"> after</span><span style="color:#008000;"> the operation to perform after this operation</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> a composed {@code Consumer} that performs in sequence this</span></span>
<span class="line"><span style="color:#008000;">     * operation followed by the {@code after} operation</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@throws</span><span style="color:#267F99;"> NullPointerException</span><span style="color:#008000;"> if {@code after} is null</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    default</span><span style="color:#267F99;"> Consumer</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">andThen</span><span style="color:#000000;">(</span><span style="color:#267F99;">Consumer</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> super</span><span style="color:#267F99;"> T</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">after</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        Objects</span><span style="color:#000000;">.</span><span style="color:#795E26;">requireNonNull</span><span style="color:#000000;">(after);</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (</span><span style="color:#267F99;">T</span><span style="color:#000000;"> t) </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> { </span><span style="color:#795E26;">accept</span><span style="color:#000000;">(t); </span><span style="color:#001080;">after</span><span style="color:#000000;">.</span><span style="color:#795E26;">accept</span><span style="color:#000000;">(t); };</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="supplier" tabindex="-1"><a class="header-anchor" href="#supplier"><span>supplier</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">FunctionalInterface</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Supplier</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * Gets a result.</span></span>
<span class="line"><span style="color:#008000;">     *</span></span>
<span class="line"><span style="color:#008000;">     * </span><span style="color:#0000FF;">@return</span><span style="color:#008000;"> a result</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#267F99;">    T</span><span style="color:#795E26;"> get</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lambda对象的类对象" tabindex="-1"><a class="header-anchor" href="#lambda对象的类对象"><span>lambda对象的类对象</span></a></h2><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">FunctionalInterface</span></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> MyFunctionInterface</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">,</span><span style="color:#267F99;">R</span><span style="color:#000000;">&gt; </span><span style="color:#0000FF;">extends</span><span style="color:#267F99;"> Serializable</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#267F99;">    R</span><span style="color:#795E26;"> execute</span><span style="color:#000000;">(</span><span style="color:#267F99;">T</span><span style="color:#001080;"> t</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MyClass</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> Serializable</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // 获取 SerializedLambda 并打印实现的方法名</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> printLambdaMethodName</span><span style="color:#000000;">() </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> Exception</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#267F99;">        MyFunctionInterface</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Student</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">func</span><span style="color:#000000;"> = t</span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> StringUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">split</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;FD,FD&quot;</span><span style="color:#000000;">,</span><span style="color:#A31515;">&quot;,&quot;</span><span style="color:#000000;">)[</span><span style="color:#098658;">0</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#267F99;">        Method</span><span style="color:#001080;"> method</span><span style="color:#000000;"> = </span><span style="color:#001080;">func</span><span style="color:#000000;">.</span><span style="color:#795E26;">getClass</span><span style="color:#000000;">().</span><span style="color:#795E26;">getDeclaredMethod</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;writeReplace&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">        method</span><span style="color:#000000;">.</span><span style="color:#795E26;">setAccessible</span><span style="color:#000000;">(</span><span style="color:#0000FF;">true</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#267F99;">        Object</span><span style="color:#001080;"> writeReplaceMethodResult</span><span style="color:#000000;"> = </span><span style="color:#001080;">method</span><span style="color:#000000;">.</span><span style="color:#795E26;">invoke</span><span style="color:#000000;">(func);</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (writeReplaceMethodResult </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> SerializedLambda) {</span></span>
<span class="line"><span style="color:#267F99;">            SerializedLambda</span><span style="color:#001080;"> serializedLambda</span><span style="color:#000000;"> = (SerializedLambda) writeReplaceMethodResult;</span></span>
<span class="line"><span style="color:#267F99;">            String</span><span style="color:#001080;"> implMethodName</span><span style="color:#000000;"> = </span><span style="color:#001080;">serializedLambda</span><span style="color:#000000;">.</span><span style="color:#795E26;">getImplMethodName</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">            System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Lambda 实现的方法名称: &quot;</span><span style="color:#000000;"> + implMethodName);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> main</span><span style="color:#000000;">(</span><span style="color:#267F99;">String</span><span style="color:#000000;">[] </span><span style="color:#001080;">args</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> Exception</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#267F99;">        MyClass</span><span style="color:#001080;"> myClass</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> MyClass</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">        myClass</span><span style="color:#000000;">.</span><span style="color:#795E26;">printLambdaMethodName</span><span style="color:#000000;">();  </span><span style="color:#008000;">// 这将打印出 lambda 实现的方法名</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function t(c,i){return n(),a("div",null,o)}const y=s(e,[["render",t],["__file","lambda.html.vue"]]),u=JSON.parse('{"path":"/note/java/lambda.html","title":"lambda","lang":"zh-CN","frontmatter":{"description":"lambda Lambda表达式 可以当作参数传递的函数,这是重点和核心 形式: @FunctionalInterface函数式接口注解 注解的接口中的方法必须唯一 两者关系 lambda表达式是函数式接口的实例 函数式接口是lambda表达式的类型 本质上是对函数式接口中的方法的重写，即调用函数式接口的方法，就是执行lambda表达式 Functio...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/java/lambda.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"lambda"}],["meta",{"property":"og:description","content":"lambda Lambda表达式 可以当作参数传递的函数,这是重点和核心 形式: @FunctionalInterface函数式接口注解 注解的接口中的方法必须唯一 两者关系 lambda表达式是函数式接口的实例 函数式接口是lambda表达式的类型 本质上是对函数式接口中的方法的重写，即调用函数式接口的方法，就是执行lambda表达式 Functio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-26T03:13:18.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2024-12-26T03:13:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lambda\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-26T03:13:18.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"Lambda表达式","slug":"lambda表达式","link":"#lambda表达式","children":[]},{"level":2,"title":"@FunctionalInterface函数式接口注解","slug":"functionalinterface函数式接口注解","link":"#functionalinterface函数式接口注解","children":[]},{"level":2,"title":"两者关系","slug":"两者关系","link":"#两者关系","children":[]},{"level":2,"title":"Function","slug":"function","link":"#function","children":[{"level":3,"title":"Consumer","slug":"consumer","link":"#consumer","children":[]},{"level":3,"title":"supplier","slug":"supplier","link":"#supplier","children":[]}]},{"level":2,"title":"lambda对象的类对象","slug":"lambda对象的类对象","link":"#lambda对象的类对象","children":[]}],"git":{"createdTime":1661324443000,"updatedTime":1735182798000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":2},{"name":"wanhongji","email":"wheywan@163.com","commits":1}]},"readingTime":{"minutes":2.27,"words":681},"filePathRelative":"note/java/lambda.md","localizedDate":"2022年8月24日","excerpt":"\\n<h2>Lambda表达式</h2>\\n<p><code>可以当作参数传递的函数</code>,这是重点和核心</p>\\n<blockquote>\\n<p>形式:</p>\\n</blockquote>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span>(参数) -&gt; {函数体}</span></span>\\n<span class=\\"line\\"><span></span></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{y as comp,u as data};
