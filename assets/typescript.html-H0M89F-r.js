import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="ts" tabindex="-1"><a class="header-anchor" href="#ts"><span>ts</span></a></h1><p>它是javascript的拓展，使用声明文件和ts文件来描述，最终会将ts编译为js，其中声明文件用于语义检查,ts和js是核心,d.ts文件是ts的结构</p><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><ul><li>以 变量名 ：类型 定义变量</li><li>以 变量名 ：类型 = &#39;test&#39; 定义变量并赋值</li><li>以？表示变量是否可选</li><li>结合箭头函数</li></ul><blockquote><p>样例</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> type</span><span style="color:#267F99;"> BuildCommand</span><span style="color:#000000;"> = (</span><span style="color:#001080;">sourceDir</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">commandOptions</span><span style="color:#000000;">?: </span><span style="color:#267F99;">BuildCommandOptions</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#267F99;"> Promise</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">void</span><span style="color:#000000;">&gt;;</span></span>
<span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * CLI options of \`build\` command</span></span>
<span class="line"><span style="color:#008000;"> */</span></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> BuildCommandOptions</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    dest</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    temp</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    cache</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    debug</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    config</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    cleanTemp</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">    cleanCache</span><span style="color:#000000;">?: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> const</span><span style="color:#795E26;"> createBuild</span><span style="color:#000000;">: (</span><span style="color:#001080;">defaultAppConfig</span><span style="color:#000000;">: </span><span style="color:#267F99;">Partial</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">AppConfig</span><span style="color:#000000;">&gt;) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#267F99;"> BuildCommand</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> * Type of \`dev\` command function</span></span>
<span class="line"><span style="color:#008000;"> */</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> type</span><span style="color:#267F99;"> DevCommand</span><span style="color:#000000;"> = (</span><span style="color:#001080;">sourceDir</span><span style="color:#000000;">?: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">commandOptions</span><span style="color:#000000;">?: </span><span style="color:#267F99;">DevCommandOptions</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#267F99;"> Promise</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">void</span><span style="color:#000000;">&gt;;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数的类型" tabindex="-1"><a class="header-anchor" href="#函数的类型"><span>函数的类型</span></a></h2><p>函数声明（Function Declaration）和函数表达式（Function Expression）</p><blockquote><p>用接口定义函数的类型</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> SearchFunc</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    (</span><span style="color:#001080;">source</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">subString</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">): </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> mySearch</span><span style="color:#000000;">: </span><span style="color:#267F99;">SearchFunc</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">mySearch</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;">(</span><span style="color:#001080;">source</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">subString</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#001080;"> source</span><span style="color:#000000;">.</span><span style="color:#795E26;">search</span><span style="color:#000000;">(</span><span style="color:#001080;">subString</span><span style="color:#000000;">) !== -</span><span style="color:#098658;">1</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参数默认值</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> buildName</span><span style="color:#000000;">(</span><span style="color:#001080;">firstName</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">lastName</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&#39;Cat&#39;</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#001080;"> firstName</span><span style="color:#000000;"> + </span><span style="color:#A31515;">&#39; &#39;</span><span style="color:#000000;"> + </span><span style="color:#001080;">lastName</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> tomcat</span><span style="color:#000000;"> = </span><span style="color:#795E26;">buildName</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Tom&#39;</span><span style="color:#000000;">, </span><span style="color:#A31515;">&#39;Cat&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> tom</span><span style="color:#000000;"> = </span><span style="color:#795E26;">buildName</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Tom&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与或运算符" tabindex="-1"><a class="header-anchor" href="#与或运算符"><span>与或运算符</span></a></h2><blockquote><p>&amp;</p></blockquote><p>取交集</p><blockquote><p>|</p></blockquote><p>取并集</p><h2 id="断言" tabindex="-1"><a class="header-anchor" href="#断言"><span>断言</span></a></h2><p>一般使用： 值 as 类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> Cat</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">    run</span><span style="color:#000000;">(): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> Fish</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">    swim</span><span style="color:#000000;">(): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> isFish</span><span style="color:#000000;">(</span><span style="color:#001080;">animal</span><span style="color:#000000;">: </span><span style="color:#267F99;">Cat</span><span style="color:#000000;"> | </span><span style="color:#267F99;">Fish</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">typeof</span><span style="color:#000000;"> (</span><span style="color:#001080;">animal</span><span style="color:#AF00DB;"> as</span><span style="color:#267F99;"> Fish</span><span style="color:#000000;">).</span><span style="color:#001080;">swim</span><span style="color:#000000;"> === </span><span style="color:#A31515;">&#39;function&#39;</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#0000FF;"> true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#0000FF;"> false</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> ApiError</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> Error</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    code</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> HttpError</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> Error</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    statusCode</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> isApiError</span><span style="color:#000000;">(</span><span style="color:#001080;">error</span><span style="color:#000000;">: </span><span style="color:#267F99;">Error</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">typeof</span><span style="color:#000000;"> (</span><span style="color:#001080;">error</span><span style="color:#AF00DB;"> as</span><span style="color:#267F99;"> ApiError</span><span style="color:#000000;">).</span><span style="color:#001080;">code</span><span style="color:#000000;"> === </span><span style="color:#A31515;">&#39;number&#39;</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#0000FF;"> true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#0000FF;"> false</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>类型断言 vs 泛型</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>function getCacheData(key: string): any {</span></span>
<span class="line"><span>    return (window as any).cache[key];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>interface Cat {</span></span>
<span class="line"><span>    name: string;</span></span>
<span class="line"><span>    run(): void;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const tom = getCacheData(&#39;tom&#39;) as Cat;</span></span>
<span class="line"><span>tom.run();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>function getCacheData&lt;T&gt;(key: string): T {</span></span>
<span class="line"><span>    return (window as any).cache[key];</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>interface Cat {</span></span>
<span class="line"><span>    name: string;</span></span>
<span class="line"><span>    run(): void;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const tom = getCacheData&lt;Cat&gt;(&#39;tom&#39;);</span></span>
<span class="line"><span>tom.run();</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="声明文件" tabindex="-1"><a class="header-anchor" href="#声明文件"><span>声明文件</span></a></h2><blockquote><p>什么是声明语句</p></blockquote><p>假如我们想使用第三方库 jQuery，一种常见的方式是在 html 中通过 script 标签引入 jQuery，然后就可以使用全局变量 $ 或 jQuery 了。</p><p>我们通常这样获取一个 id 是 foo 的元素：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">$</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;#foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// or</span></span>
<span class="line"><span style="color:#795E26;">jQuery</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;#foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是在 ts 中，编译器并不知道 $ 或 jQuery 是什么东西：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">jQuery</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;#foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// ERROR: Cannot find name &#39;jQuery&#39;.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这时，我们需要使用 declare var 来定义它的类型2：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> var</span><span style="color:#795E26;"> jQuery</span><span style="color:#000000;">: (</span><span style="color:#001080;">selector</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">) </span><span style="color:#0000FF;">=&gt;</span><span style="color:#267F99;"> any</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">jQuery</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;#foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中，declare var 并没有真的定义一个变量，只是定义了全局变量 jQuery 的类型，仅仅会用于编译时的检查，在编译结果中会被删除</p><blockquote><p>什么是声明文件</p></blockquote><p>通常我们会把声明语句放到一个单独的文件（jQuery.d.ts）中</p><p>声明文件必需以 .d.ts 为后缀。</p><h2 id="书写声明文件" tabindex="-1"><a class="header-anchor" href="#书写声明文件"><span>书写声明文件</span></a></h2><h3 id="全局变量" tabindex="-1"><a class="header-anchor" href="#全局变量"><span>全局变量</span></a></h3><p>全局变量是最简单的一种场景，之前举的例子就是通过 script 标签引入 jQuery，注入全局变量 $ 和 jQuery。</p><ul><li>declare var 声明全局变量</li><li>declare function 声明全局方法</li><li>declare class 声明全局类</li><li>declare enum 声明全局枚举类型</li><li>declare namespace 声明（含有子属性的）全局对象</li><li>interface 和 type 声明全局类型</li><li>declare type sds = 箭头函数</li><li></li></ul><blockquote><p>在type自定义对象类型或interface类型中，使用构造签名类型和原型属性</p></blockquote><p>构造签名类型（Constructor Signature Type）是用于描述构造函数的签名，即构造函数的参数类型和返回类型。 构造签名类型通常出现在接口或类型别名中，用于描述一个构造函数应该具有的结构。</p><ul><li>定义构造签名类型，用于创建实例对象</li></ul><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> SpeechRecognitionResult</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    readonly</span><span style="color:#001080;"> isFinal</span><span style="color:#000000;">: </span><span style="color:#267F99;">boolean</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    readonly</span><span style="color:#001080;"> length</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#795E26;">    item</span><span style="color:#000000;">(</span><span style="color:#001080;">index</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">): </span><span style="color:#267F99;">SpeechRecognitionAlternative</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    [</span><span style="color:#001080;">index</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">]: </span><span style="color:#267F99;">SpeechRecognitionAlternative</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> var</span><span style="color:#001080;"> SpeechRecognitionResult</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#001080;">    prototype</span><span style="color:#000000;">: </span><span style="color:#267F99;">SpeechRecognitionResult</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    new</span><span style="color:#000000;">(): </span><span style="color:#267F99;">SpeechRecognitionResult</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> Test</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    prototype</span><span style="color:#000000;">: </span><span style="color:#267F99;">SpeechRecognitionResult</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    new</span><span style="color:#000000;">(): </span><span style="color:#267F99;">SpeechRecognitionResult</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> var</span><span style="color:#001080;"> SpeechRecognitionResult</span><span style="color:#000000;">: </span><span style="color:#267F99;">Test</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>declare var | const |let</p></blockquote><p>当我们使用 const 定义时，表示此时的全局变量是一个常量，不允许再去修改它的值了</p><blockquote><p>declare function</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// src/jQuery.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> jQuery</span><span style="color:#000000;">(</span><span style="color:#001080;">selector</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">): </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> jQuery</span><span style="color:#000000;">(</span><span style="color:#795E26;">domReadyCallback</span><span style="color:#000000;">: () </span><span style="color:#0000FF;">=&gt;</span><span style="color:#267F99;"> any</span><span style="color:#000000;">): </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">jQuery</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;#foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">jQuery</span><span style="color:#000000;">(</span><span style="color:#0000FF;">function</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#795E26;">    alert</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Dom Ready!&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>declare class</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// src/Animal.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> Animal</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">    sayHi</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> cat</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">new</span><span style="color:#795E26;"> Animal</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;Tom&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>declare namespace</p></blockquote><p>它用来表示全局变量是一个对象，包含很多子属性。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// src/jQuery.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> namespace</span><span style="color:#267F99;"> jQuery</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    function</span><span style="color:#795E26;"> ajax</span><span style="color:#000000;">(</span><span style="color:#001080;">url</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">settings</span><span style="color:#000000;">?: </span><span style="color:#267F99;">any</span><span style="color:#000000;">): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    const</span><span style="color:#0070C1;"> version</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">    class</span><span style="color:#267F99;"> Event</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">        blur</span><span style="color:#000000;">(</span><span style="color:#001080;">eventType</span><span style="color:#000000;">: </span><span style="color:#267F99;">EventType</span><span style="color:#000000;">): </span><span style="color:#267F99;">void</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#0000FF;">    enum</span><span style="color:#267F99;"> EventType</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0070C1;">        CustomClick</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">jQuery</span><span style="color:#000000;">.</span><span style="color:#795E26;">ajax</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/api/get_something&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">console</span><span style="color:#000000;">.</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#001080;">jQuery</span><span style="color:#000000;">.</span><span style="color:#001080;">version</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> e</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">new</span><span style="color:#001080;"> jQuery</span><span style="color:#000000;">.</span><span style="color:#795E26;">Event</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">e</span><span style="color:#000000;">.</span><span style="color:#795E26;">blur</span><span style="color:#000000;">(</span><span style="color:#001080;">jQuery</span><span style="color:#000000;">.</span><span style="color:#001080;">EventType</span><span style="color:#000000;">.</span><span style="color:#001080;">CustomClick</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>防止命名冲突</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> namespace</span><span style="color:#267F99;"> jQuery</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    interface</span><span style="color:#267F99;"> AjaxSettings</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        method</span><span style="color:#000000;">?: </span><span style="color:#A31515;">&#39;GET&#39;</span><span style="color:#000000;"> | </span><span style="color:#A31515;">&#39;POST&#39;</span></span>
<span class="line"><span style="color:#001080;">        data</span><span style="color:#000000;">?: </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#0000FF;">    function</span><span style="color:#795E26;"> ajax</span><span style="color:#000000;">(</span><span style="color:#001080;">url</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">, </span><span style="color:#001080;">settings</span><span style="color:#000000;">?: </span><span style="color:#267F99;">AjaxSettings</span><span style="color:#000000;">): </span><span style="color:#267F99;">void</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> settings</span><span style="color:#000000;">: </span><span style="color:#267F99;">jQuery</span><span style="color:#000000;">.</span><span style="color:#267F99;">AjaxSettings</span><span style="color:#000000;"> = {</span></span>
<span class="line"><span style="color:#001080;">    method:</span><span style="color:#A31515;"> &#39;POST&#39;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#001080;">    data:</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        name:</span><span style="color:#A31515;"> &#39;foo&#39;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"><span style="color:#001080;">jQuery</span><span style="color:#000000;">.</span><span style="color:#795E26;">ajax</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;/api/post_something&#39;</span><span style="color:#000000;">, </span><span style="color:#001080;">settings</span><span style="color:#000000;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="npm包" tabindex="-1"><a class="header-anchor" href="#npm包"><span>npm包</span></a></h3><p>npm 包的声明文件主要有以下几种语法：</p><ul><li>export 导出变量</li><li>export namespace 导出（含有子属性的）对象</li><li>export default ES6 默认导出</li><li>export = commonjs 导出模块</li></ul><blockquote><p>export</p></blockquote><p>npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 declare 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。</p><p>只有在声明文件中使用 export 导出，然后在使用方 import 导入后，才会应用到这些类型声明。</p><p>export 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>// types/foo/index.d.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export const name: string;</span></span>
<span class="line"><span>export function getName(): string;</span></span>
<span class="line"><span>export class Animal {</span></span>
<span class="line"><span>    constructor(name: string);</span></span>
<span class="line"><span>    sayHi(): string;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>export enum Directions {</span></span>
<span class="line"><span>    Up,</span></span>
<span class="line"><span>    Down,</span></span>
<span class="line"><span>    Left,</span></span>
<span class="line"><span>    Right</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>export interface Options {</span></span>
<span class="line"><span>    data: any;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// src/index.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { name, getName, Animal, Directions, Options } from &#39;foo&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(name);</span></span>
<span class="line"><span>let myName = getName();</span></span>
<span class="line"><span>let cat = new Animal(&#39;Tom&#39;);</span></span>
<span class="line"><span>let directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right];</span></span>
<span class="line"><span>let options: Options = {</span></span>
<span class="line"><span>    data: {</span></span>
<span class="line"><span>        name: &#39;foo&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>混用 declare 和 export</p></blockquote><p>我们也可以使用 declare 先声明多个变量，最后再用 export 一次性导出。上例的声明文件可以等价的改写为</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/foo/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> const</span><span style="color:#0070C1;"> name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> getName</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> Animal</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">name</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#795E26;">    sayHi</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> enum</span><span style="color:#267F99;"> Directions</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0070C1;">    Up</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Down</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Left</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Right</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> Options</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">    data</span><span style="color:#000000;">: </span><span style="color:#267F99;">any</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> { </span><span style="color:#001080;">name</span><span style="color:#000000;">, </span><span style="color:#001080;">getName</span><span style="color:#000000;">, </span><span style="color:#001080;">Animal</span><span style="color:#000000;">, </span><span style="color:#001080;">Directions</span><span style="color:#000000;">, </span><span style="color:#001080;">Options</span><span style="color:#000000;"> };</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>export namespace</p></blockquote><p>与 declare namespace 类似，export namespace 用来导出一个拥有子属性的对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>// types/foo/index.d.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export namespace foo {</span></span>
<span class="line"><span>    const name: string;</span></span>
<span class="line"><span>    namespace bar {</span></span>
<span class="line"><span>        function baz(): string;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// src/index.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { foo } from &#39;foo&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(foo.name);</span></span>
<span class="line"><span>foo.bar.baz();</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>export default</p></blockquote><p>在 ES6 模块系统中，使用 export default 可以导出一个默认值，使用方可以用 import foo from &#39;foo&#39; 而不是 import { foo } from &#39;foo&#39; 来导入这个默认值。</p><p>注意，只有 function、class 和 interface 可以直接默认导出，其他的变量需要先定义出来，再默认导出</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/foo/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#AF00DB;"> default</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> foo</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#001080;"> foo</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;foo&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">foo</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// types/foo/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#AF00DB;"> default</span><span style="color:#001080;"> Directions</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> enum</span><span style="color:#267F99;"> Directions</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0070C1;">    Up</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Down</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Left</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0070C1;">    Right</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>export=</p></blockquote><p>在 commonjs 规范中，我们用以下方式来导出一个模块：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// 整体导出</span></span>
<span class="line"><span style="color:#267F99;">module</span><span style="color:#000000;">.</span><span style="color:#267F99;">exports</span><span style="color:#000000;"> = </span><span style="color:#001080;">foo</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#008000;">// 单个导出</span></span>
<span class="line"><span style="color:#267F99;">exports</span><span style="color:#000000;">.</span><span style="color:#001080;">bar</span><span style="color:#000000;"> = </span><span style="color:#001080;">bar</span><span style="color:#000000;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 const ... = require：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// 整体导入</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> foo</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// 单个导入</span></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> bar</span><span style="color:#000000;"> = </span><span style="color:#795E26;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;foo&#39;</span><span style="color:#000000;">).</span><span style="color:#001080;">bar</span><span style="color:#000000;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种方式是 import ... from，注意针对整体导出，需要使用 import * as 来导入：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// 整体导入</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#0000FF;"> *</span><span style="color:#AF00DB;"> as</span><span style="color:#001080;"> foo</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;foo&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#008000;">// 单个导入</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">bar</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#A31515;"> &#39;foo&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三种方式是 import ... require，这也是 ts 官方推荐的方式：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// 整体导入</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#001080;"> foo</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">require</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;foo&#39;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">// 单个导入</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#001080;"> bar</span><span style="color:#000000;"> = </span><span style="color:#267F99;">foo</span><span style="color:#000000;">.</span><span style="color:#001080;">bar</span><span style="color:#000000;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 export = 这种语法了21：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/foo/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> = </span><span style="color:#001080;">foo</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> foo</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> namespace</span><span style="color:#267F99;"> foo</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    const</span><span style="color:#0070C1;"> bar</span><span style="color:#000000;">: </span><span style="color:#267F99;">number</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="umd库" tabindex="-1"><a class="header-anchor" href="#umd库"><span>umd库</span></a></h3><p>既可以通过 script 标签引入，又可以通过 import 导入的库，称为 UMD 库。相比于 npm 包的类型声明文件， 我们需要额外声明一个全局变量，为了实现这种方式，ts 提供了一个新语法 export as namespace。</p><blockquote><p>直接扩展全局变量</p></blockquote><p>有的第三方库扩展了一个全局变量，可是此全局变量的类型却没有相应的更新过来，就会导致 ts 编译错误，此时就需要扩展全局变量的类型。比如扩展 String 类型23：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> String</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">    prependHello</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A31515;">&#39;foo&#39;</span><span style="color:#000000;">.</span><span style="color:#795E26;">prependHello</span><span style="color:#000000;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以使用 declare namespace 给已有的命名空间添加类型声明24：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/jquery-plugin/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> namespace</span><span style="color:#267F99;"> JQuery</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    interface</span><span style="color:#267F99;"> CustomOptions</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        bar</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">interface</span><span style="color:#267F99;"> JQueryStatic</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">    foo</span><span style="color:#000000;">(</span><span style="color:#001080;">options</span><span style="color:#000000;">: </span><span style="color:#267F99;">JQuery</span><span style="color:#000000;">.</span><span style="color:#267F99;">CustomOptions</span><span style="color:#000000;">): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">jQuery</span><span style="color:#000000;">.</span><span style="color:#795E26;">foo</span><span style="color:#000000;">({</span></span>
<span class="line"><span style="color:#001080;">    bar:</span><span style="color:#A31515;"> &#39;&#39;</span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在 npm 包或 UMD 库中扩展全局变量</p></blockquote><p>如之前所说，对于一个 npm 包或者 UMD 库的声明文件，只有 export 导出的类型声明才能被导入。所以对于 npm 包或 UMD 库， 如果导入此库之后会扩展全局变量，则需要使用另一种语法在声明文件中扩展全局变量的类型，那就是 declare global。</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/foo/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#001080;"> global</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    interface</span><span style="color:#267F99;"> String</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">        prependHello</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">export</span><span style="color:#000000;"> {};</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A31515;">&#39;bar&#39;</span><span style="color:#000000;">.</span><span style="color:#795E26;">prependHello</span><span style="color:#000000;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意即使此声明文件不需要导出任何东西，仍然需要导出一个空对象，用来告诉编译器这是一个模块的声明文件，而不是一个全局变量的声明文件。</p><h3 id="模块插件" tabindex="-1"><a class="header-anchor" href="#模块插件"><span>模块插件</span></a></h3><p>有时通过 import 导入一个模块插件，可以改变另一个原有模块的结构。此时如果原有模块已经有了类型声明文件，而插件模块没有类型声明文件，就会导致类型不完整，缺少插件部分的类型。</p><p>ts 提供了一个语法 declare module，它可以用来扩展原有模块的类型。</p><blockquote><p>declare module</p></blockquote><p>如果是需要扩展原有模块的话，需要在类型声明文件中先引用原有模块，再使用 declare module 扩展原有模块26：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/moment-plugin/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#0000FF;"> *</span><span style="color:#AF00DB;"> as</span><span style="color:#001080;"> moment</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;moment&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> module</span><span style="color:#A31515;"> &#39;moment&#39;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">    export</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> foo</span><span style="color:#000000;">(): </span><span style="color:#267F99;">moment</span><span style="color:#000000;">.</span><span style="color:#267F99;">CalendarKey</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#0000FF;"> *</span><span style="color:#AF00DB;"> as</span><span style="color:#001080;"> moment</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;moment&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#A31515;"> &#39;moment-plugin&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">moment</span><span style="color:#000000;">.</span><span style="color:#795E26;">foo</span><span style="color:#000000;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>declare module 也可用于在一个文件中一次性声明多个模块的类型</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/foo-bar.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> module</span><span style="color:#A31515;"> &#39;foo&#39;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">    export</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Foo</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        foo</span><span style="color:#000000;">: </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> module</span><span style="color:#A31515;"> &#39;bar&#39;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">    export</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> bar</span><span style="color:#000000;">(): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#000000;"> { </span><span style="color:#001080;">Foo</span><span style="color:#000000;"> } </span><span style="color:#AF00DB;">from</span><span style="color:#A31515;"> &#39;foo&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#0000FF;"> *</span><span style="color:#AF00DB;"> as</span><span style="color:#001080;"> bar</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;bar&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> f</span><span style="color:#000000;">: </span><span style="color:#267F99;">Foo</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">bar</span><span style="color:#000000;">.</span><span style="color:#795E26;">bar</span><span style="color:#000000;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="声明文件中的依赖" tabindex="-1"><a class="header-anchor" href="#声明文件中的依赖"><span>声明文件中的依赖</span></a></h3><p>声明文件有时会依赖另一个声明文件中的类型，比如在前面的 declare module 的例子中，我们就在声明文件中导入了 moment，并且使用了 moment.CalendarKey 这个类型：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/moment-plugin/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">import</span><span style="color:#0000FF;"> *</span><span style="color:#AF00DB;"> as</span><span style="color:#001080;"> moment</span><span style="color:#AF00DB;"> from</span><span style="color:#A31515;"> &#39;moment&#39;</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> module</span><span style="color:#A31515;"> &#39;moment&#39;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">    export</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> foo</span><span style="color:#000000;">(): </span><span style="color:#267F99;">moment</span><span style="color:#000000;">.</span><span style="color:#267F99;">CalendarKey</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>三斜线指令</p></blockquote><p>类似于声明文件中的 import，它可以用来导入另一个声明文件。与 import 的区别是，当且仅当在以下几个场景下，我们才需要使用三斜线指令替代 import：</p><ul><li>当我们在书写一个全局变量的声明文件时</li><li>当我们需要依赖一个全局变量的声明文件时</li></ul><blockquote><p>书写一个全局变量的声明文件</p></blockquote><p>这些场景听上去很拗口，但实际上很好理解——在全局变量的声明文件中，是不允许出现 import, export 关键字的。一旦出现了，那么他就会被视为一个 npm 包或 UMD 库，</p><p>就不再是全局变量的声明文件了。故当我们在书写一个全局变量的声明文件时，如果需要引用另一个库的类型，那么就必须用三斜线指令了28：</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">// types/jquery-plugin/index.d.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">/// </span><span style="color:#800000;">&lt;reference</span><span style="color:#E50000;"> types</span><span style="color:#000000;">=</span><span style="color:#A31515;">&quot;jquery&quot;</span><span style="color:#800000;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">declare</span><span style="color:#0000FF;"> function</span><span style="color:#795E26;"> foo</span><span style="color:#000000;">(</span><span style="color:#001080;">options</span><span style="color:#000000;">: </span><span style="color:#267F99;">JQuery</span><span style="color:#000000;">.</span><span style="color:#267F99;">AjaxSettings</span><span style="color:#000000;">): </span><span style="color:#267F99;">string</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#008000;">// src/index.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">foo</span><span style="color:#000000;">({});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>三斜线指令的语法如上，/// 后面使用 xml 的格式添加了对 jquery 类型的依赖，这样就可以在声明文件中使用 JQuery.AjaxSettings 类型了。</p><p>注意，三斜线指令必须放在文件的最顶端，三斜线指令的前面只允许出现单行或多行注释。</p><blockquote><p>依赖一个全局变量的声明文件</p></blockquote><p>在另一个场景下，当我们需要依赖一个全局变量的声明文件时，由于全局变量不支持通过 import 导入，当然也就必须使用三斜线指令来引入了29：</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>// types/node-plugin/index.d.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>/// &lt;reference types=&quot;node&quot; /&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>export function foo(p: NodeJS.Process): string;</span></span>
<span class="line"><span>// src/index.ts</span></span>
<span class="line"><span></span></span>
<span class="line"><span>import { foo } from &#39;node-plugin&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>foo(global.process);</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自动生成声明文件" tabindex="-1"><a class="header-anchor" href="#自动生成声明文件"><span>自动生成声明文件</span></a></h3><p>如果库的源码本身就是由 ts 写的，那么在使用 tsc 脚本将 ts 编译为 js 的时候，添加 declaration 选项，就可以同时也生成 .d.ts 声明文件了。</p><p>我们可以在命令行中添加 --declaration（简写 -d），或者在 tsconfig.json 中添加 declaration 选项。这里以 tsconfig.json 为例：</p><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;compilerOptions&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;module&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;commonjs&quot;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;outDir&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;lib&quot;</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;declaration&quot;</span><span style="color:#000000;">: </span><span style="color:#0000FF;">true</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中我们添加了 outDir 选项，将 ts 文件的编译结果输出到 lib 目录下，然后添加了 declaration 选项，设置为 true，表示将会由 ts 文件自动生成 .d.ts 声明文件，也会输出到 lib 目录下。</p>`,122),o=[p];function i(c,r){return n(),a("div",null,o)}const y=s(e,[["render",i],["__file","typescript.html.vue"]]),v=JSON.parse(`{"path":"/note/%E5%89%8D%E7%AB%AF/typescript.html","title":"ts","lang":"zh-CN","frontmatter":{"description":"ts 它是javascript的拓展，使用声明文件和ts文件来描述，最终会将ts编译为js，其中声明文件用于语义检查,ts和js是核心,d.ts文件是ts的结构 使用 以 变量名 ：类型 定义变量 以 变量名 ：类型 = 'test' 定义变量并赋值 以？表示变量是否可选 结合箭头函数 样例 函数的类型 函数声明（Function Declaratio...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E5%89%8D%E7%AB%AF/typescript.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"ts"}],["meta",{"property":"og:description","content":"ts 它是javascript的拓展，使用声明文件和ts文件来描述，最终会将ts编译为js，其中声明文件用于语义检查,ts和js是核心,d.ts文件是ts的结构 使用 以 变量名 ：类型 定义变量 以 变量名 ：类型 = 'test' 定义变量并赋值 以？表示变量是否可选 结合箭头函数 样例 函数的类型 函数声明（Function Declaratio..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-08T08:56:17.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2024-11-08T08:56:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ts\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-08T08:56:17.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"函数的类型","slug":"函数的类型","link":"#函数的类型","children":[]},{"level":2,"title":"与或运算符","slug":"与或运算符","link":"#与或运算符","children":[]},{"level":2,"title":"断言","slug":"断言","link":"#断言","children":[]},{"level":2,"title":"声明文件","slug":"声明文件","link":"#声明文件","children":[]},{"level":2,"title":"书写声明文件","slug":"书写声明文件","link":"#书写声明文件","children":[{"level":3,"title":"全局变量","slug":"全局变量","link":"#全局变量","children":[]},{"level":3,"title":"npm包","slug":"npm包","link":"#npm包","children":[]},{"level":3,"title":"umd库","slug":"umd库","link":"#umd库","children":[]},{"level":3,"title":"模块插件","slug":"模块插件","link":"#模块插件","children":[]},{"level":3,"title":"声明文件中的依赖","slug":"声明文件中的依赖","link":"#声明文件中的依赖","children":[]},{"level":3,"title":"自动生成声明文件","slug":"自动生成声明文件","link":"#自动生成声明文件","children":[]}]}],"git":{"createdTime":1662121340000,"updatedTime":1731056177000,"contributors":[{"name":"wanhongji","email":"wan_hongji@163.com","commits":3},{"name":"wanhongji","email":"wherywan@163.com","commits":2},{"name":"wanhongji","email":"wheywan@163.com","commits":1}]},"readingTime":{"minutes":9.99,"words":2998},"filePathRelative":"note/前端/typescript.md","localizedDate":"2022年9月2日","excerpt":"\\n<p>它是javascript的拓展，使用声明文件和ts文件来描述，最终会将ts编译为js，其中声明文件用于语义检查,ts和js是核心,d.ts文件是ts的结构</p>\\n<h2>使用</h2>\\n<ul>\\n<li>以 变量名 ：类型 定义变量</li>\\n<li>以 变量名 ：类型 = 'test' 定义变量并赋值</li>\\n<li>以？表示变量是否可选</li>\\n<li>结合箭头函数</li>\\n</ul>\\n<blockquote>\\n<p>样例</p>\\n</blockquote>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#0000FF\\">declare</span><span style=\\"color:#0000FF\\"> type</span><span style=\\"color:#267F99\\"> BuildCommand</span><span style=\\"color:#000000\\"> = (</span><span style=\\"color:#001080\\">sourceDir</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">, </span><span style=\\"color:#001080\\">commandOptions</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">BuildCommandOptions</span><span style=\\"color:#000000\\">) </span><span style=\\"color:#0000FF\\">=&gt;</span><span style=\\"color:#267F99\\"> Promise</span><span style=\\"color:#000000\\">&lt;</span><span style=\\"color:#267F99\\">void</span><span style=\\"color:#000000\\">&gt;;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\"> * CLI options of \`build\` command</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">interface</span><span style=\\"color:#267F99\\"> BuildCommandOptions</span><span style=\\"color:#000000\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    dest</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    temp</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    cache</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    debug</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">boolean</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    config</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    cleanTemp</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">boolean</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    cleanCache</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">boolean</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#000000\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">declare</span><span style=\\"color:#0000FF\\"> const</span><span style=\\"color:#795E26\\"> createBuild</span><span style=\\"color:#000000\\">: (</span><span style=\\"color:#001080\\">defaultAppConfig</span><span style=\\"color:#000000\\">: </span><span style=\\"color:#267F99\\">Partial</span><span style=\\"color:#000000\\">&lt;</span><span style=\\"color:#267F99\\">AppConfig</span><span style=\\"color:#000000\\">&gt;) </span><span style=\\"color:#0000FF\\">=&gt;</span><span style=\\"color:#267F99\\"> BuildCommand</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">/**</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\"> * Type of \`dev\` command function</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\"> */</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">declare</span><span style=\\"color:#0000FF\\"> type</span><span style=\\"color:#267F99\\"> DevCommand</span><span style=\\"color:#000000\\"> = (</span><span style=\\"color:#001080\\">sourceDir</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">string</span><span style=\\"color:#000000\\">, </span><span style=\\"color:#001080\\">commandOptions</span><span style=\\"color:#000000\\">?: </span><span style=\\"color:#267F99\\">DevCommandOptions</span><span style=\\"color:#000000\\">) </span><span style=\\"color:#0000FF\\">=&gt;</span><span style=\\"color:#267F99\\"> Promise</span><span style=\\"color:#000000\\">&lt;</span><span style=\\"color:#267F99\\">void</span><span style=\\"color:#000000\\">&gt;;</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{y as comp,v as data};
