import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as t,e as a}from"./app-hoN0JGLf.js";const s={},i=a(`<h1 id="executors" tabindex="-1"><a class="header-anchor" href="#executors"><span>Executors</span></a></h1><h2 id="newsinglethreadscheduledexecutor方法" tabindex="-1"><a class="header-anchor" href="#newsinglethreadscheduledexecutor方法"><span>newSingleThreadScheduledExecutor方法</span></a></h2><p>创建单线程调度器</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(r -&gt; {</span></span>
<span class="line"><span>        Thread t = new Thread(r);</span></span>
<span class="line"><span>        t.setName(&quot;timer-&quot; + t.getId());</span></span>
<span class="line"><span>        return t;</span></span>
<span class="line"><span>    });</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>固定延时调度</p></blockquote><ul><li>每次执行结束到开始的间隔固定不变</li><li>假设执行时间1秒，延时5秒执行一次，第3秒开始执行，第4秒执行完毕，下一次9秒开始执行</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span> scheduledExecutorService.scheduleWithFixedDelay(this::removeTimeoutFuture,</span></span>
<span class="line"><span>                timeoutSec, timeoutSec, TimeUnit.MILLISECONDS);</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>固定频率调度</p></blockquote><ul><li>每隔一定频率执行一次</li><li>假设执行时间1秒，频率5秒执行一次，第3秒开始执行，下一次8秒开始执行</li></ul>`,9),l=[i];function r(c,d){return n(),t("div",null,l)}const u=e(s,[["render",r],["__file","Executors.html.vue"]]),h=JSON.parse('{"path":"/note/java/Executors.html","title":"Executors","lang":"zh-CN","frontmatter":{"description":"Executors newSingleThreadScheduledExecutor方法 创建单线程调度器 固定延时调度 每次执行结束到开始的间隔固定不变 假设执行时间1秒，延时5秒执行一次，第3秒开始执行，第4秒执行完毕，下一次9秒开始执行 固定频率调度 每隔一定频率执行一次 假设执行时间1秒，频率5秒执行一次，第3秒开始执行，下一次8秒开始执行","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/java/Executors.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"Executors"}],["meta",{"property":"og:description","content":"Executors newSingleThreadScheduledExecutor方法 创建单线程调度器 固定延时调度 每次执行结束到开始的间隔固定不变 假设执行时间1秒，延时5秒执行一次，第3秒开始执行，第4秒执行完毕，下一次9秒开始执行 固定频率调度 每隔一定频率执行一次 假设执行时间1秒，频率5秒执行一次，第3秒开始执行，下一次8秒开始执行"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-04T18:01:29.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-04-04T18:01:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Executors\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-04-04T18:01:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"newSingleThreadScheduledExecutor方法","slug":"newsinglethreadscheduledexecutor方法","link":"#newsinglethreadscheduledexecutor方法","children":[]}],"git":{"createdTime":1680631289000,"updatedTime":1680631289000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":1}]},"readingTime":{"minutes":0.48,"words":145},"filePathRelative":"note/java/Executors.md","localizedDate":"2023年4月4日","excerpt":"\\n<h2>newSingleThreadScheduledExecutor方法</h2>\\n<p>创建单线程调度器</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\" data-title=\\"text\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span>private final ScheduledExecutorService scheduledExecutorService = Executors.newSingleThreadScheduledExecutor(r -&gt; {</span></span>\\n<span class=\\"line\\"><span>        Thread t = new Thread(r);</span></span>\\n<span class=\\"line\\"><span>        t.setName(\\"timer-\\" + t.getId());</span></span>\\n<span class=\\"line\\"><span>        return t;</span></span>\\n<span class=\\"line\\"><span>    });</span></span>\\n<span class=\\"line\\"><span></span></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{u as comp,h as data};
