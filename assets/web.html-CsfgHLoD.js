import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as p,c as t,a as s,b as a,d as e,e as n}from"./app-hoN0JGLf.js";const r={},c=n('<h1 id="web" tabindex="-1"><a class="header-anchor" href="#web"><span>web</span></a></h1><ul><li>gin</li><li>gorm</li><li>beego</li><li>bee</li><li>微服务go-micro</li><li>grpc</li><li>consul</li></ul><h2 id="env相关" tabindex="-1"><a class="header-anchor" href="#env相关"><span>env相关</span></a></h2><h3 id="goroot" tabindex="-1"><a class="header-anchor" href="#goroot"><span>GOROOT</span></a></h3><p>go程序运行所需的文件及公共依赖</p><h3 id="gopath" tabindex="-1"><a class="header-anchor" href="#gopath"><span>GOPATH</span></a></h3>',6),d={href:"https://blog.csdn.net/weixin_42322206/article/details/128341595",target:"_blank",rel:"noopener noreferrer"},u=n('<blockquote><p>go目录1</p></blockquote><ul><li>类似于一个工作目录，一般包含bin、pkg、src目录</li><li>在src目录下加入项目1、项目2、项目3</li></ul><blockquote><p>go目录2</p></blockquote><ul><li>直接将项目目录作为一个添加到GOPATH中</li><li>包含bin、pkg、src目录</li></ul><h3 id="module模块" tabindex="-1"><a class="header-anchor" href="#module模块"><span>module模块</span></a></h3><ul><li>文件夹下需添加go.mod文件来定义</li><li>跨模块引包，需在模块go.md文件中添加引入的模块路径</li><li>若本地包没有上传至公共仓库，则无法直接导入使用，需在mod文件中，使用replace更改引用本地包</li></ul><h3 id="package包" tabindex="-1"><a class="header-anchor" href="#package包"><span>package包</span></a></h3><ul><li>同一目录下，不能有多个package,go文件的package名无须与文件夹名相同(但一般取相同)</li><li>同一包下的文件可以放在不同目录下,但一般不建议这么做，引入的时候需要起别名</li><li>引入时使用文件的路径下，需带有模块文件夹名</li><li>引入后，用包名引入方法使用</li><li>引入包以module为单位</li><li>原则上package应和文件夹名相同，按照文件夹名引入模块和包，若包名和文件夹名不同，import引入需起别名</li></ul><h3 id="拉取与上传module处理" tabindex="-1"><a class="header-anchor" href="#拉取与上传module处理"><span>拉取与上传module处理</span></a></h3><ul><li>上传按照go.mod中定义的module路径存在远程仓库</li><li>require下载按照module路径下载依赖</li><li>import导入按照module导入</li></ul><h3 id="go-mod" tabindex="-1"><a class="header-anchor" href="#go-mod"><span>go.mod</span></a></h3>',11),g={href:"https://blog.csdn.net/xiaoquqi/article/details/125816897",target:"_blank",rel:"noopener noreferrer"},h=n(`<blockquote><p>require</p></blockquote><p>拉取远程仓库代码</p><blockquote><p>replace</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>module hello</span></span>
<span class="line"><span></span></span>
<span class="line"><span>go 1.14</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 官方文档</span></span>
<span class="line"><span>// replace example.com/greetings =&gt; ../greetings</span></span>
<span class="line"><span>// 本文章 </span></span>
<span class="line"><span>replace greetings =&gt; ../greetings</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cmd" tabindex="-1"><a class="header-anchor" href="#cmd"><span>cmd</span></a></h2><ul><li>go version 查看 go 当前的版本</li><li>go env 查看当前 go 的环境变量</li><li>go list 列出当前全部安装的 package</li><li>go run 编译并运行 Go 程序</li></ul><blockquote><p>go mod tidy 整理依赖</p></blockquote><ul><li>删除不需要的依赖包</li><li>下载新的依赖包</li><li>更新go.sum</li></ul><blockquote><p>修改依赖包地址,使用新版本包管理器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">go</span><span style="color:#A31515;"> env</span><span style="color:#0000FF;"> -w</span><span style="color:#A31515;"> GOPROXY=https://goproxy.cn</span></span>
<span class="line"><span style="color:#795E26;">go</span><span style="color:#A31515;"> env</span><span style="color:#0000FF;"> -w</span><span style="color:#A31515;"> GO111MODULE=on</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>go build 构建包为可执行文件</p></blockquote><ul><li><p>如果是普通包，就像我们在 1.2 节中编写的 mymath 包那样，当你执行 go build 之后，它不会产生任何文件。如果你需要在 $GOPATH/pkg 下生成相应的文件，那就得执行 go install。</p></li><li><p>如果是 main 包，当你执行 go build 之后，它就会在当前目录下生成一个可执行文件。如果你需要在 $GOPATH/bin 下生成相应的文件，需要执行 go install，或者使用 go build -o 路径/a.exe。</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>go build [-o output] [build flags] [packages]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>go build -o ./test main.go</span></span>
<span class="line"><span></span></span>
<span class="line"><span>选项：</span></span>
<span class="line"><span>-o 输出目录</span></span>
<span class="line"><span>build flag 构建标记</span></span>
<span class="line"><span>args 构建包文件参数</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>go get 下载包到gopath的pkg中</p></blockquote><ul><li>动态获取远程代码包</li><li>内部实际上分成了两步操作：第一步是下载源码包，第二步是执行 go install</li></ul><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">go</span><span style="color:#A31515;"> get</span><span style="color:#A31515;"> github.com/astaxie/beego</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>go install</p></blockquote><ul><li>如果包含main包，则会在bin下生成可执行文件</li><li>如果不是main包，则会在pkg下生成.a文件</li></ul><blockquote><p>go clean</p></blockquote><ul><li>来移除当前源码包和关联源码包里面编译生成的文件</li></ul><h2 id="go-runtime-运行时" tabindex="-1"><a class="header-anchor" href="#go-runtime-运行时"><span>go runtime 运行时</span></a></h2><p>这个 runtime 类似 Java 和 .NET 语言所用到的虚拟机，它负责管理包括内存分配、垃圾回收（第 11.8 节）、栈处理、goroutine、channel、切片（slice）、map 和反射（reflection）等等。</p><p>Go 的可执行文件都比相对应的源代码文件要大很多，这恰恰说明了 Go 的 runtime 嵌入到了每一个可执行文件当中。</p><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h2><h3 id="gin" tabindex="-1"><a class="header-anchor" href="#gin"><span>gin</span></a></h3><ul><li>默认 使用 Logger 和 Recovery 中间件,可使用gin.New 代替gin.Default</li></ul><h4 id="basicauth中间件" tabindex="-1"><a class="header-anchor" href="#basicauth中间件"><span>BasicAuth中间件</span></a></h4><p>借用中间件对用户进行鉴权</p><h4 id="使用中间件" tabindex="-1"><a class="header-anchor" href="#使用中间件"><span>使用中间件</span></a></h4><h4 id="中间件使用goroutine" tabindex="-1"><a class="header-anchor" href="#中间件使用goroutine"><span>中间件使用goroutine</span></a></h4><p>当在中间件或 handler 中启动新的 Goroutine 时，不能使用原始的上下文，必须使用只读副本</p><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">func</span><span style="color:#795E26;"> main</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">	r</span><span style="color:#000000;"> := </span><span style="color:#001080;">gin</span><span style="color:#000000;">.</span><span style="color:#795E26;">Default</span><span style="color:#000000;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">	r</span><span style="color:#000000;">.</span><span style="color:#795E26;">GET</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/long_async&quot;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">func</span><span style="color:#000000;">(</span><span style="color:#001080;">c</span><span style="color:#000000;"> *</span><span style="color:#267F99;">gin</span><span style="color:#000000;">.</span><span style="color:#267F99;">Context</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">		// 创建在 goroutine 中使用的副本</span></span>
<span class="line"><span style="color:#001080;">		cCp</span><span style="color:#000000;"> := </span><span style="color:#001080;">c</span><span style="color:#000000;">.</span><span style="color:#795E26;">Copy</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#AF00DB;">		go</span><span style="color:#0000FF;"> func</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#008000;">			// 用 time.Sleep() 模拟一个长任务。</span></span>
<span class="line"><span style="color:#001080;">			time</span><span style="color:#000000;">.</span><span style="color:#795E26;">Sleep</span><span style="color:#000000;">(</span><span style="color:#098658;">5</span><span style="color:#000000;"> * </span><span style="color:#001080;">time</span><span style="color:#000000;">.</span><span style="color:#001080;">Second</span><span style="color:#000000;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">			// 请注意您使用的是复制的上下文 &quot;cCp&quot;，这一点很重要</span></span>
<span class="line"><span style="color:#001080;">			log</span><span style="color:#000000;">.</span><span style="color:#795E26;">Println</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Done! in path &quot;</span><span style="color:#000000;"> + </span><span style="color:#001080;">cCp</span><span style="color:#000000;">.</span><span style="color:#001080;">Request</span><span style="color:#000000;">.</span><span style="color:#001080;">URL</span><span style="color:#000000;">.</span><span style="color:#001080;">Path</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">		}()</span></span>
<span class="line"><span style="color:#000000;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">	r</span><span style="color:#000000;">.</span><span style="color:#795E26;">GET</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/long_sync&quot;</span><span style="color:#000000;">, </span><span style="color:#0000FF;">func</span><span style="color:#000000;">(</span><span style="color:#001080;">c</span><span style="color:#000000;"> *</span><span style="color:#267F99;">gin</span><span style="color:#000000;">.</span><span style="color:#267F99;">Context</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">		// 用 time.Sleep() 模拟一个长任务。</span></span>
<span class="line"><span style="color:#001080;">		time</span><span style="color:#000000;">.</span><span style="color:#795E26;">Sleep</span><span style="color:#000000;">(</span><span style="color:#098658;">5</span><span style="color:#000000;"> * </span><span style="color:#001080;">time</span><span style="color:#000000;">.</span><span style="color:#001080;">Second</span><span style="color:#000000;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">		// 因为没有使用 goroutine，不需要拷贝上下文</span></span>
<span class="line"><span style="color:#001080;">		log</span><span style="color:#000000;">.</span><span style="color:#795E26;">Println</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Done! in path &quot;</span><span style="color:#000000;"> + </span><span style="color:#001080;">c</span><span style="color:#000000;">.</span><span style="color:#001080;">Request</span><span style="color:#000000;">.</span><span style="color:#001080;">URL</span><span style="color:#000000;">.</span><span style="color:#001080;">Path</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">	})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">	// 监听并在 0.0.0.0:8080 上启动服务</span></span>
<span class="line"><span style="color:#001080;">	r</span><span style="color:#000000;">.</span><span style="color:#795E26;">Run</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;:8080&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="request-body数据绑定" tabindex="-1"><a class="header-anchor" href="#request-body数据绑定"><span>request-body数据绑定</span></a></h4><ul><li>ShouldBind 对于json格式数据不能多次绑定到实体中，影响性能</li><li>ShouldBindBodyWith</li></ul><h4 id="模型及参数绑定" tabindex="-1"><a class="header-anchor" href="#模型及参数绑定"><span>模型及参数绑定</span></a></h4><p>需在结构体中字段加标签，允许json form xml等绑定,可以自动推断，也可使用具体绑定的方法</p><ul><li>shouldBindJSON</li><li>shouldBindXML</li><li>ShouldBindUri 绑定路径中参数</li></ul><blockquote><p>结构体样例</p></blockquote><div class="language-go line-numbers-mode" data-ext="go" data-title="go"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">type</span><span style="color:#267F99;"> Login</span><span style="color:#0000FF;"> struct</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">	User</span><span style="color:#267F99;">     string</span><span style="color:#A31515;"> \`form:&quot;user&quot; json:&quot;user&quot; xml:&quot;user&quot;  binding:&quot;required&quot;\`</span></span>
<span class="line"><span style="color:#001080;">	Password</span><span style="color:#267F99;"> string</span><span style="color:#A31515;"> \`form:&quot;password&quot; json:&quot;password&quot; xml:&quot;password&quot; binding:&quot;required&quot;\`</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iris" tabindex="-1"><a class="header-anchor" href="#iris"><span>iris</span></a></h3><h3 id="beego" tabindex="-1"><a class="header-anchor" href="#beego"><span>beego</span></a></h3>`,41);function m(b,y){const l=i("ExternalLinkIcon");return p(),t("div",null,[c,s("p",null,[s("a",d,[a("参考"),e(l)])]),u,s("p",null,[s("a",g,[a("模块"),e(l)])]),h])}const q=o(r,[["render",m],["__file","web.html.vue"]]),F=JSON.parse('{"path":"/note/go/web.html","title":"web","lang":"zh-CN","frontmatter":{"description":"web gin gorm beego bee 微服务go-micro grpc consul env相关 GOROOT go程序运行所需的文件及公共依赖 GOPATH 参考 go目录1 类似于一个工作目录，一般包含bin、pkg、src目录 在src目录下加入项目1、项目2、项目3 go目录2 直接将项目目录作为一个添加到GOPATH中 包含bin、p...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/go/web.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"web"}],["meta",{"property":"og:description","content":"web gin gorm beego bee 微服务go-micro grpc consul env相关 GOROOT go程序运行所需的文件及公共依赖 GOPATH 参考 go目录1 类似于一个工作目录，一般包含bin、pkg、src目录 在src目录下加入项目1、项目2、项目3 go目录2 直接将项目目录作为一个添加到GOPATH中 包含bin、p..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-10T12:58:35.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-12-10T12:58:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"web\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-10T12:58:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"env相关","slug":"env相关","link":"#env相关","children":[{"level":3,"title":"GOROOT","slug":"goroot","link":"#goroot","children":[]},{"level":3,"title":"GOPATH","slug":"gopath","link":"#gopath","children":[]},{"level":3,"title":"module模块","slug":"module模块","link":"#module模块","children":[]},{"level":3,"title":"package包","slug":"package包","link":"#package包","children":[]},{"level":3,"title":"拉取与上传module处理","slug":"拉取与上传module处理","link":"#拉取与上传module处理","children":[]},{"level":3,"title":"go.mod","slug":"go-mod","link":"#go-mod","children":[]}]},{"level":2,"title":"cmd","slug":"cmd","link":"#cmd","children":[]},{"level":2,"title":"go runtime 运行时","slug":"go-runtime-运行时","link":"#go-runtime-运行时","children":[]},{"level":2,"title":"框架","slug":"框架","link":"#框架","children":[{"level":3,"title":"gin","slug":"gin","link":"#gin","children":[]},{"level":3,"title":"iris","slug":"iris","link":"#iris","children":[]},{"level":3,"title":"beego","slug":"beego","link":"#beego","children":[]}]}],"git":{"createdTime":1666871412000,"updatedTime":1702213115000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":10}]},"readingTime":{"minutes":3.99,"words":1197},"filePathRelative":"note/go/web.md","localizedDate":"2022年10月27日","excerpt":"\\n<ul>\\n<li>gin</li>\\n<li>gorm</li>\\n<li>beego</li>\\n<li>bee</li>\\n<li>微服务go-micro</li>\\n<li>grpc</li>\\n<li>consul</li>\\n</ul>\\n<h2>env相关</h2>\\n<h3>GOROOT</h3>\\n<p>go程序运行所需的文件及公共依赖</p>\\n<h3>GOPATH</h3>\\n<p><a href=\\"https://blog.csdn.net/weixin_42322206/article/details/128341595\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考</a></p>","autoDesc":true}');export{q as comp,F as data};
