import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as r,a as s,b as n,d as e,e as l}from"./app-hoN0JGLf.js";const c={},d=s("h1",{id:"spring自动装配",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spring自动装配"},[s("span",null,"spring自动装配")])],-1),u=s("h2",{id:"bean的注入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#bean的注入"},[s("span",null,"bean的注入")])],-1),g={href:"https://blog.csdn.net/tianzhonghaoqing/article/details/128579102",target:"_blank",rel:"noopener noreferrer"},y=l(`<h3 id="spring中的xml形式" tabindex="-1"><a class="header-anchor" href="#spring中的xml形式"><span>spring中的xml形式</span></a></h3><blockquote><p>factory-bean、factory-method形式,</p></blockquote><ul><li>分为静态和动态</li><li>只有在spring中才有,它们是标签的属性，用于创建bean对象，需要参数的话使用constructor-arg元素来指定它的参数。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;?xml</span><span style="color:#E50000;"> version</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;1.0&quot;</span><span style="color:#E50000;"> encoding</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;UTF-8&quot;</span><span style="color:#800000;">?&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;beans</span><span style="color:#E50000;"> xmlns</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;http://www.springframework.org/schema/beans&quot;</span></span>
<span class="line"><span style="color:#E50000;">       xmlns:xsi</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span>
<span class="line"><span style="color:#E50000;">       xsi:schemaLocation</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    &lt;!--静态获取对象--&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;staticStu&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;yudaosourcecode.factorymethod.StuFactory&quot;</span><span style="color:#E50000;"> factory-method</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;getStaticStu&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#008000;">        &lt;!--传入getStaticStu方法的参数--&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;constructor-arg</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;1&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/bean&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    &lt;!--生成对象的工厂--&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;stuFactory&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;yudaosourcecode.factorymethod.StuFactory&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#008000;">    &lt;!--动态获取对象--&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;dynamicStu&quot;</span><span style="color:#E50000;"> factory-bean</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;stuFactory&quot;</span><span style="color:#E50000;"> factory-method</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;getDynamicStu&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#008000;">        &lt;!--传入getDynamicStu方法的参数--&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;constructor-arg</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;11&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/bean&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/beans&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>set注入、构造器注入</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;beans&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;myStudent&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;com.bjpowernode.ba04.Student&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;name&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;张三&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;age&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;20&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/bean&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/beans&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#800000;">&lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;cd_1&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;com.zwq.ZiDongZhuangPei.BlankDisc&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;constructor-arg</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;告白气球&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;constructor-arg</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;周杰伦&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;constructor-arg&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;list&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;value&gt;</span><span style="color:#000000;">黑色幽默</span><span style="color:#800000;">&lt;/value&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;value&gt;</span><span style="color:#000000;">可爱女人</span><span style="color:#800000;">&lt;/value&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;value&gt;</span><span style="color:#000000;">龙卷风</span><span style="color:#800000;">&lt;/value&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;value&gt;</span><span style="color:#000000;">反方向的钟</span><span style="color:#800000;">&lt;/value&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;value&gt;</span><span style="color:#000000;">星晴</span><span style="color:#800000;">&lt;/value&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/list&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/constructor-arg&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;constructor-arg&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;list&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;ref</span><span style="color:#E50000;"> bean</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;Bd1&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">        &lt;ref</span><span style="color:#E50000;"> bean</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;Bd2&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/list&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/constructor-arg&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/bean&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>autowire属性byName,byType,no</p></blockquote>`,7),m=l(`<div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;myStudent&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;com.bjpowernode.ba04.Student&quot;</span><span style="color:#E50000;"> autowire</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;byName&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#800000;">    &lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;name&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;张三&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;age&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;20&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#008000;">    &lt;!-- &lt;property name=&quot;school&quot; ref=&quot;mySchool&quot;/&gt;--&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/bean&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        &lt;!--声明school对象--&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;school&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;com.bjpowernode.ba04.School&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;name&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;南昌大学&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;address&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;北京海淀区&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/bean&gt;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springboot中" tabindex="-1"><a class="header-anchor" href="#springboot中"><span>springboot中</span></a></h3><blockquote><p>@Bean</p></blockquote><p>与上述XML注入类似，只不过使用注解方式</p><blockquote><p>FactoryBean</p></blockquote><p>使用FactoryBean的getObject获取对象</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public interface FactoryBean&lt;T&gt; {</span></span>
<span class="line"><span>    T getObject() throws Exception;  //返回由FactoryBean创建的Bean实例</span></span>
<span class="line"><span>    Class&lt;T&gt; getObjectType();</span></span>
<span class="line"><span>    boolean isSingleton();</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;bean</span><span style="color:#E50000;"> id</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;car&quot;</span><span style="color:#E50000;"> class</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;com.baobaotao.factorybean.CarFactoryBean&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;property</span><span style="color:#E50000;"> name</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;carInfo&quot;</span><span style="color:#E50000;"> value</span><span style="color:#000000;">=</span><span style="color:#0000FF;">&quot;法拉利,400,2000000&quot;</span><span style="color:#800000;">/&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/bean&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>@Component、@service等 @import ImportBeanDefinitionRegistrar</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> ImportBeanDefinitionRegistrar</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    default</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> registerBeanDefinitions</span><span style="color:#000000;">(</span><span style="color:#267F99;">AnnotationMetadata</span><span style="color:#001080;"> importingClassMetadata</span><span style="color:#000000;">, </span><span style="color:#267F99;">BeanDefinitionRegistry</span><span style="color:#001080;"> registry</span><span style="color:#000000;">,</span></span>
<span class="line"><span style="color:#267F99;">                                         BeanNameGenerator</span><span style="color:#001080;"> importBeanNameGenerator</span><span style="color:#000000;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#795E26;">        registerBeanDefinitions</span><span style="color:#000000;">(importingClassMetadata, registry);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spi机制" tabindex="-1"><a class="header-anchor" href="#spi机制"><span>spi机制</span></a></h2><p>SPI的全名为Service Provider Interface.</p><p>java spi机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。</p><p>面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，</p><p>如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。</p><p>java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制。有点类似IOC的思想，就是将装配的控制权移到程序之外，</p><p>在模块化设计中这个机制尤其重要。</p><blockquote><p>java spi spring factories</p></blockquote><ul><li>META-INF/spring.factories</li><li>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</li><li>两者都是spi机制的入口文件</li><li>区别就是下面这个只是autoconfigurtion，而原本我们知道那个spring.factories则更强大，还可以把init初始化和监听器什么的加进去。</li></ul><blockquote><p>案例</p></blockquote><ul><li>JDBC驱动加载案例：利用Java的SPI机制，我们可以根据不同的数据库厂商来引入不同的JDBC驱动包；</li><li>SpringBoot的SPI机制：我们可以在spring.factories中加上我们自定义的自动配置类，事件监听器或初始化器等；</li></ul><h2 id="入口" tabindex="-1"><a class="header-anchor" href="#入口"><span>入口</span></a></h2><ul><li><p>以applicationContext为装配单位</p></li><li><p>AbstractApplicationContext.class</p><ul><li>refresh方法 <ul><li>invokeBeanFactoryPostProcessors <ul><li>PostProcessorRegistrationDelegate</li></ul></li></ul></li></ul></li></ul><h2 id="postprocessorregistrationdelegate" tabindex="-1"><a class="header-anchor" href="#postprocessorregistrationdelegate"><span>PostProcessorRegistrationDelegate</span></a></h2><p>bean工厂后置处理器委托器</p><blockquote><p>invokeBeanFactoryPostProcessors</p></blockquote><ul><li>首先按优先级执行BeanDefinitionRegistryPostProcessor实现类中的postProcessBeanDefinitionRegistry方法 <ul><li>上下文中会优先注册默认ConfigurationClassPostProcessor到上下文的bean工厂的单例对象集中</li><li>使用ConfigurationClassPostProcessor获取配置类的beandefinition，用于bean工厂初始化单例对象集</li></ul></li><li>再执行BeanDefinitionRegistryPostProcessor实现类中postProcessBeanFactory方法</li><li>最后按优先级执行BeanFactoryPostProcessor实现类中的postProcessBeanFactory方法</li></ul><h2 id="beanfactorypostprocessor" tabindex="-1"><a class="header-anchor" href="#beanfactorypostprocessor"><span>BeanFactoryPostProcessor</span></a></h2><p>bean工厂后置处理器顶层接口</p><h2 id="beandefinitionregistrypostprocessor" tabindex="-1"><a class="header-anchor" href="#beandefinitionregistrypostprocessor"><span>BeanDefinitionRegistryPostProcessor</span></a></h2><p>beandeinition注册的后置处理器接口</p><h2 id="configurationclasspostprocessor" tabindex="-1"><a class="header-anchor" href="#configurationclasspostprocessor"><span>ConfigurationClassPostProcessor</span></a></h2><p>它是BeanFactoryPostProcessor，实现上述接口，用于项目启动处理配置类</p><blockquote><p>postProcessBeanDefinitionRegistry</p></blockquote><ul><li><p>Derive further bean definitions from the configuration classes in the registry</p></li><li><p>用于从配置类推导出更多的beandefinition</p></li><li><p>配置类解析的入口是启动类,即来源类</p></li><li><p>parser.parse(candidates);会将@component等注解的类识别为配置类ConfigurationClass</p></li><li><p>ConfigurationClassBeanDefinitionReader配置类beandefinition读取器，从配置类中读取beandefinition</p></li></ul><h2 id="configurationclassparser" tabindex="-1"><a class="header-anchor" href="#configurationclassparser"><span>ConfigurationClassParser</span></a></h2><p>以下是一个递归操作方法调用流程，用于构建ConfigurationClass，它包含beanMethod等信息,以便使用ConfigurationClass集合构建BeanDefinition对象</p><ul><li><p>parse</p></li><li><p>processConfigurationClass</p></li><li><p>doProcessConfigurationClass</p></li></ul><h3 id="doprocessconfigurationclass" tabindex="-1"><a class="header-anchor" href="#doprocessconfigurationclass"><span>doProcessConfigurationClass</span></a></h3><p>处理来源/启动类，是否有@componentScan,@Import,@ImportResource,@Bean注解</p><blockquote><p>@componentScan</p></blockquote><p>从启动类包开始扫描组件BeanDefinition,并递归构造BeanDefinition的confiiguratonClass,递归处理@import，@componentScan，@Bean</p><blockquote><p>@Import</p></blockquote><h3 id="processimports" tabindex="-1"><a class="header-anchor" href="#processimports"><span>processImports</span></a></h3><ul><li>ImportBeanDefinitionRegistrar</li><li>ImportSelector</li><li>如果导入的类不是上述两种类型，会当作@ConfigurationClass处理</li></ul><h3 id="deferredimportselectorhandler" tabindex="-1"><a class="header-anchor" href="#deferredimportselectorhandler"><span>DeferredImportSelectorHandler</span></a></h3><p>它是ConfigurationClassParser内部类，导入选择器处理器</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void process() {</span></span>
<span class="line"><span>			List&lt;DeferredImportSelectorHolder&gt; deferredImports = this.deferredImportSelectors;</span></span>
<span class="line"><span>			this.deferredImportSelectors = null;</span></span>
<span class="line"><span>			try {</span></span>
<span class="line"><span>				if (deferredImports != null) {</span></span>
<span class="line"><span>					DeferredImportSelectorGroupingHandler handler = new DeferredImportSelectorGroupingHandler();</span></span>
<span class="line"><span>					deferredImports.sort(DEFERRED_IMPORT_COMPARATOR);</span></span>
<span class="line"><span>					deferredImports.forEach(handler::register);</span></span>
<span class="line"><span>					handler.processGroupImports();</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			finally {</span></span>
<span class="line"><span>				this.deferredImportSelectors = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deferredimportselectorgroupinghandler" tabindex="-1"><a class="header-anchor" href="#deferredimportselectorgroupinghandler"><span>DeferredImportSelectorGroupingHandler</span></a></h3><p>对导入选择器分组，对导入选择器组进行处理，这里有递归导入处理</p><blockquote><p>grouping.getImports()</p></blockquote><p>获取factories和imports文件中的配置类</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void processGroupImports() {</span></span>
<span class="line"><span>   for (DeferredImportSelectorGrouping grouping : this.groupings.values()) {</span></span>
<span class="line"><span>      Predicate&lt;String&gt; exclusionFilter = grouping.getCandidateFilter();</span></span>
<span class="line"><span>      grouping.getImports().forEach(entry -&gt; {</span></span>
<span class="line"><span>         ConfigurationClass configurationClass = this.configurationClasses.get(entry.getMetadata());</span></span>
<span class="line"><span>         try {</span></span>
<span class="line"><span>         		//递归构建配置类</span></span>
<span class="line"><span>            processImports(configurationClass, asSourceClass(configurationClass, exclusionFilter),</span></span>
<span class="line"><span>                  Collections.singleton(asSourceClass(entry.getImportClassName(), exclusionFilter)),</span></span>
<span class="line"><span>                  exclusionFilter, false);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         catch (BeanDefinitionStoreException ex) {</span></span>
<span class="line"><span>            throw ex;</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>         catch (Throwable ex) {</span></span>
<span class="line"><span>            throw new BeanDefinitionStoreException(</span></span>
<span class="line"><span>                  &quot;Failed to process import candidates for configuration class [&quot; +</span></span>
<span class="line"><span>                        configurationClass.getMetadata().getClassName() + &quot;]&quot;, ex);</span></span>
<span class="line"><span>         }</span></span>
<span class="line"><span>      });</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="deferredimportselectorgrouping" tabindex="-1"><a class="header-anchor" href="#deferredimportselectorgrouping"><span>DeferredImportSelectorGrouping</span></a></h3><p>导入选择器组对象，存放导入选择器DeferredImportSelector，及组处理器AutoConfigurantionImportSelector中的AutoConfigurationGroup</p><h2 id="importselector" tabindex="-1"><a class="header-anchor" href="#importselector"><span>ImportSelector</span></a></h2><p>顶层导入选择器接口,用于自动装配bean到容器中</p><ul><li><p>AutoConfigurantionImportSelector</p></li><li><p>ImportAutoConfigurantionImportSelector</p></li></ul><h3 id="autoconfigurantionimportselector" tabindex="-1"><a class="header-anchor" href="#autoconfigurantionimportselector"><span>AutoConfigurantionImportSelector</span></a></h3><blockquote><p>内部类AutoConfigurationGroup</p></blockquote><ul><li>DeferredImportSelectorGrouping中的组处理器</li><li>导入选择器组处理器，处理组中的导入选择器</li></ul><blockquote><p>getCandidateConfigurations</p></blockquote><ul><li><p>获取候选自动配置autoConfiguration</p></li><li><p>获取factories文件和import文件中配置类名称</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>//加载factories和imports文件中的自动配置类</span></span>
<span class="line"><span>protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) {</span></span>
<span class="line"><span>		List&lt;String&gt; configurations = new ArrayList&lt;&gt;(</span></span>
<span class="line"><span>				SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</span></span>
<span class="line"><span>		ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader()).forEach(configurations::add);</span></span>
<span class="line"><span>		Assert.notEmpty(configurations,</span></span>
<span class="line"><span>				&quot;No auto configuration classes found in META-INF/spring.factories nor in META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports. If you &quot;</span></span>
<span class="line"><span>						+ &quot;are using a custom packaging, make sure that file is correct.&quot;);</span></span>
<span class="line"><span>		return configurations;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indexed" tabindex="-1"><a class="header-anchor" href="#indexed"><span>@Indexed</span></a></h2><blockquote><p>META-INF/spring.components ClassPathBeanDefinitionScanner doScan CandidateComponentsIndexLoader doLoadIndex ClassPathScanningCandidateComponentProvider findCandidateComponents</p></blockquote><h2 id="autowire" tabindex="-1"><a class="header-anchor" href="#autowire"><span>autowire</span></a></h2><ul><li>获取非简单属性，即除了String的所有引用类型</li></ul><h3 id="bytype" tabindex="-1"><a class="header-anchor" href="#bytype"><span>byType</span></a></h3><ul><li>属性名称</li><li>属性描述,即设置属性的方法</li></ul><h3 id="byname" tabindex="-1"><a class="header-anchor" href="#byname"><span>byName</span></a></h3><ul><li>属性名称</li></ul>`,72);function v(b,h){const o=a("ExternalLinkIcon"),t=a("property");return i(),r("div",null,[d,u,s("p",null,[s("a",g,[n("参考"),e(o)])]),y,s("p",null,[n("引用类型在赋值时需要"),e(t,{name:"school",ref:"mySchool"},null,512),n(" 自动注入byName就不需要这一步")]),m])}const q=p(c,[["render",v],["__file","spring自动装配.html.vue"]]),x=JSON.parse('{"path":"/note/spring/spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html","title":"spring自动装配","lang":"zh-CN","frontmatter":{"category":["spring"],"description":"spring自动装配 bean的注入 参考 spring中的xml形式 factory-bean、factory-method形式, 分为静态和动态 只有在spring中才有,它们是标签的属性，用于创建bean对象，需要参数的话使用constructor-arg元素来指定它的参数。 set注入、构造器注入 autowire属性byName,byType...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/spring/spring%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"spring自动装配"}],["meta",{"property":"og:description","content":"spring自动装配 bean的注入 参考 spring中的xml形式 factory-bean、factory-method形式, 分为静态和动态 只有在spring中才有,它们是标签的属性，用于创建bean对象，需要参数的话使用constructor-arg元素来指定它的参数。 set注入、构造器注入 autowire属性byName,byType..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-12T12:42:32.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-07-12T12:42:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"spring自动装配\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-12T12:42:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"bean的注入","slug":"bean的注入","link":"#bean的注入","children":[{"level":3,"title":"spring中的xml形式","slug":"spring中的xml形式","link":"#spring中的xml形式","children":[]},{"level":3,"title":"springboot中","slug":"springboot中","link":"#springboot中","children":[]}]},{"level":2,"title":"spi机制","slug":"spi机制","link":"#spi机制","children":[]},{"level":2,"title":"入口","slug":"入口","link":"#入口","children":[]},{"level":2,"title":"PostProcessorRegistrationDelegate","slug":"postprocessorregistrationdelegate","link":"#postprocessorregistrationdelegate","children":[]},{"level":2,"title":"BeanFactoryPostProcessor","slug":"beanfactorypostprocessor","link":"#beanfactorypostprocessor","children":[]},{"level":2,"title":"BeanDefinitionRegistryPostProcessor","slug":"beandefinitionregistrypostprocessor","link":"#beandefinitionregistrypostprocessor","children":[]},{"level":2,"title":"ConfigurationClassPostProcessor","slug":"configurationclasspostprocessor","link":"#configurationclasspostprocessor","children":[]},{"level":2,"title":"ConfigurationClassParser","slug":"configurationclassparser","link":"#configurationclassparser","children":[{"level":3,"title":"doProcessConfigurationClass","slug":"doprocessconfigurationclass","link":"#doprocessconfigurationclass","children":[]},{"level":3,"title":"processImports","slug":"processimports","link":"#processimports","children":[]},{"level":3,"title":"DeferredImportSelectorHandler","slug":"deferredimportselectorhandler","link":"#deferredimportselectorhandler","children":[]},{"level":3,"title":"DeferredImportSelectorGroupingHandler","slug":"deferredimportselectorgroupinghandler","link":"#deferredimportselectorgroupinghandler","children":[]},{"level":3,"title":"DeferredImportSelectorGrouping","slug":"deferredimportselectorgrouping","link":"#deferredimportselectorgrouping","children":[]}]},{"level":2,"title":"ImportSelector","slug":"importselector","link":"#importselector","children":[{"level":3,"title":"AutoConfigurantionImportSelector","slug":"autoconfigurantionimportselector","link":"#autoconfigurantionimportselector","children":[]}]},{"level":2,"title":"@Indexed","slug":"indexed","link":"#indexed","children":[]},{"level":2,"title":"autowire","slug":"autowire","link":"#autowire","children":[{"level":3,"title":"byType","slug":"bytype","link":"#bytype","children":[]},{"level":3,"title":"byName","slug":"byname","link":"#byname","children":[]}]}],"git":{"createdTime":1668869257000,"updatedTime":1689165752000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":5}]},"readingTime":{"minutes":5.18,"words":1554},"filePathRelative":"note/spring/spring自动装配.md","localizedDate":"2022年11月19日","excerpt":"\\n<h2>bean的注入</h2>\\n<p><a href=\\"https://blog.csdn.net/tianzhonghaoqing/article/details/128579102\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">参考</a></p>\\n<h3>spring中的xml形式</h3>\\n<blockquote>\\n<p>factory-bean、factory-method形式,</p>\\n</blockquote>\\n<ul>\\n<li>分为静态和动态</li>\\n<li>只有在spring中才有,它们是标签的属性，用于创建bean对象，需要参数的话使用constructor-arg元素来指定它的参数。</li>\\n</ul>","autoDesc":true}');export{q as comp,x as data};
