import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="js" tabindex="-1"><a class="header-anchor" href="#js"><span>js</span></a></h1><h2 id="json的类型" tabindex="-1"><a class="header-anchor" href="#json的类型"><span>json的类型</span></a></h2><ol><li>数字 (整数或浮点数)</li><li>字符串 (在双括号中)</li><li>逻辑值 (true或false)</li><li>数组 (在中括号中)</li><li>对象 (在大括号中)</li><li>null</li></ol><h2 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h2><ul><li>undefined和null和0等同于false,与之相反true</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">//若两者都是布尔值，则返回false或true,</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> test</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">true</span><span style="color:#000000;"> || </span><span style="color:#0000FF;">false</span></span>
<span class="line"><span style="color:#008000;">//若有一个不是则返回具体值</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> test2</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;"> || </span><span style="color:#A31515;">&#39;df&#39;</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> test3</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">undefined</span><span style="color:#000000;"> || </span><span style="color:#A31515;">&#39;df&#39;</span></span>
<span class="line"><span style="color:#008000;">//若为与与运算如下分别为 &#39;fd&#39; &#39;er&#39;</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> test4</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">true</span><span style="color:#000000;"> &amp;&amp; </span><span style="color:#A31515;">&#39;fd&#39;</span></span>
<span class="line"><span style="color:#0000FF;">let</span><span style="color:#001080;"> test5</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&#39;fd&#39;</span><span style="color:#000000;">&amp;&amp; </span><span style="color:#A31515;">&#39;er&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0070C1;">JSON</span><span style="color:#000000;">.</span><span style="color:#795E26;">stringify</span><span style="color:#000000;">()()</span></span>
<span class="line"><span style="color:#0070C1;">JSON</span><span style="color:#000000;">.</span><span style="color:#795E26;">parse</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#001080;">Object</span><span style="color:#000000;">.</span><span style="color:#795E26;">keys</span><span style="color:#000000;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h3><blockquote><p>判断子字符串、</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#A31515;">&#39;str&#39;</span><span style="color:#000000;">.</span><span style="color:#795E26;">indexOf</span><span style="color:#000000;">(</span><span style="color:#A31515;">&#39;subStr&#39;</span><span style="color:#000000;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">//返回true,false</span></span>
<span class="line"><span style="color:#008000;">//  /正则表达式/.test()</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#008000;">//返回匹配的字符串</span></span>
<span class="line"><span style="color:#008000;">//  正则表达式/.exec()</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类" tabindex="-1"><a class="header-anchor" href="#类"><span>类</span></a></h2><p>在Class语法糖出现之前，我们想重用一个功能模块，通常是用一个函数来进行封装：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">function</span><span style="color:#795E26;"> Animal</span><span style="color:#000000;">(</span><span style="color:#001080;">name</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">    this</span><span style="color:#000000;">.</span><span style="color:#001080;">name</span><span style="color:#000000;"> = </span><span style="color:#001080;">name</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#267F99;">Animal</span><span style="color:#000000;">.</span><span style="color:#001080;">prototype</span><span style="color:#000000;">.</span><span style="color:#795E26;">walk</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> () {</span></span>
<span class="line"><span style="color:#008000;">    // dosomething</span></span>
<span class="line"><span style="color:#000000;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> dog</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">new</span><span style="color:#795E26;"> Animal</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;小狗&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">const</span><span style="color:#0070C1;"> duck</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">new</span><span style="color:#795E26;"> Animal</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;鸭子&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了更好的做成一个单独的模块，还有使用IIFE（立即执行函数）形式来增强模块的：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">var</span><span style="color:#001080;"> Animal</span><span style="color:#000000;"> = (</span><span style="color:#0000FF;">function</span><span style="color:#000000;"> () {</span></span>
<span class="line"><span style="color:#0000FF;">    function</span><span style="color:#795E26;"> Animal</span><span style="color:#000000;">(</span><span style="color:#001080;">name</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">        this</span><span style="color:#000000;">.</span><span style="color:#001080;">name</span><span style="color:#000000;"> = </span><span style="color:#001080;">name</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#267F99;">    Animal</span><span style="color:#000000;">.</span><span style="color:#001080;">prototype</span><span style="color:#000000;">.</span><span style="color:#795E26;">walk</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> () {</span></span>
<span class="line"><span style="color:#008000;">        // dosomething</span></span>
<span class="line"><span style="color:#000000;">    };</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#001080;"> Animal</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">}());</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于这是一种很常见的需求，所以ECMAScript规范中加入了Class语法，简化了之前的使用形式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">class</span><span style="color:#267F99;"> Animal</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    constructor</span><span style="color:#000000;">(</span><span style="color:#001080;">name</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">        this</span><span style="color:#000000;">.</span><span style="color:#001080;">name</span><span style="color:#000000;"> = </span><span style="color:#001080;">name</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#795E26;">    walk</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#008000;">        // dosomething</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery"><span>jquery</span></a></h2><p>jquery是一个javascript库</p><h3 id="引用方式" tabindex="-1"><a class="header-anchor" href="#引用方式"><span>引用方式</span></a></h3><blockquote><p>在线引用</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;script</span><span style="color:#E50000;"> src</span><span style="color:#000000FF;">=</span><span style="color:#0000FF;">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#800000;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;script</span><span style="color:#E50000;"> src</span><span style="color:#000000FF;">=</span><span style="color:#0000FF;">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span><span style="color:#800000;">&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;/script&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/head&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>下载后引用</p></blockquote><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;head&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;script</span><span style="color:#E50000;"> src</span><span style="color:#000000FF;">=</span><span style="color:#0000FF;">&quot;jquery-1.10.2.min.js&quot;</span><span style="color:#800000;">&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/head&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="文档就绪" tabindex="-1"><a class="header-anchor" href="#文档就绪"><span>文档就绪</span></a></h3><ul><li>因为页面中的代码一般情况下按照，从上到下，从左到右的顺序执行。</li><li>所以当js代码需要获取页面中的元素时，如果script标签在元素的前面，需要加window.onload；如果script放在了元素后面，就不需要加 window.onload。</li><li>所有 jQuery 函数位于一个 document ready 函数中,这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。</li></ul><blockquote><p>jquery入口函数</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">$</span><span style="color:#000000;">(</span><span style="color:#001080;">document</span><span style="color:#000000;">).</span><span style="color:#795E26;">ready</span><span style="color:#000000;">(</span><span style="color:#0000FF;">function</span><span style="color:#000000;">(){</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#008000;">   // 开始写 jQuery 代码...</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">//简洁写法</span></span>
<span class="line"><span style="color:#795E26;">$</span><span style="color:#000000;">(</span><span style="color:#0000FF;">function</span><span style="color:#000000;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // 开始写 jQuery 代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>JavaScript 入口函数:</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#001080;">window</span><span style="color:#000000;">.</span><span style="color:#795E26;">onload</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">function</span><span style="color:#000000;"> () {</span></span>
<span class="line"><span style="color:#008000;">    // 执行代码</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>两者区别</p></blockquote><ul><li>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li><li>javascript的入口函数只能执行一次，第二次会覆盖前面</li><li>jquery的入口函数可以执行多次</li></ul><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h3><h4 id="选择器" tabindex="-1"><a class="header-anchor" href="#选择器"><span>选择器</span></a></h4><h4 id="事件" tabindex="-1"><a class="header-anchor" href="#事件"><span>事件</span></a></h4><h4 id="html" tabindex="-1"><a class="header-anchor" href="#html"><span>html</span></a></h4><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h4><h4 id="ajax" tabindex="-1"><a class="header-anchor" href="#ajax"><span>ajax</span></a></h4>`,39),o=[p];function i(t,c){return n(),a("div",null,o)}const y=s(e,[["render",i],["__file","javascript.html.vue"]]),u=JSON.parse(`{"path":"/note/%E5%89%8D%E7%AB%AF/javascript.html","title":"js","lang":"zh-CN","frontmatter":{"description":"js json的类型 数字 (整数或浮点数) 字符串 (在双括号中) 逻辑值 (true或false) 数组 (在中括号中) 对象 (在大括号中) null 赋值 undefined和null和0等同于false,与之相反true 使用 string 判断子字符串、 类 在Class语法糖出现之前，我们想重用一个功能模块，通常是用一个函数来进行封装： ...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E5%89%8D%E7%AB%AF/javascript.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"js"}],["meta",{"property":"og:description","content":"js json的类型 数字 (整数或浮点数) 字符串 (在双括号中) 逻辑值 (true或false) 数组 (在中括号中) 对象 (在大括号中) null 赋值 undefined和null和0等同于false,与之相反true 使用 string 判断子字符串、 类 在Class语法糖出现之前，我们想重用一个功能模块，通常是用一个函数来进行封装： ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-26T14:16:06.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-03-26T14:16:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-26T14:16:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"json的类型","slug":"json的类型","link":"#json的类型","children":[]},{"level":2,"title":"赋值","slug":"赋值","link":"#赋值","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"string","slug":"string","link":"#string","children":[]}]},{"level":2,"title":"类","slug":"类","link":"#类","children":[]},{"level":2,"title":"jquery","slug":"jquery","link":"#jquery","children":[{"level":3,"title":"引用方式","slug":"引用方式","link":"#引用方式","children":[]},{"level":3,"title":"文档就绪","slug":"文档就绪","link":"#文档就绪","children":[]},{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]}]}],"git":{"createdTime":1662651644000,"updatedTime":1679840166000,"contributors":[{"name":"wanhongji","email":"wan_hongji@163.com","commits":3},{"name":"wanhongji","email":"wherywan@163.com","commits":3}]},"readingTime":{"minutes":2.14,"words":641},"filePathRelative":"note/前端/javascript.md","localizedDate":"2022年9月8日","excerpt":"\\n<h2>json的类型</h2>\\n<ol>\\n<li>数字 (整数或浮点数)</li>\\n<li>字符串 (在双括号中)</li>\\n<li>逻辑值 (true或false)</li>\\n<li>数组 (在中括号中)</li>\\n<li>对象 (在大括号中)</li>\\n<li>null</li>\\n</ol>\\n<h2>赋值</h2>\\n<ul>\\n<li>undefined和null和0等同于false,与之相反true</li>\\n</ul>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#008000\\">//若两者都是布尔值，则返回false或true,</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> test</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#0000FF\\">true</span><span style=\\"color:#000000\\"> || </span><span style=\\"color:#0000FF\\">false</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">//若有一个不是则返回具体值</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> test2</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#0000FF\\">null</span><span style=\\"color:#000000\\"> || </span><span style=\\"color:#A31515\\">'df'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> test3</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#0000FF\\">undefined</span><span style=\\"color:#000000\\"> || </span><span style=\\"color:#A31515\\">'df'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">//若为与与运算如下分别为 'fd' 'er'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> test4</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#0000FF\\">true</span><span style=\\"color:#000000\\"> &amp;&amp; </span><span style=\\"color:#A31515\\">'fd'</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">let</span><span style=\\"color:#001080\\"> test5</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#A31515\\">'fd'</span><span style=\\"color:#000000\\">&amp;&amp; </span><span style=\\"color:#A31515\\">'er'</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{y as comp,u as data};
