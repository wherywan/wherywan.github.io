import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="webflux" tabindex="-1"><a class="header-anchor" href="#webflux"><span>Webflux</span></a></h1><ul><li><p>Reactor stream api 规范</p></li><li><p>reactor框架</p></li><li><p>webflux基于reactor的响应式web框架，基于事件驱动通知的web框架</p></li></ul><blockquote><p>核心</p></blockquote><p>充分利用CPU，提高单位时间内的吞吐量。当一个请求发出，不用一直等待数据的返回，而是处理其他任务，等数据准备好，再通过<strong>事件通知方式</strong>处理。</p><p>发布和订阅的思想，不能有阻塞操作</p><p>构造存放多个回调方法,当得到元素，再执行回调方法处理，而不是以往的按顺序同步执行方法</p><h2 id="webhandler" tabindex="-1"><a class="header-anchor" href="#webhandler"><span>webHandler</span></a></h2><h2 id="httphandler" tabindex="-1"><a class="header-anchor" href="#httphandler"><span>HttpHandler</span></a></h2><h2 id="响应式项目初始化" tabindex="-1"><a class="header-anchor" href="#响应式项目初始化"><span>响应式项目初始化</span></a></h2><p>内嵌web服务器 netty</p><h3 id="webfluxautoconfiguration" tabindex="-1"><a class="header-anchor" href="#webfluxautoconfiguration"><span>WebFluxAutoConfiguration</span></a></h3><p>DelegatingWebFluxConfiguration 、WebFluxConfigurationSupport</p><p>注册DispatcherHandler到容器中</p><h3 id="httphandlerautoconfiguration" tabindex="-1"><a class="header-anchor" href="#httphandlerautoconfiguration"><span>HttpHandlerAutoConfiguration</span></a></h3><p>注册httpHandler接口的实现类HttpWebHandlerAdapter到容器中,内部包含webHandler接口的实现类DispatcherHandler(web处理器)，以及相应web过滤器</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> HttpHandlerAutoConfiguration</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Configuration</span><span style="color:#000000;">(proxyBeanMethods = </span><span style="color:#0000FF;">false</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">	public</span><span style="color:#0000FF;"> static</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> AnnotationConfig</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">		private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> ApplicationContext</span><span style="color:#001080;"> applicationContext</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">		public</span><span style="color:#795E26;"> AnnotationConfig</span><span style="color:#000000;">(</span><span style="color:#267F99;">ApplicationContext</span><span style="color:#001080;"> applicationContext</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">			this</span><span style="color:#000000;">.</span><span style="color:#001080;">applicationContext</span><span style="color:#000000;"> = applicationContext;</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">		@</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">		public</span><span style="color:#267F99;"> HttpHandler</span><span style="color:#795E26;"> httpHandler</span><span style="color:#000000;">(</span><span style="color:#267F99;">ObjectProvider</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">WebFluxProperties</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">propsProvider</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">			HttpHandler</span><span style="color:#001080;"> httpHandler</span><span style="color:#000000;"> = </span><span style="color:#001080;">WebHttpHandlerBuilder</span><span style="color:#000000;">.</span><span style="color:#795E26;">applicationContext</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">applicationContext</span><span style="color:#000000;">).</span><span style="color:#795E26;">build</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">			WebFluxProperties</span><span style="color:#001080;"> properties</span><span style="color:#000000;"> = </span><span style="color:#001080;">propsProvider</span><span style="color:#000000;">.</span><span style="color:#795E26;">getIfAvailable</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (properties != </span><span style="color:#0000FF;">null</span><span style="color:#000000;"> &amp;&amp; </span><span style="color:#001080;">StringUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">hasText</span><span style="color:#000000;">(</span><span style="color:#001080;">properties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBasePath</span><span style="color:#000000;">())) {</span></span>
<span class="line"><span style="color:#267F99;">				Map</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">HttpHandler</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">handlersMap</span><span style="color:#000000;"> = </span><span style="color:#001080;">Collections</span><span style="color:#000000;">.</span><span style="color:#795E26;">singletonMap</span><span style="color:#000000;">(</span><span style="color:#001080;">properties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBasePath</span><span style="color:#000000;">(), httpHandler);</span></span>
<span class="line"><span style="color:#AF00DB;">				return</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> ContextPathCompositeHandler</span><span style="color:#000000;">(handlersMap);</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#AF00DB;">			return</span><span style="color:#000000;"> httpHandler;</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactivewebserverapplicationcontext" tabindex="-1"><a class="header-anchor" href="#reactivewebserverapplicationcontext"><span>ReactiveWebServerApplicationContext</span></a></h3><h4 id="createwebserver方法" tabindex="-1"><a class="header-anchor" href="#createwebserver方法"><span>createWebServer方法</span></a></h4><p>使用webServerManager创建web服务器</p><h3 id="nettywebserver" tabindex="-1"><a class="header-anchor" href="#nettywebserver"><span>NettyWebServer</span></a></h3><h3 id="httpserver" tabindex="-1"><a class="header-anchor" href="#httpserver"><span>HttpServer</span></a></h3><p>onStateChange方法，是处理connection请求的入口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">static</span><span style="color:#0000FF;"> final</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> HttpServerHandle</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> ConnectionObserver</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onStateChange</span><span style="color:#000000;">(</span><span style="color:#267F99;">Connection</span><span style="color:#001080;"> connection</span><span style="color:#000000;">, </span><span style="color:#267F99;">State</span><span style="color:#001080;"> newState</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (newState == </span><span style="color:#001080;">HttpServerState</span><span style="color:#000000;">.</span><span style="color:#001080;">REQUEST_RECEIVED</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">            try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">                if</span><span style="color:#000000;"> (</span><span style="color:#001080;">log</span><span style="color:#000000;">.</span><span style="color:#795E26;">isDebugEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">                    log</span><span style="color:#000000;">.</span><span style="color:#795E26;">debug</span><span style="color:#000000;">(</span><span style="color:#795E26;">format</span><span style="color:#000000;">(</span><span style="color:#001080;">connection</span><span style="color:#000000;">.</span><span style="color:#795E26;">channel</span><span style="color:#000000;">(), </span><span style="color:#A31515;">&quot;Handler is being applied: {}&quot;</span><span style="color:#000000;">), handler);</span></span>
<span class="line"><span style="color:#000000;">                }</span></span>
<span class="line"><span style="color:#267F99;">                HttpServerOperations</span><span style="color:#001080;"> ops</span><span style="color:#000000;"> = (HttpServerOperations) connection;</span></span>
<span class="line"><span style="color:#267F99;">                Publisher</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">publisher</span><span style="color:#000000;"> = </span><span style="color:#001080;">handler</span><span style="color:#000000;">.</span><span style="color:#795E26;">apply</span><span style="color:#000000;">(ops, ops);</span></span>
<span class="line"><span style="color:#267F99;">                Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">mono</span><span style="color:#000000;"> = </span><span style="color:#001080;">Mono</span><span style="color:#000000;">.</span><span style="color:#795E26;">deferContextual</span><span style="color:#000000;">(ctx </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">                    ops</span><span style="color:#000000;">.</span><span style="color:#001080;">currentContext</span><span style="color:#000000;"> = </span><span style="color:#001080;">Context</span><span style="color:#000000;">.</span><span style="color:#795E26;">of</span><span style="color:#000000;">(ctx);</span></span>
<span class="line"><span style="color:#AF00DB;">                    return</span><span style="color:#001080;"> Mono</span><span style="color:#000000;">.</span><span style="color:#795E26;">fromDirect</span><span style="color:#000000;">(publisher);</span></span>
<span class="line"><span style="color:#000000;">                });</span></span>
<span class="line"><span style="color:#AF00DB;">                if</span><span style="color:#000000;"> (</span><span style="color:#001080;">ops</span><span style="color:#000000;">.</span><span style="color:#001080;">mapHandle</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">                    mono = </span><span style="color:#001080;">ops</span><span style="color:#000000;">.</span><span style="color:#001080;">mapHandle</span><span style="color:#000000;">.</span><span style="color:#795E26;">apply</span><span style="color:#000000;">(mono, connection);</span></span>
<span class="line"><span style="color:#000000;">                }</span></span>
<span class="line"><span style="color:#001080;">                mono</span><span style="color:#000000;">.</span><span style="color:#795E26;">subscribe</span><span style="color:#000000;">(</span><span style="color:#001080;">ops</span><span style="color:#000000;">.</span><span style="color:#795E26;">disposeSubscriber</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">            } </span><span style="color:#AF00DB;">catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Throwable</span><span style="color:#001080;"> t</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">                log</span><span style="color:#000000;">.</span><span style="color:#795E26;">error</span><span style="color:#000000;">(</span><span style="color:#795E26;">format</span><span style="color:#000000;">(</span><span style="color:#001080;">connection</span><span style="color:#000000;">.</span><span style="color:#795E26;">channel</span><span style="color:#000000;">(), </span><span style="color:#A31515;">&quot;&quot;</span><span style="color:#000000;">), t);</span></span>
<span class="line"><span style="color:#008000;">                //&quot;FutureReturnValueIgnored&quot; this is deliberate</span></span>
<span class="line"><span style="color:#001080;">                connection</span><span style="color:#000000;">.</span><span style="color:#795E26;">channel</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                        .</span><span style="color:#795E26;">close</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心类" tabindex="-1"><a class="header-anchor" href="#核心类"><span>核心类</span></a></h3><h4 id="reactorhttphandleradapter" tabindex="-1"><a class="header-anchor" href="#reactorhttphandleradapter"><span>ReactorHttpHandlerAdapter</span></a></h4><h4 id="httpwebhandleradapter" tabindex="-1"><a class="header-anchor" href="#httpwebhandleradapter"><span>HttpWebHandlerAdapter</span></a></h4><h4 id="dispatcherhandler" tabindex="-1"><a class="header-anchor" href="#dispatcherhandler"><span>DispatcherHandler</span></a></h4><p>web处理器，类似于servlet的dispatcherServlet,实现了WebHandler接口</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> DispatcherHandler</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> WebHandler</span><span style="color:#000000;">, </span><span style="color:#267F99;">PreFlightRequestHandler</span><span style="color:#000000;">, </span><span style="color:#267F99;">ApplicationContextAware</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">handle</span><span style="color:#000000;">(</span><span style="color:#267F99;">ServerWebExchange</span><span style="color:#001080;"> exchange</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">        //资源路径和资源处理器接口映射</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerMappings</span><span style="color:#000000;"> == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">            return</span><span style="color:#795E26;"> createNotFoundError</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">CorsUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">isPreFlightRequest</span><span style="color:#000000;">(</span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRequest</span><span style="color:#000000;">())) {</span></span>
<span class="line"><span style="color:#AF00DB;">            return</span><span style="color:#795E26;"> handlePreFlight</span><span style="color:#000000;">(exchange);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#001080;"> Flux</span><span style="color:#000000;">.</span><span style="color:#795E26;">fromIterable</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">handlerMappings</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">concatMap</span><span style="color:#000000;">(mapping </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> mapping</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHandler</span><span style="color:#000000;">(exchange))</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">next</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">switchIfEmpty</span><span style="color:#000000;">(</span><span style="color:#795E26;">createNotFoundError</span><span style="color:#000000;">())</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">flatMap</span><span style="color:#000000;">(handler </span><span style="color:#0000FF;">-&gt;</span><span style="color:#795E26;"> invokeHandler</span><span style="color:#000000;">(exchange, handler))</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">flatMap</span><span style="color:#000000;">(result </span><span style="color:#0000FF;">-&gt;</span><span style="color:#795E26;"> handleResult</span><span style="color:#000000;">(exchange, result));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><h3 id="doonsubscribe" tabindex="-1"><a class="header-anchor" href="#doonsubscribe"><span>doOnSubscribe</span></a></h3><h3 id="onsubscribe" tabindex="-1"><a class="header-anchor" href="#onsubscribe"><span>onSubscribe</span></a></h3><h3 id="dooneach" tabindex="-1"><a class="header-anchor" href="#dooneach"><span>doOnEach</span></a></h3><h3 id="doonnext" tabindex="-1"><a class="header-anchor" href="#doonnext"><span>doOnNext</span></a></h3><h3 id="onnext" tabindex="-1"><a class="header-anchor" href="#onnext"><span>OnNext</span></a></h3><h3 id="doafternext" tabindex="-1"><a class="header-anchor" href="#doafternext"><span>doAfterNext</span></a></h3><h3 id="dooncomplete" tabindex="-1"><a class="header-anchor" href="#dooncomplete"><span>doOnComplete</span></a></h3><h3 id="oncomplete" tabindex="-1"><a class="header-anchor" href="#oncomplete"><span>OnComplete</span></a></h3><h3 id="then" tabindex="-1"><a class="header-anchor" href="#then"><span>then</span></a></h3><h3 id="flux-create" tabindex="-1"><a class="header-anchor" href="#flux-create"><span>Flux.create</span></a></h3><h3 id="fluxsink" tabindex="-1"><a class="header-anchor" href="#fluxsink"><span>FluxSink</span></a></h3><h2 id="webflux执行流程" tabindex="-1"><a class="header-anchor" href="#webflux执行流程"><span>webflux执行流程</span></a></h2><ul><li>管道与管道之间的交互关系事先建立完成，在订阅时处理</li><li>在执行创建Flux对象及链式调用方法返回最终flux对象时，每一个新的flux对象都记录旧的flux对象</li><li>在执行订阅方法后，向上反馈订阅信息，在每一个flux对象中记录订阅者信息，最终反馈到数据发出的起点处，</li><li>对当前最上级发出元素，执行订阅者的处理方法，最终返回对象</li><li>在订阅处理方法中又可以创建一系列管道，即上述流程</li></ul><h2 id="执行subscribe流程" tabindex="-1"><a class="header-anchor" href="#执行subscribe流程"><span>执行subscribe流程</span></a></h2><ul><li>递归将订阅对象subscriber信息一级一级节点向上传递，一直传递到最上面，每一级节点创建当级订阅对象，</li><li>若节点有上级节点，则将当前节点的订阅对象传递构造上一级的订阅对象</li></ul><blockquote><p>subscribe</p></blockquote><p>调用subscribeOrReturn方法，返回订阅信息，若存在父节点资源，递归构建订阅信息subscriber</p><blockquote><p>subscribeOrReturn方法</p></blockquote><p>返回订阅信息</p><blockquote><p>onSubscribe</p></blockquote><ul><li>订阅完成触发每一级的onSubscribe方法，一级一级节点往下传递订阅信息subscription。</li><li>构造每一级的已订阅的队列信息</li></ul><blockquote><p>subscribeNext</p></blockquote><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface"><span>Interface</span></a></h2><h3 id="subscription" tabindex="-1"><a class="header-anchor" href="#subscription"><span>Subscription</span></a></h3><blockquote><p>request</p></blockquote><p>用于订阅者向发布者请求元素</p><blockquote><p>cancel</p></blockquote><h3 id="subscriber" tabindex="-1"><a class="header-anchor" href="#subscriber"><span>Subscriber</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Subscriber</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    //已订阅，也可通过request发起可处理需求</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onSubscribe</span><span style="color:#000000;">(</span><span style="color:#267F99;">Subscription</span><span style="color:#001080;"> s</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">    //对订阅信息处理</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onNext</span><span style="color:#000000;">(</span><span style="color:#267F99;">T</span><span style="color:#001080;"> t</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onError</span><span style="color:#000000;">(</span><span style="color:#267F99;">Throwable</span><span style="color:#001080;"> t</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#008000;">    //表示订阅已处理完成</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onComplete</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="publisher" tabindex="-1"><a class="header-anchor" href="#publisher"><span>Publisher</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> interface</span><span style="color:#267F99;"> Publisher</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> subscribe</span><span style="color:#000000;">(</span><span style="color:#267F99;">Subscriber</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#0000FF;"> super</span><span style="color:#267F99;"> T</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">s</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="corepublisher" tabindex="-1"><a class="header-anchor" href="#corepublisher"><span>CorePublisher</span></a></h3><h3 id="optimizableoperator" tabindex="-1"><a class="header-anchor" href="#optimizableoperator"><span>OptimizableOperator</span></a></h3><p>继承CorePublisher接口，将递归订阅转化为循环订阅</p><h2 id="mono" tabindex="-1"><a class="header-anchor" href="#mono"><span>Mono</span></a></h2><h3 id="subscribe方法" tabindex="-1"><a class="header-anchor" href="#subscribe方法"><span>subscribe方法</span></a></h3><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public final void subscribe(Subscriber&lt;? super T&gt; actual) {</span></span>
<span class="line"><span>        ////核心订阅者和发布者，先将订阅转为核心，执行subscribeReturn方法</span></span>
<span class="line"><span>		CorePublisher publisher = Operators.onLastAssembly(this);</span></span>
<span class="line"><span>		CoreSubscriber subscriber = Operators.toCoreSubscriber(actual);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		try {</span></span>
<span class="line"><span>			if (publisher instanceof OptimizableOperator) {</span></span>
<span class="line"><span>				OptimizableOperator operator = (OptimizableOperator) publisher;</span></span>
<span class="line"><span>				while (true) {</span></span>
<span class="line"><span>					subscriber = operator.subscribeOrReturn(subscriber);</span></span>
<span class="line"><span>					if (subscriber == null) {</span></span>
<span class="line"><span>						// null means &quot;I will subscribe myself&quot;, returning...</span></span>
<span class="line"><span>						return;</span></span>
<span class="line"><span>					}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>					OptimizableOperator newSource = operator.nextOptimizableSource();</span></span>
<span class="line"><span>					if (newSource == null) {</span></span>
<span class="line"><span>						publisher = operator.source();</span></span>
<span class="line"><span>						break;</span></span>
<span class="line"><span>					}</span></span>
<span class="line"><span>					operator = newSource;</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>			publisher.subscribe(subscriber);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		catch (Throwable e) {</span></span>
<span class="line"><span>			Operators.reportThrowInSubscribe(subscriber, e);</span></span>
<span class="line"><span>			return;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="flatmap方法" tabindex="-1"><a class="header-anchor" href="#flatmap方法"><span>FlatMap方法</span></a></h3><p>对上个节点发出的元素，做处理后再发出</p><h4 id="类的源码分析" tabindex="-1"><a class="header-anchor" href="#类的源码分析"><span>类的源码分析</span></a></h4><p>创建新的Mono对象</p><blockquote><p>MonoFlatMap.FlatMapMain</p></blockquote><p>FlatMapMain订阅者对象</p><p>订阅完成后，触发执行FlatMapMain的onSubscribe方法，通过上级给的Subscription的request方法向上级请求信息，上级订阅者传递信息到下游节点</p><blockquote><p>MonoFlatMap.FlatMapInner</p></blockquote><p>FlatMapInner内部消费者，在创建FlatMapMain订阅者对象时创建内部对象</p><p>主要用于在执行onNext方法，执行lambda处理方法返回新的Mono对象，对新的对象重新订阅</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>//FlatMapMain</span></span>
<span class="line"><span>FlatMapMain(CoreSubscriber&lt;? super R&gt; subscriber,</span></span>
<span class="line"><span>				Function&lt;? super T, ? extends Mono&lt;? extends R&gt;&gt; mapper) {</span></span>
<span class="line"><span>			super(subscriber);</span></span>
<span class="line"><span>			this.mapper = mapper;</span></span>
<span class="line"><span>			//主要用于在执行onNext方法，执行lambda处理方法返回新的Mono对象，对新的对象重新订阅</span></span>
<span class="line"><span>			this.second = new FlatMapInner&lt;&gt;(this);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>//FlatMapInner	</span></span>
<span class="line"><span>public void onNext(R t) {</span></span>
<span class="line"><span>    if (done) {</span></span>
<span class="line"><span>        Operators.onNextDropped(t, parent.currentContext());</span></span>
<span class="line"><span>        return;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    done = true;</span></span>
<span class="line"><span>    this.parent.complete(t);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="thenmany方法" tabindex="-1"><a class="header-anchor" href="#thenmany方法"><span>thenMany方法</span></a></h3><p>返回表示在Mono完成后，新的Flux发布者对象</p><h3 id="flux方法" tabindex="-1"><a class="header-anchor" href="#flux方法"><span>flux方法</span></a></h3><p>转换Mono到Flux</p><h3 id="zip方法" tabindex="-1"><a class="header-anchor" href="#zip方法"><span>zip方法</span></a></h3><p>将三个Mono转为一个Mono</p><h3 id="defer" tabindex="-1"><a class="header-anchor" href="#defer"><span>defer</span></a></h3><h3 id="deferwithcontext" tabindex="-1"><a class="header-anchor" href="#deferwithcontext"><span>deferWithContext</span></a></h3><p>从下游订阅者获取上下文</p><h3 id="subscribecontext-contextwrite" tabindex="-1"><a class="header-anchor" href="#subscribecontext-contextwrite"><span>subscribeContext ContextWrite</span></a></h3><p>产生上下文在订阅的时候传递给上游</p><h2 id="flux" tabindex="-1"><a class="header-anchor" href="#flux"><span>Flux</span></a></h2><h3 id="flatmap方法-1" tabindex="-1"><a class="header-anchor" href="#flatmap方法-1"><span>FlatMap方法</span></a></h3><p>与上述Mono逻辑类似</p><h3 id="defer方法" tabindex="-1"><a class="header-anchor" href="#defer方法"><span>defer方法</span></a></h3><p>延迟创建publisher，在subscribe时创建</p><h3 id="take方法" tabindex="-1"><a class="header-anchor" href="#take方法"><span>take方法</span></a></h3><p>从Flux获取指定数量的元素</p><h3 id="concat方法" tabindex="-1"><a class="header-anchor" href="#concat方法"><span>concat方法</span></a></h3><p>连接发布器列表，即通过顺序订阅第一个源，然后等待它完成，然后再订阅下一个源，以此类推， 直到最后一个源完成。任何错误都将立即中断序列并向下转发。</p><h3 id="then方法" tabindex="-1"><a class="header-anchor" href="#then方法"><span>then方法</span></a></h3><p>返回表示Flux终止的新的Mono对象</p><h3 id="fromiterable方法" tabindex="-1"><a class="header-anchor" href="#fromiterable方法"><span>fromIterable方法</span></a></h3><p>将列表元素转为flux流管道</p><h3 id="as方法" tabindex="-1"><a class="header-anchor" href="#as方法"><span>as方法</span></a></h3><p>将flux转为另一类型</p><h3 id="singleorempty方法" tabindex="-1"><a class="header-anchor" href="#singleorempty方法"><span>singleOrEmpty方法</span></a></h3><p>若Flux为空或单个元素，则成功返回Mono对象，否则报错</p><h3 id="buffer方法" tabindex="-1"><a class="header-anchor" href="#buffer方法"><span>buffer方法</span></a></h3><p>将收到的元素转为list发出</p><h3 id="count" tabindex="-1"><a class="header-anchor" href="#count"><span>count</span></a></h3><p>统计数量，当处理完成后发出</p><h3 id="collectlist" tabindex="-1"><a class="header-anchor" href="#collectlist"><span>collectList</span></a></h3><p>将flux转为list类型Mono</p><h3 id="next" tabindex="-1"><a class="header-anchor" href="#next"><span>next</span></a></h3><p>获取flux中第一个元素，返回Mono对象</p><p>Mono</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> subscribe</span><span style="color:#000000;">(</span><span style="color:#267F99;">Subscriber</span><span style="color:#000000;">&lt;</span><span style="color:#AF00DB;">?</span><span style="color:#0000FF;"> super</span><span style="color:#000000;"> T&gt; actual) {</span></span>
<span class="line"><span style="color:#267F99;">		CorePublisher</span><span style="color:#001080;"> publisher</span><span style="color:#000000;"> = </span><span style="color:#001080;">Operators</span><span style="color:#000000;">.</span><span style="color:#795E26;">onLastAssembly</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        //获取订阅者</span></span>
<span class="line"><span style="color:#267F99;">		CoreSubscriber</span><span style="color:#001080;"> subscriber</span><span style="color:#000000;"> = </span><span style="color:#001080;">Operators</span><span style="color:#000000;">.</span><span style="color:#795E26;">toCoreSubscriber</span><span style="color:#000000;">(actual);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">		try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (publisher </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> OptimizableOperator) {</span></span>
<span class="line"><span style="color:#267F99;">				OptimizableOperator</span><span style="color:#001080;"> operator</span><span style="color:#000000;"> = (OptimizableOperator) publisher;</span></span>
<span class="line"><span style="color:#AF00DB;">				while</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">true</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">					subscriber = </span><span style="color:#001080;">operator</span><span style="color:#000000;">.</span><span style="color:#795E26;">subscribeOrReturn</span><span style="color:#000000;">(subscriber);</span></span>
<span class="line"><span style="color:#AF00DB;">					if</span><span style="color:#000000;"> (subscriber == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">						// null means &quot;I will subscribe myself&quot;, returning...</span></span>
<span class="line"><span style="color:#AF00DB;">						return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">					}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">					OptimizableOperator</span><span style="color:#001080;"> newSource</span><span style="color:#000000;"> = </span><span style="color:#001080;">operator</span><span style="color:#000000;">.</span><span style="color:#795E26;">nextOptimizableSource</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">					if</span><span style="color:#000000;"> (newSource == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#000000;">						publisher = </span><span style="color:#001080;">operator</span><span style="color:#000000;">.</span><span style="color:#795E26;">source</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">						break</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">					}</span></span>
<span class="line"><span style="color:#000000;">					operator = newSource;</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#008000;">            //FluxJust          buffer</span></span>
<span class="line"><span style="color:#001080;">			publisher</span><span style="color:#000000;">.</span><span style="color:#795E26;">subscribe</span><span style="color:#000000;">(subscriber);</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">Throwable</span><span style="color:#001080;"> e</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">			Operators</span><span style="color:#000000;">.</span><span style="color:#795E26;">reportThrowInSubscribe</span><span style="color:#000000;">(subscriber, e);</span></span>
<span class="line"><span style="color:#AF00DB;">			return</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FluxJust</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">	public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> subscribe</span><span style="color:#000000;">(</span><span style="color:#0000FF;">final</span><span style="color:#267F99;"> CoreSubscriber</span><span style="color:#000000;">&lt;</span><span style="color:#AF00DB;">?</span><span style="color:#0000FF;"> super</span><span style="color:#000000;"> T&gt; actual) {</span></span>
<span class="line"><span style="color:#001080;">		actual</span><span style="color:#000000;">.</span><span style="color:#795E26;">onSubscribe</span><span style="color:#000000;">(</span><span style="color:#001080;">Operators</span><span style="color:#000000;">.</span><span style="color:#795E26;">scalarSubscription</span><span style="color:#000000;">(actual, value, </span><span style="color:#A31515;">&quot;just&quot;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FluxBuffer</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> onSubscribe</span><span style="color:#000000;">(</span><span style="color:#267F99;">Subscription</span><span style="color:#000000;"> s) {</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (</span><span style="color:#001080;">Operators</span><span style="color:#000000;">.</span><span style="color:#795E26;">validate</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">s</span><span style="color:#000000;">, s)) {</span></span>
<span class="line"><span style="color:#0000FF;">				this</span><span style="color:#000000;">.</span><span style="color:#001080;">s</span><span style="color:#000000;"> = s;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">				actual</span><span style="color:#000000;">.</span><span style="color:#795E26;">onSubscribe</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FluxMapMain核心订阅者信息</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void onSubscribe(Subscription s) {</span></span>
<span class="line"><span>			if (Operators.validate(this.s, s)) {</span></span>
<span class="line"><span>				this.s = s;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>				actual.onSubscribe(this);</span></span>
<span class="line"><span>				s.request(Operators.unboundedOrPrefetch(maxConcurrency));</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>Context</span></a></h2><p>响应式编程无法在线程局部变量中存放用户信息，需要构建订阅的上下文Context的内容(键值对的形式)传递到上游发布者</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> WebFluxLocaleFilter</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> WebFilter</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">NonNull</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">filter</span><span style="color:#000000;">(@</span><span style="color:#267F99;">NonNull</span><span style="color:#267F99;"> ServerWebExchange</span><span style="color:#001080;"> exchange</span><span style="color:#000000;">, </span><span style="color:#267F99;">WebFilterChain</span><span style="color:#001080;"> chain</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> chain</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">filter</span><span style="color:#000000;">(exchange)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">as</span><span style="color:#000000;">(LocaleUtils</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">transform)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">subscriberContext</span><span style="color:#000000;">(</span><span style="color:#001080;">LocaleUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">useLocale</span><span style="color:#000000;">(</span><span style="color:#795E26;">getLocaleContext</span><span style="color:#000000;">(exchange)));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Locale</span><span style="color:#795E26;"> getLocaleContext</span><span style="color:#000000;">(</span><span style="color:#267F99;">ServerWebExchange</span><span style="color:#001080;"> exchange</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">        String</span><span style="color:#001080;"> lang</span><span style="color:#000000;"> = </span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRequest</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                              .</span><span style="color:#795E26;">getQueryParams</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                              .</span><span style="color:#795E26;">getFirst</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;:lang&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">StringUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">hasText</span><span style="color:#000000;">(lang)) {</span></span>
<span class="line"><span style="color:#AF00DB;">            return</span><span style="color:#001080;"> Locale</span><span style="color:#000000;">.</span><span style="color:#795E26;">forLanguageTag</span><span style="color:#000000;">(lang);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#267F99;">        Locale</span><span style="color:#001080;"> locale</span><span style="color:#000000;"> = </span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">getLocaleContext</span><span style="color:#000000;">().</span><span style="color:#795E26;">getLocale</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (locale == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">            return</span><span style="color:#001080;"> Locale</span><span style="color:#000000;">.</span><span style="color:#795E26;">getDefault</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> locale;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Locale</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">currentReactive</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#267F99;"> Mono</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">subscriberContext</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">map</span><span style="color:#000000;">(ctx </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> ctx</span><span style="color:#000000;">.</span><span style="color:#795E26;">getOrDefault</span><span style="color:#000000;">(</span><span style="color:#001080;">Locale</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, DEFAULT_LOCALE));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式事务" tabindex="-1"><a class="header-anchor" href="#响应式事务"><span>响应式事务</span></a></h2><p>事务配置 r2dbc配置 aop配置</p><h4 id="r2dbc" tabindex="-1"><a class="header-anchor" href="#r2dbc"><span>r2dbc</span></a></h4><p>ConnectionFactoryConfigurations</p><p>R2dbcTransactionManagerAutoConfiguration</p><p>ConnectionPool 包含ConnectionFactory、ConnectionPoolConfiguration</p><p>ConnectionFactory</p><p>R2dbcTransactionManager</p>`,133),t=[p];function o(r,i){return n(),a("div",null,t)}const u=s(e,[["render",o],["__file","webflux.html.vue"]]),b=JSON.parse('{"path":"/note/spring/webflux.html","title":"Webflux","lang":"zh-CN","frontmatter":{"category":["spring"],"description":"Reactor stream api 规范 reactor框架 webflux基于reactor的响应式web框架，基于事件驱动通知的web框架 核心 充分利用CPU，提高单位时间内的吞吐量。当一个请求发出，不用一直等待数据的返回，而是处理其他任务，等数据准备好，再通过事件通知方式处理。 发布和订阅的思想，不能有阻塞操作 构造存放多个回调方法,当得到元...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/spring/webflux.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"Webflux"}],["meta",{"property":"og:description","content":"Reactor stream api 规范 reactor框架 webflux基于reactor的响应式web框架，基于事件驱动通知的web框架 核心 充分利用CPU，提高单位时间内的吞吐量。当一个请求发出，不用一直等待数据的返回，而是处理其他任务，等数据准备好，再通过事件通知方式处理。 发布和订阅的思想，不能有阻塞操作 构造存放多个回调方法,当得到元..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-25T11:09:49.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2022-12-25T11:09:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Webflux\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-25T11:09:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"webHandler","slug":"webhandler","link":"#webhandler","children":[]},{"level":2,"title":"HttpHandler","slug":"httphandler","link":"#httphandler","children":[]},{"level":2,"title":"响应式项目初始化","slug":"响应式项目初始化","link":"#响应式项目初始化","children":[{"level":3,"title":"WebFluxAutoConfiguration","slug":"webfluxautoconfiguration","link":"#webfluxautoconfiguration","children":[]},{"level":3,"title":"HttpHandlerAutoConfiguration","slug":"httphandlerautoconfiguration","link":"#httphandlerautoconfiguration","children":[]},{"level":3,"title":"ReactiveWebServerApplicationContext","slug":"reactivewebserverapplicationcontext","link":"#reactivewebserverapplicationcontext","children":[]},{"level":3,"title":"NettyWebServer","slug":"nettywebserver","link":"#nettywebserver","children":[]},{"level":3,"title":"HttpServer","slug":"httpserver","link":"#httpserver","children":[]},{"level":3,"title":"核心类","slug":"核心类","link":"#核心类","children":[]}]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[{"level":3,"title":"doOnSubscribe","slug":"doonsubscribe","link":"#doonsubscribe","children":[]},{"level":3,"title":"onSubscribe","slug":"onsubscribe","link":"#onsubscribe","children":[]},{"level":3,"title":"doOnEach","slug":"dooneach","link":"#dooneach","children":[]},{"level":3,"title":"doOnNext","slug":"doonnext","link":"#doonnext","children":[]},{"level":3,"title":"OnNext","slug":"onnext","link":"#onnext","children":[]},{"level":3,"title":"doAfterNext","slug":"doafternext","link":"#doafternext","children":[]},{"level":3,"title":"doOnComplete","slug":"dooncomplete","link":"#dooncomplete","children":[]},{"level":3,"title":"OnComplete","slug":"oncomplete","link":"#oncomplete","children":[]},{"level":3,"title":"then","slug":"then","link":"#then","children":[]},{"level":3,"title":"Flux.create","slug":"flux-create","link":"#flux-create","children":[]},{"level":3,"title":"FluxSink","slug":"fluxsink","link":"#fluxsink","children":[]}]},{"level":2,"title":"webflux执行流程","slug":"webflux执行流程","link":"#webflux执行流程","children":[]},{"level":2,"title":"执行subscribe流程","slug":"执行subscribe流程","link":"#执行subscribe流程","children":[]},{"level":2,"title":"Interface","slug":"interface","link":"#interface","children":[{"level":3,"title":"Subscription","slug":"subscription","link":"#subscription","children":[]},{"level":3,"title":"Subscriber","slug":"subscriber","link":"#subscriber","children":[]},{"level":3,"title":"Publisher","slug":"publisher","link":"#publisher","children":[]},{"level":3,"title":"CorePublisher","slug":"corepublisher","link":"#corepublisher","children":[]},{"level":3,"title":"OptimizableOperator","slug":"optimizableoperator","link":"#optimizableoperator","children":[]}]},{"level":2,"title":"Mono","slug":"mono","link":"#mono","children":[{"level":3,"title":"subscribe方法","slug":"subscribe方法","link":"#subscribe方法","children":[]},{"level":3,"title":"FlatMap方法","slug":"flatmap方法","link":"#flatmap方法","children":[]},{"level":3,"title":"thenMany方法","slug":"thenmany方法","link":"#thenmany方法","children":[]},{"level":3,"title":"flux方法","slug":"flux方法","link":"#flux方法","children":[]},{"level":3,"title":"zip方法","slug":"zip方法","link":"#zip方法","children":[]},{"level":3,"title":"defer","slug":"defer","link":"#defer","children":[]},{"level":3,"title":"deferWithContext","slug":"deferwithcontext","link":"#deferwithcontext","children":[]},{"level":3,"title":"subscribeContext ContextWrite","slug":"subscribecontext-contextwrite","link":"#subscribecontext-contextwrite","children":[]}]},{"level":2,"title":"Flux","slug":"flux","link":"#flux","children":[{"level":3,"title":"FlatMap方法","slug":"flatmap方法-1","link":"#flatmap方法-1","children":[]},{"level":3,"title":"defer方法","slug":"defer方法","link":"#defer方法","children":[]},{"level":3,"title":"take方法","slug":"take方法","link":"#take方法","children":[]},{"level":3,"title":"concat方法","slug":"concat方法","link":"#concat方法","children":[]},{"level":3,"title":"then方法","slug":"then方法","link":"#then方法","children":[]},{"level":3,"title":"fromIterable方法","slug":"fromiterable方法","link":"#fromiterable方法","children":[]},{"level":3,"title":"as方法","slug":"as方法","link":"#as方法","children":[]},{"level":3,"title":"singleOrEmpty方法","slug":"singleorempty方法","link":"#singleorempty方法","children":[]},{"level":3,"title":"buffer方法","slug":"buffer方法","link":"#buffer方法","children":[]},{"level":3,"title":"count","slug":"count","link":"#count","children":[]},{"level":3,"title":"collectList","slug":"collectlist","link":"#collectlist","children":[]},{"level":3,"title":"next","slug":"next","link":"#next","children":[]}]},{"level":2,"title":"Context","slug":"context","link":"#context","children":[]},{"level":2,"title":"响应式事务","slug":"响应式事务","link":"#响应式事务","children":[]}],"git":{"createdTime":1669541777000,"updatedTime":1671966589000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":4}]},"readingTime":{"minutes":5.87,"words":1761},"filePathRelative":"note/spring/webflux.md","localizedDate":"2022年11月27日","excerpt":"\\n<ul>\\n<li>\\n<p>Reactor stream api 规范</p>\\n</li>\\n<li>\\n<p>reactor框架</p>\\n</li>\\n<li>\\n<p>webflux基于reactor的响应式web框架，基于事件驱动通知的web框架</p>\\n</li>\\n</ul>\\n<blockquote>\\n<p>核心</p>\\n</blockquote>\\n<p>充分利用CPU，提高单位时间内的吞吐量。当一个请求发出，不用一直等待数据的返回，而是处理其他任务，等数据准备好，再通过<strong>事件通知方式</strong>处理。</p>\\n<p>发布和订阅的思想，不能有阻塞操作</p>\\n<p>构造存放多个回调方法,当得到元素，再执行回调方法处理，而不是以往的按顺序同步执行方法</p>\\n","autoDesc":true}');export{u as comp,b as data};
