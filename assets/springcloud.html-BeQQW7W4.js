import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as l,e}from"./app-hoN0JGLf.js";const a={},o=e(`<h1 id="springcloud" tabindex="-1"><a class="header-anchor" href="#springcloud"><span>springCloud</span></a></h1><h2 id="配置动态更新" tabindex="-1"><a class="header-anchor" href="#配置动态更新"><span>配置动态更新</span></a></h2><ol><li>Spring提供了一种机制来自动更新被@ConfigurationProperties注解的Bean对象的属性值。 这个机制称为Spring Cloud Config，并且需要使用Spring Cloud Config Server和Spring Cloud Config Client来实现。</li><li>Spring Cloud Config还提供了一种机制来自动刷新依赖该对象的其他Bean对象。这个机制称为Spring Cloud Config Client的Refresh Scope。</li></ol><blockquote><p>引入spring-cloud相关依赖</p></blockquote><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#800000;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;groupId&gt;</span><span style="color:#000000;">org.springframework.cloud</span><span style="color:#800000;">&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;artifactId&gt;</span><span style="color:#000000;">spring-cloud-context</span><span style="color:#800000;">&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/dependency&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;dependency&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;groupId&gt;</span><span style="color:#000000;">org.springframework.cloud</span><span style="color:#800000;">&lt;/groupId&gt;</span></span>
<span class="line"><span style="color:#800000;">    &lt;artifactId&gt;</span><span style="color:#000000;">spring-cloud-starter-config</span><span style="color:#800000;">&lt;/artifactId&gt;</span></span>
<span class="line"><span style="color:#800000;">&lt;/dependency&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用</p></blockquote><ul><li>@ConfigurationProperties,只是更新了属性值，还是原来的单例对象</li><li>@Value</li><li>@RefreshScope 代理对象不变，消除缓存，重新创建原始对象</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Service</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">RefreshScope</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> AsyncHandleService</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> Executor</span><span style="color:#001080;"> executor</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#795E26;"> AsyncHandleService</span><span style="color:#000000;">(</span><span style="color:#267F99;">KafkaAsyncProperties</span><span style="color:#001080;"> kafkaAsyncProperties</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">        this</span><span style="color:#000000;">.</span><span style="color:#001080;">executor</span><span style="color:#000000;"> =  </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ThreadPoolExecutor</span><span style="color:#000000;">(</span><span style="color:#001080;">kafkaAsyncProperties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getCorePoolSize</span><span style="color:#000000;">(), </span><span style="color:#001080;">kafkaAsyncProperties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getMaxPoolSize</span><span style="color:#000000;">(),</span></span>
<span class="line"><span style="color:#001080;">                kafkaAsyncProperties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getKeepAliveTime</span><span style="color:#000000;">(), </span><span style="color:#001080;">TimeUnit</span><span style="color:#000000;">.</span><span style="color:#001080;">MILLISECONDS</span><span style="color:#000000;">,</span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayBlockingQueue</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#001080;">kafkaAsyncProperties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBlockQueueSize</span><span style="color:#000000;">()),</span></span>
<span class="line"><span style="color:#AF00DB;">                new</span><span style="color:#000000;"> ThreadPoolExecutor.</span><span style="color:#795E26;">CallerRunsPolicy</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    /**</span></span>
<span class="line"><span style="color:#008000;">     * 执行任务</span></span>
<span class="line"><span style="color:#008000;">     */</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> execute</span><span style="color:#000000;">(</span><span style="color:#267F99;">Runnable</span><span style="color:#001080;"> command</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        executor</span><span style="color:#000000;">.</span><span style="color:#795E26;">execute</span><span style="color:#000000;">(command);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),p=[o];function i(r,t){return s(),l("div",null,p)}const u=n(a,[["render",i],["__file","springcloud.html.vue"]]),y=JSON.parse('{"path":"/note/spring/springcloud.html","title":"springCloud","lang":"zh-CN","frontmatter":{"description":"springCloud 配置动态更新 Spring提供了一种机制来自动更新被@ConfigurationProperties注解的Bean对象的属性值。 这个机制称为Spring Cloud Config，并且需要使用Spring Cloud Config Server和Spring Cloud Config Client来实现。 Spring Clo...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/spring/springcloud.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"springCloud"}],["meta",{"property":"og:description","content":"springCloud 配置动态更新 Spring提供了一种机制来自动更新被@ConfigurationProperties注解的Bean对象的属性值。 这个机制称为Spring Cloud Config，并且需要使用Spring Cloud Config Server和Spring Cloud Config Client来实现。 Spring Clo..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-01T11:34:43.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-08-01T11:34:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"springCloud\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-01T11:34:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"配置动态更新","slug":"配置动态更新","link":"#配置动态更新","children":[]}],"git":{"createdTime":1690889683000,"updatedTime":1690889683000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":1}]},"readingTime":{"minutes":0.7,"words":210},"filePathRelative":"note/spring/springcloud.md","localizedDate":"2023年8月1日","excerpt":"\\n<h2>配置动态更新</h2>\\n<ol>\\n<li>Spring提供了一种机制来自动更新被@ConfigurationProperties注解的Bean对象的属性值。\\n这个机制称为Spring Cloud Config，并且需要使用Spring Cloud Config Server和Spring Cloud Config Client来实现。</li>\\n<li>Spring Cloud Config还提供了一种机制来自动刷新依赖该对象的其他Bean对象。这个机制称为Spring Cloud Config Client的Refresh Scope。</li>\\n</ol>\\n<blockquote>\\n<p>引入spring-cloud相关依赖</p>\\n</blockquote>","autoDesc":true}');export{u as comp,y as data};
