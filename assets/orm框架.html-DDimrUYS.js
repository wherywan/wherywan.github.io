import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as a,e as l}from"./app-hoN0JGLf.js";const e={},p=l(`<h1 id="orm" tabindex="-1"><a class="header-anchor" href="#orm"><span>orm</span></a></h1><h2 id="如何处理多数据源" tabindex="-1"><a class="header-anchor" href="#如何处理多数据源"><span>如何处理多数据源？</span></a></h2><ul><li>直接获取jdbc模版jdbcTemplate,设置数据源</li><li>调用模版查询方法，对结果处理</li></ul><h2 id="datasource" tabindex="-1"><a class="header-anchor" href="#datasource"><span>datasource</span></a></h2><ul><li>包含数据库基本信息,即操作的数据库</li><li>可配置多数据源</li></ul><h2 id="jdbctemplate" tabindex="-1"><a class="header-anchor" href="#jdbctemplate"><span>jdbcTemplate</span></a></h2><p>对数据库操作的jdbc模板,做增删改查操作</p><h2 id="namedparameterjdbctemplate" tabindex="-1"><a class="header-anchor" href="#namedparameterjdbctemplate"><span>NamedParameterJdbcTemplate</span></a></h2><p>可以使用具体名称形式的占位符，而不是传统的 ? 形式，</p><blockquote><p>样例</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">select</span><span style="color:#000000;"> * </span><span style="color:#0000FF;">from</span><span style="color:#000000;"> student </span><span style="color:#0000FF;">where</span><span style="color:#0000FF;"> name</span><span style="color:#000000;"> = </span><span style="color:#A31515;">&#39;\${name}&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="factory" tabindex="-1"><a class="header-anchor" href="#factory"><span>factory</span></a></h2><blockquote><p>MiniDaoBeanFactory</p></blockquote><p>自定义生成<code>dao接口</code>的<code>代理对象</code>的<code>工厂bean</code></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MiniDaoBeanFactory</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#0000FF;">implements</span><span style="color:#267F99;"> FactoryBean</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; {</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#008000;">    //dao接口</span></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#267F99;"> Class</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">daoInterface</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    //代理对象调用处理器</span></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#267F99;"> MiniDaoHandler</span><span style="color:#001080;"> proxy</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> T</span><span style="color:#795E26;"> getObject</span><span style="color:#000000;">() </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> Exception</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#795E26;"> newInstance</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Class</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">getObjectType</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> daoInterface;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> MiniDaoHandler</span><span style="color:#795E26;"> getProxy</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> proxy;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> boolean</span><span style="color:#795E26;"> isSingleton</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#0000FF;"> true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#008000;">    //生成代理对象</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">SuppressWarnings</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;unchecked&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#267F99;"> T</span><span style="color:#795E26;"> newInstance</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> (T) </span><span style="color:#001080;">Proxy</span><span style="color:#000000;">.</span><span style="color:#795E26;">newProxyInstance</span><span style="color:#000000;">(</span><span style="color:#001080;">daoInterface</span><span style="color:#000000;">.</span><span style="color:#795E26;">getClassLoader</span><span style="color:#000000;">(), </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> Class</span><span style="color:#000000;">[] { daoInterface }, proxy);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> setProxy</span><span style="color:#000000;">(</span><span style="color:#267F99;">MiniDaoHandler</span><span style="color:#001080;"> proxy</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">        this</span><span style="color:#000000;">.</span><span style="color:#001080;">proxy</span><span style="color:#000000;"> = proxy;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> setDaoInterface</span><span style="color:#000000;">(</span><span style="color:#267F99;">Class</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">T</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">daoInterface</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#0000FF;">        this</span><span style="color:#000000;">.</span><span style="color:#001080;">daoInterface</span><span style="color:#000000;"> = daoInterface;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MiniDaoBeanScannerConfigurer 对BeanFactoryPostProcessor的拓展，允许在常规的BeanFactoryPostProcessor检测生效之前注册进一步的bean定义。 特别地，BeanDefinitionRegistryPostProcessor可以注册进一步的bean定义，这些定义反过来定义BeanFactoryPostProcessor实例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MiniDaoBeanScannerConfigurer</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>MiniDaoClassPathMapperScanner 根据类路径扫描dao接口，并生成beanDefinition,使用工厂bean来生成bean对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MiniDaoClassPathMapperScanner</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> ClassPathBeanDefinitionScanner</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Set</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanDefinitionHolder</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">doScan</span><span style="color:#000000;">(</span><span style="color:#267F99;">String</span><span style="color:#000000;">... </span><span style="color:#001080;">basePackages</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">        Set</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanDefinitionHolder</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">beanDefinitions</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">super</span><span style="color:#000000;">.</span><span style="color:#795E26;">doScan</span><span style="color:#000000;">(basePackages);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">beanDefinitions</span><span style="color:#000000;">.</span><span style="color:#795E26;">isEmpty</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">            logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">warn</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;No Dao interface was found in &#39;&quot;</span><span style="color:#000000;"> + </span><span style="color:#001080;">Arrays</span><span style="color:#000000;">.</span><span style="color:#795E26;">toString</span><span style="color:#000000;">(basePackages) + </span><span style="color:#A31515;">&quot;&#39; package. Please check your configuration.&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#267F99;">        GenericBeanDefinition</span><span style="color:#001080;"> definition</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">        for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">BeanDefinitionHolder</span><span style="color:#001080;"> holder</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> beanDefinitions) {</span></span>
<span class="line"><span style="color:#000000;">            definition = (GenericBeanDefinition) </span><span style="color:#001080;">holder</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanDefinition</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#008000;">            //手动设置beanDefinition中要注入的依赖属性,使用set方法注入</span></span>
<span class="line"><span style="color:#001080;">            definition</span><span style="color:#000000;">.</span><span style="color:#795E26;">getPropertyValues</span><span style="color:#000000;">().</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;proxy&quot;</span><span style="color:#000000;">, </span><span style="color:#795E26;">getRegistry</span><span style="color:#000000;">().</span><span style="color:#795E26;">getBeanDefinition</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;miniDaoHandler&quot;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">            definition</span><span style="color:#000000;">.</span><span style="color:#795E26;">getPropertyValues</span><span style="color:#000000;">().</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;daoInterface&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">definition</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanClassName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">            if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isInfoEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">                logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">info</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;register minidao name is { &quot;</span><span style="color:#000000;"> + </span><span style="color:#001080;">definition</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanClassName</span><span style="color:#000000;">() + </span><span style="color:#A31515;">&quot; }&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#001080;">            definition</span><span style="color:#000000;">.</span><span style="color:#795E26;">setBeanClass</span><span style="color:#000000;">(</span><span style="color:#001080;">MiniDaoBeanFactory</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> beanDefinitions;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mybatis-plus" tabindex="-1"><a class="header-anchor" href="#mybatis-plus"><span>mybatis-plus</span></a></h2><h3 id="更新" tabindex="-1"><a class="header-anchor" href="#更新"><span>更新</span></a></h3><p>mybatis-plus FieldStrategy 有三种策略：</p><ul><li>IGNORED：0 忽略</li><li>NOT_NULL：1 非 NULL，默认策略</li><li>NOT_EMPTY：2 非空 而默认更新策略是NOT_NULL：非 NULL；即通过接口更新数据时数据为NULL值时将不更新进数据库。</li></ul><blockquote><p>设数据库值为null</p></blockquote><ol><li>写sql。直接在xml中写update sql语句。</li><li>设置全局策略</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml" data-title="yml"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;"># yml文件格式： </span></span>
<span class="line"><span style="color:#008000;"># 这样做是全局配置，会对所有字段忽略判断。如果一些字段没有传值过来，会被直接更新为null，可能会影响其他业务数据的准确性。 不推荐</span></span>
<span class="line"><span style="color:#800000;">mybatis-plus</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#800000;">  global-config</span><span style="color:#000000;">:</span></span>
<span class="line"><span style="color:#008000;">      #字段策略 0:&quot;忽略判断&quot;,1:&quot;非 NULL 判断&quot;,2:&quot;非空判断&quot;</span></span>
<span class="line"><span style="color:#800000;">    field-strategy</span><span style="color:#000000;">: </span><span style="color:#098658;">0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>对指定字段单独设置field-strategy</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">/**</span></span>
<span class="line"><span style="color:#008000;"> *   如果需要这样处理的字段较多，那么就涉及到给各个字段加注解，这样弊端也就比较明显了。</span></span>
<span class="line"><span style="color:#008000;"> */</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">TableField</span><span style="color:#000000;">(updateStrategy = </span><span style="color:#001080;">FieldStrategy</span><span style="color:#000000;">.</span><span style="color:#001080;">IGNORED</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">private</span><span style="color:#267F99;"> Date</span><span style="color:#001080;"> patchedDate</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">DbPatchScheduleEntity</span><span style="color:#001080;"> schedule</span><span style="color:#000000;"> = </span><span style="color:#001080;">dbPatchScheduleService</span><span style="color:#000000;">.</span><span style="color:#795E26;">getById</span><span style="color:#000000;">(</span><span style="color:#001080;">scheduleRequest</span><span style="color:#000000;">.</span><span style="color:#795E26;">getScheduleId</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">schedule</span><span style="color:#000000;">.</span><span style="color:#795E26;">setScheduleStatus</span><span style="color:#000000;">(</span><span style="color:#001080;">DbPatchConstant</span><span style="color:#000000;">.</span><span style="color:#001080;">ScheduleStatus</span><span style="color:#000000;">.</span><span style="color:#001080;">UNSCHEDULED</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">schedule</span><span style="color:#000000;">.</span><span style="color:#795E26;">setPatchedDate</span><span style="color:#000000;">(</span><span style="color:#0000FF;">null</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">dbPatchScheduleService</span><span style="color:#000000;">.</span><span style="color:#795E26;">updateById</span><span style="color:#000000;">(schedule);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>使用UpdateWrapper方式更新</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#008000;">// updateWrapper方式更新</span></span>
<span class="line"><span style="color:#267F99;">List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">DbPatchScheduleRequestEntity</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">scheduleRequestList</span><span style="color:#000000;"> = </span><span style="color:#001080;">dbPatchScheduleRequestService</span><span style="color:#000000;">.</span><span style="color:#795E26;">list</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> QueryWrapper</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">DbPatchScheduleRequestEntity</span><span style="color:#000000;">&gt;().</span><span style="color:#795E26;">lambda</span><span style="color:#000000;">().</span><span style="color:#795E26;">eq</span><span style="color:#000000;">(DbPatchScheduleRequestEntity</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">getRequestId, requestId));</span></span>
<span class="line"><span style="color:#001080;">        scheduleRequestList</span><span style="color:#000000;">.</span><span style="color:#795E26;">forEach</span><span style="color:#000000;">(scheduleRequest </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        dbPatchScheduleRequestService</span><span style="color:#000000;">.</span><span style="color:#795E26;">update</span><span style="color:#000000;">(scheduleRequest, </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> UpdateWrapper</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">DbPatchScheduleRequestEntity</span><span style="color:#000000;">&gt;().</span><span style="color:#795E26;">lambda</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">        .</span><span style="color:#795E26;">set</span><span style="color:#000000;">(DbPatchScheduleRequestEntity</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">getScheduleStatus, </span><span style="color:#001080;">DbPatchConstant</span><span style="color:#000000;">.</span><span style="color:#001080;">ScheduleStatus</span><span style="color:#000000;">.</span><span style="color:#001080;">UNSCHEDULED</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">        .</span><span style="color:#795E26;">set</span><span style="color:#000000;">(DbPatchScheduleRequestEntity</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">getPatchedDate, </span><span style="color:#0000FF;">null</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">        .</span><span style="color:#795E26;">eq</span><span style="color:#000000;">(DbPatchScheduleRequestEntity</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">getId, </span><span style="color:#001080;">scheduleRequest</span><span style="color:#000000;">.</span><span style="color:#795E26;">getId</span><span style="color:#000000;">()));</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应式orm" tabindex="-1"><a class="header-anchor" href="#响应式orm"><span>响应式orm</span></a></h2>`,31),o=[p];function t(c,r){return n(),a("div",null,o)}const y=s(e,[["render",t],["__file","orm框架.html.vue"]]),u=JSON.parse('{"path":"/note/%E4%B8%AD%E9%97%B4%E4%BB%B6/orm%E6%A1%86%E6%9E%B6.html","title":"orm","lang":"zh-CN","frontmatter":{"description":"orm 如何处理多数据源？ 直接获取jdbc模版jdbcTemplate,设置数据源 调用模版查询方法，对结果处理 datasource 包含数据库基本信息,即操作的数据库 可配置多数据源 jdbcTemplate 对数据库操作的jdbc模板,做增删改查操作 NamedParameterJdbcTemplate 可以使用具体名称形式的占位符，而不是传统...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E4%B8%AD%E9%97%B4%E4%BB%B6/orm%E6%A1%86%E6%9E%B6.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"orm"}],["meta",{"property":"og:description","content":"orm 如何处理多数据源？ 直接获取jdbc模版jdbcTemplate,设置数据源 调用模版查询方法，对结果处理 datasource 包含数据库基本信息,即操作的数据库 可配置多数据源 jdbcTemplate 对数据库操作的jdbc模板,做增删改查操作 NamedParameterJdbcTemplate 可以使用具体名称形式的占位符，而不是传统..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-05T07:01:27.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2022-12-05T07:01:27.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"orm\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2022-12-05T07:01:27.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"如何处理多数据源？","slug":"如何处理多数据源","link":"#如何处理多数据源","children":[]},{"level":2,"title":"datasource","slug":"datasource","link":"#datasource","children":[]},{"level":2,"title":"jdbcTemplate","slug":"jdbctemplate","link":"#jdbctemplate","children":[]},{"level":2,"title":"NamedParameterJdbcTemplate","slug":"namedparameterjdbctemplate","link":"#namedparameterjdbctemplate","children":[]},{"level":2,"title":"factory","slug":"factory","link":"#factory","children":[]},{"level":2,"title":"mybatis-plus","slug":"mybatis-plus","link":"#mybatis-plus","children":[{"level":3,"title":"更新","slug":"更新","link":"#更新","children":[]}]},{"level":2,"title":"响应式orm","slug":"响应式orm","link":"#响应式orm","children":[]}],"git":{"createdTime":1662378969000,"updatedTime":1670223687000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":3},{"name":"wanhongji","email":"wan_hongji@163.com","commits":1}]},"readingTime":{"minutes":2.29,"words":688},"filePathRelative":"note/中间件/orm框架.md","localizedDate":"2022年9月5日","excerpt":"\\n<h2>如何处理多数据源？</h2>\\n<ul>\\n<li>直接获取jdbc模版jdbcTemplate,设置数据源</li>\\n<li>调用模版查询方法，对结果处理</li>\\n</ul>\\n<h2>datasource</h2>\\n<ul>\\n<li>包含数据库基本信息,即操作的数据库</li>\\n<li>可配置多数据源</li>\\n</ul>\\n<h2>jdbcTemplate</h2>\\n<p>对数据库操作的jdbc模板,做增删改查操作</p>\\n<h2>NamedParameterJdbcTemplate</h2>\\n<p>可以使用具体名称形式的占位符，而不是传统的 ? 形式，</p>\\n<blockquote>\\n<p>样例</p>\\n</blockquote>","autoDesc":true}');export{y as comp,u as data};
