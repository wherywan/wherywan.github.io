import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,o as a,c,a as e,b as n,d as s,e as i}from"./app-hoN0JGLf.js";const p={},l=i('<h1 id="protocol" tabindex="-1"><a class="header-anchor" href="#protocol"><span>protocol</span></a></h1><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>websocket</span></a></h2><p>WebSocket 是 HTML5 的重要特性，它实现了基于浏览器的远程 socket，它使浏览器和服务器可以进行全双工通信， 许多浏览器（Firefox、Google Chrom e 和 Safari）都已对此做了支持。</p><p>在 WebSocket 出现之前，为了实现即时通信，采用的技术都是 “轮询”，即在特定的时间间隔内，由浏览器对服务器发出 HTTP Request， 服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询” 使得浏览器需要对服务器不断发出请求，这样会占用大量带宽。</p><p>WebSocket 采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态 你可以使用 JavaScript 来向连接写入或从中接收数据，就像在使用一个常规的 TCP Socket 一样。它解决了 Web 实时化的问题，相比传统 HTTP 有如下好处：</p><ul><li>一个 Web 客户端只建立一个 TCP 连接</li><li>Websocket 服务端可以推送 (push) 数据到 web 客户端.</li><li>有更加轻量级的头，减少数据传送量</li></ul><p>WebSocket URL 的起始输入是 ws:// 或是 wss://（在 SSL 上）</p><p>WebSocket 的协议颇为简单，在第一次 handshake 通过以后，连接便建立成功，其后的通讯数据都是以 ”\\x00″ 开头，以 ”\\xFF” 结尾。在客户端，这个是透明的，WebSocket 组件会自动将原始数据 “掐头去尾”。</p><h2 id="kerberos认证协议" tabindex="-1"><a class="header-anchor" href="#kerberos认证协议"><span>kerberos认证协议</span></a></h2>',9),h={href:"https://blog.csdn.net/weixin_38233104/article/details/122963237",target:"_blank",rel:"noopener noreferrer"},d=e("p",null,"和Oauth2授权码认证类似，在通信过程加了密钥处理",-1);function m(k,b){const t=r("ExternalLinkIcon");return a(),c("div",null,[l,e("p",null,[e("a",h,[n("参考"),s(t)])]),d])}const f=o(p,[["render",m],["__file","协议.html.vue"]]),g=JSON.parse('{"path":"/note/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/%E5%8D%8F%E8%AE%AE.html","title":"protocol","lang":"zh-CN","frontmatter":{"description":"protocol websocket WebSocket 是 HTML5 的重要特性，它实现了基于浏览器的远程 socket，它使浏览器和服务器可以进行全双工通信， 许多浏览器（Firefox、Google Chrom e 和 Safari）都已对此做了支持。 在 WebSocket 出现之前，为了实现即时通信，采用的技术都是 “轮询”，即在特定的时间...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/%E5%8D%8F%E8%AE%AE.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"protocol"}],["meta",{"property":"og:description","content":"protocol websocket WebSocket 是 HTML5 的重要特性，它实现了基于浏览器的远程 socket，它使浏览器和服务器可以进行全双工通信， 许多浏览器（Firefox、Google Chrom e 和 Safari）都已对此做了支持。 在 WebSocket 出现之前，为了实现即时通信，采用的技术都是 “轮询”，即在特定的时间..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-16T09:22:05.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-08-16T09:22:05.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"protocol\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-16T09:22:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"websocket","slug":"websocket","link":"#websocket","children":[]},{"level":2,"title":"kerberos认证协议","slug":"kerberos认证协议","link":"#kerberos认证协议","children":[]}],"git":{"createdTime":1667655547000,"updatedTime":1692177725000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":2}]},"readingTime":{"minutes":1.44,"words":431},"filePathRelative":"note/网络通信/协议.md","localizedDate":"2022年11月5日","excerpt":"\\n<h2>websocket</h2>\\n<p>WebSocket 是 HTML5 的重要特性，它实现了基于浏览器的远程 socket，它使浏览器和服务器可以进行全双工通信，\\n许多浏览器（Firefox、Google Chrom e 和 Safari）都已对此做了支持。</p>\\n<p>在 WebSocket 出现之前，为了实现即时通信，采用的技术都是 “轮询”，即在特定的时间间隔内，由浏览器对服务器发出 HTTP Request，\\n服务器在收到请求后，返回最新的数据给浏览器刷新，“轮询” 使得浏览器需要对服务器不断发出请求，这样会占用大量带宽。</p>\\n<p>WebSocket 采用了一些特殊的报头，使得浏览器和服务器只需要做一个握手的动作，就可以在浏览器和服务器之间建立一条连接通道。且此连接会保持在活动状态\\n你可以使用 JavaScript 来向连接写入或从中接收数据，就像在使用一个常规的 TCP Socket 一样。它解决了 Web 实时化的问题，相比传统 HTTP 有如下好处：</p>","autoDesc":true}');export{f as comp,g as data};
