import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as i,c as o,a as s,b as a,d as e,e as l}from"./app-hoN0JGLf.js";const r={},c=l(`<h1 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>spring</span></a></h1><h2 id="spring-validation" tabindex="-1"><a class="header-anchor" href="#spring-validation"><span>spring validation</span></a></h2><h3 id="手动进行请求参数校验-获取校验结果" tabindex="-1"><a class="header-anchor" href="#手动进行请求参数校验-获取校验结果"><span>手动进行请求参数校验，获取校验结果</span></a></h3><ul><li>注入mvcValidator的Validator</li><li>使用mvcValidator进行校验，获取校验结果</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> Test</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> Validator</span><span style="color:#001080;"> mvcValidator</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> SpResult</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Integer</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">update</span><span style="color:#000000;">(@</span><span style="color:#267F99;">RequestBody</span><span style="color:#267F99;"> AlarmConfigUpdateDTO</span><span style="color:#001080;"> request</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">    BindingResult</span><span style="color:#001080;"> bindingResult</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> BeanPropertyBindingResult</span><span style="color:#000000;">(request,</span><span style="color:#001080;">AlarmConfigUpdateDTO</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">.</span><span style="color:#795E26;">getSimpleName</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">    mvcValidator</span><span style="color:#000000;">.</span><span style="color:#795E26;">validate</span><span style="color:#000000;">(request,bindingResult);</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#001080;">bindingResult</span><span style="color:#000000;">.</span><span style="color:#795E26;">hasErrors</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#267F99;">      String</span><span style="color:#001080;"> errorMsg</span><span style="color:#000000;"> = </span><span style="color:#001080;">bindingResult</span><span style="color:#000000;">.</span><span style="color:#795E26;">getFieldError</span><span style="color:#000000;">().</span><span style="color:#795E26;">getDefaultMessage</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">      System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(errorMsg);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#008000;">    //mvcValidator.validate();</span></span>
<span class="line"><span style="color:#008000;">    //return alarmConfigService.updateAlarmConfig(request);</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#001080;"> SpResult</span><span style="color:#000000;">.</span><span style="color:#795E26;">succeed</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-bean-中注入-httpservletrequest-成员变量的思考" tabindex="-1"><a class="header-anchor" href="#spring-bean-中注入-httpservletrequest-成员变量的思考"><span>spring bean 中注入 HttpServletRequest 成员变量的思考</span></a></h2><ul><li>在 bean 中注入作为成员变量的 HttpServletRequest 时，实际注入的是 spring 框架生成的代理对象，是ObjectFactoryDelegatingInvocationHandler的实例。在我们调用这个成员变量的方法时，最终是调用了 objectFactory 的 getObject() 对象的对应方法，在这里 objectFactory 是RequestObjectFactory这个类的对象。</li><li>RequestObjectFactory 的 getObject 方法是从RequestContextHolder的threadlocal中去取值的。</li><li>请求刚进入 springmvc 的dispatcherServlet的时候会把 request 相关对象设置到 RequestContextHolder 的 threadlocal 中去.</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Controller</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> SomeController</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test1&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test1</span><span style="color:#000000;">(</span><span style="color:#267F99;">HttpServletRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test2&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test2</span><span style="color:#000000;">(</span><span style="color:#267F99;">HttpServletRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test3&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test3</span><span style="color:#000000;">(</span><span style="color:#267F99;">HttpServletRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;"> </span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Controller</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> SomeController</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">Resource</span></span>
<span class="line"><span style="color:#0000FF;">  private</span><span style="color:#267F99;"> HttpServletRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test1&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test1</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">    System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test2&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test2</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">    System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">RequestMapping</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/test3&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> String</span><span style="color:#795E26;"> test3</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#001080;">    System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getQueryString</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#A31515;"> &quot;&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot-2-7-1-配置文件加载" tabindex="-1"><a class="header-anchor" href="#springboot-2-7-1-配置文件加载"><span>springboot 2.7.1 配置文件加载</span></a></h2><ul><li>EnvironmentPostProcessorApplicationListener</li><li>ConfigDataEnvironmentPostProcessor</li><li>ConfigDataEnvironment</li><li>StandardConfigDataLocationResolver</li><li>ConfigDataEnvironmentContributors</li><li>ConfigDataEnvironmentContributor</li></ul><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h2>`,11),d={href:"https://blog.csdn.net/java_lujj/article/details/126698143",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.cnblogs.com/mili0601/p/15582421.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/7123525481340600327",target:"_blank",rel:"noopener noreferrer"},u=l(`<h3 id="构造器、factory-method" tabindex="-1"><a class="header-anchor" href="#构造器、factory-method"><span>构造器、factory-method</span></a></h3><p>createBean中createBeanInstance方法会判断是否构造器注入</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>if (mbd.getFactoryMethodName() != null) {</span></span>
<span class="line"><span>			return instantiateUsingFactoryMethod(beanName, mbd, args);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		</span></span>
<span class="line"><span>if (resolved) {</span></span>
<span class="line"><span>			if (autowireNecessary) {</span></span>
<span class="line"><span>				return autowireConstructor(beanName, mbd, null, null);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			else {</span></span>
<span class="line"><span>				return instantiateBean(beanName, mbd);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="bean-autowire属性-byname-bytype-no" tabindex="-1"><a class="header-anchor" href="#bean-autowire属性-byname-bytype-no"><span>@Bean Autowire属性 byName,byType,no</span></a></h3><p>createBean中populateBean方法</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>int resolvedAutowireMode = mbd.getResolvedAutowireMode();</span></span>
<span class="line"><span>if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {</span></span>
<span class="line"><span>    MutablePropertyValues newPvs = new MutablePropertyValues(pvs);</span></span>
<span class="line"><span>    // Add property values based on autowire by name if applicable.</span></span>
<span class="line"><span>    if (resolvedAutowireMode == AUTOWIRE_BY_NAME) {</span></span>
<span class="line"><span>        autowireByName(beanName, mbd, bw, newPvs);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    // Add property values based on autowire by type if applicable.</span></span>
<span class="line"><span>    if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) {</span></span>
<span class="line"><span>        autowireByType(beanName, mbd, bw, newPvs);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    pvs = newPvs;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="注解-resource-autowired" tabindex="-1"><a class="header-anchor" href="#注解-resource-autowired"><span>注解 @Resource,@Autowired</span></a></h3><ul><li>AutowiredAnnotationBeanPostProcessor处理@Autowired</li><li>CommonAnnotationBeanPostProcessor处理@Resource</li></ul><p>createBean中populateBean方法</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();</span></span>
<span class="line"><span>boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>PropertyDescriptor[] filteredPds = null;</span></span>
<span class="line"><span>if (hasInstAwareBpps) {</span></span>
<span class="line"><span>    if (pvs == null) {</span></span>
<span class="line"><span>        pvs = mbd.getPropertyValues();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>    //AutowireAnnotationBeanPostProcessor</span></span>
<span class="line"><span>    for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {</span></span>
<span class="line"><span>        PropertyValues pvsToUse = bp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);</span></span>
<span class="line"><span>        if (pvsToUse == null) {</span></span>
<span class="line"><span>            if (filteredPds == null) {</span></span>
<span class="line"><span>                filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            pvsToUse = bp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);</span></span>
<span class="line"><span>            if (pvsToUse == null) {</span></span>
<span class="line"><span>                return;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        pvs = pvsToUse;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springboot-设置http-响应状态码" tabindex="-1"><a class="header-anchor" href="#springboot-设置http-响应状态码"><span>SpringBoot 设置HTTP 响应状态码</span></a></h2>`,11),b={href:"https://www.cnblogs.com/telwanggs/p/16502846.html",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>ResponseEntity</p><blockquote><p>示例</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>@Log(title = &quot;HTTP Status Code 测试&quot;, businessType = BusinessType.OTHER)</span></span>
<span class="line"><span>@PostMapping(&quot;/test&quot;)</span></span>
<span class="line"><span>public ResponseEntity&lt;AjaxResult&gt; auth(@RequestParam String username, @RequestParam String password)</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>    switch (username){</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>        case &quot;200&quot;:</span></span>
<span class="line"><span>            return ResponseEntity.ok().body(AjaxResult.success());</span></span>
<span class="line"><span>        case &quot;400&quot;:</span></span>
<span class="line"><span>            return ResponseEntity.badRequest().body(AjaxResult.error(400,&quot;Bad Request&quot;));</span></span>
<span class="line"><span>        case &quot;404&quot;:</span></span>
<span class="line"><span>            return ResponseEntity.notFound().build();</span></span>
<span class="line"><span>        case &quot;500&quot;:</span></span>
<span class="line"><span>            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(AjaxResult.error());</span></span>
<span class="line"><span>        default:</span></span>
<span class="line"><span>            return ResponseEntity.status(203).body(AjaxResult.success());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deferredresult" tabindex="-1"><a class="header-anchor" href="#deferredresult"><span>DeferredResult</span></a></h2><h3 id="webasyncutils的webasyncmanager" tabindex="-1"><a class="header-anchor" href="#webasyncutils的webasyncmanager"><span>WebAsyncUtils的WebAsyncManager</span></a></h3><h3 id="deferredresultmethodreturnvaluehandler" tabindex="-1"><a class="header-anchor" href="#deferredresultmethodreturnvaluehandler"><span>DeferredResultMethodReturnValueHandler</span></a></h3><ul><li>handleReturnValue</li></ul><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import"><span>@import</span></a></h3><p>将bean注册到spring容器当中</p><h3 id="conditional" tabindex="-1"><a class="header-anchor" href="#conditional"><span>@Conditional</span></a></h3><h3 id="conditionalonmissingbean" tabindex="-1"><a class="header-anchor" href="#conditionalonmissingbean"><span>@ConditionalOnMissingBean</span></a></h3><ul><li>如果bean的实例已注册到spring容器中,则跳过</li></ul><blockquote><p>@ConditionalOnMissingBean失效问题？</p></blockquote><p>bean加载顺序问题，导致注解失效。</p><h3 id="conditionalonwebapplication" tabindex="-1"><a class="header-anchor" href="#conditionalonwebapplication"><span>@ConditionalOnWebApplication</span></a></h3><p>@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)</p><h3 id="conditionalonclass" tabindex="-1"><a class="header-anchor" href="#conditionalonclass"><span>@ConditionalOnClass</span></a></h3><h3 id="enableconfigurationproperties" tabindex="-1"><a class="header-anchor" href="#enableconfigurationproperties"><span>@EnableConfigurationProperties</span></a></h3><p>启用加了@ConfigurationProperties注解的类，@EnableConfigurationProperties(LogFileWebEndpointProperties.class)</p><h3 id="import-1" tabindex="-1"><a class="header-anchor" href="#import-1"><span>@Import</span></a></h3><h3 id="configurationproperties" tabindex="-1"><a class="header-anchor" href="#configurationproperties"><span>@ConfigurationProperties</span></a></h3><ul><li>可用在方法上，和类上</li><li>用在类上需启用才能注册到容器中</li><li>用在方法上，配合@Bean注解使用</li></ul><h3 id="conditionalonproperty" tabindex="-1"><a class="header-anchor" href="#conditionalonproperty"><span>@ConditionalOnProperty</span></a></h3><ul><li>使用条件判断是否有值(name = &quot;spring.datasource.type&quot;, havingValue = &quot;com.zaxxer.hikari.HikariDataSource&quot;, matchIfMissing = true)</li></ul><h3 id="conditionalonsinglecandidate-datasource-class" tabindex="-1"><a class="header-anchor" href="#conditionalonsinglecandidate-datasource-class"><span>@ConditionalOnSingleCandidate(DataSource.class)</span></a></h3><p>Datasource的实例是否是单个</p><h3 id="controlleradvice" tabindex="-1"><a class="header-anchor" href="#controlleradvice"><span>@ControllerAdvice</span></a></h3><p>控制器建议器，一般用于全局异常处理，数据绑定， 自定义参数解析</p><ul><li>@ExceptionHandler注解标注的方法：用于捕获Controller中抛出的不同类型的异常，从而达到异常全局处理的目的；</li><li>@InitBinder注解标注的方法：用于请求中注册自定义参数的解析，从而达到自定义请求参数格式的目的；</li><li>@ModelAttribute注解标注的方法：表示此方法会在执行目标Controller方法之前执行 <strong>!!!这三个注解都可以在普通的Controller类上使用,ControllerAdvice只是作用范围可以自定义(默认全部)</strong></li></ul><h4 id="作用范围" tabindex="-1"><a class="header-anchor" href="#作用范围"><span>作用范围</span></a></h4><p>ControllerAdvice 提供了多种指定Advice规则的定义方式，默认什么都不写，则是Advice所有Controller，当然你也可以通过下列的方式指定规则</p><blockquote><p>指定包</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>匹配org.my.pkg包及其子包下的所有Controller</span></span>
<span class="line"><span>@ControllerAdvice(basePackages=&quot;org.my.pkg&quot;)</span></span>
<span class="line"><span>当然也可以用数组的形式指定，如：</span></span>
<span class="line"><span>@ControllerAdvice(basePackages={&quot;org.my.pkg&quot;, &quot;org.my.other.pkg&quot;}),</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>指定注解</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span> 也可以通过指定注解来匹配，比如我自定了一个 @CustomAnnotation 注解，我想匹配所有被这个注解修饰的 Controller, </span></span>
<span class="line"><span> 可以这么写：@ControllerAdvice（annotations={CustomAnnotation.class})</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="modelattribute" tabindex="-1"><a class="header-anchor" href="#modelattribute"><span>@ModelAttribute</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>	// 1.无返回值方法,放入Model,自定义 key ,value</span></span>
<span class="line"><span>    @ModelAttribute()</span></span>
<span class="line"><span>    public void presetParam(Model model) {</span></span>
<span class="line"><span>        model.addAttribute(&quot;globalAttr&quot;, &quot;我是全局参数&quot;);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 2.不有指定name,返回值方法,返回值是map,int等,key就是map,int等,,value是返回值</span></span>
<span class="line"><span>    @ModelAttribute()</span></span>
<span class="line"><span>    public Map&lt;String, String&gt; presetParam2() {</span></span>
<span class="line"><span>        Map&lt;String, String&gt; map1 = new HashMap&lt;String, String&gt;();</span></span>
<span class="line"><span>        map1.put(&quot;key1&quot;, &quot;value1&quot;);</span></span>
<span class="line"><span>        return map1;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    // 3.指定name,返回值方法,key就是name,value是返回值</span></span>
<span class="line"><span>    @ModelAttribute(name = &quot;map2&quot;)</span></span>
<span class="line"><span>    public Map&lt;String, String&gt; presetParam3() {</span></span>
<span class="line"><span>        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span></span>
<span class="line"><span>        map.put(&quot;key2&quot;, &quot;value2&quot;);</span></span>
<span class="line"><span>        return map;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	// 4.可以接受请求参数</span></span>
<span class="line"><span>    @ModelAttribute()</span></span>
<span class="line"><span>    public void presetParam4(@RequestParam(&quot;name&quot;) String name,Model model) {</span></span>
<span class="line"><span>        model.addAttribute(&quot;name&quot;, name);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>使用</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>	 //1.使用Model取出</span></span>
<span class="line"><span>    @GetMapping(&quot;model&quot;)</span></span>
<span class="line"><span>    public String methodOne(Model model) {</span></span>
<span class="line"><span>        Map&lt;String, Object&gt; modelMap = model.asMap();</span></span>
<span class="line"><span>        System.out.println(modelMap.get(&quot;name&quot;).toString()); // 传入name的值    </span></span>
<span class="line"><span>        return modelMap.get(&quot;globalAttr&quot;).toString();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //2.使用ModelMap取出</span></span>
<span class="line"><span>    @GetMapping(&quot;modelMap&quot;)</span></span>
<span class="line"><span>    public String methodThree(ModelMap modelMap) {</span></span>
<span class="line"><span>        return modelMap.get(&quot;map&quot;).toString();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    //3.@ModelAttribute()指定key,直接取出</span></span>
<span class="line"><span>    @GetMapping(&quot;modelAttribute&quot;)</span></span>
<span class="line"><span>    public String methodTwo(@ModelAttribute(&quot;map2&quot;) Map map2) {</span></span>
<span class="line"><span>        return map2.toString();</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="exceptionhandler" tabindex="-1"><a class="header-anchor" href="#exceptionhandler"><span>@ExceptionHandler</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>	</span></span>
<span class="line"><span>	// @Validated参数校验 ,解析BindingResult的错误信息并返回</span></span>
<span class="line"><span>    @ExceptionHandler(BindException.class)</span></span>
<span class="line"><span>    @ResponseBody</span></span>
<span class="line"><span>    public JsonResult exceptionHandler(BindException e, BindingResult result) {</span></span>
<span class="line"><span>        List&lt;FieldError&gt; fieldErrors = result.getFieldErrors();</span></span>
<span class="line"><span>        String collect = fieldErrors.stream().map(f -&gt; f.getField()+&quot;:&quot;+f.getDefaultMessage()).collect(Collectors.joining(&quot;,&quot;));</span></span>
<span class="line"><span>        return new JsonResult(JsonResult.Validated_ERROR, collect);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	//这里就是通用的异常处理器了,所有预料之外的Exception异常都由这里处理</span></span>
<span class="line"><span>    @ExceptionHandler(Exception.class)</span></span>
<span class="line"><span>    @ResponseBody</span></span>
<span class="line"><span>    public JsonResult exceptionHandler(Exception e) {</span></span>
<span class="line"><span>        return new JsonResult(JsonResult.SYSTEM_ERROR, e.getMessage());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    </span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="initbinder-请求参数预处理" tabindex="-1"><a class="header-anchor" href="#initbinder-请求参数预处理"><span>@InitBinder 请求参数预处理</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span> @InitBinder</span></span>
<span class="line"><span>    public void initBinder(WebDataBinder dataBinder){</span></span>
<span class="line"><span>        /*</span></span>
<span class="line"><span>         * 创建一个字符串微调编辑器</span></span>
<span class="line"><span>         * 参数{boolean emptyAsNull}: 是否把空字符串(&quot;&quot;)视为 null</span></span>
<span class="line"><span>         */</span></span>
<span class="line"><span>        StringTrimmerEditor trimmerEditor = new StringTrimmerEditor(true);</span></span>
<span class="line"><span>        /*</span></span>
<span class="line"><span>         * 注册自定义编辑器</span></span>
<span class="line"><span>         * 接受两个参数{Class&lt;?&gt; requiredType, PropertyEditor propertyEditor}</span></span>
<span class="line"><span>         * requiredType：所需处理的类型</span></span>
<span class="line"><span>         * propertyEditor：属性编辑器，StringTrimmerEditor就是 propertyEditor的一个子类</span></span>
<span class="line"><span>         */</span></span>
<span class="line"><span>        dataBinder.registerCustomEditor(String.class, trimmerEditor);</span></span>
<span class="line"><span>        //日期格式的字符串转换成Date对象</span></span>
<span class="line"><span>       dataBinder.registerCustomEditor(Date.class, new CustomDateEditor(new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;), false));</span></span>
<span class="line"><span>        </span></span>
<span class="line"><span>   dataBinder.addValidators(paramVOValidator);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环依赖问题" tabindex="-1"><a class="header-anchor" href="#循环依赖问题"><span>循环依赖问题</span></a></h2><p>spring中使用三级缓存，来解决循环依赖问题</p><p>核心类<strong>DefaultSingletonbeanRegistry</strong>中，维护了三个缓存，延迟生命周期的破坏</p><ul><li>singletonObjects</li><li>earlySingletonObjects</li><li>singletonFactories</li></ul><h2 id="aop面向切面" tabindex="-1"><a class="header-anchor" href="#aop面向切面"><span>AOP面向切面</span></a></h2><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><blockquote><p>为什么使用Aop</p></blockquote><p>面向切面编程，主要是解决代码冗余，降低代码耦合性的方案，它将业务拆分为核心业务和非核心业务(如日志功能，或统计sql执行时长)，在使用时将非核心功能织入到业务功能上</p><blockquote><p>相关概念</p></blockquote><ul><li><p>@Aspect用于类上，标注类为切面，切入点 + 通知,在什么时机，什么地方，做什么</p></li><li><p>@pointcut用于方法上，表示要织入通用功能的方法和类的位置，即切点</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>@pointcut(execution(&quot;切点位置&quot;))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@pointcut(@annotation(注解的位置))</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>通知类型Advice,在方法前、方法后，方法前后做什么</p><ul><li><p>@Around</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>参数为@pointcut注解的方法，即切点方法</span></span>
<span class="line"><span>@Around(&quot;aspect()&amp;&amp;@annotation(anno)&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Around(&quot;pointCutMethod()&quot;) </span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​</p></li><li><p>@before</p></li><li><p>@after</p></li><li><p>@afterReturning</p></li><li><p>@afterThrowing</p></li></ul></li></ul><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><blockquote><p>Aop代理对象</p></blockquote><p>在bean对象初始化，执行postproceedAfterInitialization方法时生成代理对象</p><blockquote><p>aop生成代理对象的时机</p></blockquote><ul><li><p>执行postproceedAfterInitialization方法时生成代理对象</p></li><li><p>提前生成代理对象getEarlyReference方法</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>A和B，两个对象，其中A最终产生代理对象，A，B相互依赖，需提前生成A代理对象</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>在bean对象初始化前</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><blockquote><p>aop代理对象的生成</p></blockquote><p>核心类：AopProxy接口、CglibAopProxy、JdkDynamicAopProxy、ObjenesisCglibAopProxy</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>CglibAopProxy实现AopProxy</span></span>
<span class="line"><span>JdkDynamicAopProxy实现AopProxy</span></span>
<span class="line"><span>ObjenesisCglibAopProxy继承CglibAopProxy</span></span>
<span class="line"><span></span></span>
<span class="line"><span>DefaultAopProxyFactory创建调用处理器对象，代理工具类</span></span>
<span class="line"><span>调用public Object getProxy(@Nullable ClassLoader classLoader)获取代理对象</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>ProxyCreatorSupport、AdvisedSupport、AspectJProxyFactory</span></span>
<span class="line"><span>AspectJProxyFactory实现ProxyCreatorSupport实现AdvisedSupport</span></span>
<span class="line"><span>保存要被代理的接口或对象信息</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>wrapIfNecessary是aop代理对象创建的入口</span></span>
<span class="line"><span></span></span>
<span class="line"><span>protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {</span></span>
<span class="line"><span>		if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) {</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {</span></span>
<span class="line"><span>			this.advisedBeans.put(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// Create proxy if we have advice.</span></span>
<span class="line"><span>		//获取aop通知拦截器</span></span>
<span class="line"><span>		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span></span>
<span class="line"><span>		if (specificInterceptors != DO_NOT_PROXY) {</span></span>
<span class="line"><span>			this.advisedBeans.put(cacheKey, Boolean.TRUE);</span></span>
<span class="line"><span>			Object proxy = createProxy(</span></span>
<span class="line"><span>					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span></span>
<span class="line"><span>			this.proxyTypes.put(cacheKey, proxy.getClass());</span></span>
<span class="line"><span>			return proxy;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		this.advisedBeans.put(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span>		return bean;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span>	</span></span>
<span class="line"><span>createProxy创建代理工厂proxyFactory，调用getproxy方法获取代理对象,</span></span>
<span class="line"><span>ProxyFactory继承ProxyCreatorSupport包含要被代理的对象信息</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代理" tabindex="-1"><a class="header-anchor" href="#代理"><span>代理</span></a></h2><h3 id="jdk动态代理" tabindex="-1"><a class="header-anchor" href="#jdk动态代理"><span>jdk动态代理</span></a></h3><ul><li>调用处理器需实现InvocationHandler接口，重写invoke方法</li><li>被代理对象需实现接口</li><li>Proxy.newProxyInstance（类加载器，接口对象数组，调用处理器）</li></ul><h3 id="cglib动态代理" tabindex="-1"><a class="header-anchor" href="#cglib动态代理"><span>cglib动态代理</span></a></h3><ul><li>调用处理器需实现MethodInterceptor 接口，重写intercept方法</li><li>创建Enhancer实例；</li><li>通过setSuperclass方法来设置目标类；</li><li>通过setCallback方法来设置拦截对象，即调用处理器；</li><li>create方法生成Target的代理类，并返回代理类的实例。</li></ul><blockquote><p>aop中使用的代理样例</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#008000;">	// Configure CGLIB Enhancer...</span></span>
<span class="line"><span style="color:#267F99;">			Enhancer</span><span style="color:#001080;"> enhancer</span><span style="color:#000000;"> = </span><span style="color:#795E26;">createEnhancer</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (classLoader != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">				enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setClassLoader</span><span style="color:#000000;">(classLoader);</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (classLoader </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> SmartClassLoader &amp;&amp;</span></span>
<span class="line"><span style="color:#000000;">						((SmartClassLoader) classLoader).</span><span style="color:#795E26;">isClassReloadable</span><span style="color:#000000;">(proxySuperClass)) {</span></span>
<span class="line"><span style="color:#001080;">					enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setUseCache</span><span style="color:#000000;">(</span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setSuperclass</span><span style="color:#000000;">(proxySuperClass);</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setInterfaces</span><span style="color:#000000;">(</span><span style="color:#001080;">AopProxyUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">completeProxiedInterfaces</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">advised</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setNamingPolicy</span><span style="color:#000000;">(</span><span style="color:#001080;">SpringNamingPolicy</span><span style="color:#000000;">.</span><span style="color:#001080;">INSTANCE</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setStrategy</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ClassLoaderAwareGeneratorStrategy</span><span style="color:#000000;">(classLoader));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">			Callback</span><span style="color:#000000;">[] </span><span style="color:#001080;">callbacks</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getCallbacks</span><span style="color:#000000;">(rootClass);</span></span>
<span class="line"><span style="color:#267F99;">			Class</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt;[] </span><span style="color:#001080;">types</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> Class</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt;[</span><span style="color:#001080;">callbacks</span><span style="color:#000000;">.</span><span style="color:#001080;">length</span><span style="color:#000000;">];</span></span>
<span class="line"><span style="color:#AF00DB;">			for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">int</span><span style="color:#001080;"> x</span><span style="color:#000000;"> = </span><span style="color:#098658;">0</span><span style="color:#000000;">; x &lt; </span><span style="color:#001080;">types</span><span style="color:#000000;">.</span><span style="color:#001080;">length</span><span style="color:#000000;">; x++) {</span></span>
<span class="line"><span style="color:#000000;">				types[x] = callbacks[x].</span><span style="color:#795E26;">getClass</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#008000;">			// fixedInterceptorMap only populated at this point, after getCallbacks call above</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setCallbackFilter</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ProxyCallbackFilter</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#0000FF;">					this</span><span style="color:#000000;">.</span><span style="color:#001080;">advised</span><span style="color:#000000;">.</span><span style="color:#795E26;">getConfigurationOnlyCopy</span><span style="color:#000000;">(), </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">fixedInterceptorMap</span><span style="color:#000000;">, </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">fixedInterceptorOffset</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">			enhancer</span><span style="color:#000000;">.</span><span style="color:#795E26;">setCallbackTypes</span><span style="color:#000000;">(types);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">			// Generate the proxy class and create a proxy instance.</span></span>
<span class="line"><span style="color:#AF00DB;">			return</span><span style="color:#795E26;"> createProxyClassAndInstance</span><span style="color:#000000;">(enhancer, callbacks);</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="context" tabindex="-1"><a class="header-anchor" href="#context"><span>context</span></a></h2><h3 id="annotationconfigapplicationcontext" tabindex="-1"><a class="header-anchor" href="#annotationconfigapplicationcontext"><span>AnnotationConfigApplicationContext</span></a></h3><p>生成spring核心相关的单例对象为下述上下文AnnotationConfigServletWebServerApplicationContext初始化做准备</p><h3 id="annotationconfigservletwebserverapplicationcontext" tabindex="-1"><a class="header-anchor" href="#annotationconfigservletwebserverapplicationcontext"><span>AnnotationConfigServletWebServerApplicationContext</span></a></h3><ul><li>父上下文为AnnotationConfigApplicationContext</li><li>ParentContextApplicationContextInitializer父上下文初始化器暂存父上下文</li><li>在prepareContext的applyInitializers时设置上下文</li></ul><h2 id="springboot容器启动" tabindex="-1"><a class="header-anchor" href="#springboot容器启动"><span>springboot容器启动</span></a></h2><h3 id="核心" tabindex="-1"><a class="header-anchor" href="#核心"><span>核心</span></a></h3><ol><li>event</li><li>初始化器</li><li>server的启动</li></ol><h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口"><span>接口</span></a></h3><ul><li>ApplicationContextWare接口</li><li>InitializeBean</li></ul><h3 id="springapplication" tabindex="-1"><a class="header-anchor" href="#springapplication"><span>springApplication</span></a></h3><h4 id="run" tabindex="-1"><a class="header-anchor" href="#run"><span>run</span></a></h4><ul><li>prepareEnvironment</li><li>printBanner</li><li>createApplicationContext</li><li>prepareContext</li><li>refreshContext <ul><li>调用上下文AbstractApplicationContext的refresh方法</li></ul></li><li>afterRefresh</li></ul><h4 id="prepareenvironment" tabindex="-1"><a class="header-anchor" href="#prepareenvironment"><span>prepareEnvironment</span></a></h4><p>这里会进入递归调用SpringApplication中的run方法产生父上下文初始化器(暂存父上下文)</p><h3 id="abstractapplicationcontext" tabindex="-1"><a class="header-anchor" href="#abstractapplicationcontext"><span>AbstractApplicationContext</span></a></h3><h4 id="refresh" tabindex="-1"><a class="header-anchor" href="#refresh"><span>refresh</span></a></h4><ul><li>prepareRefresh</li><li>obtainFreshBeanFactory</li><li>prepareBeanFactory</li><li>postProcessBeanFactory</li><li>invokeBeanFactoryPostProcessors</li><li>registerBeanPostProcessors</li><li>initMessageSource</li><li>initApplicationEventMulticaster</li><li>onRefresh() <ul><li>创建web服务器，并启动</li></ul></li><li>registerListeners</li><li>finishBeanFactoryInitialization</li><li>finishRefresh</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> abstract</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> AbstractApplicationContext</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> DefaultResourceLoader</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> ConfigurableApplicationContext</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    </span></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> refresh</span><span style="color:#000000;">() </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> BeansException</span><span style="color:#000000;">, </span><span style="color:#267F99;">IllegalStateException</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">    synchronized</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">startupShutdownMonitor</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">      StartupStep</span><span style="color:#001080;"> contextRefresh</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">applicationStartup</span><span style="color:#000000;">.</span><span style="color:#795E26;">start</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;spring.context.refresh&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Prepare this context for refreshing.</span></span>
<span class="line"><span style="color:#795E26;">      prepareRefresh</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Tell the subclass to refresh the internal bean factory.</span></span>
<span class="line"><span style="color:#267F99;">      ConfigurableListableBeanFactory</span><span style="color:#001080;"> beanFactory</span><span style="color:#000000;"> = </span><span style="color:#795E26;">obtainFreshBeanFactory</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Prepare the bean factory for use in this context.</span></span>
<span class="line"><span style="color:#795E26;">      prepareBeanFactory</span><span style="color:#000000;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">      try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">        // Allows post-processing of the bean factory in context subclasses.</span></span>
<span class="line"><span style="color:#795E26;">        postProcessBeanFactory</span><span style="color:#000000;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">        StartupStep</span><span style="color:#001080;"> beanPostProcess</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">applicationStartup</span><span style="color:#000000;">.</span><span style="color:#795E26;">start</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;spring.context.beans.post-process&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        // Invoke factory processors registered as beans in the context.</span></span>
<span class="line"><span style="color:#795E26;">        invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Register bean processors that intercept bean creation.</span></span>
<span class="line"><span style="color:#795E26;">        registerBeanPostProcessors</span><span style="color:#000000;">(beanFactory);</span></span>
<span class="line"><span style="color:#001080;">        beanPostProcess</span><span style="color:#000000;">.</span><span style="color:#795E26;">end</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Initialize message source for this context.</span></span>
<span class="line"><span style="color:#795E26;">        initMessageSource</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Initialize event multicaster for this context.</span></span>
<span class="line"><span style="color:#795E26;">        initApplicationEventMulticaster</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Initialize other special beans in specific context subclasses.</span></span>
<span class="line"><span style="color:#795E26;">        onRefresh</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Check for listener beans and register them.</span></span>
<span class="line"><span style="color:#795E26;">        registerListeners</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Instantiate all remaining (non-lazy-init) singletons.</span></span>
<span class="line"><span style="color:#795E26;">        finishBeanFactoryInitialization</span><span style="color:#000000;">(beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Last step: publish corresponding event.</span></span>
<span class="line"><span style="color:#795E26;">        finishRefresh</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">      catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">BeansException</span><span style="color:#001080;"> ex</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isWarnEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">          logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">warn</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Exception encountered during context initialization - &quot;</span><span style="color:#000000;"> +</span></span>
<span class="line"><span style="color:#A31515;">                  &quot;cancelling refresh attempt: &quot;</span><span style="color:#000000;"> + ex);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Destroy already created singletons to avoid dangling resources.</span></span>
<span class="line"><span style="color:#795E26;">        destroyBeans</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Reset &#39;active&#39; flag.</span></span>
<span class="line"><span style="color:#795E26;">        cancelRefresh</span><span style="color:#000000;">(ex);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">        // Propagate exception to caller.</span></span>
<span class="line"><span style="color:#AF00DB;">        throw</span><span style="color:#000000;"> ex;</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">      finally</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">        // Reset common introspection caches in Spring&#39;s core, since we</span></span>
<span class="line"><span style="color:#008000;">        // might not ever need metadata for singleton beans anymore...</span></span>
<span class="line"><span style="color:#795E26;">        resetCommonCaches</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">        contextRefresh</span><span style="color:#000000;">.</span><span style="color:#795E26;">end</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">  protected</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(</span><span style="color:#267F99;">ConfigurableListableBeanFactory</span><span style="color:#001080;"> beanFactory</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">    PostProcessorRegistrationDelegate</span><span style="color:#000000;">.</span><span style="color:#795E26;">invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(beanFactory, </span><span style="color:#795E26;">getBeanFactoryPostProcessors</span><span style="color:#000000;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime</span></span>
<span class="line"><span style="color:#008000;">    // (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">NativeDetector</span><span style="color:#000000;">.</span><span style="color:#795E26;">inNativeImage</span><span style="color:#000000;">() &amp;&amp; </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getTempClassLoader</span><span style="color:#000000;">() == </span><span style="color:#0000FF;">null</span><span style="color:#000000;"> &amp;&amp; </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">containsBean</span><span style="color:#000000;">(LOAD_TIME_WEAVER_BEAN_NAME)) {</span></span>
<span class="line"><span style="color:#001080;">      beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">addBeanPostProcessor</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> LoadTimeWeaverAwareProcessor</span><span style="color:#000000;">(beanFactory));</span></span>
<span class="line"><span style="color:#001080;">      beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">setTempClassLoader</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ContextTypeMatchClassLoader</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanClassLoader</span><span style="color:#000000;">()));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preparebeanfactory" tabindex="-1"><a class="header-anchor" href="#preparebeanfactory"><span>prepareBeanFactory</span></a></h4><p>配置上下文类加载器、后置处理器</p><ul><li>添加Bean后置处理器ApplicationContextAwareProcessor</li><li>添加EnvironmentAware、ResourceLoaderAware等要忽略依赖注入的接口,让bean后置处理器ApplicationContextAwareProcessor处理</li><li>registerResolvableDependency指定要注入的依赖值，和@Primary类似 <ul><li>beanFactory.registerResolvableDependency(BeanFactory.class, beanFactory);</li><li>beanFactory.registerResolvableDependency(ApplicationEventPublisher.class, this);</li><li>beanFactory.registerResolvableDependency(ApplicationContext.class, this);</li></ul></li><li>注册environment单例bean</li></ul><h4 id="invokebeanfactorypostprocessors" tabindex="-1"><a class="header-anchor" href="#invokebeanfactorypostprocessors"><span>invokeBeanFactoryPostProcessors</span></a></h4><ul><li>调用委托器的静态方法PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());</li><li>执行BeanFactoryPostProcessor的postProcessBeanFactory和BeanDefinitionRegistryPostProcessor的postProcessBeanDefinitionRegistry的方法</li><li>postProcessBeanDefinitionRegistry是一个拓展，在后置处理BeanFactory之前，重新添加新的工厂后置处理器的beanDefinition</li><li>对处理器进行排序后执行处理方法</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">final</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> PostProcessorRegistrationDelegate</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">  private</span><span style="color:#795E26;"> PostProcessorRegistrationDelegate</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#0000FF;"> static</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#267F99;">          ConfigurableListableBeanFactory</span><span style="color:#001080;"> beanFactory</span><span style="color:#000000;">, </span><span style="color:#267F99;">List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">beanFactoryPostProcessors</span><span style="color:#000000;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // WARNING: Although it may appear that the body of this method can be easily</span></span>
<span class="line"><span style="color:#008000;">    // refactored to avoid the use of multiple loops and multiple lists, the use</span></span>
<span class="line"><span style="color:#008000;">    // of multiple lists and multiple passes over the names of processors is</span></span>
<span class="line"><span style="color:#008000;">    // intentional. We must ensure that we honor the contracts for PriorityOrdered</span></span>
<span class="line"><span style="color:#008000;">    // and Ordered processors. Specifically, we must NOT cause processors to be</span></span>
<span class="line"><span style="color:#008000;">    // instantiated (via getBean() invocations) or registered in the ApplicationContext</span></span>
<span class="line"><span style="color:#008000;">    // in the wrong order.</span></span>
<span class="line"><span style="color:#008000;">    //</span></span>
<span class="line"><span style="color:#008000;">    // Before submitting a pull request (PR) to change this method, please review the</span></span>
<span class="line"><span style="color:#008000;">    // list of all declined PRs involving changes to PostProcessorRegistrationDelegate</span></span>
<span class="line"><span style="color:#008000;">    // to ensure that your proposal does not result in a breaking change:</span></span>
<span class="line"><span style="color:#008000;">    // https://github.com/spring-projects/spring-framework/issues?q=PostProcessorRegistrationDelegate+is%3Aclosed+label%3A%22status%3A+declined%22</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Invoke BeanDefinitionRegistryPostProcessors first, if any.</span></span>
<span class="line"><span style="color:#267F99;">    Set</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">processedBeans</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> HashSet</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (beanFactory </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> BeanDefinitionRegistry) {</span></span>
<span class="line"><span style="color:#267F99;">      BeanDefinitionRegistry</span><span style="color:#001080;"> registry</span><span style="color:#000000;"> = (BeanDefinitionRegistry) beanFactory;</span></span>
<span class="line"><span style="color:#267F99;">      List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">regularPostProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#267F99;">      List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">registryProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">      for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#001080;"> postProcessor</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> beanFactoryPostProcessors) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (postProcessor </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> BeanDefinitionRegistryPostProcessor) {</span></span>
<span class="line"><span style="color:#267F99;">          BeanDefinitionRegistryPostProcessor</span><span style="color:#001080;"> registryProcessor</span><span style="color:#000000;"> =</span></span>
<span class="line"><span style="color:#000000;">                  (BeanDefinitionRegistryPostProcessor) postProcessor;</span></span>
<span class="line"><span style="color:#001080;">          registryProcessor</span><span style="color:#000000;">.</span><span style="color:#795E26;">postProcessBeanDefinitionRegistry</span><span style="color:#000000;">(registry);</span></span>
<span class="line"><span style="color:#001080;">          registryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(registryProcessor);</span></span>
<span class="line"><span style="color:#000000;">        } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">          regularPostProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(postProcessor);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Do not initialize FactoryBeans here: We need to leave all regular beans</span></span>
<span class="line"><span style="color:#008000;">      // uninitialized to let the bean factory post-processors apply to them!</span></span>
<span class="line"><span style="color:#008000;">      // Separate between BeanDefinitionRegistryPostProcessors that implement</span></span>
<span class="line"><span style="color:#008000;">      // PriorityOrdered, Ordered, and the rest.</span></span>
<span class="line"><span style="color:#267F99;">      List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">currentRegistryProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // First, invoke the BeanDefinitionRegistryPostProcessors that implement PriorityOrdered.</span></span>
<span class="line"><span style="color:#267F99;">      String</span><span style="color:#000000;">[] </span><span style="color:#001080;">postProcessorNames</span><span style="color:#000000;"> =</span></span>
<span class="line"><span style="color:#001080;">              beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanNamesForType</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">      for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> ppName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> postProcessorNames) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">isTypeMatch</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">PriorityOrdered</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">)) {</span></span>
<span class="line"><span style="color:#001080;">          currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">          processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(ppName);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#795E26;">      sortPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#001080;">      registryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">addAll</span><span style="color:#000000;">(currentRegistryProcessors);</span></span>
<span class="line"><span style="color:#795E26;">      invokeBeanDefinitionRegistryPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, registry, </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getApplicationStartup</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">      currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">clear</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Next, invoke the BeanDefinitionRegistryPostProcessors that implement Ordered.</span></span>
<span class="line"><span style="color:#000000;">      postProcessorNames = </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanNamesForType</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">      for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> ppName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> postProcessorNames) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">contains</span><span style="color:#000000;">(ppName) &amp;&amp; </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">isTypeMatch</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">Ordered</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">)) {</span></span>
<span class="line"><span style="color:#001080;">          currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">          processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(ppName);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#795E26;">      sortPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#001080;">      registryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">addAll</span><span style="color:#000000;">(currentRegistryProcessors);</span></span>
<span class="line"><span style="color:#795E26;">      invokeBeanDefinitionRegistryPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, registry, </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getApplicationStartup</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">      currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">clear</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Finally, invoke all other BeanDefinitionRegistryPostProcessors until no further ones appear.</span></span>
<span class="line"><span style="color:#267F99;">      boolean</span><span style="color:#001080;"> reiterate</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">      while</span><span style="color:#000000;"> (reiterate) {</span></span>
<span class="line"><span style="color:#000000;">        reiterate = </span><span style="color:#0000FF;">false</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">        postProcessorNames = </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanNamesForType</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">        for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> ppName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> postProcessorNames) {</span></span>
<span class="line"><span style="color:#AF00DB;">          if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">contains</span><span style="color:#000000;">(ppName)) {</span></span>
<span class="line"><span style="color:#001080;">            currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">BeanDefinitionRegistryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#001080;">            processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(ppName);</span></span>
<span class="line"><span style="color:#000000;">            reiterate = </span><span style="color:#0000FF;">true</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">          }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#795E26;">        sortPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#001080;">        registryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">addAll</span><span style="color:#000000;">(currentRegistryProcessors);</span></span>
<span class="line"><span style="color:#795E26;">        invokeBeanDefinitionRegistryPostProcessors</span><span style="color:#000000;">(currentRegistryProcessors, registry, </span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getApplicationStartup</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">        currentRegistryProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">clear</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">      // Now, invoke the postProcessBeanFactory callback of all processors handled so far.</span></span>
<span class="line"><span style="color:#795E26;">      invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(registryProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#795E26;">      invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(regularPostProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#000000;">    } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#008000;">      // Invoke factory processors registered with the context instance.</span></span>
<span class="line"><span style="color:#795E26;">      invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(beanFactoryPostProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Do not initialize FactoryBeans here: We need to leave all regular beans</span></span>
<span class="line"><span style="color:#008000;">    // uninitialized to let the bean factory post-processors apply to them!</span></span>
<span class="line"><span style="color:#267F99;">    String</span><span style="color:#000000;">[] </span><span style="color:#001080;">postProcessorNames</span><span style="color:#000000;"> =</span></span>
<span class="line"><span style="color:#001080;">            beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBeanNamesForType</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanFactoryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">, </span><span style="color:#0000FF;">false</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Separate between BeanFactoryPostProcessors that implement PriorityOrdered,</span></span>
<span class="line"><span style="color:#008000;">    // Ordered, and the rest.</span></span>
<span class="line"><span style="color:#267F99;">    List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">priorityOrderedPostProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#267F99;">    List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">orderedPostProcessorNames</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#267F99;">    List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">nonOrderedPostProcessorNames</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#AF00DB;">    for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> ppName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> postProcessorNames) {</span></span>
<span class="line"><span style="color:#AF00DB;">      if</span><span style="color:#000000;"> (</span><span style="color:#001080;">processedBeans</span><span style="color:#000000;">.</span><span style="color:#795E26;">contains</span><span style="color:#000000;">(ppName)) {</span></span>
<span class="line"><span style="color:#008000;">        // skip - already processed in first phase above</span></span>
<span class="line"><span style="color:#000000;">      } </span><span style="color:#AF00DB;">else</span><span style="color:#AF00DB;"> if</span><span style="color:#000000;"> (</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">isTypeMatch</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">PriorityOrdered</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">)) {</span></span>
<span class="line"><span style="color:#001080;">        priorityOrderedPostProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">BeanFactoryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">      } </span><span style="color:#AF00DB;">else</span><span style="color:#AF00DB;"> if</span><span style="color:#000000;"> (</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">isTypeMatch</span><span style="color:#000000;">(ppName, </span><span style="color:#001080;">Ordered</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">)) {</span></span>
<span class="line"><span style="color:#001080;">        orderedPostProcessorNames</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(ppName);</span></span>
<span class="line"><span style="color:#000000;">      } </span><span style="color:#AF00DB;">else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        nonOrderedPostProcessorNames</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(ppName);</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // First, invoke the BeanFactoryPostProcessors that implement PriorityOrdered.</span></span>
<span class="line"><span style="color:#795E26;">    sortPostProcessors</span><span style="color:#000000;">(priorityOrderedPostProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#795E26;">    invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(priorityOrderedPostProcessors, beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Next, invoke the BeanFactoryPostProcessors that implement Ordered.</span></span>
<span class="line"><span style="color:#267F99;">    List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">orderedPostProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#001080;">orderedPostProcessorNames</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">    for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> postProcessorName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> orderedPostProcessorNames) {</span></span>
<span class="line"><span style="color:#001080;">      orderedPostProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(postProcessorName, </span><span style="color:#001080;">BeanFactoryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#795E26;">    sortPostProcessors</span><span style="color:#000000;">(orderedPostProcessors, beanFactory);</span></span>
<span class="line"><span style="color:#795E26;">    invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(orderedPostProcessors, beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Finally, invoke all other BeanFactoryPostProcessors.</span></span>
<span class="line"><span style="color:#267F99;">    List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">BeanFactoryPostProcessor</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">nonOrderedPostProcessors</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#001080;">nonOrderedPostProcessorNames</span><span style="color:#000000;">.</span><span style="color:#795E26;">size</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">    for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> postProcessorName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> nonOrderedPostProcessorNames) {</span></span>
<span class="line"><span style="color:#001080;">      nonOrderedPostProcessors</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(</span><span style="color:#001080;">beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(postProcessorName, </span><span style="color:#001080;">BeanFactoryPostProcessor</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#795E26;">    invokeBeanFactoryPostProcessors</span><span style="color:#000000;">(nonOrderedPostProcessors, beanFactory);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Clear cached merged bean definitions since the post-processors might have</span></span>
<span class="line"><span style="color:#008000;">    // modified the original metadata, e.g. replacing placeholders in values...</span></span>
<span class="line"><span style="color:#001080;">    beanFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">clearMetadataCache</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="finishrefresh" tabindex="-1"><a class="header-anchor" href="#finishrefresh"><span>finishRefresh</span></a></h4><p>执行生命周期处理器DefaultLifecycleProcessor的onRefresh方法、发布上下文已刷新事件</p><ul><li>WebServerStartStopLifecycle 发出服务器已被初始化事件ServletWebServerInitializedEvent</li></ul><h2 id="dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet"><span>dispatcherServlet</span></a></h2><p>在第一次处理请求，为请求request分配servlet时，对servlet进行初始化</p><p>在servlet引擎创建servlet实例时，调用其init方法实现servlet初始化</p><p>在调用初始化init方法时会传入servletConfig接口的实例servletConfigImpl包含对servletContext的引用</p><p>请求进来到继承httpServlet的FrameServlet的service方法去处理，processRequest-&gt; doService-&gt;doDispatch</p><p>继承frameworkServlet抽象类，使用initWebApplicationContext初始化servlet的上下文</p><h3 id="dodispatch方法" tabindex="-1"><a class="header-anchor" href="#dodispatch方法"><span>doDispatch方法</span></a></h3><h4 id="requestmappinghandleradapter继承abstracthandlermethodadapter" tabindex="-1"><a class="header-anchor" href="#requestmappinghandleradapter继承abstracthandlermethodadapter"><span>RequestMappingHandlerAdapter继承AbstractHandlerMethodAdapter</span></a></h4><blockquote><p>handle方法</p></blockquote><blockquote><p>handleInternal方法</p></blockquote><blockquote><p>invokeHandlerMethod</p></blockquote><p>构造web请求，处理异步结果，将StandardServletAsyncWebRequest放入AsyncManager异步管理器,放在request的属性中</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>创建web请求</span></span>
<span class="line"><span>ServletWebRequest webRequest = new ServletWebRequest(request, response);</span></span>
<span class="line"><span>ServletInvocableHandlerMethod invocableMethod = createInvocableHandlerMethod(handlerMethod);</span></span>
<span class="line"><span>if (this.argumentResolvers != null) {</span></span>
<span class="line"><span>invocableMethod.setHandlerMethodArgumentResolvers(this.argumentResolvers);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>//设置返回值</span></span>
<span class="line"><span>if (this.returnValueHandlers != null) {</span></span>
<span class="line"><span>invocableMethod.setHandlerMethodReturnValueHandlers(this.returnValueHandlers);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="servletinvocablehandlermethod" tabindex="-1"><a class="header-anchor" href="#servletinvocablehandlermethod"><span>ServletInvocableHandlerMethod</span></a></h4><p>invokeAndHandle</p><h4 id="handlermethodreturnvaluehandlercomposite" tabindex="-1"><a class="header-anchor" href="#handlermethodreturnvaluehandlercomposite"><span>HandlerMethodReturnValueHandlerComposite</span></a></h4><p>handleReturnValue查找返回值处理器</p><ul><li>DeferredResultMethodReturnValueHandler</li><li>CallableMethodReturnValueHandler</li><li>RequestResponseBodyMethodProcessor</li></ul><h4 id="deferredresultmethodreturnvaluehandler-1" tabindex="-1"><a class="header-anchor" href="#deferredresultmethodreturnvaluehandler-1"><span>DeferredResultMethodReturnValueHandler</span></a></h4><blockquote><p>handleReturnValue</p></blockquote><p>获取web请求中的异步管理器，开启异步处理</p><p>startDeferredResultProcessing</p><p>startAsyncProcessing</p><p>启动servletRequest的异步处理，获取异步上下文</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>WebAsyncUtils.getAsyncManager(webRequest).startDeferredResultProcessing(result, mavContainer);</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>startAsyncProcessing</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>private void startAsyncProcessing(Object[] processingContext) {</span></span>
<span class="line"><span>		synchronized (WebAsyncManager.this) {</span></span>
<span class="line"><span>			this.concurrentResult = RESULT_NONE;</span></span>
<span class="line"><span>			this.concurrentResultContext = processingContext;</span></span>
<span class="line"><span>			this.errorHandlingInProgress = false;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		this.asyncWebRequest.startAsync();</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		if (logger.isDebugEnabled()) {</span></span>
<span class="line"><span>			logger.debug(&quot;Started async request&quot;);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="servlet接口" tabindex="-1"><a class="header-anchor" href="#servlet接口"><span>servlet接口</span></a></h3><h3 id="genericservlet" tabindex="-1"><a class="header-anchor" href="#genericservlet"><span>GenericServlet</span></a></h3><h3 id="httpservlet" tabindex="-1"><a class="header-anchor" href="#httpservlet"><span>HttpServlet</span></a></h3><h3 id="httpservletbean" tabindex="-1"><a class="header-anchor" href="#httpservletbean"><span>HttpServletBean</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> HttpServletBean</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> init</span><span style="color:#000000;">() </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Set bean properties from init parameters.</span></span>
<span class="line"><span style="color:#267F99;">    PropertyValues</span><span style="color:#001080;"> pvs</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ServletConfigPropertyValues</span><span style="color:#000000;">(</span><span style="color:#795E26;">getServletConfig</span><span style="color:#000000;">(), </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">requiredProperties</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">pvs</span><span style="color:#000000;">.</span><span style="color:#795E26;">isEmpty</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#AF00DB;">      try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#267F99;">        BeanWrapper</span><span style="color:#001080;"> bw</span><span style="color:#000000;"> = </span><span style="color:#001080;">PropertyAccessorFactory</span><span style="color:#000000;">.</span><span style="color:#795E26;">forBeanPropertyAccess</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#267F99;">        ResourceLoader</span><span style="color:#001080;"> resourceLoader</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ServletContextResourceLoader</span><span style="color:#000000;">(</span><span style="color:#795E26;">getServletContext</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">        bw</span><span style="color:#000000;">.</span><span style="color:#795E26;">registerCustomEditor</span><span style="color:#000000;">(</span><span style="color:#001080;">Resource</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> ResourceEditor</span><span style="color:#000000;">(resourceLoader, </span><span style="color:#795E26;">getEnvironment</span><span style="color:#000000;">()));</span></span>
<span class="line"><span style="color:#795E26;">        initBeanWrapper</span><span style="color:#000000;">(bw);</span></span>
<span class="line"><span style="color:#001080;">        bw</span><span style="color:#000000;">.</span><span style="color:#795E26;">setPropertyValues</span><span style="color:#000000;">(pvs, </span><span style="color:#0000FF;">true</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#AF00DB;">      catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">BeansException</span><span style="color:#001080;"> ex</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isErrorEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">          logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">error</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Failed to set bean properties on servlet &#39;&quot;</span><span style="color:#000000;"> + </span><span style="color:#795E26;">getServletName</span><span style="color:#000000;">() + </span><span style="color:#A31515;">&quot;&#39;&quot;</span><span style="color:#000000;">, ex);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        throw</span><span style="color:#000000;"> ex;</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    // Let subclasses do whatever initialization they like.</span></span>
<span class="line"><span style="color:#795E26;">    initServletBean</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="frameworkservlet" tabindex="-1"><a class="header-anchor" href="#frameworkservlet"><span>FrameworkServlet</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> abstract</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> FrameworkServlet</span><span style="color:#000000;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">  protected</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> initServletBean</span><span style="color:#000000;">() </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">    getServletContext</span><span style="color:#000000;">().</span><span style="color:#795E26;">log</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Initializing Spring &quot;</span><span style="color:#000000;"> + </span><span style="color:#795E26;">getClass</span><span style="color:#000000;">().</span><span style="color:#795E26;">getSimpleName</span><span style="color:#000000;">() + </span><span style="color:#A31515;">&quot; &#39;&quot;</span><span style="color:#000000;"> + </span><span style="color:#795E26;">getServletName</span><span style="color:#000000;">() + </span><span style="color:#A31515;">&quot;&#39;&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isInfoEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">      logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">info</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Initializing Servlet &#39;&quot;</span><span style="color:#000000;"> + </span><span style="color:#795E26;">getServletName</span><span style="color:#000000;">() + </span><span style="color:#A31515;">&quot;&#39;&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#267F99;">    long</span><span style="color:#001080;"> startTime</span><span style="color:#000000;"> = </span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">currentTimeMillis</span><span style="color:#000000;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    try</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#0000FF;">      this</span><span style="color:#000000;">.</span><span style="color:#001080;">webApplicationContext</span><span style="color:#000000;"> = </span><span style="color:#795E26;">initWebApplicationContext</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#795E26;">      initFrameworkServlet</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#AF00DB;">    catch</span><span style="color:#000000;"> (</span><span style="color:#267F99;">ServletException</span><span style="color:#000000;"> | </span><span style="color:#267F99;">RuntimeException</span><span style="color:#001080;"> ex</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">      logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">error</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Context initialization failed&quot;</span><span style="color:#000000;">, ex);</span></span>
<span class="line"><span style="color:#AF00DB;">      throw</span><span style="color:#000000;"> ex;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isDebugEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#267F99;">      String</span><span style="color:#001080;"> value</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">enableLoggingRequestDetails</span><span style="color:#AF00DB;"> ?</span></span>
<span class="line"><span style="color:#A31515;">              &quot;shown which may lead to unsafe logging of potentially sensitive data&quot;</span><span style="color:#AF00DB;"> :</span></span>
<span class="line"><span style="color:#A31515;">              &quot;masked to prevent unsafe logging of potentially sensitive data&quot;</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#001080;">      logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">debug</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;enableLoggingRequestDetails=&#39;&quot;</span><span style="color:#000000;"> + </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">enableLoggingRequestDetails</span><span style="color:#000000;"> +</span></span>
<span class="line"><span style="color:#A31515;">              &quot;&#39;: request parameters and headers will be &quot;</span><span style="color:#000000;"> + value);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isInfoEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">      logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">info</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Completed initialization in &quot;</span><span style="color:#000000;"> + (</span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">currentTimeMillis</span><span style="color:#000000;">() - startTime) + </span><span style="color:#A31515;">&quot; ms&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#0000FF;">  protected</span><span style="color:#267F99;"> WebApplicationContext</span><span style="color:#795E26;"> initWebApplicationContext</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#267F99;">    WebApplicationContext</span><span style="color:#001080;"> rootContext</span><span style="color:#000000;"> =</span></span>
<span class="line"><span style="color:#001080;">            WebApplicationContextUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">getWebApplicationContext</span><span style="color:#000000;">(</span><span style="color:#795E26;">getServletContext</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#267F99;">    WebApplicationContext</span><span style="color:#001080;"> wac</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">null</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">webApplicationContext</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">      // A context instance was injected at construction time -&gt; use it</span></span>
<span class="line"><span style="color:#000000;">      wac = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">webApplicationContext</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">      if</span><span style="color:#000000;"> (wac </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> ConfigurableWebApplicationContext) {</span></span>
<span class="line"><span style="color:#267F99;">        ConfigurableWebApplicationContext</span><span style="color:#001080;"> cwac</span><span style="color:#000000;"> = (ConfigurableWebApplicationContext) wac;</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">cwac</span><span style="color:#000000;">.</span><span style="color:#795E26;">isActive</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#008000;">          // The context has not yet been refreshed -&gt; provide services such as</span></span>
<span class="line"><span style="color:#008000;">          // setting the parent context, setting the application context id, etc</span></span>
<span class="line"><span style="color:#AF00DB;">          if</span><span style="color:#000000;"> (</span><span style="color:#001080;">cwac</span><span style="color:#000000;">.</span><span style="color:#795E26;">getParent</span><span style="color:#000000;">() == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">            // The context instance was injected without an explicit parent -&gt; set</span></span>
<span class="line"><span style="color:#008000;">            // the root application context (if any; may be null) as the parent</span></span>
<span class="line"><span style="color:#001080;">            cwac</span><span style="color:#000000;">.</span><span style="color:#795E26;">setParent</span><span style="color:#000000;">(rootContext);</span></span>
<span class="line"><span style="color:#000000;">          }</span></span>
<span class="line"><span style="color:#795E26;">          configureAndRefreshWebApplicationContext</span><span style="color:#000000;">(cwac);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (wac == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">      // No context instance was injected at construction time -&gt; see if one</span></span>
<span class="line"><span style="color:#008000;">      // has been registered in the servlet context. If one exists, it is assumed</span></span>
<span class="line"><span style="color:#008000;">      // that the parent context (if any) has already been set and that the</span></span>
<span class="line"><span style="color:#008000;">      // user has performed any initialization such as setting the context id</span></span>
<span class="line"><span style="color:#000000;">      wac = </span><span style="color:#795E26;">findWebApplicationContext</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (wac == </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">      // No context instance is defined for this servlet -&gt; create a local one</span></span>
<span class="line"><span style="color:#000000;">      wac = </span><span style="color:#795E26;">createWebApplicationContext</span><span style="color:#000000;">(rootContext);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (!</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">refreshEventReceived</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">      // Either the context is not a ConfigurableApplicationContext with refresh</span></span>
<span class="line"><span style="color:#008000;">      // support or the context injected at construction time had already been</span></span>
<span class="line"><span style="color:#008000;">      // refreshed -&gt; trigger initial onRefresh manually here.</span></span>
<span class="line"><span style="color:#0000FF;">      synchronized</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">onRefreshMonitor</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#795E26;">        onRefresh</span><span style="color:#000000;">(wac);</span></span>
<span class="line"><span style="color:#000000;">      }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">publishContext</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#008000;">      // Publish the context as a servlet context attribute.</span></span>
<span class="line"><span style="color:#267F99;">      String</span><span style="color:#001080;"> attrName</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getServletContextAttributeName</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#795E26;">      getServletContext</span><span style="color:#000000;">().</span><span style="color:#795E26;">setAttribute</span><span style="color:#000000;">(attrName, wac);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> wac;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-event-listener" tabindex="-1"><a class="header-anchor" href="#spring-event-listener"><span>spring event listener</span></a></h2><h3 id="使用-1" tabindex="-1"><a class="header-anchor" href="#使用-1"><span>使用</span></a></h3><ol><li>@EventListener(要处理的事件)标注在方法上,监听器对象注入到容器中</li><li>定义自定义事件</li><li>上下文方法发布事件</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>//自定义对象获取上下文</span></span>
<span class="line"><span>public class SpringContextHolder implements ApplicationContextAware, DisposableBean {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private static ApplicationContext applicationContext = null;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static ApplicationContext getApplicationContext() {</span></span>
<span class="line"><span>        return applicationContext;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void destroy() throws Exception {</span></span>
<span class="line"><span>        if (log.isDebugEnabled()) {</span></span>
<span class="line"><span>            log.debug(&quot;清除ApplicationContext:{}&quot; , applicationContext);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        applicationContext = null;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Override</span></span>
<span class="line"><span>    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {</span></span>
<span class="line"><span>        SpringContextHolder.applicationContext = applicationContext;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static &lt;T&gt; T getBean(Class&lt;T&gt; requiredType) {</span></span>
<span class="line"><span>        return applicationContext.getBean(requiredType);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    /**</span></span>
<span class="line"><span>     * 发布事件</span></span>
<span class="line"><span>     * @param event</span></span>
<span class="line"><span>     */</span></span>
<span class="line"><span>    public static void publishEvent(ApplicationEvent event) {</span></span>
<span class="line"><span>        if (applicationContext == null) {</span></span>
<span class="line"><span>            return;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        applicationContext.publishEvent(event);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class LogEvent extends ApplicationEvent {</span></span>
<span class="line"><span>    public LogEvent(Object source) {</span></span>
<span class="line"><span>        super(source);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>public class LogListener {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    private final LogClient logClient;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @EventListener(LogEvent.class)</span></span>
<span class="line"><span>    public void saveLog(LogEvent logEvent){</span></span>
<span class="line"><span>        log.info(&quot;监听器触发：{}&quot;,logEvent.getSource());</span></span>
<span class="line"><span>        Object object = logEvent.getSource();</span></span>
<span class="line"><span>        if(object instanceof SysLoginLog){</span></span>
<span class="line"><span>            logClient.saveLoginLog((SysLoginLog) object, SecurityConstants.INNER);</span></span>
<span class="line"><span>        }else if(object instanceof SysOperationLog){</span></span>
<span class="line"><span>            logClient.saveOperationLog((SysOperationLog)object,SecurityConstants.INNER);</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-session-redis" tabindex="-1"><a class="header-anchor" href="#spring-session-redis"><span>Spring session redis</span></a></h2><p>它对servlet中的session进行了覆盖，创建和销毁使用redis实现</p><h3 id="enableredishttpsession" tabindex="-1"><a class="header-anchor" href="#enableredishttpsession"><span>@EnableRedisHttpSession</span></a></h3><p>该注解已废弃，不用显式开启spring session</p><h3 id="springhttpsessionconfiguration" tabindex="-1"><a class="header-anchor" href="#springhttpsessionconfiguration"><span>SpringHttpSessionConfiguration</span></a></h3><p>SpringHttpSessionConfiguration 会将自定义的所有SessionListener 封装为一个SessionEventHttpSessionListenerAdapter;</p><p>SpringHttpSessionConfiguration 会初始化一个最核心的组件SessionRepositoryFilter, 该过滤器会拦截所有的http 请求, 解析并处理session。</p><h3 id="redishttpsessionconfiguration继承springhttpsessionconfiguration" tabindex="-1"><a class="header-anchor" href="#redishttpsessionconfiguration继承springhttpsessionconfiguration"><span>RedisHttpSessionConfiguration继承SpringHttpSessionConfiguration</span></a></h3><ul><li>注册RedisIndexedSessionRepository到容器中</li><li>注册SessionRepositoryFilter到容器</li></ul><h3 id="sessionrepositoryfilter" tabindex="-1"><a class="header-anchor" href="#sessionrepositoryfilter"><span>SessionRepositoryFilter</span></a></h3><ul><li>在springSecurityFilterChain之前，即多个安全过滤器(构成的filterProxy)之前 SessionRepositoryFilter 继承了OncePerRequestFilter，实现了doFilterInternal()，这个方法一个封装一个wrappedRequest，</li><li>通过执行commitSession()保存session信息到redis。</li></ul><h3 id="redisindexedsessionrepository" tabindex="-1"><a class="header-anchor" href="#redisindexedsessionrepository"><span>RedisIndexedSessionRepository</span></a></h3><p>对FindByIndexNameSessionRepository仓库接口的实现，内部有RedisSession内部类，这里集成了security一些特性，对principle和session 做了处理。</p><h2 id="filter" tabindex="-1"><a class="header-anchor" href="#filter"><span>Filter</span></a></h2><h3 id="mvc" tabindex="-1"><a class="header-anchor" href="#mvc"><span>mvc</span></a></h3><blockquote><p>1、使用spring boot提供的FilterRegistrationBean注册Filter</p></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MyFilter</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> Filter</span><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span><span style="color:#0000FF;"> public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> init</span><span style="color:#000000;">(</span><span style="color:#267F99;">FilterConfig</span><span style="color:#001080;"> filterConfig</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> doFilter</span><span style="color:#000000;">(</span><span style="color:#267F99;">ServletRequest</span><span style="color:#001080;"> servletRequest</span><span style="color:#000000;">, </span><span style="color:#267F99;">ServletResponse</span><span style="color:#001080;"> servletResponse</span><span style="color:#000000;">, </span><span style="color:#267F99;">FilterChain</span><span style="color:#001080;"> filterChain</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> IOException</span><span style="color:#000000;">, </span><span style="color:#267F99;">ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;您已经进入过滤器&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#008000;">        // 打印请求信息</span></span>
<span class="line"><span style="color:#267F99;">        HttpServletRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;"> = (HttpServletRequest) servletRequest;</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;"> (</span><span style="color:#A31515;">&quot;------------- LogFilter 开始 -------------&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;"> (</span><span style="color:#A31515;">&quot;请求地址: {} {}&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRequestURL</span><span style="color:#000000;">().</span><span style="color:#795E26;">toString</span><span style="color:#000000;">(), </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getMethod</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;"> (</span><span style="color:#A31515;">&quot;远程地址: {}&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRemoteAddr</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#267F99;">        long</span><span style="color:#001080;"> startTime</span><span style="color:#000000;"> = </span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">currentTimeMillis</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;"> (</span><span style="color:#A31515;">&quot;------------- LogFilter 结束 耗时：{} ms -------------&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">currentTimeMillis</span><span style="color:#000000;">() - startTime);</span></span>
<span class="line"><span style="color:#001080;">        filterChain</span><span style="color:#000000;">.</span><span style="color:#795E26;">doFilter</span><span style="color:#000000;">(servletRequest,servletResponse);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span><span style="color:#0000FF;"> public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> destroy</span><span style="color:#000000;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Configuration</span><span style="color:#008000;"> //定义此类为配置类,必须增加</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> FilterConfig</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">  @</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#0000FF;">  public</span><span style="color:#267F99;"> FilterRegistrationBean</span><span style="color:#795E26;"> myFilterRegistrationBean</span><span style="color:#000000;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">    FilterRegistrationBean</span><span style="color:#001080;"> filterRegistrationBean</span><span style="color:#000000;">=</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> FilterRegistrationBean</span><span style="color:#000000;">(</span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> MyFilter</span><span style="color:#000000;">());</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">    //添加过滤器路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">    filterRegistrationBean</span><span style="color:#000000;">.</span><span style="color:#795E26;">addUrlPatterns</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/user/*&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">    filterRegistrationBean</span><span style="color:#000000;">.</span><span style="color:#795E26;">addUrlPatterns</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;/login/*&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">    return</span><span style="color:#000000;"> filterRegistrationBean;</span></span>
<span class="line"><span style="color:#000000;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>2、使用原生servlet注解定义Filter</p></blockquote><ul><li>在启动类上面增加注解@ServletComponentScan</li><li>在类的上方使用 @WebFilter 注解来创建Filter即可</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">WebFilter</span><span style="color:#000000;">(urlPatterns = </span><span style="color:#A31515;">&quot;/myfilter&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Component</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> MyFilter</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> Filter</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">   @</span><span style="color:#267F99;">Override</span><span style="color:#0000FF;"> public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> init</span><span style="color:#000000;">(</span><span style="color:#267F99;">FilterConfig</span><span style="color:#001080;"> filterConfig</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> doFilter</span><span style="color:#000000;">(</span><span style="color:#267F99;">ServletRequest</span><span style="color:#001080;"> servletRequest</span><span style="color:#000000;">, </span><span style="color:#267F99;">ServletResponse</span><span style="color:#001080;"> servletResponse</span><span style="color:#000000;">, </span><span style="color:#267F99;">FilterChain</span><span style="color:#001080;"> filterChain</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> IOException</span><span style="color:#000000;">, </span><span style="color:#267F99;">ServletException</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">        System</span><span style="color:#000000;">.</span><span style="color:#001080;">out</span><span style="color:#000000;">.</span><span style="color:#795E26;">println</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;您已经进入过滤器&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#001080;">        filterChain</span><span style="color:#000000;">.</span><span style="color:#795E26;">doFilter</span><span style="color:#000000;">(servletRequest,servletResponse);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span><span style="color:#0000FF;"> public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> destroy</span><span style="color:#000000;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="reactive" tabindex="-1"><a class="header-anchor" href="#reactive"><span>reactive</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Component</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> WhiteListAuthorizationFilter</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> WebFilter</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> IgnoreUrlProperties</span><span style="color:#001080;"> ignoreUrlProperties</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">filter</span><span style="color:#000000;">(</span><span style="color:#267F99;">ServerWebExchange</span><span style="color:#001080;"> exchange</span><span style="color:#000000;">, </span><span style="color:#267F99;">WebFilterChain</span><span style="color:#001080;"> chain</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">        ServerHttpRequest</span><span style="color:#001080;"> request</span><span style="color:#000000;"> = </span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRequest</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">        ServerHttpRequest</span><span style="color:#000000;">.</span><span style="color:#267F99;">Builder</span><span style="color:#001080;"> mutate</span><span style="color:#000000;"> = </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">mutate</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">        String</span><span style="color:#001080;"> path</span><span style="color:#000000;"> = </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getURI</span><span style="color:#000000;">().</span><span style="color:#795E26;">getPath</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#267F99;">        PathMatcher</span><span style="color:#001080;"> pathMatcher</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> AntPathMatcher</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#008000;">        //白名单路径移除请求头认证信息</span></span>
<span class="line"><span style="color:#267F99;">        List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">urls</span><span style="color:#000000;"> = </span><span style="color:#001080;">ignoreUrlProperties</span><span style="color:#000000;">.</span><span style="color:#795E26;">getWhites</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">        for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> url</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> urls) {</span></span>
<span class="line"><span style="color:#AF00DB;">            if</span><span style="color:#000000;"> (</span><span style="color:#001080;">pathMatcher</span><span style="color:#000000;">.</span><span style="color:#795E26;">match</span><span style="color:#000000;">(url, path)) {</span></span>
<span class="line"><span style="color:#267F99;">                String</span><span style="color:#001080;"> token</span><span style="color:#000000;"> = </span><span style="color:#001080;">request</span><span style="color:#000000;">.</span><span style="color:#795E26;">getHeaders</span><span style="color:#000000;">().</span><span style="color:#795E26;">getFirst</span><span style="color:#000000;">(</span><span style="color:#001080;">HttpHeaders</span><span style="color:#000000;">.</span><span style="color:#001080;">AUTHORIZATION</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#AF00DB;">                if</span><span style="color:#000000;">(</span><span style="color:#001080;">StringUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">hasText</span><span style="color:#000000;">(token) &amp;&amp; !</span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">startsWith</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Basic&quot;</span><span style="color:#000000;">)){</span></span>
<span class="line"><span style="color:#001080;">                    mutate</span><span style="color:#000000;">.</span><span style="color:#795E26;">header</span><span style="color:#000000;">(</span><span style="color:#001080;">HttpHeaders</span><span style="color:#000000;">.</span><span style="color:#001080;">AUTHORIZATION</span><span style="color:#000000;">+</span><span style="color:#A31515;">&quot;wt&quot;</span><span style="color:#000000;">, token);</span></span>
<span class="line"><span style="color:#001080;">                    mutate</span><span style="color:#000000;">.</span><span style="color:#795E26;">header</span><span style="color:#000000;">(</span><span style="color:#001080;">HttpHeaders</span><span style="color:#000000;">.</span><span style="color:#001080;">AUTHORIZATION</span><span style="color:#000000;">, </span><span style="color:#A31515;">&quot;&quot;</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">                }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">                return</span><span style="color:#001080;"> chain</span><span style="color:#000000;">.</span><span style="color:#795E26;">filter</span><span style="color:#000000;">(</span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">mutate</span><span style="color:#000000;">().</span><span style="color:#795E26;">request</span><span style="color:#000000;">(</span><span style="color:#001080;">mutate</span><span style="color:#000000;">.</span><span style="color:#795E26;">build</span><span style="color:#000000;">()).</span><span style="color:#795E26;">build</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#001080;"> chain</span><span style="color:#000000;">.</span><span style="color:#795E26;">filter</span><span style="color:#000000;">(exchange);</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responsebodyresulthandler" tabindex="-1"><a class="header-anchor" href="#responsebodyresulthandler"><span>ResponseBodyResultHandler</span></a></h2><p>可以自定义是否装饰响应结果</p><h2 id="transaction如何生效" tabindex="-1"><a class="header-anchor" href="#transaction如何生效"><span>@Transaction如何生效</span></a></h2><h3 id="spring-autoconfigure" tabindex="-1"><a class="header-anchor" href="#spring-autoconfigure"><span>spring-autoConfigure</span></a></h3><h4 id="transactionautoconfiguration" tabindex="-1"><a class="header-anchor" href="#transactionautoconfiguration"><span>TransactionAutoConfiguration</span></a></h4><h4 id="aopautoconfiguration" tabindex="-1"><a class="header-anchor" href="#aopautoconfiguration"><span>AopAutoConfiguration</span></a></h4><ul><li>继承AspectJAutoProxyingConfiguration</li><li>@EnableAspectJAutoProxy注册AnnotationAwareAspectJAutoProxyCreator代理后置处理器到容器中</li></ul><h3 id="spring-tx" tabindex="-1"><a class="header-anchor" href="#spring-tx"><span>spring-tx</span></a></h3><h4 id="transactioninterceptor" tabindex="-1"><a class="header-anchor" href="#transactioninterceptor"><span>TransactionInterceptor</span></a></h4><p>继承TransactionAspectSupport，用于事务的开启和提交</p><blockquote><p>核心方法</p></blockquote><ul><li>TransactionInterceptor的invoke</li><li>TransactionInterceptor 的invokeWithinTransaction</li><li>TransactionAspectSupport的invokeWithinTransaction，开启事务，提交事务</li></ul><h4 id="proxytransactionmanagementconfiguration" tabindex="-1"><a class="header-anchor" href="#proxytransactionmanagementconfiguration"><span>ProxyTransactionManagementConfiguration</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Configuration</span><span style="color:#000000;">(proxyBeanMethods = </span><span style="color:#0000FF;">false</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Role</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinition</span><span style="color:#000000;">.</span><span style="color:#001080;">ROLE_INFRASTRUCTURE</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> ProxyTransactionManagementConfiguration</span><span style="color:#0000FF;"> extends</span><span style="color:#267F99;"> AbstractTransactionManagementConfiguration</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Bean</span><span style="color:#000000;">(name = </span><span style="color:#001080;">TransactionManagementConfigUtils</span><span style="color:#000000;">.</span><span style="color:#001080;">TRANSACTION_ADVISOR_BEAN_NAME</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Role</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinition</span><span style="color:#000000;">.</span><span style="color:#001080;">ROLE_INFRASTRUCTURE</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">	public</span><span style="color:#267F99;"> BeanFactoryTransactionAttributeSourceAdvisor</span><span style="color:#795E26;"> transactionAdvisor</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#267F99;">			TransactionAttributeSource</span><span style="color:#001080;"> transactionAttributeSource</span><span style="color:#000000;">, </span><span style="color:#267F99;">TransactionInterceptor</span><span style="color:#001080;"> transactionInterceptor</span><span style="color:#000000;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#267F99;">		BeanFactoryTransactionAttributeSourceAdvisor</span><span style="color:#001080;"> advisor</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> BeanFactoryTransactionAttributeSourceAdvisor</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">		advisor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setTransactionAttributeSource</span><span style="color:#000000;">(transactionAttributeSource);</span></span>
<span class="line"><span style="color:#008000;">        //设置要执行的advise拦截器</span></span>
<span class="line"><span style="color:#001080;">		advisor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setAdvice</span><span style="color:#000000;">(transactionInterceptor);</span></span>
<span class="line"><span style="color:#AF00DB;">		if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">enableTx</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">			advisor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setOrder</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">enableTx</span><span style="color:#000000;">.&lt;Integer&gt;</span><span style="color:#795E26;">getNumber</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;order&quot;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		return</span><span style="color:#000000;"> advisor;</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Role</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinition</span><span style="color:#000000;">.</span><span style="color:#001080;">ROLE_INFRASTRUCTURE</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">	public</span><span style="color:#267F99;"> TransactionAttributeSource</span><span style="color:#795E26;"> transactionAttributeSource</span><span style="color:#000000;">() {</span></span>
<span class="line"><span style="color:#AF00DB;">		return</span><span style="color:#AF00DB;"> new</span><span style="color:#795E26;"> AnnotationTransactionAttributeSource</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Bean</span></span>
<span class="line"><span style="color:#000000;">	@</span><span style="color:#267F99;">Role</span><span style="color:#000000;">(</span><span style="color:#001080;">BeanDefinition</span><span style="color:#000000;">.</span><span style="color:#001080;">ROLE_INFRASTRUCTURE</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#0000FF;">	public</span><span style="color:#267F99;"> TransactionInterceptor</span><span style="color:#795E26;"> transactionInterceptor</span><span style="color:#000000;">(</span><span style="color:#267F99;">TransactionAttributeSource</span><span style="color:#001080;"> transactionAttributeSource</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">		TransactionInterceptor</span><span style="color:#001080;"> interceptor</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#795E26;"> TransactionInterceptor</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#001080;">		interceptor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setTransactionAttributeSource</span><span style="color:#000000;">(transactionAttributeSource);</span></span>
<span class="line"><span style="color:#AF00DB;">		if</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">txManager</span><span style="color:#000000;"> != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">			interceptor</span><span style="color:#000000;">.</span><span style="color:#795E26;">setTransactionManager</span><span style="color:#000000;">(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">txManager</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#AF00DB;">		return</span><span style="color:#000000;"> interceptor;</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>BeanFactoryTransactionAttributeSourceAdvisor</p><h2 id="spring代理对象的生成" tabindex="-1"><a class="header-anchor" href="#spring代理对象的生成"><span>spring代理对象的生成</span></a></h2><h3 id="annotationawareaspectjautoproxycreator-bean后置处理器" tabindex="-1"><a class="header-anchor" href="#annotationawareaspectjautoproxycreator-bean后置处理器"><span>AnnotationAwareAspectJAutoProxyCreator(bean后置处理器)</span></a></h3><p>该类继承<strong>AbstractAutoProxyCreator</strong>,核心方法postProcessAfterInitialization，wrapIfNecessary</p><h4 id="abstractautoproxycreator的postprocessafterinitialization" tabindex="-1"><a class="header-anchor" href="#abstractautoproxycreator的postprocessafterinitialization"><span>AbstractAutoProxyCreator的postProcessAfterInitialization</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {</span></span>
<span class="line"><span>		if (bean != null) {</span></span>
<span class="line"><span>			Object cacheKey = getCacheKey(bean.getClass(), beanName);</span></span>
<span class="line"><span>			if (this.earlyProxyReferences.remove(cacheKey) != bean) {</span></span>
<span class="line"><span>				return wrapIfNecessary(bean, beanName, cacheKey);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		return bean;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="abstractautoproxycreator的wrapifnecessary" tabindex="-1"><a class="header-anchor" href="#abstractautoproxycreator的wrapifnecessary"><span>AbstractAutoProxyCreator的wrapIfNecessary</span></a></h4><p>判断bean是否有对应的建议器advisors，即是否为该类生成代理对象</p><p>若类中方法上使用了@transactional注解，则会找到BeanFactoryTransactionAttributeSourceAdvisor，内部有对应的事务拦截器transactionInterceptor， 用于开启和提交事务</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {</span></span>
<span class="line"><span>		if (StringUtils.hasLength(beanName) &amp;&amp; this.targetSourcedBeans.contains(beanName)) {</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (Boolean.FALSE.equals(this.advisedBeans.get(cacheKey))) {</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		if (isInfrastructureClass(bean.getClass()) || shouldSkip(bean.getClass(), beanName)) {</span></span>
<span class="line"><span>			this.advisedBeans.put(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span>			return bean;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// Create proxy if we have advice.</span></span>
<span class="line"><span>		Object[] specificInterceptors = getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null);</span></span>
<span class="line"><span>		if (specificInterceptors != DO_NOT_PROXY) {</span></span>
<span class="line"><span>			this.advisedBeans.put(cacheKey, Boolean.TRUE);</span></span>
<span class="line"><span>			Object proxy = createProxy(</span></span>
<span class="line"><span>					bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean));</span></span>
<span class="line"><span>			this.proxyTypes.put(cacheKey, proxy.getClass());</span></span>
<span class="line"><span>			return proxy;</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		this.advisedBeans.put(cacheKey, Boolean.FALSE);</span></span>
<span class="line"><span>		return bean;</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="abstractautoproxycreator的createproxy" tabindex="-1"><a class="header-anchor" href="#abstractautoproxycreator的createproxy"><span>AbstractAutoProxyCreator的createProxy</span></a></h4><p>创建代理工厂ProxyFactory，代理工厂的createAopProxy()会创建cglibAopProxy对象，调用cglibAopProxy的getProxy方法获取代理实例</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>protected Object createProxy(Class&lt;?&gt; beanClass, @Nullable String beanName,</span></span>
<span class="line"><span>			@Nullable Object[] specificInterceptors, TargetSource targetSource) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		if (this.beanFactory instanceof ConfigurableListableBeanFactory) {</span></span>
<span class="line"><span>			AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory) this.beanFactory, beanName, beanClass);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		ProxyFactory proxyFactory = new ProxyFactory();</span></span>
<span class="line"><span>		proxyFactory.copyFrom(this);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		if (proxyFactory.isProxyTargetClass()) {</span></span>
<span class="line"><span>			// Explicit handling of JDK proxy targets and lambdas (for introduction advice scenarios)</span></span>
<span class="line"><span>			if (Proxy.isProxyClass(beanClass) || ClassUtils.isLambdaClass(beanClass)) {</span></span>
<span class="line"><span>				// Must allow for introductions; can&#39;t just set interfaces to the proxy&#39;s interfaces only.</span></span>
<span class="line"><span>				for (Class&lt;?&gt; ifc : beanClass.getInterfaces()) {</span></span>
<span class="line"><span>					proxyFactory.addInterface(ifc);</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		else {</span></span>
<span class="line"><span>			// No proxyTargetClass flag enforced, let&#39;s apply our default checks...</span></span>
<span class="line"><span>			if (shouldProxyTargetClass(beanClass, beanName)) {</span></span>
<span class="line"><span>				proxyFactory.setProxyTargetClass(true);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			else {</span></span>
<span class="line"><span>				evaluateProxyInterfaces(beanClass, proxyFactory);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		Advisor[] advisors = buildAdvisors(beanName, specificInterceptors);</span></span>
<span class="line"><span>		proxyFactory.addAdvisors(advisors);</span></span>
<span class="line"><span>		proxyFactory.setTargetSource(targetSource);</span></span>
<span class="line"><span>		customizeProxyFactory(proxyFactory);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		proxyFactory.setFrozen(this.freezeProxy);</span></span>
<span class="line"><span>		if (advisorsPreFiltered()) {</span></span>
<span class="line"><span>			proxyFactory.setPreFiltered(true);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// Use original ClassLoader if bean class not locally loaded in overriding class loader</span></span>
<span class="line"><span>		ClassLoader classLoader = getProxyClassLoader();</span></span>
<span class="line"><span>		if (classLoader instanceof SmartClassLoader &amp;&amp; classLoader != beanClass.getClassLoader()) {</span></span>
<span class="line"><span>			classLoader = ((SmartClassLoader) classLoader).getOriginalClassLoader();</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		return proxyFactory.getProxy(classLoader);</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cglibaopproxy的getproxy" tabindex="-1"><a class="header-anchor" href="#cglibaopproxy的getproxy"><span>CglibAopProxy的getProxy</span></a></h4><ul><li>创建enhancer,callbacks(即代理调用处理器集)</li><li>createProxyClassAndInstance创建代理实例</li><li>在执行代理实例对象的方法时会调用处理器的intercept方法进行处理</li><li>若带有拦截器，会创建CglibMethodInvocation（继承ReflectiveMethodInvocation）递归调用处理</li><li>最终执行切点方法invokeJoinpoint</li></ul><h2 id="spring单例对象的生成" tabindex="-1"><a class="header-anchor" href="#spring单例对象的生成"><span>spring单例对象的生成</span></a></h2><h3 id="defaultlistablebeanfactory的preinstantiatesingletons方法" tabindex="-1"><a class="header-anchor" href="#defaultlistablebeanfactory的preinstantiatesingletons方法"><span>DefaultListableBeanFactory的preInstantiateSingletons方法</span></a></h3><ul><li>根据beanDefinitionNames生成工厂bean还是普通bean,以及是否需提前生成实际单例对象，否则在依赖注入时根据工厂bean生成</li><li>对生成的实现SmartInitializingSingleton接口的单例对象调用afterSingletonsInstantiated进行一些自定义处理</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> preInstantiateSingletons</span><span style="color:#000000;">() throws BeansException {</span></span>
<span class="line"><span style="color:#AF00DB;">		if</span><span style="color:#000000;"> (</span><span style="color:#001080;">logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">isTraceEnabled</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#001080;">			logger</span><span style="color:#000000;">.</span><span style="color:#795E26;">trace</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;Pre-instantiating singletons in &quot;</span><span style="color:#000000;"> + </span><span style="color:#0000FF;">this</span><span style="color:#000000;">);</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">		// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span>
<span class="line"><span style="color:#008000;">		// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span>
<span class="line"><span style="color:#267F99;">		List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">beanNames</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;(</span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#001080;">beanDefinitionNames</span><span style="color:#000000;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">		// Trigger initialization of all non-lazy singleton beans...</span></span>
<span class="line"><span style="color:#AF00DB;">		for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> beanName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> beanNames) {</span></span>
<span class="line"><span style="color:#267F99;">			RootBeanDefinition</span><span style="color:#001080;"> bd</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getMergedLocalBeanDefinition</span><span style="color:#000000;">(beanName);</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (!</span><span style="color:#001080;">bd</span><span style="color:#000000;">.</span><span style="color:#795E26;">isAbstract</span><span style="color:#000000;">() &amp;&amp; </span><span style="color:#001080;">bd</span><span style="color:#000000;">.</span><span style="color:#795E26;">isSingleton</span><span style="color:#000000;">() &amp;&amp; !</span><span style="color:#001080;">bd</span><span style="color:#000000;">.</span><span style="color:#795E26;">isLazyInit</span><span style="color:#000000;">()) {</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (</span><span style="color:#795E26;">isFactoryBean</span><span style="color:#000000;">(beanName)) {</span></span>
<span class="line"><span style="color:#267F99;">					Object</span><span style="color:#001080;"> bean</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getBean</span><span style="color:#000000;">(FACTORY_BEAN_PREFIX + beanName);</span></span>
<span class="line"><span style="color:#AF00DB;">					if</span><span style="color:#000000;"> (bean </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> FactoryBean) {</span></span>
<span class="line"><span style="color:#267F99;">						FactoryBean</span><span style="color:#000000;">&lt;</span><span style="color:#0000FF;">?</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">factory</span><span style="color:#000000;"> = (</span><span style="color:#267F99;">FactoryBean</span><span style="color:#000000;">&lt;</span><span style="color:#AF00DB;">?</span><span style="color:#000000;">&gt;) bean;</span></span>
<span class="line"><span style="color:#267F99;">						boolean</span><span style="color:#001080;"> isEagerInit</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#AF00DB;">						if</span><span style="color:#000000;"> (</span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">getSecurityManager</span><span style="color:#000000;">() != </span><span style="color:#0000FF;">null</span><span style="color:#000000;"> &amp;&amp; factory </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> SmartFactoryBean) {</span></span>
<span class="line"><span style="color:#000000;">							isEagerInit = </span><span style="color:#001080;">AccessController</span><span style="color:#000000;">.</span><span style="color:#795E26;">doPrivileged</span><span style="color:#000000;">(</span></span>
<span class="line"><span style="color:#000000;">									(</span><span style="color:#267F99;">PrivilegedAction</span><span style="color:#000000;">&lt;Boolean&gt;) ((</span><span style="color:#267F99;">SmartFactoryBean</span><span style="color:#000000;">&lt;</span><span style="color:#AF00DB;">?</span><span style="color:#000000;">&gt;) factory)</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">isEagerInit,</span></span>
<span class="line"><span style="color:#795E26;">									getAccessControlContext</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">						}</span></span>
<span class="line"><span style="color:#AF00DB;">						else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#000000;">							isEagerInit = (factory </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> SmartFactoryBean &amp;&amp;</span></span>
<span class="line"><span style="color:#000000;">									((</span><span style="color:#267F99;">SmartFactoryBean</span><span style="color:#000000;">&lt;</span><span style="color:#AF00DB;">?</span><span style="color:#000000;">&gt;) factory).</span><span style="color:#795E26;">isEagerInit</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">						}</span></span>
<span class="line"><span style="color:#AF00DB;">						if</span><span style="color:#000000;"> (isEagerInit) {</span></span>
<span class="line"><span style="color:#795E26;">							getBean</span><span style="color:#000000;">(beanName);</span></span>
<span class="line"><span style="color:#000000;">						}</span></span>
<span class="line"><span style="color:#000000;">					}</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#AF00DB;">				else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#795E26;">					getBean</span><span style="color:#000000;">(beanName);</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">		// Trigger post-initialization callback for all applicable beans...</span></span>
<span class="line"><span style="color:#AF00DB;">		for</span><span style="color:#000000;"> (</span><span style="color:#267F99;">String</span><span style="color:#001080;"> beanName</span><span style="color:#AF00DB;"> :</span><span style="color:#000000;"> beanNames) {</span></span>
<span class="line"><span style="color:#267F99;">			Object</span><span style="color:#001080;"> singletonInstance</span><span style="color:#000000;"> = </span><span style="color:#795E26;">getSingleton</span><span style="color:#000000;">(beanName);</span></span>
<span class="line"><span style="color:#AF00DB;">			if</span><span style="color:#000000;"> (singletonInstance </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> SmartInitializingSingleton) {</span></span>
<span class="line"><span style="color:#267F99;">				StartupStep</span><span style="color:#001080;"> smartInitialize</span><span style="color:#000000;"> = </span><span style="color:#0000FF;">this</span><span style="color:#000000;">.</span><span style="color:#795E26;">getApplicationStartup</span><span style="color:#000000;">().</span><span style="color:#795E26;">start</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;spring.beans.smart-initialize&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">						.</span><span style="color:#795E26;">tag</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;beanName&quot;</span><span style="color:#000000;">, beanName);</span></span>
<span class="line"><span style="color:#267F99;">				SmartInitializingSingleton</span><span style="color:#001080;"> smartSingleton</span><span style="color:#000000;"> = (SmartInitializingSingleton) singletonInstance;</span></span>
<span class="line"><span style="color:#AF00DB;">				if</span><span style="color:#000000;"> (</span><span style="color:#001080;">System</span><span style="color:#000000;">.</span><span style="color:#795E26;">getSecurityManager</span><span style="color:#000000;">() != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#001080;">					AccessController</span><span style="color:#000000;">.</span><span style="color:#795E26;">doPrivileged</span><span style="color:#000000;">((</span><span style="color:#267F99;">PrivilegedAction</span><span style="color:#000000;">&lt;Object&gt;) () </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">						smartSingleton</span><span style="color:#000000;">.</span><span style="color:#795E26;">afterSingletonsInstantiated</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#AF00DB;">						return</span><span style="color:#0000FF;"> null</span><span style="color:#000000;">;</span></span>
<span class="line"><span style="color:#000000;">					}, </span><span style="color:#795E26;">getAccessControlContext</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#AF00DB;">				else</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#001080;">					smartSingleton</span><span style="color:#000000;">.</span><span style="color:#795E26;">afterSingletonsInstantiated</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">				}</span></span>
<span class="line"><span style="color:#001080;">				smartInitialize</span><span style="color:#000000;">.</span><span style="color:#795E26;">end</span><span style="color:#000000;">();</span></span>
<span class="line"><span style="color:#000000;">			}</span></span>
<span class="line"><span style="color:#000000;">		}</span></span>
<span class="line"><span style="color:#000000;">	}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractbeanfactory的getbean、dogetbean方法" tabindex="-1"><a class="header-anchor" href="#abstractbeanfactory的getbean、dogetbean方法"><span>abstractBeanFactory的getBean、doGetBean方法</span></a></h3><ul><li>优先从单例对象集singletonObjects、earlySingletonObjects、singletonFactories中取</li><li>判断是否是单例，还是原型，还是其他，创建单例对象</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>if (mbd.isSingleton()) {</span></span>
<span class="line"><span>					sharedInstance = getSingleton(beanName, () -&gt; {</span></span>
<span class="line"><span>						try {</span></span>
<span class="line"><span>							return createBean(beanName, mbd, args);</span></span>
<span class="line"><span>						}</span></span>
<span class="line"><span>						catch (BeansException ex) {</span></span>
<span class="line"><span>							// Explicitly remove instance from singleton cache: It might have been put there</span></span>
<span class="line"><span>							// eagerly by the creation process, to allow for circular reference resolution.</span></span>
<span class="line"><span>							// Also remove any beans that received a temporary reference to the bean.</span></span>
<span class="line"><span>							destroySingleton(beanName);</span></span>
<span class="line"><span>							throw ex;</span></span>
<span class="line"><span>						}</span></span>
<span class="line"><span>					});</span></span>
<span class="line"><span>					beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="abstractautowirecapablebeanfactory的docreatebean" tabindex="-1"><a class="header-anchor" href="#abstractautowirecapablebeanfactory的docreatebean"><span>AbstractAutowireCapableBeanFactory的doCreateBean</span></a></h3><ul><li>createBeanInstance</li><li>populateBean 属性注入</li><li>initializeBean 初始化 <ul><li>invokeAwareMethods <ul><li>BeanNameAware</li><li>BeanClassLoaderAware</li><li>BeanFactoryAware</li></ul></li><li>applyBeanPostProcessorsBeforeInitialization <ul><li>CommonAnnotationBeanPostProcessor的InitDestroyAnnotationBeanPostProcessor的postProcessBeforeInitialization方法</li></ul></li><li>invokeInitMethods <ul><li>afterPropertiesSet()</li><li>initMethod</li></ul></li><li>applyBeanPostProcessorsAfterInitialization</li></ul></li></ul><h4 id="commonannotationbeanpostprocessor继承initdestroyannotationbeanpostprocessor" tabindex="-1"><a class="header-anchor" href="#commonannotationbeanpostprocessor继承initdestroyannotationbeanpostprocessor"><span>CommonAnnotationBeanPostProcessor继承InitDestroyAnnotationBeanPostProcessor</span></a></h4><ul><li>PostConstruct</li><li>PreDestroy</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public CommonAnnotationBeanPostProcessor() {</span></span>
<span class="line"><span>		setOrder(Ordered.LOWEST_PRECEDENCE - 3);</span></span>
<span class="line"><span>		setInitAnnotationType(PostConstruct.class);</span></span>
<span class="line"><span>		setDestroyAnnotationType(PreDestroy.class);</span></span>
<span class="line"><span>		ignoreResourceType(&quot;javax.xml.ws.WebServiceContext&quot;);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>		// java.naming module present on JDK 9+?</span></span>
<span class="line"><span>		if (jndiPresent) {</span></span>
<span class="line"><span>			this.jndiFactory = new SimpleJndiBeanFactory();</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="applicationcontextawareprocessor" tabindex="-1"><a class="header-anchor" href="#applicationcontextawareprocessor"><span>ApplicationContextAwareProcessor</span></a></h2><ul><li>用于在初始化注入相关信息environment,applicationContext到bean,在@AfterProperties之前执行</li><li>在onRefresh的prepareBeanFactory方法中注册到bean工厂</li></ul><h2 id="内嵌tomcat启动" tabindex="-1"><a class="header-anchor" href="#内嵌tomcat启动"><span>内嵌tomcat启动</span></a></h2><h3 id="servletwebserverapplicationcontext" tabindex="-1"><a class="header-anchor" href="#servletwebserverapplicationcontext"><span>ServletWebServerApplicationContext</span></a></h3><h4 id="onrefresh" tabindex="-1"><a class="header-anchor" href="#onrefresh"><span>onRefresh</span></a></h4><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>protected void onRefresh() {</span></span>
<span class="line"><span>		super.onRefresh();</span></span>
<span class="line"><span>		try {</span></span>
<span class="line"><span>			createWebServer();</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		catch (Throwable ex) {</span></span>
<span class="line"><span>			throw new ApplicationContextException(&quot;Unable to start web server&quot;, ex);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="createwebserver" tabindex="-1"><a class="header-anchor" href="#createwebserver"><span>createWebServer</span></a></h4><ul><li>获取web server 工厂 ServletWebServerFactory</li><li>factory.getWebServer工厂生产webServer</li><li>注册启停，优雅启停单例对象</li><li>初始化属性资源initPropertySources</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>private void createWebServer() {</span></span>
<span class="line"><span>		WebServer webServer = this.webServer;</span></span>
<span class="line"><span>		ServletContext servletContext = getServletContext();</span></span>
<span class="line"><span>		if (webServer == null &amp;&amp; servletContext == null) {</span></span>
<span class="line"><span>			StartupStep createWebServer = this.getApplicationStartup().start(&quot;spring.boot.webserver.create&quot;);</span></span>
<span class="line"><span>			ServletWebServerFactory factory = getWebServerFactory();</span></span>
<span class="line"><span>			createWebServer.tag(&quot;factory&quot;, factory.getClass().toString());</span></span>
<span class="line"><span>			this.webServer = factory.getWebServer(getSelfInitializer());</span></span>
<span class="line"><span>			createWebServer.end();</span></span>
<span class="line"><span>			getBeanFactory().registerSingleton(&quot;webServerGracefulShutdown&quot;,</span></span>
<span class="line"><span>					new WebServerGracefulShutdownLifecycle(this.webServer));</span></span>
<span class="line"><span>			getBeanFactory().registerSingleton(&quot;webServerStartStop&quot;,</span></span>
<span class="line"><span>					new WebServerStartStopLifecycle(this, this.webServer));</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		else if (servletContext != null) {</span></span>
<span class="line"><span>			try {</span></span>
<span class="line"><span>				getSelfInitializer().onStartup(servletContext);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			catch (ServletException ex) {</span></span>
<span class="line"><span>				throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;, ex);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		initPropertySources();</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="selfinitialize" tabindex="-1"><a class="header-anchor" href="#selfinitialize"><span>selfInitialize</span></a></h4><p>初始化servletContext</p><ul><li>应用上下文、servletContext相互配置</li><li>配置DispatcherServlet、过滤器filter,注册servlet和filter到容器上下文StandardContext中</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>private void selfInitialize(ServletContext servletContext) throws ServletException {</span></span>
<span class="line"><span>		prepareWebApplicationContext(servletContext);</span></span>
<span class="line"><span>		registerApplicationScope(servletContext);</span></span>
<span class="line"><span>		WebApplicationContextUtils.registerEnvironmentBeans(getBeanFactory(), servletContext);</span></span>
<span class="line"><span>		for (ServletContextInitializer beans : getServletContextInitializerBeans()) {</span></span>
<span class="line"><span>			beans.onStartup(servletContext);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preparewebapplicationcontext" tabindex="-1"><a class="header-anchor" href="#preparewebapplicationcontext"><span>prepareWebApplicationContext</span></a></h4><ul><li>设置应用上下文到servletContext的属性中</li><li>设置servletContext到应用上下文中</li></ul><h3 id="tomcatservletwebserverfactory" tabindex="-1"><a class="header-anchor" href="#tomcatservletwebserverfactory"><span>TomcatServletWebServerFactory</span></a></h3><h5 id="getwebserver" tabindex="-1"><a class="header-anchor" href="#getwebserver"><span>getWebServer</span></a></h5><ul><li>创建tomcat实例</li><li>配置server service engine connector host</li><li>service添加连接器connector</li><li>连接器自定义</li><li>添加引擎engine到service，添加host到engine</li><li>配置engine</li><li>添加额外的连接器</li><li>准备上下文prepareContext</li><li>getTomcatWebServer <ul><li>实例化TomcatWebServer</li><li>构造器中调用初始化方法initialize</li></ul></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public WebServer getWebServer(ServletContextInitializer... initializers) {</span></span>
<span class="line"><span>		if (this.disableMBeanRegistry) {</span></span>
<span class="line"><span>			Registry.disableRegistry();</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		Tomcat tomcat = new Tomcat();</span></span>
<span class="line"><span>		File baseDir = (this.baseDirectory != null) ? this.baseDirectory : createTempDir(&quot;tomcat&quot;);</span></span>
<span class="line"><span>		tomcat.setBaseDir(baseDir.getAbsolutePath());</span></span>
<span class="line"><span>		for (LifecycleListener listener : this.serverLifecycleListeners) {</span></span>
<span class="line"><span>			tomcat.getServer().addLifecycleListener(listener);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		Connector connector = new Connector(this.protocol);</span></span>
<span class="line"><span>		connector.setThrowOnFailure(true);</span></span>
<span class="line"><span>		tomcat.getService().addConnector(connector);</span></span>
<span class="line"><span>		customizeConnector(connector);</span></span>
<span class="line"><span>		tomcat.setConnector(connector);</span></span>
<span class="line"><span>		tomcat.getHost().setAutoDeploy(false);</span></span>
<span class="line"><span>		configureEngine(tomcat.getEngine());</span></span>
<span class="line"><span>		for (Connector additionalConnector : this.additionalTomcatConnectors) {</span></span>
<span class="line"><span>			tomcat.getService().addConnector(additionalConnector);</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>		prepareContext(tomcat.getHost(), initializers);</span></span>
<span class="line"><span>		return getTomcatWebServer(tomcat);</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="preparecontext" tabindex="-1"><a class="header-anchor" href="#preparecontext"><span>prepareContext</span></a></h4><ul><li>在host下添加TomcatEmbeddedContext（实现StandardContext）上下文容器</li><li>设置名称、路径、父类加载器、生命周期监听器、加载器WebappLoader（TomcatEmbeddedWebappClassLoader.class）</li><li>添加生命周期监听器 FixContextListener StaticResourceConfigurer</li><li>mergeInitializers合并上下文初始化器，session、参数相关</li><li>使用上述初始化器配置上下文configureContext <ul><li>构造 TomcatStarter，</li><li>addServletContainerInitializer添加servlet容器初始化器</li><li>向pipeline添加value</li><li>配置session、cookie处理器</li><li>使用tomcatContextCustomizers（WebServerFactoryCustomizerBeanPostProcessor处理）对上下文进行自定义处理</li></ul></li><li>后置处理上下文postProcessContext</li></ul><h3 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat"><span>Tomcat</span></a></h3><h4 id="getserver" tabindex="-1"><a class="header-anchor" href="#getserver"><span>getServer</span></a></h4><ul><li>创建服务器实例</li><li>初始化基础目录initBaseDir <ul><li>向服务器设置CatalinaBase、CatalinaHome</li><li>添加一些系统属性catalina.base,catalina.base</li></ul></li><li>设置服务器端口</li><li>向服务器添加service</li></ul><h3 id="tomcatwebserver" tabindex="-1"><a class="header-anchor" href="#tomcatwebserver"><span>TomcatWebServer</span></a></h3><h4 id="initialize" tabindex="-1"><a class="header-anchor" href="#initialize"><span>initialize</span></a></h4><ul><li>设置引擎engine实例ID</li><li>获取容器上下文，添加生命周期监听器</li><li>this.tomcat.start() 启动服务器，触发初始化监听器</li><li>根据服务器状态做出相应操作</li></ul><h4 id="start" tabindex="-1"><a class="header-anchor" href="#start"><span>start</span></a></h4><p>由生命周期处理器，触发tomcat服务器延迟操作</p><ul><li>performDeferredLoadOnStartup 配置servlet、也可能在首次处理请求时，对servlet进行初始化</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void start() throws WebServerException {</span></span>
<span class="line"><span>		synchronized (this.monitor) {</span></span>
<span class="line"><span>			if (this.started) {</span></span>
<span class="line"><span>				return;</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			try {</span></span>
<span class="line"><span>				addPreviouslyRemovedConnectors();</span></span>
<span class="line"><span>				Connector connector = this.tomcat.getConnector();</span></span>
<span class="line"><span>				if (connector != null &amp;&amp; this.autoStart) {</span></span>
<span class="line"><span>					performDeferredLoadOnStartup();</span></span>
<span class="line"><span>				}</span></span>
<span class="line"><span>				checkThatConnectorsHaveStarted();</span></span>
<span class="line"><span>				this.started = true;</span></span>
<span class="line"><span>				logger.info(&quot;Tomcat started on port(s): &quot; + getPortsDescription(true) + &quot; with context path &#39;&quot;</span></span>
<span class="line"><span>						+ getContextPath() + &quot;&#39;&quot;);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			catch (ConnectorStartFailedException ex) {</span></span>
<span class="line"><span>				stopSilently();</span></span>
<span class="line"><span>				throw ex;</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			catch (Exception ex) {</span></span>
<span class="line"><span>				PortInUseException.throwIfPortBindingException(ex, () -&gt; this.tomcat.getConnector().getPort());</span></span>
<span class="line"><span>				throw new WebServerException(&quot;Unable to start embedded Tomcat server&quot;, ex);</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>			finally {</span></span>
<span class="line"><span>				Context context = findContext();</span></span>
<span class="line"><span>				ContextBindings.unbindClassLoader(context, context.getNamingToken(), getClass().getClassLoader());</span></span>
<span class="line"><span>			}</span></span>
<span class="line"><span>		}</span></span>
<span class="line"><span>	}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lifecyclebase" tabindex="-1"><a class="header-anchor" href="#lifecyclebase"><span>LifecycleBase</span></a></h3><p>生命周期基类，子类继承该类，设置子类的状态</p><p>主要用于StandardServer、StandardEngine、StandardHost StandardContext StandardWrapper等实例的启动及初始化</p><ul><li>start <ul><li>init <ul><li>initInternal</li></ul></li><li>startInternal</li></ul></li></ul><h3 id="standardcontext" tabindex="-1"><a class="header-anchor" href="#standardcontext"><span>StandardContext</span></a></h3><ul><li>startInternal内部启动，初始化servletContext</li></ul><h3 id="standardservice中mapperlistener" tabindex="-1"><a class="header-anchor" href="#standardservice中mapperlistener"><span>StandardService中MapperListener</span></a></h3><p>用于将host等容器信息注册到Mapper中</p><h3 id="standardservice中的mapper" tabindex="-1"><a class="header-anchor" href="#standardservice中的mapper"><span>StandardService中的Mapper</span></a></h3><p>用于解析请求路径，转换为request中的mappingData</p><p>mappingData包含该请求匹配的host、context等容器对象</p><h2 id="tomcat处理请求过程" tabindex="-1"><a class="header-anchor" href="#tomcat处理请求过程"><span>tomcat处理请求过程</span></a></h2><h3 id="applicationcontext" tabindex="-1"><a class="header-anchor" href="#applicationcontext"><span>ApplicationContext</span></a></h3><h4 id="getrequestdispatcher" tabindex="-1"><a class="header-anchor" href="#getrequestdispatcher"><span>getRequestDispatcher</span></a></h4><p>根据路径或名称获取servlet以及构造请求分发器ApplicationDispatcher</p>`,246);function h(g,F){const n=t("ExternalLinkIcon");return i(),o("div",null,[c,s("p",null,[s("a",d,[a("参考"),e(n)])]),s("p",null,[s("a",v,[a("参考"),e(n)])]),s("p",null,[s("a",y,[a("参考"),e(n)])]),u,s("p",null,[s("a",b,[a("参考"),e(n)])]),m])}const A=p(r,[["render",h],["__file","spring.html.vue"]]),E=JSON.parse('{"path":"/note/spring/spring.html","title":"spring","lang":"zh-CN","frontmatter":{"category":["spring"],"description":"spring spring validation 手动进行请求参数校验，获取校验结果 注入mvcValidator的Validator 使用mvcValidator进行校验，获取校验结果 spring bean 中注入 HttpServletRequest 成员变量的思考 在 bean 中注入作为成员变量的 HttpServletRequest 时，实...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/spring/spring.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"spring"}],["meta",{"property":"og:description","content":"spring spring validation 手动进行请求参数校验，获取校验结果 注入mvcValidator的Validator 使用mvcValidator进行校验，获取校验结果 spring bean 中注入 HttpServletRequest 成员变量的思考 在 bean 中注入作为成员变量的 HttpServletRequest 时，实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-05T09:11:12.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2024-07-05T09:11:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"spring\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-07-05T09:11:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"spring validation","slug":"spring-validation","link":"#spring-validation","children":[{"level":3,"title":"手动进行请求参数校验，获取校验结果","slug":"手动进行请求参数校验-获取校验结果","link":"#手动进行请求参数校验-获取校验结果","children":[]}]},{"level":2,"title":"spring bean 中注入 HttpServletRequest 成员变量的思考","slug":"spring-bean-中注入-httpservletrequest-成员变量的思考","link":"#spring-bean-中注入-httpservletrequest-成员变量的思考","children":[]},{"level":2,"title":"springboot 2.7.1 配置文件加载","slug":"springboot-2-7-1-配置文件加载","link":"#springboot-2-7-1-配置文件加载","children":[]},{"level":2,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[{"level":3,"title":"构造器、factory-method","slug":"构造器、factory-method","link":"#构造器、factory-method","children":[]},{"level":3,"title":"@Bean Autowire属性  byName,byType,no","slug":"bean-autowire属性-byname-bytype-no","link":"#bean-autowire属性-byname-bytype-no","children":[]},{"level":3,"title":"注解 @Resource,@Autowired","slug":"注解-resource-autowired","link":"#注解-resource-autowired","children":[]}]},{"level":2,"title":"SpringBoot 设置HTTP 响应状态码","slug":"springboot-设置http-响应状态码","link":"#springboot-设置http-响应状态码","children":[]},{"level":2,"title":"DeferredResult","slug":"deferredresult","link":"#deferredresult","children":[{"level":3,"title":"WebAsyncUtils的WebAsyncManager","slug":"webasyncutils的webasyncmanager","link":"#webasyncutils的webasyncmanager","children":[]},{"level":3,"title":"DeferredResultMethodReturnValueHandler","slug":"deferredresultmethodreturnvaluehandler","link":"#deferredresultmethodreturnvaluehandler","children":[]}]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[{"level":3,"title":"@import","slug":"import","link":"#import","children":[]},{"level":3,"title":"@Conditional","slug":"conditional","link":"#conditional","children":[]},{"level":3,"title":"@ConditionalOnMissingBean","slug":"conditionalonmissingbean","link":"#conditionalonmissingbean","children":[]},{"level":3,"title":"@ConditionalOnWebApplication","slug":"conditionalonwebapplication","link":"#conditionalonwebapplication","children":[]},{"level":3,"title":"@ConditionalOnClass","slug":"conditionalonclass","link":"#conditionalonclass","children":[]},{"level":3,"title":"@EnableConfigurationProperties","slug":"enableconfigurationproperties","link":"#enableconfigurationproperties","children":[]},{"level":3,"title":"@Import","slug":"import-1","link":"#import-1","children":[]},{"level":3,"title":"@ConfigurationProperties","slug":"configurationproperties","link":"#configurationproperties","children":[]},{"level":3,"title":"@ConditionalOnProperty","slug":"conditionalonproperty","link":"#conditionalonproperty","children":[]},{"level":3,"title":"@ConditionalOnSingleCandidate(DataSource.class)","slug":"conditionalonsinglecandidate-datasource-class","link":"#conditionalonsinglecandidate-datasource-class","children":[]},{"level":3,"title":"@ControllerAdvice","slug":"controlleradvice","link":"#controlleradvice","children":[]}]},{"level":2,"title":"循环依赖问题","slug":"循环依赖问题","link":"#循环依赖问题","children":[]},{"level":2,"title":"AOP面向切面","slug":"aop面向切面","link":"#aop面向切面","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"代理","slug":"代理","link":"#代理","children":[{"level":3,"title":"jdk动态代理","slug":"jdk动态代理","link":"#jdk动态代理","children":[]},{"level":3,"title":"cglib动态代理","slug":"cglib动态代理","link":"#cglib动态代理","children":[]}]},{"level":2,"title":"context","slug":"context","link":"#context","children":[{"level":3,"title":"AnnotationConfigApplicationContext","slug":"annotationconfigapplicationcontext","link":"#annotationconfigapplicationcontext","children":[]},{"level":3,"title":"AnnotationConfigServletWebServerApplicationContext","slug":"annotationconfigservletwebserverapplicationcontext","link":"#annotationconfigservletwebserverapplicationcontext","children":[]}]},{"level":2,"title":"springboot容器启动","slug":"springboot容器启动","link":"#springboot容器启动","children":[{"level":3,"title":"核心","slug":"核心","link":"#核心","children":[]},{"level":3,"title":"接口","slug":"接口","link":"#接口","children":[]},{"level":3,"title":"springApplication","slug":"springapplication","link":"#springapplication","children":[]},{"level":3,"title":"AbstractApplicationContext","slug":"abstractapplicationcontext","link":"#abstractapplicationcontext","children":[]}]},{"level":2,"title":"dispatcherServlet","slug":"dispatcherservlet","link":"#dispatcherservlet","children":[{"level":3,"title":"doDispatch方法","slug":"dodispatch方法","link":"#dodispatch方法","children":[]},{"level":3,"title":"servlet接口","slug":"servlet接口","link":"#servlet接口","children":[]},{"level":3,"title":"GenericServlet","slug":"genericservlet","link":"#genericservlet","children":[]},{"level":3,"title":"HttpServlet","slug":"httpservlet","link":"#httpservlet","children":[]},{"level":3,"title":"HttpServletBean","slug":"httpservletbean","link":"#httpservletbean","children":[]},{"level":3,"title":"FrameworkServlet","slug":"frameworkservlet","link":"#frameworkservlet","children":[]}]},{"level":2,"title":"spring event listener","slug":"spring-event-listener","link":"#spring-event-listener","children":[{"level":3,"title":"使用","slug":"使用-1","link":"#使用-1","children":[]}]},{"level":2,"title":"Spring session redis","slug":"spring-session-redis","link":"#spring-session-redis","children":[{"level":3,"title":"@EnableRedisHttpSession","slug":"enableredishttpsession","link":"#enableredishttpsession","children":[]},{"level":3,"title":"SpringHttpSessionConfiguration","slug":"springhttpsessionconfiguration","link":"#springhttpsessionconfiguration","children":[]},{"level":3,"title":"RedisHttpSessionConfiguration继承SpringHttpSessionConfiguration","slug":"redishttpsessionconfiguration继承springhttpsessionconfiguration","link":"#redishttpsessionconfiguration继承springhttpsessionconfiguration","children":[]},{"level":3,"title":"SessionRepositoryFilter","slug":"sessionrepositoryfilter","link":"#sessionrepositoryfilter","children":[]},{"level":3,"title":"RedisIndexedSessionRepository","slug":"redisindexedsessionrepository","link":"#redisindexedsessionrepository","children":[]}]},{"level":2,"title":"Filter","slug":"filter","link":"#filter","children":[{"level":3,"title":"mvc","slug":"mvc","link":"#mvc","children":[]},{"level":3,"title":"reactive","slug":"reactive","link":"#reactive","children":[]}]},{"level":2,"title":"ResponseBodyResultHandler","slug":"responsebodyresulthandler","link":"#responsebodyresulthandler","children":[]},{"level":2,"title":"@Transaction如何生效","slug":"transaction如何生效","link":"#transaction如何生效","children":[{"level":3,"title":"spring-autoConfigure","slug":"spring-autoconfigure","link":"#spring-autoconfigure","children":[]},{"level":3,"title":"spring-tx","slug":"spring-tx","link":"#spring-tx","children":[]}]},{"level":2,"title":"spring代理对象的生成","slug":"spring代理对象的生成","link":"#spring代理对象的生成","children":[{"level":3,"title":"AnnotationAwareAspectJAutoProxyCreator(bean后置处理器)","slug":"annotationawareaspectjautoproxycreator-bean后置处理器","link":"#annotationawareaspectjautoproxycreator-bean后置处理器","children":[]}]},{"level":2,"title":"spring单例对象的生成","slug":"spring单例对象的生成","link":"#spring单例对象的生成","children":[{"level":3,"title":"DefaultListableBeanFactory的preInstantiateSingletons方法","slug":"defaultlistablebeanfactory的preinstantiatesingletons方法","link":"#defaultlistablebeanfactory的preinstantiatesingletons方法","children":[]},{"level":3,"title":"abstractBeanFactory的getBean、doGetBean方法","slug":"abstractbeanfactory的getbean、dogetbean方法","link":"#abstractbeanfactory的getbean、dogetbean方法","children":[]},{"level":3,"title":"AbstractAutowireCapableBeanFactory的doCreateBean","slug":"abstractautowirecapablebeanfactory的docreatebean","link":"#abstractautowirecapablebeanfactory的docreatebean","children":[]}]},{"level":2,"title":"ApplicationContextAwareProcessor","slug":"applicationcontextawareprocessor","link":"#applicationcontextawareprocessor","children":[]},{"level":2,"title":"内嵌tomcat启动","slug":"内嵌tomcat启动","link":"#内嵌tomcat启动","children":[{"level":3,"title":"ServletWebServerApplicationContext","slug":"servletwebserverapplicationcontext","link":"#servletwebserverapplicationcontext","children":[]},{"level":3,"title":"TomcatServletWebServerFactory","slug":"tomcatservletwebserverfactory","link":"#tomcatservletwebserverfactory","children":[]},{"level":3,"title":"Tomcat","slug":"tomcat","link":"#tomcat","children":[]},{"level":3,"title":"TomcatWebServer","slug":"tomcatwebserver","link":"#tomcatwebserver","children":[]},{"level":3,"title":"LifecycleBase","slug":"lifecyclebase","link":"#lifecyclebase","children":[]},{"level":3,"title":"StandardContext","slug":"standardcontext","link":"#standardcontext","children":[]},{"level":3,"title":"StandardService中MapperListener","slug":"standardservice中mapperlistener","link":"#standardservice中mapperlistener","children":[]},{"level":3,"title":"StandardService中的Mapper","slug":"standardservice中的mapper","link":"#standardservice中的mapper","children":[]}]},{"level":2,"title":"tomcat处理请求过程","slug":"tomcat处理请求过程","link":"#tomcat处理请求过程","children":[{"level":3,"title":"ApplicationContext","slug":"applicationcontext","link":"#applicationcontext","children":[]}]}],"git":{"createdTime":1657433681000,"updatedTime":1720170672000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":26},{"name":"wanhongji","email":"wan_hongji@163.com","commits":1},{"name":"wanhongji","email":"wheywan@163.com","commits":1}]},"readingTime":{"minutes":21.95,"words":6585},"filePathRelative":"note/spring/spring.md","localizedDate":"2022年7月10日","excerpt":"\\n<h2>spring validation</h2>\\n<h3>手动进行请求参数校验，获取校验结果</h3>\\n<ul>\\n<li>注入mvcValidator的Validator</li>\\n<li>使用mvcValidator进行校验，获取校验结果</li>\\n</ul>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#0000FF\\">public</span><span style=\\"color:#0000FF\\"> class</span><span style=\\"color:#267F99\\"> Test</span><span style=\\"color:#000000\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">  private</span><span style=\\"color:#0000FF\\"> final</span><span style=\\"color:#267F99\\"> Validator</span><span style=\\"color:#001080\\"> mvcValidator</span><span style=\\"color:#000000\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"color:#0000FF\\">  public</span><span style=\\"color:#267F99\\"> SpResult</span><span style=\\"color:#000000\\">&lt;</span><span style=\\"color:#267F99\\">Integer</span><span style=\\"color:#000000\\">&gt; </span><span style=\\"color:#795E26\\">update</span><span style=\\"color:#000000\\">(@</span><span style=\\"color:#267F99\\">RequestBody</span><span style=\\"color:#267F99\\"> AlarmConfigUpdateDTO</span><span style=\\"color:#001080\\"> request</span><span style=\\"color:#000000\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#267F99\\">    BindingResult</span><span style=\\"color:#001080\\"> bindingResult</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#AF00DB\\">new</span><span style=\\"color:#795E26\\"> BeanPropertyBindingResult</span><span style=\\"color:#000000\\">(request,</span><span style=\\"color:#001080\\">AlarmConfigUpdateDTO</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#001080\\">class</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">getSimpleName</span><span style=\\"color:#000000\\">());</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">    mvcValidator</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">validate</span><span style=\\"color:#000000\\">(request,bindingResult);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#AF00DB\\">    if</span><span style=\\"color:#000000\\"> (</span><span style=\\"color:#001080\\">bindingResult</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">hasErrors</span><span style=\\"color:#000000\\">()) {</span></span>\\n<span class=\\"line\\"><span style=\\"color:#267F99\\">      String</span><span style=\\"color:#001080\\"> errorMsg</span><span style=\\"color:#000000\\"> = </span><span style=\\"color:#001080\\">bindingResult</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">getFieldError</span><span style=\\"color:#000000\\">().</span><span style=\\"color:#795E26\\">getDefaultMessage</span><span style=\\"color:#000000\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#001080\\">      System</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#001080\\">out</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">println</span><span style=\\"color:#000000\\">(errorMsg);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#000000\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">    //mvcValidator.validate();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#008000\\">    //return alarmConfigService.updateAlarmConfig(request);</span></span>\\n<span class=\\"line\\"><span style=\\"color:#AF00DB\\">    return</span><span style=\\"color:#001080\\"> SpResult</span><span style=\\"color:#000000\\">.</span><span style=\\"color:#795E26\\">succeed</span><span style=\\"color:#000000\\">();</span></span>\\n<span class=\\"line\\"><span style=\\"color:#000000\\">  }</span></span>\\n<span class=\\"line\\"><span style=\\"color:#000000\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{A as comp,E as data};
