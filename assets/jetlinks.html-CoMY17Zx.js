import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,o as l,c as t,d as i,a as e,e as o}from"./app-hoN0JGLf.js";const r={},p=e("h1",{id:"jetlinks",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#jetlinks"},[e("span",null,"jetlinks")])],-1),c=e("h2",{id:"功能脑图",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#功能脑图"},[e("span",null,"功能脑图")])],-1),d=o(`<h2 id="容器启动命令" tabindex="-1"><a class="header-anchor" href="#容器启动命令"><span>容器启动命令</span></a></h2><blockquote><p>jetlinks前端</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#795E26;">docker</span><span style="color:#A31515;"> run</span><span style="color:#0000FF;"> --name=jetlinks-ui</span><span style="color:#0000FF;"> -d</span><span style="color:#0000FF;"> -p</span><span style="color:#A31515;"> 9000:80</span><span style="color:#0000FF;"> -e</span><span style="color:#A31515;"> &quot;API_BASE_PATH=http://10.138.108.5:8848/&quot;</span><span style="color:#A31515;"> registry.cn-shenzhen.aliyuncs.com/jetlinks/jetlinks-ui-pro:2.0.0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="事件驱动-消息总线" tabindex="-1"><a class="header-anchor" href="#事件驱动-消息总线"><span>事件驱动，消息总线</span></a></h2><p>在JetLinks中大量使用到事件驱动来实现功能解耦。主要由<code>Spring Event</code>和<code>事件总线(EventBus)</code>组成。</p><p>由于<code>Spring Event</code>不支持更细粒度的订阅。例如: 订阅某一个设备的消息。平台还提供了事件总线来实现粒度更细的事件支持。</p><h3 id="spring-event" tabindex="-1"><a class="header-anchor" href="#spring-event"><span>Spring Event</span></a></h3><p>为了支持响应式订阅，对事件event进行了封装</p><ul><li>@EventListener</li><li>ApplicationEventPublisher</li></ul><h3 id="brokereventbus-eventbus" tabindex="-1"><a class="header-anchor" href="#brokereventbus-eventbus"><span>BrokerEventBus EventBus</span></a></h3><ul><li>publish</li><li>subscribe</li></ul><h3 id="springmessagebroker" tabindex="-1"><a class="header-anchor" href="#springmessagebroker"><span>SpringMessageBroker</span></a></h3><ul><li>@Subscribe</li><li>后置处理添加订阅主题信息到TopicInfo</li></ul><h2 id="设备接入网关" tabindex="-1"><a class="header-anchor" href="#设备接入网关"><span>设备接入网关</span></a></h2><blockquote><p>MQTT服务直连</p></blockquote><p>设备直接通过Mqtt协议与平台交互</p><blockquote><p>MQTT的Broker直连</p></blockquote><p>设备作为客户端与MQTT服务器连接，发布和订阅消息，平台也作为客户端订阅和发布相应消息</p><blockquote><p>http连接</p></blockquote><blockquote><p>udp连接</p></blockquote><h2 id="设备接入协议" tabindex="-1"><a class="header-anchor" href="#设备接入协议"><span>设备接入协议</span></a></h2><blockquote><p>MQTT 3.0/3.1协议</p></blockquote><blockquote><p>jetlinks官方协议</p></blockquote><h2 id="类库" tabindex="-1"><a class="header-anchor" href="#类库"><span>类库</span></a></h2><ul><li>javassist 用于编辑方法字符串为一个Method对象</li><li>vertx</li><li>guava工具包</li></ul><h2 id="r2dbc-spi" tabindex="-1"><a class="header-anchor" href="#r2dbc-spi"><span>r2dbc-spi</span></a></h2><ul><li>r2dbc-spi数据库规范接口（类似于JDBC），各大数据库厂商实现接口</li></ul><h2 id="easy-orm" tabindex="-1"><a class="header-anchor" href="#easy-orm"><span>easy-orm</span></a></h2><p>响应式关系映射框架，用于构造sql语句操作数据库，以及将结果集封装到对应实体</p><blockquote><p>使用exists语句构造自定义查询条件</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql" data-title="sql"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#0000FF;">select</span><span style="color:#000000;"> * </span><span style="color:#0000FF;">from</span><span style="color:#000000;"> test a </span><span style="color:#0000FF;">where</span><span style="color:#0000FF;"> exists</span><span style="color:#000000;"> (</span><span style="color:#0000FF;">select</span><span style="color:#098658;"> 1</span><span style="color:#0000FF;"> from</span><span style="color:#000000;"> test b b.device_id = a.device_id )</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="easyormconfiguration" tabindex="-1"><a class="header-anchor" href="#easyormconfiguration"><span>EasyormConfiguration</span></a></h3><ul><li>EasyormProperties</li><li>EntityFactory</li><li>RDBDatabaseMetadata包含执行器SyncSqlExecutor、ReactiveSqlExecutor</li><li>DatabaseOperator包含RDBDatabaseMetadata</li><li>DefaultIdGenerator</li></ul><h4 id="entitytablemetadataparserconfiguration" tabindex="-1"><a class="header-anchor" href="#entitytablemetadataparserconfiguration"><span>EntityTableMetadataParserConfiguration</span></a></h4><ul><li>DefaultEntityResultWrapperFactory</li><li>EntityManager</li><li>CompositeEntityTableMetadataResolver实现EntityTableMetadataResolver 包含下方多个EntityTableMetadataParser</li><li>JpaEntityTableMetadataParser实现EntityTableMetadataParser</li></ul><h3 id="reactivesqlexecutor" tabindex="-1"><a class="header-anchor" href="#reactivesqlexecutor"><span>ReactiveSqlExecutor</span></a></h3><blockquote><p>DefaultR2dbcExecutor 继承 R2dbcReactiveSqlExecutor 实现 ReactiveSqlExecutor</p></blockquote><ul><li>注入ConnectionFactory</li><li>设置是否自定义占位符，设置自定义占位符</li><li>getConnection()获取数据库连接</li><li>使用@Trasactional实现事务</li></ul><h3 id="reactiverepositoryfactorybean" tabindex="-1"><a class="header-anchor" href="#reactiverepositoryfactorybean"><span>ReactiveRepositoryFactoryBean</span></a></h3><p>获取对应类型的实体仓库</p><ul><li>DatabaseOperator</li><li>EntityTableMetadataResolver</li><li>EntityResultWrapperFactory</li><li>entityType在EasyormRepositoryRegistrar构造beanDefinition时设置实体类型</li><li>getObject获取实例</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public ReactiveRepository&lt;E, PK&gt; getObject() {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        return new DefaultReactiveRepository&lt;&gt;(operator,</span></span>
<span class="line"><span>                resolver.resolve(entityType),</span></span>
<span class="line"><span>                entityType,</span></span>
<span class="line"><span>                wrapperFactory.getWrapper(entityType));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="easyormrepositoryregistrar" tabindex="-1"><a class="header-anchor" href="#easyormrepositoryregistrar"><span>EasyormRepositoryRegistrar</span></a></h3><p>注册即ReactiveRepositoryFactoryBean，生产实体repository</p><ul><li>scanEntities获取实体类名</li><li>registerBeanDefinitions注册实体bean类型的repository工厂bean，即ReactiveRepositoryFactoryBean</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>RootBeanDefinition definition = new RootBeanDefinition();</span></span>
<span class="line"><span>      definition.setTargetType(repositoryType);</span></span>
<span class="line"><span>      definition.setBeanClass(ReactiveRepositoryFactoryBean.class);</span></span>
<span class="line"><span>      definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span></span>
<span class="line"><span>      definition.getPropertyValues().add(&quot;entityType&quot;, realType);</span></span>
<span class="line"><span>      registry.registerBeanDefinition(realType.getSimpleName().concat(&quot;ReactiveRepository&quot;), definition);</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="rdbdatabasemetadata" tabindex="-1"><a class="header-anchor" href="#rdbdatabasemetadata"><span>RDBDatabaseMetadata</span></a></h3><h3 id="rdbschemametadata" tabindex="-1"><a class="header-anchor" href="#rdbschemametadata"><span>RDBSchemaMetadata</span></a></h3><ul><li>metaRepository存放RDBTableMetadata</li><li>MysqlSchemaMetadata包含RDBDatabaseMetadata</li><li>PostgresqlSchemaMetadata包含RDBDatabaseMetadata</li></ul><h3 id="rdbtablemetadata" tabindex="-1"><a class="header-anchor" href="#rdbtablemetadata"><span>RDBTableMetadata</span></a></h3><p>包含RDBSchemaMetadata信息，在构建repository时，使用解析器获取RDBTableMetadata数据</p><h3 id="defaultdatabaseoperator" tabindex="-1"><a class="header-anchor" href="#defaultdatabaseoperator"><span>DefaultDatabaseOperator</span></a></h3><ul><li>RDBDatabaseMetadata</li><li>implements实现DatabaseOperator, DMLOperator, SQLOperator, DDLOperator</li><li>构建可执行operator,如ExecutableDeleteOperator、ExecutableUpdateOperator</li></ul><blockquote><p>DeleteOperator</p></blockquote><ul><li>ExecutableDeleteOperator</li><li>DefaultDeleteResultOperator</li></ul><blockquote><p>InsertOperator</p></blockquote><ul><li>InsertResultOperator</li><li>DefaultInsertResultOperator真正执行查询语句</li></ul><blockquote><p>UpdateOperator</p></blockquote><ul><li>ExecutableUpdateOperator</li><li>DefaultUpdateResultOperator</li></ul><blockquote><p>UpsertOperator QueryOperator</p></blockquote><ul><li>ExecutableQueryOperator</li><li>DefaultQueryResultOperator</li></ul><h2 id="r2dbc-driver" tabindex="-1"><a class="header-anchor" href="#r2dbc-driver"><span>r2dbc-driver</span></a></h2><ul><li>mysql dev.miku:r2dbc-mysql:0.8.2.RELEASE</li><li>h2</li><li>mssql</li><li>postgres</li></ul><h2 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h2><h3 id="产品与设备" tabindex="-1"><a class="header-anchor" href="#产品与设备"><span>产品与设备</span></a></h3><blockquote><p>dev_product</p></blockquote><ul><li>network_way ? 入网方式</li><li>project_name</li><li>project_id 产品表 关联网关，协议，物模型，以及协议相关配置</li></ul><blockquote><p>dev_product_category</p></blockquote><p>产品分类信息表 包含产品类别等信息</p><blockquote><p>dev_product_category</p></blockquote><ul><li>org_id 机构ID ？ 设备信息表 关联激活时间，设备物模型 父级设备id 产品名称 设备特性 设备状态 运行状态的读取？</li></ul><blockquote><p>dev_device_tags</p></blockquote><p>设备标签表</p><blockquote><p>dev_metadata_mapping ?</p></blockquote><p>设备物模型映射</p><h3 id="网关、网络、协议及证书" tabindex="-1"><a class="header-anchor" href="#网关、网络、协议及证书"><span>网关、网络、协议及证书</span></a></h3><blockquote><p>device_gateway</p></blockquote><p>设备网关</p><blockquote><p>dev_protocol</p></blockquote><p>协议表 协议包类型 位置</p><blockquote><p>network_config</p></blockquote><p>网络组件配置表</p><blockquote><p>certificate_info证书</p></blockquote><p>证书信息表</p><h3 id="通道配置" tabindex="-1"><a class="header-anchor" href="#通道配置"><span>通道配置</span></a></h3><h3 id="流媒体服务" tabindex="-1"><a class="header-anchor" href="#流媒体服务"><span>流媒体服务</span></a></h3><h3 id="告警与规则引擎" tabindex="-1"><a class="header-anchor" href="#告警与规则引擎"><span>告警与规则引擎</span></a></h3><ul><li>alarm_config</li><li>alarm_record</li><li>s_alarm_rule_bind</li><li>alarm_handle_history</li><li>alarm_level</li><li>rule_scene</li><li>rule_instance</li></ul><h4 id="alarm-record" tabindex="-1"><a class="header-anchor" href="#alarm-record"><span>alarm_record</span></a></h4><blockquote><p>source和target字段 ？</p></blockquote><ul><li>sceneData中包含这些数据</li><li>targetXXX 根据告警配置alarm_config的类型(产品、设备、其他)获取告警目标实例AlarmTarget 告警目标记录设备信息deviceId和deviceName type device</li><li>sourceXXX 反应 产品、设备信息</li><li>targetKey targetId-targetType拼接后，MD5加密</li></ul><h4 id="rule-instance-规则实例" tabindex="-1"><a class="header-anchor" href="#rule-instance-规则实例"><span>rule_instance 规则实例</span></a></h4><h4 id="rule-scene" tabindex="-1"><a class="header-anchor" href="#rule-scene"><span>rule_scene</span></a></h4><blockquote><p>terms 触发条件 ？ trigger 触发器配置 设备触发、定时触发、手动触发</p></blockquote><ul><li>设备触发</li><li>定时触发</li><li>手动触发</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;type&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;timer&quot;</span><span style="color:#000000;">,   </span></span>
<span class="line"><span style="color:#0451A5;">    &quot;timer&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">        &quot;trigger&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;week&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;when&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#098658;">            1</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#098658;">            2</span></span>
<span class="line"><span style="color:#000000;">        ], </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;mod&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;once&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;once&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">            &quot;time&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;21:35:43&quot;</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>branch 动作分支</p></blockquote><ul><li>when <ul><li>type &quot;and&quot;</li><li>termType &quot;eq&quot;</li><li>options 对执行条件的直观描述</li><li>terms 这是对options解析的结果</li></ul></li><li>防抖</li><li>then 满足条件后操作 <ul><li>是否并行 parallel</li><li>执行动作 actions <ul><li>executor</li><li>terms</li><li>options</li></ul></li><li>条件</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="color:#000000;">[</span></span>
<span class="line"><span style="color:#000000;">    {</span></span>
<span class="line"><span style="color:#0451A5;">        &quot;when&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">            {</span></span>
<span class="line"><span style="color:#0451A5;">                &quot;type&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;and&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                &quot;termType&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;eq&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                &quot;options&quot;</span><span style="color:#000000;">: [ ], </span></span>
<span class="line"><span style="color:#0451A5;">                &quot;terms&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">                    {</span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;type&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;and&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;termType&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;eq&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;options&quot;</span><span style="color:#000000;">: [ ], </span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;terms&quot;</span><span style="color:#000000;">: [ ]</span></span>
<span class="line"><span style="color:#000000;">                    }</span></span>
<span class="line"><span style="color:#000000;">                ]</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        ], </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;shakeLimit&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">            &quot;enabled&quot;</span><span style="color:#000000;">: </span><span style="color:#0000FF;">false</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">            &quot;time&quot;</span><span style="color:#000000;">: </span><span style="color:#098658;">0</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">            &quot;threshold&quot;</span><span style="color:#000000;">: </span><span style="color:#098658;">0</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">            &quot;alarmFirst&quot;</span><span style="color:#000000;">: </span><span style="color:#0000FF;">false</span></span>
<span class="line"><span style="color:#000000;">        }, </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;then&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">            {</span></span>
<span class="line"><span style="color:#0451A5;">                &quot;parallel&quot;</span><span style="color:#000000;">: </span><span style="color:#0000FF;">false</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                &quot;actions&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">                    {</span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;executor&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;alarm&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;alarm&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">                            &quot;mode&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;trigger&quot;</span></span>
<span class="line"><span style="color:#000000;">                        }, </span></span>
<span class="line"><span style="color:#0451A5;">                        &quot;options&quot;</span><span style="color:#000000;">: { }</span></span>
<span class="line"><span style="color:#000000;">                    }</span></span>
<span class="line"><span style="color:#000000;">                ]</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        ]</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>options 扩展配置</p></blockquote><ul><li>描述触发规则</li></ul><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">{</span></span>
<span class="line"><span style="color:#0451A5;">    &quot;trigger&quot;</span><span style="color:#000000;">: {</span></span>
<span class="line"><span style="color:#0451A5;">        &quot;time&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;21:35:43 执行1次&quot;</span><span style="color:#000000;">, </span></span>
<span class="line"><span style="color:#0451A5;">        &quot;when&quot;</span><span style="color:#000000;">: </span><span style="color:#A31515;">&quot;每星期一,星期二&quot;</span></span>
<span class="line"><span style="color:#000000;">    }, </span></span>
<span class="line"><span style="color:#0451A5;">    &quot;when&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">        {</span></span>
<span class="line"><span style="color:#0451A5;">            &quot;terms&quot;</span><span style="color:#000000;">: [</span></span>
<span class="line"><span style="color:#000000;">                {</span></span>
<span class="line"><span style="color:#0451A5;">                    &quot;terms&quot;</span><span style="color:#000000;">: [ ]</span></span>
<span class="line"><span style="color:#000000;">                }</span></span>
<span class="line"><span style="color:#000000;">            ]</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#000000;">    ]</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>actions 执行动作</p></blockquote><h3 id="通知与订阅" tabindex="-1"><a class="header-anchor" href="#通知与订阅"><span>通知与订阅</span></a></h3><ul><li>notify_config <ul><li>provider</li><li>type</li></ul></li><li>notify_template</li><li>notify_history</li><li>notify_subscribers 通知订阅者信息 <ul><li>topic_provider 主题提供者</li><li>subscriber_type 订阅者类型</li></ul></li><li>notify_notification 通知记录 <ul><li>data_id ?</li></ul></li></ul><h2 id="国际化" tabindex="-1"><a class="header-anchor" href="#国际化"><span>国际化</span></a></h2><ul><li>消息源MessageSource</li><li>LocaleUtil工具对消息进行转换</li><li>过滤器设置当前语言环境</li></ul><h2 id="响应式事务" tabindex="-1"><a class="header-anchor" href="#响应式事务"><span>响应式事务</span></a></h2><h2 id="业务逻辑" tabindex="-1"><a class="header-anchor" href="#业务逻辑"><span>业务逻辑</span></a></h2><h3 id="设备" tabindex="-1"><a class="header-anchor" href="#设备"><span>设备</span></a></h3><h4 id="设备的启停" tabindex="-1"><a class="header-anchor" href="#设备的启停"><span>设备的启停</span></a></h4><p>1、设备状态分为在线online、离线offline、禁用notActive</p><p>2、启动设备时，会将对应的设备注册到设备注册器当中，缓存设备操作器DeviceOperator，设置相关配置(metaData物模型、产品id、协议、产品版本)到本地缓存、redis缓存，并改变设备状态</p><p>设备操作器会缓存设备当前状态，在注册时，会使用状态检查器checkState获取设备最新状态，并更新数据库设备实例状态，并设置激活时不触发实体事件</p><p>3、从设备注册器获取设备operator时，先从缓存读取，若不存在，则创建DeviceOperator并存放到内存缓存中</p><p>4、注销设备时，会先改变数据库设备装态，清空一级和二级缓存配置</p><h4 id="项目启动" tabindex="-1"><a class="header-anchor" href="#项目启动"><span>项目启动</span></a></h4><p>启动设备网关、启动设备协议加载</p><h5 id="devicegatewayeventhandler网关事件处理器" tabindex="-1"><a class="header-anchor" href="#devicegatewayeventhandler网关事件处理器"><span>DeviceGatewayEventHandler网关事件处理器</span></a></h5><blockquote><p>网关的获取及启动</p></blockquote><p>1、在项目启动时，启动设备网关</p><p>2、查询已启用的设备网关，根据设备网关id启用网关</p><p>3、获取缓存的设备网关，不存在，则创建新的的设备网关</p><p>通过设备网关属性管理器(即设备网关service)，获取网关配置</p><p>根据网关配置的provider，找到DeviceGatewayProvider创建设备网关，</p><p>4、DeviceGatewayProvider通过NetworkManager获取网络，若没有网络则创建网络，构造网关实例(初始化网关id,设备注册器，sessionManger、网络、消息处理器)</p><p>5、启动网关，即对网络组件进行订阅</p><blockquote><p>网络的获取</p></blockquote><p>1、NetworkManager根据网络类型，和网络组件id创建网络</p><p>2、根据网络类型找到对应NetworkProvider,创建对应类型配置</p><p>3、根据网络组件id通过网络配置管理器查询网络配置，判断是否启用</p><p>4、若启用，则使用NetworkProvider创建network</p><h5 id="默认网络管理器-defaultnetworkmanager" tabindex="-1"><a class="header-anchor" href="#默认网络管理器-defaultnetworkmanager"><span>默认网络管理器 DefaultNetworkManager</span></a></h5><p>1、在项目启动时，每隔一段时间对网络状态进行检查,若网络状态不活跃，则重新加载网络组件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void run(String... args) {</span></span>
<span class="line"><span>        //定时检查网络组件状态</span></span>
<span class="line"><span>        Flux.interval(Duration.ofSeconds(10))</span></span>
<span class="line"><span>            .subscribe(t -&gt; this.checkNetwork());</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="persistencedevicesessionmanager-abstractdevicesessionmanager" tabindex="-1"><a class="header-anchor" href="#persistencedevicesessionmanager-abstractdevicesessionmanager"><span>PersistenceDeviceSessionManager AbstractDeviceSessionManager</span></a></h5><p>1、在bean初始化时执行init方法，同时对localSession进行订阅，主要用于维护低功率的设备，无法保持长时间会话，对会话持久化，每次启动加载恢复会话 2、通过加载设备会话文件，恢复设备会话 3、在实例化DeviceMessageConnector时通过向DeviceSessionManager中注册事件监听器对，对相应设备事件进行处理，如设备会话注册事件</p><h5 id="devicecategoryservice" tabindex="-1"><a class="header-anchor" href="#devicecategoryservice"><span>DeviceCategoryService</span></a></h5><p>初始化产品种类数据</p><h5 id="deviceproductdeployhandler" tabindex="-1"><a class="header-anchor" href="#deviceproductdeployhandler"><span>DeviceProductDeployHandler</span></a></h5><p>监听其他服务器物模型数据变更</p><h5 id="lazyinitmanagementprotocolsupports" tabindex="-1"><a class="header-anchor" href="#lazyinitmanagementprotocolsupports"><span>LazyInitManagementProtocolSupports</span></a></h5><p>加载协议配置到容器</p><h5 id="sceneservice" tabindex="-1"><a class="header-anchor" href="#sceneservice"><span>sceneService</span></a></h5><p>项目启动时启用场景,做内置处理，启动SceneTaskExecutor、DelayTaskExecutor、timerTaskExecutor等执行器</p><h4 id="产品的部署和取消部署" tabindex="-1"><a class="header-anchor" href="#产品的部署和取消部署"><span>产品的部署和取消部署</span></a></h4><blockquote><p>部署</p></blockquote><p>向设备注册中心存入设备产品操作器Map=key:value，缓存相应物模型、协议，变更数据库状态，</p><blockquote><p>取消部署</p></blockquote><p>变更数据库状态</p><h4 id="设备的部署和取消部署" tabindex="-1"><a class="header-anchor" href="#设备的部署和取消部署"><span>设备的部署和取消部署</span></a></h4><blockquote><p>部署</p></blockquote><p>发布设备到设备注册中心 Map=key:value 缓存相应物模型、协议，产品和设备的绑定关系(存入redis中)</p><p>会话管理器判断是否在线!!!</p><p>变更设备在线状态和数据库状态 state字段维护3个状态，禁用，离线，在线 批量更新</p><h4 id="设备的上线与离线" tabindex="-1"><a class="header-anchor" href="#设备的上线与离线"><span>设备的上线与离线</span></a></h4><p>1、平台作为客户端，对mqtt broker进行消息订阅</p><p>当收到订阅的消息时，会对设备消息使用消息解码器进行解码，并对设备消息使用DeviceGatewayHelper、DeviceMessageConnector进行处理</p><p>发布消息到事件总线，进行数据存储，创建DeviceSession并添加到session管理器中，触发DeviceSessionEvent,发布设备已上线消息到eventbus</p><p>DeviceStatusMeasurementProvider中的方法对上线消息进行处理，统计相关数量</p><p>DeviceMessageBusinessHandler在初始化时对上线topic进行了订阅，处理设备上线消息，变更数据库设备状态</p><h4 id="设备数据上报" tabindex="-1"><a class="header-anchor" href="#设备数据上报"><span>设备数据上报</span></a></h4><p>与设备上线类似，都是发布消息到消息总线eventbus，订阅者对消息处理</p><h4 id="数据流流转" tabindex="-1"><a class="header-anchor" href="#数据流流转"><span>数据流流转</span></a></h4><blockquote><p>下发 回复</p></blockquote><p>1、DeviceMessageSender DeviceOperationBroker ClusterSendToDeviceMessageHandler(DeviceMessageConnector实现DecodedClientMessageHandler) DeviceSession mqtt客户端/服务器</p><p>2、DeviceMessageConnector eventbus</p><blockquote><p>上报</p></blockquote><p>1、DeviceGateway DeviceGatewayHelper(DeviceMessageConnector实现DecodedClientMessageHandler) DeviceMessageConnector(处理消息) eventbus</p><h4 id="下发指令到设备" tabindex="-1"><a class="header-anchor" href="#下发指令到设备"><span>下发指令到设备</span></a></h4><p>1、根据设备id获取设备操作器DeviceOperator，使用设备操作器中的DeviceMessageSender(DeviceOperationBroker,interceptor,DeviceRegistry.DeviceOperator)，实例化ReadPropertyMessageSender</p><p>2、ReadPropertyMessageSender通过send方法将消息交给DeviceMessageSender处理</p><p>3、做前置操作，当前设备所连接的服务器id(先读取本地缓存，再读redis缓存)、MessageSenderInterceptor、父网关id,设备回复</p><p>4、设备若有上级网关，则向上级网关发送消息</p><p>5、向对应服务节点发送消息，通过判断当前设备是否连接的当前服务器，发送消息进行处理</p><p>发送消息到DeviceOperationBroker的已维护的发布器sink中</p><p>ClusterSendToDeviceMessageHandler(包含DeviceMessageConnector,对DeviceOperationBroker的发送消息发布器进行订阅 到设备会话的相应客户端)处理消息的发送</p><p>6、通过DeviceMessageConnector、及消息处理器DeviceOperationBroker内部的replyProcessor(在发送时缓存了消息id，对应的sink)</p><p>7、当收到回复消息后，DeviceMessageConnector的doReply将消息给sink，传给对应订阅者进行处理</p><h4 id="存储" tabindex="-1"><a class="header-anchor" href="#存储"><span>存储</span></a></h4><p>TimeSeriesMessageWriterConnector订阅消息总线中所有设备消息存储到es中</p><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><h4 id="ruleengine规则引擎" tabindex="-1"><a class="header-anchor" href="#ruleengine规则引擎"><span>ruleEngine规则引擎</span></a></h4><h5 id="defaultruleengine实现ruleengine接口" tabindex="-1"><a class="header-anchor" href="#defaultruleengine实现ruleengine接口"><span>DefaultRuleEngine实现RuleEngine接口</span></a></h5><ul><li>SceneRule转换为规则模型RuleModel <ul><li>RuleModel</li><li>RuleNodeModel</li></ul></li><li>ScheduleJobCompiler 根据场景实例id和规则模型生成ScheduleJob</li><li>Scheduler调度器接口，管理调度多个任务，localScheduler本地调度器，具体实现, <ul><li>schedule方法根据ScheduleJob调度任务，并返回任务执行器，启动任务执行器</li></ul></li><li>Worker用于创建任务，创建执行上下文 ，包含Map=执行器名:TaskExecutorProvider</li><li>workers缓存 workerId:worker</li><li>WorkerSelector</li><li>executors缓存 Map结构=实例id:(节点id:task)</li><li>TaskExecutorProvider 内部包含静态任务执行器类，用于创建任务执行器 <ul><li>AlarmTaskExecutorProvider</li><li>DelayTaskExecutorProvider</li></ul></li><li>Task 包含可直接执行的任务执行器 <ul><li>TaskExecutor AbstractTaskExecutor FunctionTaskExecutor</li><li>DelayTaskExecutor</li></ul></li><li>tasks</li></ul><p>使用reactorQl处理实时数据，并流转到下一Rule节点</p><h2 id="功能" tabindex="-1"><a class="header-anchor" href="#功能"><span>功能</span></a></h2><h3 id="设备管理" tabindex="-1"><a class="header-anchor" href="#设备管理"><span>设备管理</span></a></h3><h4 id="设备实例" tabindex="-1"><a class="header-anchor" href="#设备实例"><span>设备实例</span></a></h4><p>socket netty vertx vertx-mqtt subscribe</p><p>项目启动时，创建并启动设备网关，开启订阅，若有消息，则创建设备会话deviceSession</p><h5 id="devicegatewayeventhandler-实现commandlinerunner-项目启动执行-启动设备网关" tabindex="-1"><a class="header-anchor" href="#devicegatewayeventhandler-实现commandlinerunner-项目启动执行-启动设备网关"><span>DeviceGatewayEventHandler 实现CommandLineRunner 项目启动执行，启动设备网关</span></a></h5><h5 id="devicemessagebusinesshandler" tabindex="-1"><a class="header-anchor" href="#devicemessagebusinesshandler"><span>DeviceMessageBusinessHandler</span></a></h5><h5 id="deviceregistry-接口" tabindex="-1"><a class="header-anchor" href="#deviceregistry-接口"><span>DeviceRegistry 接口</span></a></h5><p>启用设备网关、ClusterDeviceRegistry</p><h5 id="clusterdeviceregistry-实现deviceregistry" tabindex="-1"><a class="header-anchor" href="#clusterdeviceregistry-实现deviceregistry"><span>ClusterDeviceRegistry 实现DeviceRegistry</span></a></h5><ul><li>属性 <ul><li>operatorCache 以设备id和DeviceOperator为键值对的Map集合，缓存DeviceOperator</li><li>productOperatorMap 以设备id和DeviceProductOperator为键值对的Map集合，缓存DeviceProductOperator</li><li>ProtocolSupports 协议支持 LazyProtocolSupports</li><li>DeviceOperationBroker 设备指令的发送 RpcDeviceOperationBroker</li><li>ConfigStorageManager 配置管理器 EventBusStorageManager</li><li>clusterManager 集群管理 RedisClusterManager</li></ul></li><li>方法 <ul><li>getDevice 获取设备操作器DeviceOperator</li><li>getProduct 获取设备产品操作器</li><li>createOperator 创建设备操作器</li></ul></li></ul><blockquote><p>networkManager</p></blockquote><p>获取设备网络，并以网关id和网络为键值缓存</p><blockquote><p>DeviceGatewayManager</p></blockquote><p>获取设备网关，并以网关id和设备网关为键值缓存</p><blockquote><p>deviceRepository、DeviceRegistry</p></blockquote><p>先从设备注册器查询，查询不到，再查询数据库中已上线的设备实例，再创建DeviceOperator</p><blockquote><p>DeviceOperator、DeviceMessageSender</p></blockquote><p>若有上级网关设备则通过父级设备发送消息到网关子设备</p><blockquote><p>DeviceSessionManager 设备是否在线或离线</p></blockquote><ul><li>包含connection等信息用于发送设备消息</li></ul><p>通过设备id查询本地的设备session会话</p><h4 id="协议管理" tabindex="-1"><a class="header-anchor" href="#协议管理"><span>协议管理</span></a></h4><h2 id="thingscomponent" tabindex="-1"><a class="header-anchor" href="#thingscomponent"><span>thingsComponent</span></a></h2><blockquote><p>ThingsConfiguration</p></blockquote><p>DefaultThingsDataRepository ThingsDataRepository ThingsDataContext 根据物模型数据查询对应存储策略，使用存储策略进行数据操作</p><ul><li>ThingsDataRepositoryStrategy集合</li><li>ThingsDataCustomizer集</li><li>ThingsRegistry</li></ul><blockquote><p>ElasticSearchThingDataConfiguration 配置数据存储策略</p></blockquote><ul><li>ElasticSearchColumnModeStrategy继承ThingsDataRepositoryStrategy</li><li>ElasticSearchRowModeStrategy继承ThingsDataRepositoryStrategy <ul><li>ThingsRegistry 包含物模型信息</li><li>ElasticSearchService 操作es数据</li><li>AggregationService</li><li>ElasticSearchIndexManager 索引管理</li></ul></li></ul><blockquote><p>ThingsRegistry</p></blockquote><ul><li>DefaultThingsRegistry</li><li>AutoRegisterThingsRegistry</li></ul><blockquote><p>ThingsRegistrySupport</p></blockquote><ul><li>DeviceThingsRegistrySupport 包含deviceRegistry,clusterDeviceRegistry</li></ul><blockquote><p>ThingsDataRepositoryStrategy 行列存储</p></blockquote><ul><li>TDengineColumnModeStrategy</li><li>ElasticSearchColumnModeStrategy</li><li>ElasticSearchRowModeStrategy service restClient <ul><li>createForQuery ElasticSearchRowModeQueryOperations</li><li>createForDDL</li></ul></li><li>NoneThingsDataRepositoryStrategy</li></ul><blockquote><p>ThingsDataCustomizer</p></blockquote><ul><li>DeviceThingsDataCustomizer</li></ul><blockquote><p>ThingsBridgingDeviceDataService 继承 DeviceDataService</p></blockquote><p>查询物模型属性信息、根据产品或设备聚合属性信息、查询事件，保存设备消息</p><ul><li>ThingsDataRepository</li><li>thingType</li></ul><h2 id="authorization" tabindex="-1"><a class="header-anchor" href="#authorization"><span>authorization</span></a></h2><ul><li>AuthorizationController</li><li>ReactiveAuthenticationManager 包含AuthenticationManagerProvider</li><li>ReactiveAuthenticationManagerProvider</li><li>UserTokenManager 包含tokenStorage和userStorage</li><li>ReactiveAuthenticationHolder 包含Supplier</li><li>ReactiveAuthenticationSupplier 包含UserTokenManager和ReactiveAuthenticationManager</li><li>UserTokenHolder mvc</li><li>UserTokenWebFilter reactive</li><li>若token不带认证信息，响应式通过用户id查询Authentication放入本地缓存(使用guaua谷歌工具)和redis缓存中，下次从缓存中取</li><li>若token带认证信息，直接解析返回。</li></ul><blockquote><p>UserTokenWebFilter</p></blockquote><ul><li>实现webFilter、BeanPostProcessor,在bean初始化时添加token解析器和产生器</li><li>包含授权成功事件监听器，根据tokenGenerator产生token返回，保存到userTokenManager, token解析处理</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Component</span></span>
<span class="line"><span style="color:#000000;">@</span><span style="color:#267F99;">Slf4j</span></span>
<span class="line"><span style="color:#0000FF;">public</span><span style="color:#0000FF;"> class</span><span style="color:#267F99;"> UserTokenWebFilter</span><span style="color:#0000FF;"> implements</span><span style="color:#267F99;"> WebFilter</span><span style="color:#000000;">, </span><span style="color:#267F99;">BeanPostProcessor</span><span style="color:#000000;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> List</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">ReactiveUserTokenParser</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">parsers</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> ArrayList</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#0000FF;"> final</span><span style="color:#267F99;"> Map</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">String</span><span style="color:#000000;">, </span><span style="color:#267F99;">ReactiveUserTokenGenerator</span><span style="color:#000000;">&gt; </span><span style="color:#001080;">tokenGeneratorMap</span><span style="color:#000000;"> = </span><span style="color:#AF00DB;">new</span><span style="color:#267F99;"> HashMap</span><span style="color:#000000;">&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Autowired</span></span>
<span class="line"><span style="color:#0000FF;">    private</span><span style="color:#267F99;"> UserTokenManager</span><span style="color:#001080;"> userTokenManager</span><span style="color:#000000;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">NonNull</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Mono</span><span style="color:#000000;">&lt;</span><span style="color:#267F99;">Void</span><span style="color:#000000;">&gt; </span><span style="color:#795E26;">filter</span><span style="color:#000000;">(@</span><span style="color:#267F99;">NonNull</span><span style="color:#267F99;"> ServerWebExchange</span><span style="color:#001080;"> exchange</span><span style="color:#000000;">, </span><span style="color:#267F99;">WebFilterChain</span><span style="color:#001080;"> chain</span><span style="color:#000000;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#267F99;"> Flux</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">fromIterable</span><span style="color:#000000;">(parsers)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">flatMap</span><span style="color:#000000;">(parser </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> parser</span><span style="color:#000000;">.</span><span style="color:#795E26;">parseToken</span><span style="color:#000000;">(exchange))</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">next</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">map</span><span style="color:#000000;">(token </span><span style="color:#0000FF;">-&gt;</span><span style="color:#000000;"> chain</span></span>
<span class="line"><span style="color:#000000;">                        .</span><span style="color:#795E26;">filter</span><span style="color:#000000;">(exchange)</span></span>
<span class="line"><span style="color:#000000;">                        .</span><span style="color:#795E26;">subscriberContext</span><span style="color:#000000;">(</span><span style="color:#001080;">Context</span><span style="color:#000000;">.</span><span style="color:#795E26;">of</span><span style="color:#000000;">(</span><span style="color:#001080;">ParsedToken</span><span style="color:#000000;">.</span><span style="color:#001080;">class</span><span style="color:#000000;">, token)))</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">defaultIfEmpty</span><span style="color:#000000;">(</span><span style="color:#001080;">chain</span><span style="color:#000000;">.</span><span style="color:#795E26;">filter</span><span style="color:#000000;">(exchange))</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">flatMap</span><span style="color:#000000;">(</span><span style="color:#001080;">Function</span><span style="color:#000000;">.</span><span style="color:#795E26;">identity</span><span style="color:#000000;">())</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">subscriberContext</span><span style="color:#000000;">(</span><span style="color:#001080;">ReactiveLogger</span><span style="color:#000000;">.</span><span style="color:#795E26;">start</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;requestId&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">exchange</span><span style="color:#000000;">.</span><span style="color:#795E26;">getRequest</span><span style="color:#000000;">().</span><span style="color:#795E26;">getId</span><span style="color:#000000;">()));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#008000;">//        return chain.filter(exchange)</span></span>
<span class="line"><span style="color:#008000;">//                .subscriberContext(ContextUtils.acceptContext(ctx -&gt;</span></span>
<span class="line"><span style="color:#008000;">//                        Flux.fromIterable(parsers)</span></span>
<span class="line"><span style="color:#008000;">//                                .flatMap(parser -&gt; parser.parseToken(exchange))</span></span>
<span class="line"><span style="color:#008000;">//                                .subscribe(token -&gt; ctx.put(ParsedToken.class, token)))</span></span>
<span class="line"><span style="color:#008000;">//                )</span></span>
<span class="line"><span style="color:#008000;">//                .subscriberContext(ReactiveLogger.start(&quot;requestId&quot;, exchange.getRequest().getId()))</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">EventListener</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> void</span><span style="color:#795E26;"> handleUserSign</span><span style="color:#000000;">(</span><span style="color:#267F99;">AuthorizationSuccessEvent</span><span style="color:#001080;"> event</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">        ReactiveUserTokenGenerator</span><span style="color:#001080;"> generator</span><span style="color:#000000;"> = event.&lt;String&gt;</span><span style="color:#795E26;">getParameter</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;tokenType&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">map</span><span style="color:#000000;">(tokenGeneratorMap</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">get)</span></span>
<span class="line"><span style="color:#000000;">                .</span><span style="color:#795E26;">orElseGet</span><span style="color:#000000;">(() </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> tokenGeneratorMap</span><span style="color:#000000;">.</span><span style="color:#795E26;">get</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;default&quot;</span><span style="color:#000000;">));</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (generator != </span><span style="color:#0000FF;">null</span><span style="color:#000000;">) {</span></span>
<span class="line"><span style="color:#267F99;">            GeneratedToken</span><span style="color:#001080;"> token</span><span style="color:#000000;"> = </span><span style="color:#001080;">generator</span><span style="color:#000000;">.</span><span style="color:#795E26;">generate</span><span style="color:#000000;">(</span><span style="color:#001080;">event</span><span style="color:#000000;">.</span><span style="color:#795E26;">getAuthentication</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">            event</span><span style="color:#000000;">.</span><span style="color:#795E26;">getResult</span><span style="color:#000000;">().</span><span style="color:#795E26;">putAll</span><span style="color:#000000;">(</span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getResponse</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#AF00DB;">            if</span><span style="color:#000000;"> (</span><span style="color:#001080;">StringUtils</span><span style="color:#000000;">.</span><span style="color:#795E26;">hasText</span><span style="color:#000000;">(</span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getToken</span><span style="color:#000000;">())) {</span></span>
<span class="line"><span style="color:#001080;">                event</span><span style="color:#000000;">.</span><span style="color:#795E26;">getResult</span><span style="color:#000000;">().</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;token&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getToken</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#267F99;">                long</span><span style="color:#001080;"> expires</span><span style="color:#000000;"> = </span><span style="color:#001080;">event</span><span style="color:#000000;">.</span><span style="color:#795E26;">getParameter</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;expires&quot;</span><span style="color:#000000;">)</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">map</span><span style="color:#000000;">(String</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">valueOf)</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">map</span><span style="color:#000000;">(Long</span><span style="color:#AF00DB;">::</span><span style="color:#000000;">parseLong)</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">orElse</span><span style="color:#000000;">(</span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getTimeout</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#001080;">                event</span><span style="color:#000000;">.</span><span style="color:#795E26;">getResult</span><span style="color:#000000;">().</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;expires&quot;</span><span style="color:#000000;">, expires);</span></span>
<span class="line"><span style="color:#001080;">                event</span><span style="color:#000000;">.</span><span style="color:#795E26;">async</span><span style="color:#000000;">(userTokenManager</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">signIn</span><span style="color:#000000;">(</span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getToken</span><span style="color:#000000;">(), </span><span style="color:#001080;">token</span><span style="color:#000000;">.</span><span style="color:#795E26;">getType</span><span style="color:#000000;">(), event</span></span>
<span class="line"><span style="color:#000000;">                                            .</span><span style="color:#795E26;">getAuthentication</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                                            .</span><span style="color:#795E26;">getUser</span><span style="color:#000000;">()</span></span>
<span class="line"><span style="color:#000000;">                                            .</span><span style="color:#795E26;">getId</span><span style="color:#000000;">(), expires)</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">doOnNext</span><span style="color:#000000;">(t </span><span style="color:#0000FF;">-&gt;</span><span style="color:#001080;"> log</span><span style="color:#000000;">.</span><span style="color:#795E26;">debug</span><span style="color:#000000;">(</span><span style="color:#A31515;">&quot;user [{}] sign in&quot;</span><span style="color:#000000;">, </span><span style="color:#001080;">t</span><span style="color:#000000;">.</span><span style="color:#795E26;">getUserId</span><span style="color:#000000;">()))</span></span>
<span class="line"><span style="color:#000000;">                                    .</span><span style="color:#795E26;">then</span><span style="color:#000000;">());</span></span>
<span class="line"><span style="color:#000000;">            }</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#000000;">    @</span><span style="color:#267F99;">Override</span></span>
<span class="line"><span style="color:#0000FF;">    public</span><span style="color:#267F99;"> Object</span><span style="color:#795E26;"> postProcessAfterInitialization</span><span style="color:#000000;">(</span><span style="color:#267F99;">Object</span><span style="color:#001080;"> bean</span><span style="color:#000000;">, </span><span style="color:#267F99;">String</span><span style="color:#001080;"> beanName</span><span style="color:#000000;">) </span><span style="color:#0000FF;">throws</span><span style="color:#267F99;"> BeansException</span><span style="color:#000000;"> {</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (bean </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> ReactiveUserTokenGenerator) {</span></span>
<span class="line"><span style="color:#267F99;">            ReactiveUserTokenGenerator</span><span style="color:#001080;"> generator</span><span style="color:#000000;"> = ((ReactiveUserTokenGenerator) bean);</span></span>
<span class="line"><span style="color:#001080;">            tokenGeneratorMap</span><span style="color:#000000;">.</span><span style="color:#795E26;">put</span><span style="color:#000000;">(</span><span style="color:#001080;">generator</span><span style="color:#000000;">.</span><span style="color:#795E26;">getTokenType</span><span style="color:#000000;">(), generator);</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        if</span><span style="color:#000000;"> (bean </span><span style="color:#0000FF;">instanceof</span><span style="color:#000000;"> ReactiveUserTokenParser) {</span></span>
<span class="line"><span style="color:#001080;">            parsers</span><span style="color:#000000;">.</span><span style="color:#795E26;">add</span><span style="color:#000000;">(((ReactiveUserTokenParser) bean));</span></span>
<span class="line"><span style="color:#000000;">        }</span></span>
<span class="line"><span style="color:#AF00DB;">        return</span><span style="color:#000000;"> bean;</span></span>
<span class="line"><span style="color:#000000;">    }</span></span>
<span class="line"><span style="color:#000000;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>本地缓存</p></blockquote><h2 id="network-component" tabindex="-1"><a class="header-anchor" href="#network-component"><span>network-component</span></a></h2><h3 id="network-core" tabindex="-1"><a class="header-anchor" href="#network-core"><span>network-core</span></a></h3><ul><li>NetworkManager</li><li>NetworkConfigManager</li><li>NetworkProvider <ul><li>DefaultHttpServerProvider</li><li>DefaultTCPServerProvider</li><li>DefaultVertxMqttServerProvider</li><li>MqttClientProvider</li></ul></li><li>NetWork <ul><li>VertxMqttClient</li><li>VertxMqttServer实现MqttServer</li></ul></li></ul><h4 id="defaultnetworkmanager" tabindex="-1"><a class="header-anchor" href="#defaultnetworkmanager"><span>DefaultNetworkManager</span></a></h4><p>实现NetworkManager，是bean处理器，包含 NetworkConfigManager， NetworkProvider</p><ul><li>postProcessAfterInitialization调用register</li><li>register 注册NetworkProvider</li></ul><h4 id="vertxmqttconnection实现mqttconnection" tabindex="-1"><a class="header-anchor" href="#vertxmqttconnection实现mqttconnection"><span>VertxMqttConnection实现MqttConnection</span></a></h4><p>使用MqttEndpoint和客户端进行通信</p><ul><li>init配置发布处理器，处理客户端传来的消息</li><li>MqttEndpoint</li><li>publish发布消息</li><li>reject拒绝连接</li></ul><h3 id="mqtt-component" tabindex="-1"><a class="header-anchor" href="#mqtt-component"><span>mqtt-component</span></a></h3><p>vertx vertx-mqtt</p><h4 id="mqttclientprovider" tabindex="-1"><a class="header-anchor" href="#mqttclientprovider"><span>MqttClientProvider</span></a></h4><h5 id="createnetwork" tabindex="-1"><a class="header-anchor" href="#createnetwork"><span>createNetwork</span></a></h5><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public Mono&lt;Network&gt; createNetwork(@Nonnull MqttClientProperties properties) {</span></span>
<span class="line"><span>        VertxMqttClient mqttClient = new VertxMqttClient(properties.getId());</span></span>
<span class="line"><span>        return initMqttClient(mqttClient, properties);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="initmqttclient" tabindex="-1"><a class="header-anchor" href="#initmqttclient"><span>initMqttClient</span></a></h5><p>mqtt是基于tcp协议的，若不主动断开，会一直保持连接</p><ul><li>MqttClient.create(vertx, options)，使用vertx-mqtt创建客户端</li><li>连接客户端</li><li>返回网络对象VertxMqttClient,实现MqttClient、Network接口</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public Mono&lt;Network&gt; initMqttClient(VertxMqttClient mqttClient, MqttClientProperties properties) {</span></span>
<span class="line"><span>        return convert(properties)</span></span>
<span class="line"><span>            .map(options -&gt; {</span></span>
<span class="line"><span>                mqttClient.setTopicPrefix(properties.getTopicPrefix());</span></span>
<span class="line"><span>                mqttClient.setLoading(true);</span></span>
<span class="line"><span>                MqttClient client = MqttClient.create(vertx, options);</span></span>
<span class="line"><span>                mqttClient.setClient(client);</span></span>
<span class="line"><span>                client.connect(properties.getRemotePort(), properties.getRemoteHost(), result -&gt; {</span></span>
<span class="line"><span>                    mqttClient.setLoading(false);</span></span>
<span class="line"><span>                    if (!result.succeeded()) {</span></span>
<span class="line"><span>                        log.warn(&quot;connect mqtt [{}@{}:{}] error&quot;,</span></span>
<span class="line"><span>                                 properties.getClientId(),</span></span>
<span class="line"><span>                                 properties.getRemoteHost(),</span></span>
<span class="line"><span>                                 properties.getRemotePort(),</span></span>
<span class="line"><span>                                 result.cause());</span></span>
<span class="line"><span>                    } else {</span></span>
<span class="line"><span>                        log.debug(&quot;connect mqtt [{}] success&quot;, properties.getId());</span></span>
<span class="line"><span>                    }</span></span>
<span class="line"><span>                });</span></span>
<span class="line"><span>                return mqttClient;</span></span>
<span class="line"><span>            });</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="protocol-component" tabindex="-1"><a class="header-anchor" href="#protocol-component"><span>protocol-component</span></a></h2><ul><li>从集群读取协议改变的消息，进行协议管理</li><li>项目启动，读取协议jar包生成协议，由协议管理器进行管理</li></ul><h3 id="protocolsupportmanager-接口" tabindex="-1"><a class="header-anchor" href="#protocolsupportmanager-接口"><span>ProtocolSupportManager 接口</span></a></h3><ul><li>ClusterProtocolSupportManager包含ClusterManager</li></ul><h3 id="clusterprotocolsupportmanager" tabindex="-1"><a class="header-anchor" href="#clusterprotocolsupportmanager"><span>ClusterProtocolSupportManager</span></a></h3><h3 id="protocolsupportloader" tabindex="-1"><a class="header-anchor" href="#protocolsupportloader"><span>ProtocolSupportLoader</span></a></h3><ul><li>SpringProtocolSupportLoader包含ProtocolSupportLoaderProvider</li><li>ProtocolSupportLoaderProvider 读取jar包文件，并注册到容器 <ul><li>JarProtocolSupportLoader</li><li>LocalProtocolSupportLoader</li><li>AutoDownloadJarProtocolSupportLoader</li></ul></li><li>ProtocolSupportProvider <ul><li>JetLinksProtocolSupportProvider</li></ul></li></ul><h3 id="protocolsupporthandler" tabindex="-1"><a class="header-anchor" href="#protocolsupporthandler"><span>ProtocolSupportHandler</span></a></h3><p>协议事件处理类，在对协议增删改查时，发布对应事件，事件监听器进行处理将配置添加到redis缓存中</p><ul><li>handleCreated</li><li>handleSaved</li><li>handleModify</li><li>handleProtocolDelete</li><li>reloadProtocol 重新加载协议</li></ul><h2 id="gateway-component" tabindex="-1"><a class="header-anchor" href="#gateway-component"><span>gateway-component</span></a></h2><ul><li>DeviceGatewayProvider</li><li>DeviceGatewayManager <ul><li>store ReactiveCacheContainer&lt;String, DeviceGateway&gt;</li><li>providers Map&lt;String, DeviceGatewayProvider&gt;</li><li>DeviceGatewayPropertiesManager 即DeviceGatewayConfigService 包含DeviceGatewayService</li></ul></li><li>DeviceGatewayService</li><li>DeviceGatewayController包含DeviceGatewayService</li><li>DeviceGateway <ul><li>MqttClientDeviceGateway</li><li>MqttServerDeviceGateway</li><li>HttpServerDeviceGateway</li><li>TcpServerDeviceGateway</li><li>MqttClientDeviceGateway</li></ul></li></ul><h3 id="mqttserverdevicegateway" tabindex="-1"><a class="header-anchor" href="#mqttserverdevicegateway"><span>MqttServerDeviceGateway</span></a></h3><ul><li>doStart方法，启动网关，并对连接进行订阅</li><li>decodeAndHandleMessage消息解码并处理消息，并生成设备会话到设备会话管理器</li></ul><h3 id="devicegatewayhelper" tabindex="-1"><a class="header-anchor" href="#devicegatewayhelper"><span>DeviceGatewayHelper</span></a></h3><p>处理设备消息，生成设备消息Session到设备会话管理器中，被用作平台对设备下发指令</p><h3 id="devicemessageconnector" tabindex="-1"><a class="header-anchor" href="#devicemessageconnector"><span>DeviceMessageConnector</span></a></h3><p>真正处理设备消息的地方，将设备消息发布到事件总线evenBus，事件总线根据订阅表发送消息给下游订阅者进行处理</p><h3 id="timeseriesmessagewriterconnector" tabindex="-1"><a class="header-anchor" href="#timeseriesmessagewriterconnector"><span>TimeSeriesMessageWriterConnector</span></a></h3><p>订阅所有设备消息，保存设备数据到时序数据库</p><h3 id="clustersendtodevicemessagehandler" tabindex="-1"><a class="header-anchor" href="#clustersendtodevicemessagehandler"><span>ClusterSendToDeviceMessageHandler</span></a></h3><p>处理设备消息，通过设备会话管理器找到设备对应的会话，进行消息发送</p><h2 id="cluster" tabindex="-1"><a class="header-anchor" href="#cluster"><span>cluster</span></a></h2><h3 id="clustermanager接口" tabindex="-1"><a class="header-anchor" href="#clustermanager接口"><span>ClusterManager接口</span></a></h3><ul><li>RedisClusterManager</li></ul><h3 id="redisclustermanager" tabindex="-1"><a class="header-anchor" href="#redisclustermanager"><span>RedisClusterManager</span></a></h3><h3 id="scalecuberpcmanager实现rpcmanager接口" tabindex="-1"><a class="header-anchor" href="#scalecuberpcmanager实现rpcmanager接口"><span>ScalecubeRpcManager实现RpcManager接口</span></a></h3><p>根据设备所注册的服务器节点，将设备指令发送到对应服务节点进行处理</p><h2 id="cache" tabindex="-1"><a class="header-anchor" href="#cache"><span>cache</span></a></h2><h2 id="redisclustercache实现clustercache" tabindex="-1"><a class="header-anchor" href="#redisclustercache实现clustercache"><span>RedisClusterCache实现ClusterCache</span></a></h2><h2 id="事件的触发" tabindex="-1"><a class="header-anchor" href="#事件的触发"><span>事件的触发</span></a></h2><p>通过EasyormConfigurationautoRegisterFeature方法将eventlistener（CompositeEventListener）添加到RDBDatabaseMetadata的Feature,在sql执行时触发相应事件</p><h3 id="compositeeventlistener" tabindex="-1"><a class="header-anchor" href="#compositeeventlistener"><span>CompositeEventListener</span></a></h3><p>对一下事件进行组合处理</p><ul><li>CreatorEventListener</li><li>EntityEventListener</li><li>ValidateEventListener</li></ul><h2 id="事件上报" tabindex="-1"><a class="header-anchor" href="#事件上报"><span>事件上报</span></a></h2><p>/{productId}/{deviceId}/event/{eventId} /1627005615119679488/1627005926735495168/event/ev1</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>    &quot;timestamp&quot;:1601196762389,</span></span>
<span class="line"><span>    &quot;messageId&quot;:&quot;43436457&quot;,</span></span>
<span class="line"><span>    &quot;data&quot;: &quot;{&quot;evp&quot;:12,&quot;evp2&quot;:3}&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,288);function u(v,y){const s=n("PDF");return l(),t("div",null,[p,c,i(s,{url:"/pdf/jetlinks.pdf"}),d])}const g=a(r,[["render",u],["__file","jetlinks.html.vue"]]),m=JSON.parse('{"path":"/note/%E7%89%A9%E8%81%94%E7%BD%91/jetlinks.html","title":"jetlinks","lang":"zh-CN","frontmatter":{"description":"jetlinks 功能脑图 容器启动命令 jetlinks前端 事件驱动，消息总线 在JetLinks中大量使用到事件驱动来实现功能解耦。主要由Spring Event和事件总线(EventBus)组成。 由于Spring Event不支持更细粒度的订阅。例如: 订阅某一个设备的消息。平台还提供了事件总线来实现粒度更细的事件支持。 Spring Eve...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E7%89%A9%E8%81%94%E7%BD%91/jetlinks.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"jetlinks"}],["meta",{"property":"og:description","content":"jetlinks 功能脑图 容器启动命令 jetlinks前端 事件驱动，消息总线 在JetLinks中大量使用到事件驱动来实现功能解耦。主要由Spring Event和事件总线(EventBus)组成。 由于Spring Event不支持更细粒度的订阅。例如: 订阅某一个设备的消息。平台还提供了事件总线来实现粒度更细的事件支持。 Spring Eve..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-21T17:17:50.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-02-21T17:17:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"jetlinks\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-02-21T17:17:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"功能脑图","slug":"功能脑图","link":"#功能脑图","children":[]},{"level":2,"title":"容器启动命令","slug":"容器启动命令","link":"#容器启动命令","children":[]},{"level":2,"title":"事件驱动，消息总线","slug":"事件驱动-消息总线","link":"#事件驱动-消息总线","children":[{"level":3,"title":"Spring Event","slug":"spring-event","link":"#spring-event","children":[]},{"level":3,"title":"BrokerEventBus EventBus","slug":"brokereventbus-eventbus","link":"#brokereventbus-eventbus","children":[]},{"level":3,"title":"SpringMessageBroker","slug":"springmessagebroker","link":"#springmessagebroker","children":[]}]},{"level":2,"title":"设备接入网关","slug":"设备接入网关","link":"#设备接入网关","children":[]},{"level":2,"title":"设备接入协议","slug":"设备接入协议","link":"#设备接入协议","children":[]},{"level":2,"title":"类库","slug":"类库","link":"#类库","children":[]},{"level":2,"title":"r2dbc-spi","slug":"r2dbc-spi","link":"#r2dbc-spi","children":[]},{"level":2,"title":"easy-orm","slug":"easy-orm","link":"#easy-orm","children":[{"level":3,"title":"EasyormConfiguration","slug":"easyormconfiguration","link":"#easyormconfiguration","children":[]},{"level":3,"title":"ReactiveSqlExecutor","slug":"reactivesqlexecutor","link":"#reactivesqlexecutor","children":[]},{"level":3,"title":"ReactiveRepositoryFactoryBean","slug":"reactiverepositoryfactorybean","link":"#reactiverepositoryfactorybean","children":[]},{"level":3,"title":"EasyormRepositoryRegistrar","slug":"easyormrepositoryregistrar","link":"#easyormrepositoryregistrar","children":[]},{"level":3,"title":"RDBDatabaseMetadata","slug":"rdbdatabasemetadata","link":"#rdbdatabasemetadata","children":[]},{"level":3,"title":"RDBSchemaMetadata","slug":"rdbschemametadata","link":"#rdbschemametadata","children":[]},{"level":3,"title":"RDBTableMetadata","slug":"rdbtablemetadata","link":"#rdbtablemetadata","children":[]},{"level":3,"title":"DefaultDatabaseOperator","slug":"defaultdatabaseoperator","link":"#defaultdatabaseoperator","children":[]}]},{"level":2,"title":"r2dbc-driver","slug":"r2dbc-driver","link":"#r2dbc-driver","children":[]},{"level":2,"title":"表","slug":"表","link":"#表","children":[{"level":3,"title":"产品与设备","slug":"产品与设备","link":"#产品与设备","children":[]},{"level":3,"title":"网关、网络、协议及证书","slug":"网关、网络、协议及证书","link":"#网关、网络、协议及证书","children":[]},{"level":3,"title":"通道配置","slug":"通道配置","link":"#通道配置","children":[]},{"level":3,"title":"流媒体服务","slug":"流媒体服务","link":"#流媒体服务","children":[]},{"level":3,"title":"告警与规则引擎","slug":"告警与规则引擎","link":"#告警与规则引擎","children":[]},{"level":3,"title":"通知与订阅","slug":"通知与订阅","link":"#通知与订阅","children":[]}]},{"level":2,"title":"国际化","slug":"国际化","link":"#国际化","children":[]},{"level":2,"title":"响应式事务","slug":"响应式事务","link":"#响应式事务","children":[]},{"level":2,"title":"业务逻辑","slug":"业务逻辑","link":"#业务逻辑","children":[{"level":3,"title":"设备","slug":"设备","link":"#设备","children":[]},{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]}]},{"level":2,"title":"功能","slug":"功能","link":"#功能","children":[{"level":3,"title":"设备管理","slug":"设备管理","link":"#设备管理","children":[]}]},{"level":2,"title":"thingsComponent","slug":"thingscomponent","link":"#thingscomponent","children":[]},{"level":2,"title":"authorization","slug":"authorization","link":"#authorization","children":[]},{"level":2,"title":"network-component","slug":"network-component","link":"#network-component","children":[{"level":3,"title":"network-core","slug":"network-core","link":"#network-core","children":[]},{"level":3,"title":"mqtt-component","slug":"mqtt-component","link":"#mqtt-component","children":[]}]},{"level":2,"title":"protocol-component","slug":"protocol-component","link":"#protocol-component","children":[{"level":3,"title":"ProtocolSupportManager 接口","slug":"protocolsupportmanager-接口","link":"#protocolsupportmanager-接口","children":[]},{"level":3,"title":"ClusterProtocolSupportManager","slug":"clusterprotocolsupportmanager","link":"#clusterprotocolsupportmanager","children":[]},{"level":3,"title":"ProtocolSupportLoader","slug":"protocolsupportloader","link":"#protocolsupportloader","children":[]},{"level":3,"title":"ProtocolSupportHandler","slug":"protocolsupporthandler","link":"#protocolsupporthandler","children":[]}]},{"level":2,"title":"gateway-component","slug":"gateway-component","link":"#gateway-component","children":[{"level":3,"title":"MqttServerDeviceGateway","slug":"mqttserverdevicegateway","link":"#mqttserverdevicegateway","children":[]},{"level":3,"title":"DeviceGatewayHelper","slug":"devicegatewayhelper","link":"#devicegatewayhelper","children":[]},{"level":3,"title":"DeviceMessageConnector","slug":"devicemessageconnector","link":"#devicemessageconnector","children":[]},{"level":3,"title":"TimeSeriesMessageWriterConnector","slug":"timeseriesmessagewriterconnector","link":"#timeseriesmessagewriterconnector","children":[]},{"level":3,"title":"ClusterSendToDeviceMessageHandler","slug":"clustersendtodevicemessagehandler","link":"#clustersendtodevicemessagehandler","children":[]}]},{"level":2,"title":"cluster","slug":"cluster","link":"#cluster","children":[{"level":3,"title":"ClusterManager接口","slug":"clustermanager接口","link":"#clustermanager接口","children":[]},{"level":3,"title":"RedisClusterManager","slug":"redisclustermanager","link":"#redisclustermanager","children":[]},{"level":3,"title":"ScalecubeRpcManager实现RpcManager接口","slug":"scalecuberpcmanager实现rpcmanager接口","link":"#scalecuberpcmanager实现rpcmanager接口","children":[]}]},{"level":2,"title":"cache","slug":"cache","link":"#cache","children":[]},{"level":2,"title":"RedisClusterCache实现ClusterCache","slug":"redisclustercache实现clustercache","link":"#redisclustercache实现clustercache","children":[]},{"level":2,"title":"事件的触发","slug":"事件的触发","link":"#事件的触发","children":[{"level":3,"title":"CompositeEventListener","slug":"compositeeventlistener","link":"#compositeeventlistener","children":[]}]},{"level":2,"title":"事件上报","slug":"事件上报","link":"#事件上报","children":[]}],"git":{"createdTime":1669804534000,"updatedTime":1676999870000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":17}]},"readingTime":{"minutes":13.88,"words":4164},"filePathRelative":"note/物联网/jetlinks.md","localizedDate":"2022年11月30日","excerpt":"\\n<h2>功能脑图</h2>\\n<h2>容器启动命令</h2>\\n<blockquote>\\n<p>jetlinks前端</p>\\n</blockquote>\\n<div class=\\"language-bash line-numbers-mode\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"shiki light-plus\\" style=\\"background-color:#FFFFFF;color:#000000\\" tabindex=\\"0\\"><code><span class=\\"line\\"><span style=\\"color:#795E26\\">docker</span><span style=\\"color:#A31515\\"> run</span><span style=\\"color:#0000FF\\"> --name=jetlinks-ui</span><span style=\\"color:#0000FF\\"> -d</span><span style=\\"color:#0000FF\\"> -p</span><span style=\\"color:#A31515\\"> 9000:80</span><span style=\\"color:#0000FF\\"> -e</span><span style=\\"color:#A31515\\"> \\"API_BASE_PATH=http://10.138.108.5:8848/\\"</span><span style=\\"color:#A31515\\"> registry.cn-shenzhen.aliyuncs.com/jetlinks/jetlinks-ui-pro:2.0.0</span></span>\\n<span class=\\"line\\"></span></code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{g as comp,m as data};
