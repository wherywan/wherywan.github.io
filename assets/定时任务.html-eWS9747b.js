import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as s,e as i}from"./app-hoN0JGLf.js";const a={},l=i(`<h1 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务"><span>定时任务</span></a></h1><h2 id="基于redisson实现定时任务" tabindex="-1"><a class="header-anchor" href="#基于redisson实现定时任务"><span>基于redisson实现定时任务</span></a></h2><ul><li>job仓库</li><li>调度器</li><li>job执行器</li><li>job注册</li></ul><h3 id="核心" tabindex="-1"><a class="header-anchor" href="#核心"><span>核心</span></a></h3><blockquote><p>redis中信息</p></blockquote><ul><li>workers</li><li>job</li><li>jobinfo</li><li>taskid</li></ul><blockquote><p>addCronJob</p></blockquote><ul><li>redissonClient.getExecutorService 获取执行器</li><li>executorService.scheduleAsync 定时调度</li><li>execute执行任务</li><li>缓存job的任务id</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public String addCronJob(String jobId, String cron) {</span></span>
<span class="line"><span>    String taskId = redissonClient.getExecutorService(Container.WORKER)</span></span>
<span class="line"><span>            .scheduleAsync(new JobDispatchWrapper(jobId), CronSchedule.of(cron)).getTaskId();</span></span>
<span class="line"><span>    redissonClient.&lt;String, String&gt;getListMultimap(Container.TASK_ID).put(jobId, taskId);</span></span>
<span class="line"><span>    return taskId;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>removeJob</p></blockquote><ul><li>service.cancelTask 取消任务</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span> public void pauseJob(String jobId) {</span></span>
<span class="line"><span>        RListMultimap&lt;String, String&gt; listMap = redissonClient.getListMultimap(Container.TASK_ID);</span></span>
<span class="line"><span>        RScheduledExecutorService service = redissonClient.getExecutorService(Container.WORKER);</span></span>
<span class="line"><span>        Iterator&lt;String&gt; it = listMap.get(jobId).iterator();</span></span>
<span class="line"><span>        while (it.hasNext()) {</span></span>
<span class="line"><span>            String id = it.next();</span></span>
<span class="line"><span>            service.cancelTask(id);</span></span>
<span class="line"><span>            it.remove();</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>triggerJob</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span> public void triggerJob(String jobId) {</span></span>
<span class="line"><span>        redissonClient.getExecutorService(Container.WORKER).submit(new JobDispatchWrapper(jobId));</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>dispatcher</p></blockquote><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="shiki light-plus" style="background-color:#FFFFFF;color:#000000;" tabindex="0"><code><span class="line"><span>public void dispatch(JobExecuteParam param) {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        JobInfo jobInfo = jobRepository.findJobInfoById(param.getJobId());</span></span>
<span class="line"><span>        if (jobInfo == null) {</span></span>
<span class="line"><span>            throw new RuntimeException(String.format(&quot;未查询到任务 %s&quot;, param));</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>//        this.checkDispatch(param);</span></span>
<span class="line"><span>        redissonClient.getExecutorService(param.getTopicKey())</span></span>
<span class="line"><span>                .execute(new JobBeanExecuteWrapper(param));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),t=[l];function o(r,p){return e(),s("div",null,t)}const u=n(a,[["render",o],["__file","定时任务.html.vue"]]),b=JSON.parse('{"path":"/note/%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html","title":"定时任务","lang":"zh-CN","frontmatter":{"description":"定时任务 基于redisson实现定时任务 job仓库 调度器 job执行器 job注册 核心 redis中信息 workers job jobinfo taskid addCronJob redissonClient.getExecutorService 获取执行器 executorService.scheduleAsync 定时调度 execute...","head":[["meta",{"property":"og:url","content":"https://wherywan.github.io/note/%E5%BA%94%E7%94%A8%E6%96%B9%E6%A1%88/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"}],["meta",{"property":"og:site_name","content":"HONG_JI"}],["meta",{"property":"og:title","content":"定时任务"}],["meta",{"property":"og:description","content":"定时任务 基于redisson实现定时任务 job仓库 调度器 job执行器 job注册 核心 redis中信息 workers job jobinfo taskid addCronJob redissonClient.getExecutorService 获取执行器 executorService.scheduleAsync 定时调度 execute..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-08-25T09:33:41.000Z"}],["meta",{"property":"article:author","content":"wanhongji"}],["meta",{"property":"article:modified_time","content":"2023-08-25T09:33:41.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"定时任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-08-25T09:33:41.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"wanhongji\\"}]}"]]},"headers":[{"level":2,"title":"基于redisson实现定时任务","slug":"基于redisson实现定时任务","link":"#基于redisson实现定时任务","children":[{"level":3,"title":"核心","slug":"核心","link":"#核心","children":[]}]}],"git":{"createdTime":1692705360000,"updatedTime":1692956021000,"contributors":[{"name":"wanhongji","email":"wherywan@163.com","commits":2}]},"readingTime":{"minutes":0.58,"words":173},"filePathRelative":"note/应用方案/定时任务.md","localizedDate":"2023年8月22日","excerpt":"\\n<h2>基于redisson实现定时任务</h2>\\n<ul>\\n<li>job仓库</li>\\n<li>调度器</li>\\n<li>job执行器</li>\\n<li>job注册</li>\\n</ul>\\n<h3>核心</h3>\\n<blockquote>\\n<p>redis中信息</p>\\n</blockquote>\\n<ul>\\n<li>workers</li>\\n<li>job</li>\\n<li>jobinfo</li>\\n<li>taskid</li>\\n</ul>\\n<blockquote>\\n<p>addCronJob</p>\\n</blockquote>\\n<ul>\\n<li>redissonClient.getExecutorService 获取执行器</li>\\n<li>executorService.scheduleAsync 定时调度</li>\\n<li>execute执行任务</li>\\n<li>缓存job的任务id</li>\\n</ul>","autoDesc":true}');export{u as comp,b as data};
